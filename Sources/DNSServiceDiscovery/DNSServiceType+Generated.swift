/// Auto-generated from https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.csv
/// on 2023-08-15. Please do not edit this file, edit `Scripts/generate-service-types` instead!
extension DNSServiceType {
    /// TCP Port Service Multiplexer [Mark_Lottor]
    public static let `tcpmuxTcp`: Self = "_tcpmux._tcp"
    /// TCP Port Service Multiplexer [Mark_Lottor]
    public static let `tcpmuxUdp`: Self = "_tcpmux._udp"
    /// Management Utility 
    public static let `compressnetTcp`: Self = "_compressnet._tcp"
    /// Management Utility 
    public static let `compressnetUdp`: Self = "_compressnet._udp"
    /// Remote Job Entry [Jon_Postel]
    public static let `rjeTcp`: Self = "_rje._tcp"
    /// Remote Job Entry [Jon_Postel]
    public static let `rjeUdp`: Self = "_rje._udp"
    /// Echo [Jon_Postel]
    public static let `echoTcp`: Self = "_echo._tcp"
    /// Echo [Jon_Postel]
    public static let `echoUdp`: Self = "_echo._udp"
    /// Discard [Jon_Postel]
    public static let `discardTcp`: Self = "_discard._tcp"
    /// Discard [Jon_Postel]
    public static let `discardUdp`: Self = "_discard._udp"
    /// Discard [Randall_Stewart]
    public static let `discardSctp`: Self = "_discard._sctp"
    /// Discard [Eddie_Kohler]
    public static let `discardDccp`: Self = "_discard._dccp"
    /// Active Users [Jon_Postel]
    public static let `systatTcp`: Self = "_systat._tcp"
    /// Active Users [Jon_Postel]
    public static let `systatUdp`: Self = "_systat._udp"
    /// Daytime [Jon_Postel]
    public static let `daytimeTcp`: Self = "_daytime._tcp"
    /// Daytime [Jon_Postel]
    public static let `daytimeUdp`: Self = "_daytime._udp"
    /// Quote of the Day [Jon_Postel]
    public static let `qotdTcp`: Self = "_qotd._tcp"
    /// Quote of the Day [Jon_Postel]
    public static let `qotdUdp`: Self = "_qotd._udp"
    /// Message Send Protocol (historic) [Rina_Nethaniel]
    public static let `mspTcp`: Self = "_msp._tcp"
    /// Message Send Protocol (historic) [Rina_Nethaniel]
    public static let `mspUdp`: Self = "_msp._udp"
    /// Character Generator 
    public static let `chargenTcp`: Self = "_chargen._tcp"
    /// Character Generator 
    public static let `chargenUdp`: Self = "_chargen._udp"
    /// File Transfer [Default Data] [Jon_Postel]
    public static let `ftpDataTcp`: Self = "_ftp-data._tcp"
    /// File Transfer [Default Data] [Jon_Postel]
    public static let `ftpDataUdp`: Self = "_ftp-data._udp"
    /// FTP [Randall_Stewart]
    public static let `ftpDataSctp`: Self = "_ftp-data._sctp"
    /// File Transfer Protocol [Control] [Jon_Postel]
    public static let `ftpTcp`: Self = "_ftp._tcp"
    /// File Transfer Protocol [Control] [Jon_Postel]
    public static let `ftpUdp`: Self = "_ftp._udp"
    /// FTP [Randall_Stewart]
    public static let `ftpSctp`: Self = "_ftp._sctp"
    /// The Secure Shell (SSH) Protocol 
    public static let `sshTcp`: Self = "_ssh._tcp"
    /// The Secure Shell (SSH) Protocol 
    public static let `sshUdp`: Self = "_ssh._udp"
    /// SSH [Randall_Stewart]
    public static let `sshSctp`: Self = "_ssh._sctp"
    /// Telnet [Jon_Postel]
    public static let `telnetTcp`: Self = "_telnet._tcp"
    /// Telnet [Jon_Postel]
    public static let `telnetUdp`: Self = "_telnet._udp"
    /// Simple Mail Transfer [IESG]
    public static let `smtpTcp`: Self = "_smtp._tcp"
    /// Simple Mail Transfer [IESG]
    public static let `smtpUdp`: Self = "_smtp._udp"
    /// NSW User System FE [Robert_Thomas]
    public static let `nswFeTcp`: Self = "_nsw-fe._tcp"
    /// NSW User System FE [Robert_Thomas]
    public static let `nswFeUdp`: Self = "_nsw-fe._udp"
    /// MSG ICP [Robert_Thomas]
    public static let `msgIcpTcp`: Self = "_msg-icp._tcp"
    /// MSG ICP [Robert_Thomas]
    public static let `msgIcpUdp`: Self = "_msg-icp._udp"
    /// MSG Authentication [Robert_Thomas]
    public static let `msgAuthTcp`: Self = "_msg-auth._tcp"
    /// MSG Authentication [Robert_Thomas]
    public static let `msgAuthUdp`: Self = "_msg-auth._udp"
    /// Display Support Protocol [Ed_Cain]
    public static let `dspTcp`: Self = "_dsp._tcp"
    /// Display Support Protocol [Ed_Cain]
    public static let `dspUdp`: Self = "_dsp._udp"
    /// Time [Jon_Postel]
    public static let `timeTcp`: Self = "_time._tcp"
    /// Time [Jon_Postel]
    public static let `timeUdp`: Self = "_time._udp"
    /// Route Access Protocol [Robert_Ullmann]
    public static let `rapTcp`: Self = "_rap._tcp"
    /// Route Access Protocol [Robert_Ullmann]
    public static let `rapUdp`: Self = "_rap._udp"
    /// Resource Location Protocol [Mike_Accetta]
    public static let `rlpTcp`: Self = "_rlp._tcp"
    /// Resource Location Protocol [Mike_Accetta]
    public static let `rlpUdp`: Self = "_rlp._udp"
    /// Graphics 
    public static let `graphicsTcp`: Self = "_graphics._tcp"
    /// Graphics 
    public static let `graphicsUdp`: Self = "_graphics._udp"
    /// Host Name Server 
    public static let `nameTcp`: Self = "_name._tcp"
    /// Host Name Server 
    public static let `nameUdp`: Self = "_name._udp"
    /// Host Name Server 
    public static let `nameserverTcp`: Self = "_nameserver._tcp"
    /// Host Name Server 
    public static let `nameserverUdp`: Self = "_nameserver._udp"
    /// Who Is 
    public static let `nicnameTcp`: Self = "_nicname._tcp"
    /// Who Is 
    public static let `nicnameUdp`: Self = "_nicname._udp"
    /// MPM FLAGS Protocol 
    public static let `mpmFlagsTcp`: Self = "_mpm-flags._tcp"
    /// MPM FLAGS Protocol 
    public static let `mpmFlagsUdp`: Self = "_mpm-flags._udp"
    /// Message Processing Module [recv] 
    public static let `mpmTcp`: Self = "_mpm._tcp"
    /// Message Processing Module [recv] 
    public static let `mpmUdp`: Self = "_mpm._udp"
    /// MPM [default send] [Jon_Postel]
    public static let `mpmSndTcp`: Self = "_mpm-snd._tcp"
    /// MPM [default send] [Jon_Postel]
    public static let `mpmSndUdp`: Self = "_mpm-snd._udp"
    /// Digital Audit Daemon [Larry_Scott]
    public static let `auditdTcp`: Self = "_auditd._tcp"
    /// Digital Audit Daemon [Larry_Scott]
    public static let `auditdUdp`: Self = "_auditd._udp"
    /// Login Host Protocol (TACACS) [Pieter_Ditmars]
    public static let `tacacsTcp`: Self = "_tacacs._tcp"
    /// Login Host Protocol (TACACS) [Pieter_Ditmars]
    public static let `tacacsUdp`: Self = "_tacacs._udp"
    /// Remote Mail Checking Protocol [Steve_Dorner]
    public static let `reMailCkTcp`: Self = "_re-mail-ck._tcp"
    /// Remote Mail Checking Protocol [Steve_Dorner]
    public static let `reMailCkUdp`: Self = "_re-mail-ck._udp"
    /// XNS Time Protocol [Susie_Armstrong]
    public static let `xnsTimeTcp`: Self = "_xns-time._tcp"
    /// XNS Time Protocol [Susie_Armstrong]
    public static let `xnsTimeUdp`: Self = "_xns-time._udp"
    /// Domain Name Server [Paul_Mockapetris]
    public static let `domainTcp`: Self = "_domain._tcp"
    /// Domain Name Server [Paul_Mockapetris]
    public static let `domainUdp`: Self = "_domain._udp"
    /// XNS Clearinghouse [Susie_Armstrong]
    public static let `xnsChTcp`: Self = "_xns-ch._tcp"
    /// XNS Clearinghouse [Susie_Armstrong]
    public static let `xnsChUdp`: Self = "_xns-ch._udp"
    /// ISI Graphics Language 
    public static let `isiGlTcp`: Self = "_isi-gl._tcp"
    /// ISI Graphics Language 
    public static let `isiGlUdp`: Self = "_isi-gl._udp"
    /// XNS Authentication [Susie_Armstrong]
    public static let `xnsAuthTcp`: Self = "_xns-auth._tcp"
    /// XNS Authentication [Susie_Armstrong]
    public static let `xnsAuthUdp`: Self = "_xns-auth._udp"
    /// XNS Mail [Susie_Armstrong]
    public static let `xnsMailTcp`: Self = "_xns-mail._tcp"
    /// XNS Mail [Susie_Armstrong]
    public static let `xnsMailUdp`: Self = "_xns-mail._udp"
    /// ACA Services [E_Wald]
    public static let `acasTcp`: Self = "_acas._tcp"
    /// ACA Services [E_Wald]
    public static let `acasUdp`: Self = "_acas._udp"
    /// whois++ IANA assigned this well-formed service name as a replacement for "whois++". [Rickard_Schoultz]
    public static let `whoisppTcp`: Self = "_whoispp._tcp"
    /// whois++ IANA assigned this well-formed service name as a replacement for "whois++". [Rickard_Schoultz]
    public static let `whoisppUdp`: Self = "_whoispp._udp"
    /// Communications Integrator (CI) [Dan_Smith]
    public static let `coviaTcp`: Self = "_covia._tcp"
    /// Communications Integrator (CI) [Dan_Smith]
    public static let `coviaUdp`: Self = "_covia._udp"
    /// TACACS-Database Service [Kathy_Huber]
    public static let `tacacsDsTcp`: Self = "_tacacs-ds._tcp"
    /// TACACS-Database Service [Kathy_Huber]
    public static let `tacacsDsUdp`: Self = "_tacacs-ds._udp"
    /// Oracle SQL*NET IANA assigned this well-formed service name as a replacement for "sql*net". [Jack_Haverty]
    public static let `sqlNetTcp`: Self = "_sql-net._tcp"
    /// Oracle SQL*NET IANA assigned this well-formed service name as a replacement for "sql*net". [Jack_Haverty]
    public static let `sqlNetUdp`: Self = "_sql-net._udp"
    /// Bootstrap Protocol Server [Bill_Croft]
    public static let `bootpsTcp`: Self = "_bootps._tcp"
    /// Bootstrap Protocol Server 
    public static let `bootpsUdp`: Self = "_bootps._udp"
    /// Bootstrap Protocol Client [Bill_Croft]
    public static let `bootpcTcp`: Self = "_bootpc._tcp"
    /// Bootstrap Protocol Client [Bill_Croft]
    public static let `bootpcUdp`: Self = "_bootpc._udp"
    /// Trivial File Transfer [David_Clark]
    public static let `tftpTcp`: Self = "_tftp._tcp"
    /// Trivial File Transfer [David_Clark]
    public static let `tftpUdp`: Self = "_tftp._udp"
    /// Gopher [Mark_McCahill]
    public static let `gopherTcp`: Self = "_gopher._tcp"
    /// Gopher [Mark_McCahill]
    public static let `gopherUdp`: Self = "_gopher._udp"
    /// Remote Job Service 
    public static let `netrjs1Tcp`: Self = "_netrjs-1._tcp"
    /// Remote Job Service 
    public static let `netrjs1Udp`: Self = "_netrjs-1._udp"
    /// Remote Job Service 
    public static let `netrjs2Tcp`: Self = "_netrjs-2._tcp"
    /// Remote Job Service 
    public static let `netrjs2Udp`: Self = "_netrjs-2._udp"
    /// Remote Job Service 
    public static let `netrjs3Tcp`: Self = "_netrjs-3._tcp"
    /// Remote Job Service 
    public static let `netrjs3Udp`: Self = "_netrjs-3._udp"
    /// Remote Job Service [Bob_Braden]
    public static let `netrjs4Tcp`: Self = "_netrjs-4._tcp"
    /// Remote Job Service [Bob_Braden]
    public static let `netrjs4Udp`: Self = "_netrjs-4._udp"
    /// Distributed External Object Store [Robert_Ullmann]
    public static let `deosTcp`: Self = "_deos._tcp"
    /// Distributed External Object Store [Robert_Ullmann]
    public static let `deosUdp`: Self = "_deos._udp"
    /// vettcp [Christopher_Leong]
    public static let `vettcpTcp`: Self = "_vettcp._tcp"
    /// vettcp [Christopher_Leong]
    public static let `vettcpUdp`: Self = "_vettcp._udp"
    /// Finger [David_Zimmerman]
    public static let `fingerTcp`: Self = "_finger._tcp"
    /// Finger [David_Zimmerman]
    public static let `fingerUdp`: Self = "_finger._udp"
    /// World Wide Web HTTP [IESG]
    public static let `httpTcp`: Self = "_http._tcp"
    /// World Wide Web HTTP [IESG]
    public static let `httpUdp`: Self = "_http._udp"
    /// World Wide Web HTTP [IESG]
    public static let `wwwTcp`: Self = "_www._tcp"
    /// World Wide Web HTTP [IESG]
    public static let `wwwUdp`: Self = "_www._udp"
    /// World Wide Web HTTP [Tim_Berners_Lee]
    public static let `wwwHttpTcp`: Self = "_www-http._tcp"
    /// World Wide Web HTTP [Tim_Berners_Lee]
    public static let `wwwHttpUdp`: Self = "_www-http._udp"
    /// HTTP [Randall_Stewart]
    public static let `httpSctp`: Self = "_http._sctp"
    /// XFER Utility [Thomas_M_Smith]
    public static let `xferTcp`: Self = "_xfer._tcp"
    /// XFER Utility [Thomas_M_Smith]
    public static let `xferUdp`: Self = "_xfer._udp"
    /// MIT ML Device [David_Reed]
    public static let `mitMlDevTcp`: Self = "_mit-ml-dev._tcp"
    /// MIT ML Device [David_Reed]
    public static let `mitMlDevUdp`: Self = "_mit-ml-dev._udp"
    /// Common Trace Facility [Hugh_Thomas]
    public static let `ctfTcp`: Self = "_ctf._tcp"
    /// Common Trace Facility [Hugh_Thomas]
    public static let `ctfUdp`: Self = "_ctf._udp"
    /// Micro Focus Cobol [Simon_Edwards]
    public static let `mfcobolTcp`: Self = "_mfcobol._tcp"
    /// Micro Focus Cobol [Simon_Edwards]
    public static let `mfcobolUdp`: Self = "_mfcobol._udp"
    /// Kerberos [B_Clifford_Neuman]
    public static let `kerberosTcp`: Self = "_kerberos._tcp"
    /// Kerberos [B_Clifford_Neuman]
    public static let `kerberosUdp`: Self = "_kerberos._udp"
    /// SU/MIT Telnet Gateway [Mark_Crispin]
    public static let `suMitTgTcp`: Self = "_su-mit-tg._tcp"
    /// SU/MIT Telnet Gateway [Mark_Crispin]
    public static let `suMitTgUdp`: Self = "_su-mit-tg._udp"
    /// DNSIX Securit Attribute Token Map [Charles_Watt]
    public static let `dnsixTcp`: Self = "_dnsix._tcp"
    /// DNSIX Securit Attribute Token Map [Charles_Watt]
    public static let `dnsixUdp`: Self = "_dnsix._udp"
    /// MIT Dover Spooler [Eliot_Moss]
    public static let `mitDovTcp`: Self = "_mit-dov._tcp"
    /// MIT Dover Spooler [Eliot_Moss]
    public static let `mitDovUdp`: Self = "_mit-dov._udp"
    /// Network Printing Protocol [Louis_Mamakos]
    public static let `nppTcp`: Self = "_npp._tcp"
    /// Network Printing Protocol [Louis_Mamakos]
    public static let `nppUdp`: Self = "_npp._udp"
    /// Device Control Protocol [Daniel_Tappan]
    public static let `dcpTcp`: Self = "_dcp._tcp"
    /// Device Control Protocol [Daniel_Tappan]
    public static let `dcpUdp`: Self = "_dcp._udp"
    /// Tivoli Object Dispatcher [Tom_Bereiter]
    public static let `objcallTcp`: Self = "_objcall._tcp"
    /// Tivoli Object Dispatcher [Tom_Bereiter]
    public static let `objcallUdp`: Self = "_objcall._udp"
    /// SUPDUP [Mark_Crispin]
    public static let `supdupTcp`: Self = "_supdup._tcp"
    /// SUPDUP [Mark_Crispin]
    public static let `supdupUdp`: Self = "_supdup._udp"
    /// DIXIE Protocol Specification [Tim_Howes]
    public static let `dixieTcp`: Self = "_dixie._tcp"
    /// DIXIE Protocol Specification [Tim_Howes]
    public static let `dixieUdp`: Self = "_dixie._udp"
    /// Swift Remote Virtural File Protocol [Maurice_R_Turcotte]
    public static let `swiftRvfTcp`: Self = "_swift-rvf._tcp"
    /// Swift Remote Virtural File Protocol [Maurice_R_Turcotte]
    public static let `swiftRvfUdp`: Self = "_swift-rvf._udp"
    /// TAC News [Jon_Postel]
    public static let `tacnewsTcp`: Self = "_tacnews._tcp"
    /// TAC News [Jon_Postel]
    public static let `tacnewsUdp`: Self = "_tacnews._udp"
    /// Metagram Relay [Geoff_Goodfellow]
    public static let `metagramTcp`: Self = "_metagram._tcp"
    /// Metagram Relay [Geoff_Goodfellow]
    public static let `metagramUdp`: Self = "_metagram._udp"
    /// NIC Host Name Server [Jon_Postel]
    public static let `hostnameTcp`: Self = "_hostname._tcp"
    /// NIC Host Name Server [Jon_Postel]
    public static let `hostnameUdp`: Self = "_hostname._udp"
    /// ISO-TSAP Class 0 [Marshall_Rose]
    public static let `isoTsapTcp`: Self = "_iso-tsap._tcp"
    /// ISO-TSAP Class 0 [Marshall_Rose]
    public static let `isoTsapUdp`: Self = "_iso-tsap._udp"
    /// Genesis Point-to-Point Trans Net 
    public static let `gppitnpTcp`: Self = "_gppitnp._tcp"
    /// Genesis Point-to-Point Trans Net 
    public static let `gppitnpUdp`: Self = "_gppitnp._udp"
    /// ACR-NEMA Digital Imag. & Comm. 300 [Patrick_McNamee]
    public static let `acrNemaTcp`: Self = "_acr-nema._tcp"
    /// ACR-NEMA Digital Imag. & Comm. 300 [Patrick_McNamee]
    public static let `acrNemaUdp`: Self = "_acr-nema._udp"
    /// CCSO name server protocol [Martin_Hamilton]
    public static let `csoTcp`: Self = "_cso._tcp"
    /// CCSO name server protocol [Martin_Hamilton]
    public static let `csoUdp`: Self = "_cso._udp"
    /// Mailbox Name Nameserver [Marvin_Solomon]
    public static let `csnetNsTcp`: Self = "_csnet-ns._tcp"
    /// Mailbox Name Nameserver [Marvin_Solomon]
    public static let `csnetNsUdp`: Self = "_csnet-ns._udp"
    /// Remote Telnet Service [Jon_Postel]
    public static let `rtelnetTcp`: Self = "_rtelnet._tcp"
    /// Remote Telnet Service [Jon_Postel]
    public static let `rtelnetUdp`: Self = "_rtelnet._udp"
    /// SNA Gateway Access Server [Kevin_Murphy]
    public static let `snagasTcp`: Self = "_snagas._tcp"
    /// SNA Gateway Access Server [Kevin_Murphy]
    public static let `snagasUdp`: Self = "_snagas._udp"
    /// Post Office Protocol - Version 2 [Joyce_K_Reynolds]
    public static let `pop2Tcp`: Self = "_pop2._tcp"
    /// Post Office Protocol - Version 2 [Joyce_K_Reynolds]
    public static let `pop2Udp`: Self = "_pop2._udp"
    /// Post Office Protocol - Version 3 [Marshall_Rose]
    public static let `pop3Tcp`: Self = "_pop3._tcp"
    /// Post Office Protocol - Version 3 [Marshall_Rose]
    public static let `pop3Udp`: Self = "_pop3._udp"
    /// SUN Remote Procedure Call [Chuck_McManis]
    public static let `sunrpcTcp`: Self = "_sunrpc._tcp"
    /// SUN Remote Procedure Call [Chuck_McManis]
    public static let `sunrpcUdp`: Self = "_sunrpc._udp"
    /// McIDAS Data Transmission Protocol [Glenn_Davis]
    public static let `mcidasTcp`: Self = "_mcidas._tcp"
    /// McIDAS Data Transmission Protocol [Glenn_Davis]
    public static let `mcidasUdp`: Self = "_mcidas._udp"
    ///  
    public static let `identTcp`: Self = "_ident._tcp"
    /// Authentication Service [Mike_St_Johns]
    public static let `authTcp`: Self = "_auth._tcp"
    /// Authentication Service [Mike_St_Johns]
    public static let `authUdp`: Self = "_auth._udp"
    /// Simple File Transfer Protocol [Mark_Lottor]
    public static let `sftpTcp`: Self = "_sftp._tcp"
    /// Simple File Transfer Protocol [Mark_Lottor]
    public static let `sftpUdp`: Self = "_sftp._udp"
    /// ANSA REX Notify [Nicola_J_Howarth]
    public static let `ansanotifyTcp`: Self = "_ansanotify._tcp"
    /// ANSA REX Notify [Nicola_J_Howarth]
    public static let `ansanotifyUdp`: Self = "_ansanotify._udp"
    /// UUCP Path Service 
    public static let `uucpPathTcp`: Self = "_uucp-path._tcp"
    /// UUCP Path Service 
    public static let `uucpPathUdp`: Self = "_uucp-path._udp"
    /// SQL Services [Larry_Barnes]
    public static let `sqlservTcp`: Self = "_sqlserv._tcp"
    /// SQL Services [Larry_Barnes]
    public static let `sqlservUdp`: Self = "_sqlserv._udp"
    /// Network News Transfer Protocol [IESG]
    public static let `nntpTcp`: Self = "_nntp._tcp"
    /// Network News Transfer Protocol [IESG]
    public static let `nntpUdp`: Self = "_nntp._udp"
    /// CFDPTKT [John_Ioannidis]
    public static let `cfdptktTcp`: Self = "_cfdptkt._tcp"
    /// CFDPTKT [John_Ioannidis]
    public static let `cfdptktUdp`: Self = "_cfdptkt._udp"
    /// Encore Expedited Remote Pro.Call [Jack_ONeil]
    public static let `erpcTcp`: Self = "_erpc._tcp"
    /// Encore Expedited Remote Pro.Call [Jack_ONeil]
    public static let `erpcUdp`: Self = "_erpc._udp"
    /// SMAKYNET [Pierre_Arnaud]
    public static let `smakynetTcp`: Self = "_smakynet._tcp"
    /// SMAKYNET [Pierre_Arnaud]
    public static let `smakynetUdp`: Self = "_smakynet._udp"
    /// Network Time Protocol [Dave_Mills]
    public static let `ntpTcp`: Self = "_ntp._tcp"
    /// Network Time Protocol [Dave_Mills]
    public static let `ntpUdp`: Self = "_ntp._udp"
    /// ANSA REX Trader [Nicola_J_Howarth]
    public static let `ansatraderTcp`: Self = "_ansatrader._tcp"
    /// ANSA REX Trader [Nicola_J_Howarth]
    public static let `ansatraderUdp`: Self = "_ansatrader._udp"
    /// Locus PC-Interface Net Map Ser [Eric_Peterson]
    public static let `locusMapTcp`: Self = "_locus-map._tcp"
    /// Locus PC-Interface Net Map Ser [Eric_Peterson]
    public static let `locusMapUdp`: Self = "_locus-map._udp"
    /// NXEdit [Don_Payette]
    public static let `nxeditTcp`: Self = "_nxedit._tcp"
    /// NXEdit [Don_Payette]
    public static let `nxeditUdp`: Self = "_nxedit._udp"
    /// Locus PC-Interface Conn Server [Eric_Peterson]
    public static let `locusConTcp`: Self = "_locus-con._tcp"
    /// Locus PC-Interface Conn Server [Eric_Peterson]
    public static let `locusConUdp`: Self = "_locus-con._udp"
    /// GSS X License Verification [John_Light]
    public static let `gssXlicenTcp`: Self = "_gss-xlicen._tcp"
    /// GSS X License Verification [John_Light]
    public static let `gssXlicenUdp`: Self = "_gss-xlicen._udp"
    /// Password Generator Protocol [Frank_J_Wacho]
    public static let `pwdgenTcp`: Self = "_pwdgen._tcp"
    /// Password Generator Protocol [Frank_J_Wacho]
    public static let `pwdgenUdp`: Self = "_pwdgen._udp"
    /// cisco FNATIVE 
    public static let `ciscoFnaTcp`: Self = "_cisco-fna._tcp"
    /// cisco FNATIVE 
    public static let `ciscoFnaUdp`: Self = "_cisco-fna._udp"
    /// cisco TNATIVE 
    public static let `ciscoTnaTcp`: Self = "_cisco-tna._tcp"
    /// cisco TNATIVE 
    public static let `ciscoTnaUdp`: Self = "_cisco-tna._udp"
    /// cisco SYSMAINT 
    public static let `ciscoSysTcp`: Self = "_cisco-sys._tcp"
    /// cisco SYSMAINT 
    public static let `ciscoSysUdp`: Self = "_cisco-sys._udp"
    /// Statistics Service [Dave_Mills_2]
    public static let `statsrvTcp`: Self = "_statsrv._tcp"
    /// Statistics Service [Dave_Mills_2]
    public static let `statsrvUdp`: Self = "_statsrv._udp"
    /// INGRES-NET Service [Mike_Berrow]
    public static let `ingresNetTcp`: Self = "_ingres-net._tcp"
    /// INGRES-NET Service [Mike_Berrow]
    public static let `ingresNetUdp`: Self = "_ingres-net._udp"
    /// DCE endpoint resolution [Joe_Pato]
    public static let `epmapTcp`: Self = "_epmap._tcp"
    /// DCE endpoint resolution [Joe_Pato]
    public static let `epmapUdp`: Self = "_epmap._udp"
    /// PROFILE Naming System [Larry_Peterson]
    public static let `profileTcp`: Self = "_profile._tcp"
    /// PROFILE Naming System [Larry_Peterson]
    public static let `profileUdp`: Self = "_profile._udp"
    /// NETBIOS Name Service 
    public static let `netbiosNsTcp`: Self = "_netbios-ns._tcp"
    /// NETBIOS Name Service 
    public static let `netbiosNsUdp`: Self = "_netbios-ns._udp"
    /// NETBIOS Datagram Service 
    public static let `netbiosDgmTcp`: Self = "_netbios-dgm._tcp"
    /// NETBIOS Datagram Service 
    public static let `netbiosDgmUdp`: Self = "_netbios-dgm._udp"
    /// NETBIOS Session Service [Jon_Postel]
    public static let `netbiosSsnTcp`: Self = "_netbios-ssn._tcp"
    /// NETBIOS Session Service [Jon_Postel]
    public static let `netbiosSsnUdp`: Self = "_netbios-ssn._udp"
    /// EMFIS Data Service 
    public static let `emfisDataTcp`: Self = "_emfis-data._tcp"
    /// EMFIS Data Service 
    public static let `emfisDataUdp`: Self = "_emfis-data._udp"
    /// EMFIS Control Service [Gerd_Beling]
    public static let `emfisCntlTcp`: Self = "_emfis-cntl._tcp"
    /// EMFIS Control Service [Gerd_Beling]
    public static let `emfisCntlUdp`: Self = "_emfis-cntl._udp"
    /// Britton-Lee IDM [Susie_Snitzer]
    public static let `blIdmTcp`: Self = "_bl-idm._tcp"
    /// Britton-Lee IDM [Susie_Snitzer]
    public static let `blIdmUdp`: Self = "_bl-idm._udp"
    /// Internet Message Access Protocol [IESG]
    public static let `imapTcp`: Self = "_imap._tcp"
    /// Universal Management Architecture [Jay_Whitney]
    public static let `umaTcp`: Self = "_uma._tcp"
    /// Universal Management Architecture [Jay_Whitney]
    public static let `umaUdp`: Self = "_uma._udp"
    /// UAAC Protocol [David_A_Gomberg]
    public static let `uaacTcp`: Self = "_uaac._tcp"
    /// UAAC Protocol [David_A_Gomberg]
    public static let `uaacUdp`: Self = "_uaac._udp"
    /// ISO-IP0 
    public static let `isoTp0Tcp`: Self = "_iso-tp0._tcp"
    /// ISO-IP0 
    public static let `isoTp0Udp`: Self = "_iso-tp0._udp"
    /// ISO-IP [Marshall_Rose]
    public static let `isoIpTcp`: Self = "_iso-ip._tcp"
    /// ISO-IP [Marshall_Rose]
    public static let `isoIpUdp`: Self = "_iso-ip._udp"
    /// Jargon [Bill_Weinman]
    public static let `jargonTcp`: Self = "_jargon._tcp"
    /// Jargon [Bill_Weinman]
    public static let `jargonUdp`: Self = "_jargon._udp"
    /// AED 512 Emulation Service [Albert_G_Broscius]
    public static let `aed512Tcp`: Self = "_aed-512._tcp"
    /// AED 512 Emulation Service [Albert_G_Broscius]
    public static let `aed512Udp`: Self = "_aed-512._udp"
    /// HEMS 
    public static let `hemsTcp`: Self = "_hems._tcp"
    /// HEMS 
    public static let `hemsUdp`: Self = "_hems._udp"
    /// Background File Transfer Program [Annette_DeSchon]
    public static let `bftpTcp`: Self = "_bftp._tcp"
    /// Background File Transfer Program [Annette_DeSchon]
    public static let `bftpUdp`: Self = "_bftp._udp"
    /// SGMP [Marty_Schoffstahl]
    public static let `sgmpTcp`: Self = "_sgmp._tcp"
    /// SGMP [Marty_Schoffstahl]
    public static let `sgmpUdp`: Self = "_sgmp._udp"
    /// NETSC 
    public static let `netscProdTcp`: Self = "_netsc-prod._tcp"
    /// NETSC 
    public static let `netscProdUdp`: Self = "_netsc-prod._udp"
    /// NETSC [Sergio_Heker]
    public static let `netscDevTcp`: Self = "_netsc-dev._tcp"
    /// NETSC [Sergio_Heker]
    public static let `netscDevUdp`: Self = "_netsc-dev._udp"
    /// SQL Service [Craig_Rogers]
    public static let `sqlsrvTcp`: Self = "_sqlsrv._tcp"
    /// SQL Service [Craig_Rogers]
    public static let `sqlsrvUdp`: Self = "_sqlsrv._udp"
    /// KNET/VM Command/Message Protocol [Gary_S_Malkin]
    public static let `knetCmpTcp`: Self = "_knet-cmp._tcp"
    /// KNET/VM Command/Message Protocol [Gary_S_Malkin]
    public static let `knetCmpUdp`: Self = "_knet-cmp._udp"
    /// PCMail Server [Mark_L_Lambert]
    public static let `pcmailSrvTcp`: Self = "_pcmail-srv._tcp"
    /// PCMail Server [Mark_L_Lambert]
    public static let `pcmailSrvUdp`: Self = "_pcmail-srv._udp"
    /// NSS-Routing [Yakov_Rekhter]
    public static let `nssRoutingTcp`: Self = "_nss-routing._tcp"
    /// NSS-Routing [Yakov_Rekhter]
    public static let `nssRoutingUdp`: Self = "_nss-routing._udp"
    /// SGMP-TRAPS [Marty_Schoffstahl]
    public static let `sgmpTrapsTcp`: Self = "_sgmp-traps._tcp"
    /// SGMP-TRAPS [Marty_Schoffstahl]
    public static let `sgmpTrapsUdp`: Self = "_sgmp-traps._udp"
    /// SNMP 
    public static let `snmpTcp`: Self = "_snmp._tcp"
    /// SNMP 
    public static let `snmpUdp`: Self = "_snmp._udp"
    /// SNMPTRAP [Marshall_Rose]
    public static let `snmptrapTcp`: Self = "_snmptrap._tcp"
    /// SNMPTRAP [Marshall_Rose]
    public static let `snmptrapUdp`: Self = "_snmptrap._udp"
    /// CMIP/TCP Manager 
    public static let `cmipManTcp`: Self = "_cmip-man._tcp"
    /// CMIP/TCP Manager 
    public static let `cmipManUdp`: Self = "_cmip-man._udp"
    /// CMIP/TCP Agent [Amatzia_Ben_Artzi]
    public static let `cmipAgentTcp`: Self = "_cmip-agent._tcp"
    /// CMIP/TCP Agent [Amatzia_Ben_Artzi]
    public static let `cmipAgentUdp`: Self = "_cmip-agent._udp"
    /// Xerox [Susie_Armstrong_2]
    public static let `xnsCourierTcp`: Self = "_xns-courier._tcp"
    /// Xerox [Susie_Armstrong_2]
    public static let `xnsCourierUdp`: Self = "_xns-courier._udp"
    /// Sirius Systems [Brian_Lloyd]
    public static let `sNetTcp`: Self = "_s-net._tcp"
    /// Sirius Systems [Brian_Lloyd]
    public static let `sNetUdp`: Self = "_s-net._udp"
    /// NAMP [Marty_Schoffstahl]
    public static let `nampTcp`: Self = "_namp._tcp"
    /// NAMP [Marty_Schoffstahl]
    public static let `nampUdp`: Self = "_namp._udp"
    /// RSVD [Alan_Sandell]
    public static let `rsvdTcp`: Self = "_rsvd._tcp"
    /// RSVD [Alan_Sandell]
    public static let `rsvdUdp`: Self = "_rsvd._udp"
    /// SEND [William_Oldwin]
    public static let `sendTcp`: Self = "_send._tcp"
    /// SEND [William_Oldwin]
    public static let `sendUdp`: Self = "_send._udp"
    /// Network PostScript [Brian_Reid]
    public static let `printSrvTcp`: Self = "_print-srv._tcp"
    /// Network PostScript [Brian_Reid]
    public static let `printSrvUdp`: Self = "_print-srv._udp"
    /// Network Innovations Multiplex 
    public static let `multiplexTcp`: Self = "_multiplex._tcp"
    /// Network Innovations Multiplex 
    public static let `multiplexUdp`: Self = "_multiplex._udp"
    /// Network Innovations CL/1 IANA assigned this well-formed service name as a replacement for "cl/1". [Kevin_DeVault]
    public static let `cl1Tcp`: Self = "_cl-1._tcp"
    /// Network Innovations CL/1 IANA assigned this well-formed service name as a replacement for "cl/1". [Kevin_DeVault]
    public static let `cl1Udp`: Self = "_cl-1._udp"
    /// Xyplex [Bob_Stewart]
    public static let `xyplexMuxTcp`: Self = "_xyplex-mux._tcp"
    /// Xyplex [Bob_Stewart]
    public static let `xyplexMuxUdp`: Self = "_xyplex-mux._udp"
    /// MAILQ [Rayan_Zachariassen]
    public static let `mailqTcp`: Self = "_mailq._tcp"
    /// MAILQ [Rayan_Zachariassen]
    public static let `mailqUdp`: Self = "_mailq._udp"
    /// VMNET [Christopher_Tengi]
    public static let `vmnetTcp`: Self = "_vmnet._tcp"
    /// VMNET [Christopher_Tengi]
    public static let `vmnetUdp`: Self = "_vmnet._udp"
    /// GENRAD-MUX [Ron_Thornton]
    public static let `genradMuxTcp`: Self = "_genrad-mux._tcp"
    /// GENRAD-MUX [Ron_Thornton]
    public static let `genradMuxUdp`: Self = "_genrad-mux._udp"
    /// X Display Manager Control Protocol [Robert_W_Scheifler]
    public static let `xdmcpTcp`: Self = "_xdmcp._tcp"
    /// X Display Manager Control Protocol [Robert_W_Scheifler]
    public static let `xdmcpUdp`: Self = "_xdmcp._udp"
    /// NextStep Window Server [Leo_Hourvitz]
    public static let `nextstepTcp`: Self = "_nextstep._tcp"
    /// NextStep Window Server [Leo_Hourvitz]
    public static let `nextstepUdp`: Self = "_nextstep._udp"
    /// Border Gateway Protocol [Kirk_Lougheed]
    public static let `bgpTcp`: Self = "_bgp._tcp"
    /// Border Gateway Protocol [Kirk_Lougheed]
    public static let `bgpUdp`: Self = "_bgp._udp"
    /// BGP [Randall_Stewart]
    public static let `bgpSctp`: Self = "_bgp._sctp"
    /// Intergraph [Dave_Buehmann]
    public static let `risTcp`: Self = "_ris._tcp"
    /// Intergraph [Dave_Buehmann]
    public static let `risUdp`: Self = "_ris._udp"
    /// Unify [Daegis_Inc]
    public static let `unifyTcp`: Self = "_unify._tcp"
    /// Unify [Daegis_Inc]
    public static let `unifyUdp`: Self = "_unify._udp"
    /// Unisys Audit SITP [Gil_Greenbaum]
    public static let `auditTcp`: Self = "_audit._tcp"
    /// Unisys Audit SITP [Gil_Greenbaum]
    public static let `auditUdp`: Self = "_audit._udp"
    /// OCBinder 
    public static let `ocbinderTcp`: Self = "_ocbinder._tcp"
    /// OCBinder 
    public static let `ocbinderUdp`: Self = "_ocbinder._udp"
    /// OCServer [Jerrilynn_Okamura]
    public static let `ocserverTcp`: Self = "_ocserver._tcp"
    /// OCServer [Jerrilynn_Okamura]
    public static let `ocserverUdp`: Self = "_ocserver._udp"
    /// Remote-KIS 
    public static let `remoteKisTcp`: Self = "_remote-kis._tcp"
    /// Remote-KIS 
    public static let `remoteKisUdp`: Self = "_remote-kis._udp"
    /// KIS Protocol [Ralph_Droms]
    public static let `kisTcp`: Self = "_kis._tcp"
    /// KIS Protocol [Ralph_Droms]
    public static let `kisUdp`: Self = "_kis._udp"
    /// Application Communication Interface [Rick_Carlos]
    public static let `aciTcp`: Self = "_aci._tcp"
    /// Application Communication Interface [Rick_Carlos]
    public static let `aciUdp`: Self = "_aci._udp"
    /// Plus Five's MUMPS [Hokey_Stenn]
    public static let `mumpsTcp`: Self = "_mumps._tcp"
    /// Plus Five's MUMPS [Hokey_Stenn]
    public static let `mumpsUdp`: Self = "_mumps._udp"
    /// Queued File Transport [Wayne_Schroeder]
    public static let `qftTcp`: Self = "_qft._tcp"
    /// Queued File Transport [Wayne_Schroeder]
    public static let `qftUdp`: Self = "_qft._udp"
    /// Gateway Access Control Protocol [C_Philip_Wood]
    public static let `gacpTcp`: Self = "_gacp._tcp"
    /// Gateway Access Control Protocol [C_Philip_Wood]
    public static let `gacpUdp`: Self = "_gacp._udp"
    /// Prospero Directory Service [B_Clifford_Neuman]
    public static let `prosperoTcp`: Self = "_prospero._tcp"
    /// Prospero Directory Service [B_Clifford_Neuman]
    public static let `prosperoUdp`: Self = "_prospero._udp"
    /// OSU Network Monitoring System [Doug_Karl]
    public static let `osuNmsTcp`: Self = "_osu-nms._tcp"
    /// OSU Network Monitoring System [Doug_Karl]
    public static let `osuNmsUdp`: Self = "_osu-nms._udp"
    /// Spider Remote Monitoring Protocol [Ted_J_Socolofsky]
    public static let `srmpTcp`: Self = "_srmp._tcp"
    /// Spider Remote Monitoring Protocol [Ted_J_Socolofsky]
    public static let `srmpUdp`: Self = "_srmp._udp"
    /// Internet Relay Chat Protocol [Jarkko_Oikarinen]
    public static let `ircTcp`: Self = "_irc._tcp"
    /// Internet Relay Chat Protocol [Jarkko_Oikarinen]
    public static let `ircUdp`: Self = "_irc._udp"
    /// DNSIX Network Level Module Audit 
    public static let `dn6NlmAudTcp`: Self = "_dn6-nlm-aud._tcp"
    /// DNSIX Network Level Module Audit 
    public static let `dn6NlmAudUdp`: Self = "_dn6-nlm-aud._udp"
    /// DNSIX Session Mgt Module Audit Redir [Lawrence_Lebahn]
    public static let `dn6SmmRedTcp`: Self = "_dn6-smm-red._tcp"
    /// DNSIX Session Mgt Module Audit Redir [Lawrence_Lebahn]
    public static let `dn6SmmRedUdp`: Self = "_dn6-smm-red._udp"
    /// Directory Location Service 
    public static let `dlsTcp`: Self = "_dls._tcp"
    /// Directory Location Service 
    public static let `dlsUdp`: Self = "_dls._udp"
    /// Directory Location Service Monitor [Scott_Bellew]
    public static let `dlsMonTcp`: Self = "_dls-mon._tcp"
    /// Directory Location Service Monitor [Scott_Bellew]
    public static let `dlsMonUdp`: Self = "_dls-mon._udp"
    /// SMUX [Marshall_Rose]
    public static let `smuxTcp`: Self = "_smux._tcp"
    /// SMUX [Marshall_Rose]
    public static let `smuxUdp`: Self = "_smux._udp"
    /// IBM System Resource Controller [Gerald_McBrearty]
    public static let `srcTcp`: Self = "_src._tcp"
    /// IBM System Resource Controller [Gerald_McBrearty]
    public static let `srcUdp`: Self = "_src._udp"
    /// AppleTalk Routing Maintenance 
    public static let `atRtmpTcp`: Self = "_at-rtmp._tcp"
    /// AppleTalk Routing Maintenance 
    public static let `atRtmpUdp`: Self = "_at-rtmp._udp"
    /// AppleTalk Name Binding 
    public static let `atNbpTcp`: Self = "_at-nbp._tcp"
    /// AppleTalk Name Binding 
    public static let `atNbpUdp`: Self = "_at-nbp._udp"
    /// AppleTalk Unused 
    public static let `at3Tcp`: Self = "_at-3._tcp"
    /// AppleTalk Unused 
    public static let `at3Udp`: Self = "_at-3._udp"
    /// AppleTalk Echo 
    public static let `atEchoTcp`: Self = "_at-echo._tcp"
    /// AppleTalk Echo 
    public static let `atEchoUdp`: Self = "_at-echo._udp"
    /// AppleTalk Unused 
    public static let `at5Tcp`: Self = "_at-5._tcp"
    /// AppleTalk Unused 
    public static let `at5Udp`: Self = "_at-5._udp"
    /// AppleTalk Zone Information 
    public static let `atZisTcp`: Self = "_at-zis._tcp"
    /// AppleTalk Zone Information 
    public static let `atZisUdp`: Self = "_at-zis._udp"
    /// AppleTalk Unused 
    public static let `at7Tcp`: Self = "_at-7._tcp"
    /// AppleTalk Unused 
    public static let `at7Udp`: Self = "_at-7._udp"
    /// AppleTalk Unused [Rob_Chandhok]
    public static let `at8Tcp`: Self = "_at-8._tcp"
    /// AppleTalk Unused [Rob_Chandhok]
    public static let `at8Udp`: Self = "_at-8._udp"
    /// The Quick Mail Transfer Protocol [D_J_Bernstein]
    public static let `qmtpTcp`: Self = "_qmtp._tcp"
    /// The Quick Mail Transfer Protocol [D_J_Bernstein]
    public static let `qmtpUdp`: Self = "_qmtp._udp"
    /// ANSI Z39.50 IANA assigned this well-formed service name as a replacement for "z39.50". [Mark_H_Needleman]
    public static let `z3950Tcp`: Self = "_z39-50._tcp"
    /// ANSI Z39.50 IANA assigned this well-formed service name as a replacement for "z39.50". [Mark_H_Needleman]
    public static let `z3950Udp`: Self = "_z39-50._udp"
    /// ATEXSSTR [Jim_Taylor]
    public static let `anetTcp`: Self = "_anet._tcp"
    /// ATEXSSTR [Jim_Taylor]
    public static let `anetUdp`: Self = "_anet._udp"
    /// IPX [Don_Provan]
    public static let `ipxTcp`: Self = "_ipx._tcp"
    /// IPX [Don_Provan]
    public static let `ipxUdp`: Self = "_ipx._udp"
    /// VM PWSCS [Dan_Shia]
    public static let `vmpwscsTcp`: Self = "_vmpwscs._tcp"
    /// VM PWSCS [Dan_Shia]
    public static let `vmpwscsUdp`: Self = "_vmpwscs._udp"
    /// Insignia Solutions [Martyn_Thomas]
    public static let `softpcTcp`: Self = "_softpc._tcp"
    /// Insignia Solutions [Martyn_Thomas]
    public static let `softpcUdp`: Self = "_softpc._udp"
    /// Computer Associates Int'l License Server [Chuck_Spitz]
    public static let `CAIlicTcp`: Self = "_CAIlic._tcp"
    /// Computer Associates Int'l License Server [Chuck_Spitz]
    public static let `CAIlicUdp`: Self = "_CAIlic._udp"
    /// dBASE Unix [Don_Gibson]
    public static let `dbaseTcp`: Self = "_dbase._tcp"
    /// dBASE Unix [Don_Gibson]
    public static let `dbaseUdp`: Self = "_dbase._udp"
    /// Netix Message Posting Protocol [Shannon_Yeh]
    public static let `mppTcp`: Self = "_mpp._tcp"
    /// Netix Message Posting Protocol [Shannon_Yeh]
    public static let `mppUdp`: Self = "_mpp._udp"
    /// Unisys ARPs [Ashok_Marwaha]
    public static let `uarpsTcp`: Self = "_uarps._tcp"
    /// Unisys ARPs [Ashok_Marwaha]
    public static let `uarpsUdp`: Self = "_uarps._udp"
    /// Interactive Mail Access Protocol v3 [James_Rice]
    public static let `imap3Tcp`: Self = "_imap3._tcp"
    /// Interactive Mail Access Protocol v3 [James_Rice]
    public static let `imap3Udp`: Self = "_imap3._udp"
    /// Berkeley rlogind with SPX auth 
    public static let `flnSpxTcp`: Self = "_fln-spx._tcp"
    /// Berkeley rlogind with SPX auth 
    public static let `flnSpxUdp`: Self = "_fln-spx._udp"
    /// Berkeley rshd with SPX auth 
    public static let `rshSpxTcp`: Self = "_rsh-spx._tcp"
    /// Berkeley rshd with SPX auth 
    public static let `rshSpxUdp`: Self = "_rsh-spx._udp"
    /// Certificate Distribution Center [Kannan_Alagappan]
    public static let `cdcTcp`: Self = "_cdc._tcp"
    /// Certificate Distribution Center [Kannan_Alagappan]
    public static let `cdcUdp`: Self = "_cdc._udp"
    /// masqdialer [Charles_Wright]
    public static let `masqdialerTcp`: Self = "_masqdialer._tcp"
    /// masqdialer [Charles_Wright]
    public static let `masqdialerUdp`: Self = "_masqdialer._udp"
    /// Direct [Herb_Sutter]
    public static let `directTcp`: Self = "_direct._tcp"
    /// Direct [Herb_Sutter]
    public static let `directUdp`: Self = "_direct._udp"
    /// Survey Measurement [Dave_Clark]
    public static let `surMeasTcp`: Self = "_sur-meas._tcp"
    /// Survey Measurement [Dave_Clark]
    public static let `surMeasUdp`: Self = "_sur-meas._udp"
    /// inbusiness [Derrick_Hisatake]
    public static let `inbusinessTcp`: Self = "_inbusiness._tcp"
    /// inbusiness [Derrick_Hisatake]
    public static let `inbusinessUdp`: Self = "_inbusiness._udp"
    /// LINK 
    public static let `linkTcp`: Self = "_link._tcp"
    /// LINK 
    public static let `linkUdp`: Self = "_link._udp"
    /// Display Systems Protocol [Weldon_J_Showalter]
    public static let `dsp3270Tcp`: Self = "_dsp3270._tcp"
    /// Display Systems Protocol [Weldon_J_Showalter]
    public static let `dsp3270Udp`: Self = "_dsp3270._udp"
    /// SUBNTBCST_TFTP IANA assigned this well-formed service name as a replacement for "subntbcst_tftp". [John_Fake]
    public static let `subntbcstTftpTcp`: Self = "_subntbcst-tftp._tcp"
    /// SUBNTBCST_TFTP [John_Fake]
    public static let `subntbcst_tftpTcp`: Self = "_subntbcst_tftp._tcp"
    /// SUBNTBCST_TFTP IANA assigned this well-formed service name as a replacement for "subntbcst_tftp". [John_Fake]
    public static let `subntbcstTftpUdp`: Self = "_subntbcst-tftp._udp"
    /// SUBNTBCST_TFTP [John_Fake]
    public static let `subntbcst_tftpUdp`: Self = "_subntbcst_tftp._udp"
    /// bhfhs [John_Kelly]
    public static let `bhfhsTcp`: Self = "_bhfhs._tcp"
    /// bhfhs [John_Kelly]
    public static let `bhfhsUdp`: Self = "_bhfhs._udp"
    /// Secure Electronic Transaction [Donald_Eastlake]
    public static let `setTcp`: Self = "_set._tcp"
    /// Secure Electronic Transaction [Donald_Eastlake]
    public static let `setUdp`: Self = "_set._udp"
    /// Efficient Short Remote Operations [Mohsen_Banan]
    public static let `esroGenTcp`: Self = "_esro-gen._tcp"
    /// Efficient Short Remote Operations [Mohsen_Banan]
    public static let `esroGenUdp`: Self = "_esro-gen._udp"
    /// Openport [John_Marland]
    public static let `openportTcp`: Self = "_openport._tcp"
    /// Openport [John_Marland]
    public static let `openportUdp`: Self = "_openport._udp"
    /// IIOP Name Service over TLS/SSL [Jeff_Stewart]
    public static let `nsiiopsTcp`: Self = "_nsiiops._tcp"
    /// IIOP Name Service over TLS/SSL [Jeff_Stewart]
    public static let `nsiiopsUdp`: Self = "_nsiiops._udp"
    /// Arcisdms [Russell_Crook]
    public static let `arcisdmsTcp`: Self = "_arcisdms._tcp"
    /// Arcisdms [Russell_Crook]
    public static let `arcisdmsUdp`: Self = "_arcisdms._udp"
    /// HDAP [Troy_Gau]
    public static let `hdapTcp`: Self = "_hdap._tcp"
    /// HDAP [Troy_Gau]
    public static let `hdapUdp`: Self = "_hdap._udp"
    /// BGMP [Dave_Thaler]
    public static let `bgmpTcp`: Self = "_bgmp._tcp"
    /// BGMP [Dave_Thaler]
    public static let `bgmpUdp`: Self = "_bgmp._udp"
    /// X-Bone CTL [Joe_Touch]
    public static let `xBoneCtlTcp`: Self = "_x-bone-ctl._tcp"
    /// X-Bone CTL [Joe_Touch]
    public static let `xBoneCtlUdp`: Self = "_x-bone-ctl._udp"
    /// SCSI on ST [Donald_D_Woelz]
    public static let `sstTcp`: Self = "_sst._tcp"
    /// SCSI on ST [Donald_D_Woelz]
    public static let `sstUdp`: Self = "_sst._udp"
    /// Tobit David Service Layer 
    public static let `tdServiceTcp`: Self = "_td-service._tcp"
    /// Tobit David Service Layer 
    public static let `tdServiceUdp`: Self = "_td-service._udp"
    /// Tobit David Replica [Franz_Josef_Leuders]
    public static let `tdReplicaTcp`: Self = "_td-replica._tcp"
    /// Tobit David Replica [Franz_Josef_Leuders]
    public static let `tdReplicaUdp`: Self = "_td-replica._udp"
    /// MANET Protocols 
    public static let `manetTcp`: Self = "_manet._tcp"
    /// MANET Protocols 
    public static let `manetUdp`: Self = "_manet._udp"
    /// Q-mode encapsulation for GIST messages 
    public static let `gistUdp`: Self = "_gist._udp"
    /// IETF Network Endpoint Assessment (NEA) Posture Transport Protocol over TLS (PT-TLS) [IESG]
    public static let `ptTlsTcp`: Self = "_pt-tls._tcp"
    /// http-mgmt [Adrian_Pell]
    public static let `httpMgmtTcp`: Self = "_http-mgmt._tcp"
    /// http-mgmt [Adrian_Pell]
    public static let `httpMgmtUdp`: Self = "_http-mgmt._udp"
    /// Personal Link [Dan_Cummings]
    public static let `personalLinkTcp`: Self = "_personal-link._tcp"
    /// Personal Link [Dan_Cummings]
    public static let `personalLinkUdp`: Self = "_personal-link._udp"
    /// Cable Port A/X [Craig_Langfahl]
    public static let `cableportAxTcp`: Self = "_cableport-ax._tcp"
    /// Cable Port A/X [Craig_Langfahl]
    public static let `cableportAxUdp`: Self = "_cableport-ax._udp"
    /// rescap [Paul_Hoffman]
    public static let `rescapTcp`: Self = "_rescap._tcp"
    /// rescap [Paul_Hoffman]
    public static let `rescapUdp`: Self = "_rescap._udp"
    /// corerjd [Chris_Thornhill]
    public static let `corerjdTcp`: Self = "_corerjd._tcp"
    /// corerjd [Chris_Thornhill]
    public static let `corerjdUdp`: Self = "_corerjd._udp"
    /// FXP Communication [James_Darnall]
    public static let `fxpTcp`: Self = "_fxp._tcp"
    /// FXP Communication [James_Darnall]
    public static let `fxpUdp`: Self = "_fxp._udp"
    /// K-BLOCK [Simon_P_Jackson]
    public static let `kBlockTcp`: Self = "_k-block._tcp"
    /// K-BLOCK [Simon_P_Jackson]
    public static let `kBlockUdp`: Self = "_k-block._udp"
    /// Novastor Backup [Brian_Dickman]
    public static let `novastorbakcupTcp`: Self = "_novastorbakcup._tcp"
    /// Novastor Backup [Brian_Dickman]
    public static let `novastorbakcupUdp`: Self = "_novastorbakcup._udp"
    /// EntrustTime [Peter_Whittaker]
    public static let `entrusttimeTcp`: Self = "_entrusttime._tcp"
    /// EntrustTime [Peter_Whittaker]
    public static let `entrusttimeUdp`: Self = "_entrusttime._udp"
    /// bhmds [John_Kelly]
    public static let `bhmdsTcp`: Self = "_bhmds._tcp"
    /// bhmds [John_Kelly]
    public static let `bhmdsUdp`: Self = "_bhmds._udp"
    /// AppleShare IP WebAdmin [Ann_Huang]
    public static let `asipWebadminTcp`: Self = "_asip-webadmin._tcp"
    /// AppleShare IP WebAdmin [Ann_Huang]
    public static let `asipWebadminUdp`: Self = "_asip-webadmin._udp"
    /// VSLMP [Gerben_Wierda]
    public static let `vslmpTcp`: Self = "_vslmp._tcp"
    /// VSLMP [Gerben_Wierda]
    public static let `vslmpUdp`: Self = "_vslmp._udp"
    /// Magenta Logic [Karl_Rousseau]
    public static let `magentaLogicTcp`: Self = "_magenta-logic._tcp"
    /// Magenta Logic [Karl_Rousseau]
    public static let `magentaLogicUdp`: Self = "_magenta-logic._udp"
    /// Opalis Robot [Laurent_Domenech]
    public static let `opalisRobotTcp`: Self = "_opalis-robot._tcp"
    /// Opalis Robot [Laurent_Domenech]
    public static let `opalisRobotUdp`: Self = "_opalis-robot._udp"
    /// DPSI [Tony_Scamurra]
    public static let `dpsiTcp`: Self = "_dpsi._tcp"
    /// DPSI [Tony_Scamurra]
    public static let `dpsiUdp`: Self = "_dpsi._udp"
    /// decAuth [Michael_Agishtein]
    public static let `decauthTcp`: Self = "_decauth._tcp"
    /// decAuth [Michael_Agishtein]
    public static let `decauthUdp`: Self = "_decauth._udp"
    /// Zannet [Zan_Oliphant]
    public static let `zannetTcp`: Self = "_zannet._tcp"
    /// Zannet [Zan_Oliphant]
    public static let `zannetUdp`: Self = "_zannet._udp"
    /// PKIX TimeStamp [Robert_Zuccherato]
    public static let `pkixTimestampTcp`: Self = "_pkix-timestamp._tcp"
    /// PKIX TimeStamp [Robert_Zuccherato]
    public static let `pkixTimestampUdp`: Self = "_pkix-timestamp._udp"
    /// PTP Event [Kang_Lee]
    public static let `ptpEventTcp`: Self = "_ptp-event._tcp"
    /// PTP Event [Kang_Lee]
    public static let `ptpEventUdp`: Self = "_ptp-event._udp"
    /// PTP General [Kang_Lee]
    public static let `ptpGeneralTcp`: Self = "_ptp-general._tcp"
    /// PTP General [Kang_Lee]
    public static let `ptpGeneralUdp`: Self = "_ptp-general._udp"
    /// PIP [Gordon_Mohr]
    public static let `pipTcp`: Self = "_pip._tcp"
    /// PIP [Gordon_Mohr]
    public static let `pipUdp`: Self = "_pip._udp"
    /// RTSPS [Anders_Klemets]
    public static let `rtspsTcp`: Self = "_rtsps._tcp"
    /// RTSPS [Anders_Klemets]
    public static let `rtspsUdp`: Self = "_rtsps._udp"
    /// Resource PKI to Router Protocol [IESG]
    public static let `rpkiRtrTcp`: Self = "_rpki-rtr._tcp"
    /// Resource PKI to Router Protocol over TLS [IESG]
    public static let `rpkiRtrTlsTcp`: Self = "_rpki-rtr-tls._tcp"
    /// Texar Security Port [Eugen_Bacic]
    public static let `texarTcp`: Self = "_texar._tcp"
    /// Texar Security Port [Eugen_Bacic]
    public static let `texarUdp`: Self = "_texar._udp"
    /// Prospero Data Access Protocol [B_Clifford_Neuman]
    public static let `pdapTcp`: Self = "_pdap._tcp"
    /// Prospero Data Access Protocol [B_Clifford_Neuman]
    public static let `pdapUdp`: Self = "_pdap._udp"
    /// Perf Analysis Workbench 
    public static let `pawservTcp`: Self = "_pawserv._tcp"
    /// Perf Analysis Workbench 
    public static let `pawservUdp`: Self = "_pawserv._udp"
    /// Zebra server 
    public static let `zservTcp`: Self = "_zserv._tcp"
    /// Zebra server 
    public static let `zservUdp`: Self = "_zserv._udp"
    /// Fatmen Server 
    public static let `fatservTcp`: Self = "_fatserv._tcp"
    /// Fatmen Server 
    public static let `fatservUdp`: Self = "_fatserv._udp"
    /// Cabletron Management Protocol 
    public static let `csiSgwpTcp`: Self = "_csi-sgwp._tcp"
    /// Cabletron Management Protocol 
    public static let `csiSgwpUdp`: Self = "_csi-sgwp._udp"
    /// mftp [Dave_Feinleib]
    public static let `mftpTcp`: Self = "_mftp._tcp"
    /// mftp [Dave_Feinleib]
    public static let `mftpUdp`: Self = "_mftp._udp"
    /// MATIP Type A [Alain_Robert]
    public static let `matipTypeATcp`: Self = "_matip-type-a._tcp"
    /// MATIP Type A [Alain_Robert]
    public static let `matipTypeAUdp`: Self = "_matip-type-a._udp"
    /// MATIP Type B [Alain_Robert]
    public static let `matipTypeBTcp`: Self = "_matip-type-b._tcp"
    /// MATIP Type B [Alain_Robert]
    public static let `matipTypeBUdp`: Self = "_matip-type-b._udp"
    /// bhoetty [John_Kelly]
    public static let `bhoettyTcp`: Self = "_bhoetty._tcp"
    /// bhoetty [John_Kelly]
    public static let `bhoettyUdp`: Self = "_bhoetty._udp"
    /// DTAG [Ruediger_Wald]
    public static let `dtagSteSbTcp`: Self = "_dtag-ste-sb._tcp"
    /// DTAG [Ruediger_Wald]
    public static let `dtagSteSbUdp`: Self = "_dtag-ste-sb._udp"
    /// bhoedap4 [John_Kelly]
    public static let `bhoedap4Tcp`: Self = "_bhoedap4._tcp"
    /// bhoedap4 [John_Kelly]
    public static let `bhoedap4Udp`: Self = "_bhoedap4._udp"
    /// NDSAUTH [Jayakumar_Ramalingam]
    public static let `ndsauthTcp`: Self = "_ndsauth._tcp"
    /// NDSAUTH [Jayakumar_Ramalingam]
    public static let `ndsauthUdp`: Self = "_ndsauth._udp"
    /// bh611 [John_Kelly]
    public static let `bh611Tcp`: Self = "_bh611._tcp"
    /// bh611 [John_Kelly]
    public static let `bh611Udp`: Self = "_bh611._udp"
    /// DATEX-ASN [Kenneth_Vaughn]
    public static let `datexAsnTcp`: Self = "_datex-asn._tcp"
    /// DATEX-ASN [Kenneth_Vaughn]
    public static let `datexAsnUdp`: Self = "_datex-asn._udp"
    /// Cloanto Net 1 [Michael_Battilana]
    public static let `cloantoNet1Tcp`: Self = "_cloanto-net-1._tcp"
    /// Cloanto Net 1 [Michael_Battilana]
    public static let `cloantoNet1Udp`: Self = "_cloanto-net-1._udp"
    /// bhevent [John_Kelly]
    public static let `bheventTcp`: Self = "_bhevent._tcp"
    /// bhevent [John_Kelly]
    public static let `bheventUdp`: Self = "_bhevent._udp"
    /// Shrinkwrap [Bill_Simpson]
    public static let `shrinkwrapTcp`: Self = "_shrinkwrap._tcp"
    /// Shrinkwrap [Bill_Simpson]
    public static let `shrinkwrapUdp`: Self = "_shrinkwrap._udp"
    /// Network Security Risk Management Protocol [Eric_Jacksch]
    public static let `nsrmpTcp`: Self = "_nsrmp._tcp"
    /// Network Security Risk Management Protocol [Eric_Jacksch]
    public static let `nsrmpUdp`: Self = "_nsrmp._udp"
    /// scoi2odialog [Keith_Petley]
    public static let `scoi2odialogTcp`: Self = "_scoi2odialog._tcp"
    /// scoi2odialog [Keith_Petley]
    public static let `scoi2odialogUdp`: Self = "_scoi2odialog._udp"
    /// Semantix [Semantix]
    public static let `semantixTcp`: Self = "_semantix._tcp"
    /// Semantix [Semantix]
    public static let `semantixUdp`: Self = "_semantix._udp"
    /// SRS Send [Curt_Mayer]
    public static let `srssendTcp`: Self = "_srssend._tcp"
    /// SRS Send [Curt_Mayer]
    public static let `srssendUdp`: Self = "_srssend._udp"
    /// RSVP Tunnel IANA assigned this well-formed service name as a replacement for "rsvp_tunnel". [Andreas_Terzis]
    public static let `rsvpTunnelTcp`: Self = "_rsvp-tunnel._tcp"
    /// RSVP Tunnel [Andreas_Terzis]
    public static let `rsvp_tunnelTcp`: Self = "_rsvp_tunnel._tcp"
    /// RSVP Tunnel IANA assigned this well-formed service name as a replacement for "rsvp_tunnel". [Andreas_Terzis]
    public static let `rsvpTunnelUdp`: Self = "_rsvp-tunnel._udp"
    /// RSVP Tunnel [Andreas_Terzis]
    public static let `rsvp_tunnelUdp`: Self = "_rsvp_tunnel._udp"
    /// Aurora CMGR [Philip_Budne]
    public static let `auroraCmgrTcp`: Self = "_aurora-cmgr._tcp"
    /// Aurora CMGR [Philip_Budne]
    public static let `auroraCmgrUdp`: Self = "_aurora-cmgr._udp"
    /// DTK [Fred_Cohen]
    public static let `dtkTcp`: Self = "_dtk._tcp"
    /// DTK [Fred_Cohen]
    public static let `dtkUdp`: Self = "_dtk._udp"
    /// ODMR [Randall_Gellens]
    public static let `odmrTcp`: Self = "_odmr._tcp"
    /// ODMR [Randall_Gellens]
    public static let `odmrUdp`: Self = "_odmr._udp"
    /// MortgageWare [Ole_Hellevik]
    public static let `mortgagewareTcp`: Self = "_mortgageware._tcp"
    /// MortgageWare [Ole_Hellevik]
    public static let `mortgagewareUdp`: Self = "_mortgageware._udp"
    /// QbikGDP [Adrien_de_Croy]
    public static let `qbikgdpTcp`: Self = "_qbikgdp._tcp"
    /// QbikGDP [Adrien_de_Croy]
    public static let `qbikgdpUdp`: Self = "_qbikgdp._udp"
    /// rpc2portmap 
    public static let `rpc2portmapTcp`: Self = "_rpc2portmap._tcp"
    /// rpc2portmap 
    public static let `rpc2portmapUdp`: Self = "_rpc2portmap._udp"
    /// codaauth2 [Robert_Watson]
    public static let `codaauth2Tcp`: Self = "_codaauth2._tcp"
    /// codaauth2 [Robert_Watson]
    public static let `codaauth2Udp`: Self = "_codaauth2._udp"
    /// Clearcase [Dave_LeBlang]
    public static let `clearcaseTcp`: Self = "_clearcase._tcp"
    /// Clearcase [Dave_LeBlang]
    public static let `clearcaseUdp`: Self = "_clearcase._udp"
    /// ListProcessor [Anastasios_Kotsikona]
    public static let `ulistprocTcp`: Self = "_ulistproc._tcp"
    /// ListProcessor [Anastasios_Kotsikona]
    public static let `ulistprocUdp`: Self = "_ulistproc._udp"
    /// Legent Corporation 
    public static let `legent1Tcp`: Self = "_legent-1._tcp"
    /// Legent Corporation 
    public static let `legent1Udp`: Self = "_legent-1._udp"
    /// Legent Corporation [Keith_Boyce]
    public static let `legent2Tcp`: Self = "_legent-2._tcp"
    /// Legent Corporation [Keith_Boyce]
    public static let `legent2Udp`: Self = "_legent-2._udp"
    /// Hassle [Reinhard_Doelz]
    public static let `hassleTcp`: Self = "_hassle._tcp"
    /// Hassle [Reinhard_Doelz]
    public static let `hassleUdp`: Self = "_hassle._udp"
    /// Amiga Envoy Network Inquiry Protocol [Heinz_Wrobel]
    public static let `nipTcp`: Self = "_nip._tcp"
    /// Amiga Envoy Network Inquiry Protocol [Heinz_Wrobel]
    public static let `nipUdp`: Self = "_nip._udp"
    /// NEC Corporation 
    public static let `tnETOSTcp`: Self = "_tnETOS._tcp"
    /// NEC Corporation 
    public static let `tnETOSUdp`: Self = "_tnETOS._udp"
    /// NEC Corporation [Tomoo_Fujita]
    public static let `dsETOSTcp`: Self = "_dsETOS._tcp"
    /// NEC Corporation [Tomoo_Fujita]
    public static let `dsETOSUdp`: Self = "_dsETOS._udp"
    /// TIA/EIA/IS-99 modem client 
    public static let `is99cTcp`: Self = "_is99c._tcp"
    /// TIA/EIA/IS-99 modem client 
    public static let `is99cUdp`: Self = "_is99c._udp"
    /// TIA/EIA/IS-99 modem server [Frank_Quick]
    public static let `is99sTcp`: Self = "_is99s._tcp"
    /// TIA/EIA/IS-99 modem server [Frank_Quick]
    public static let `is99sUdp`: Self = "_is99s._udp"
    /// hp performance data collector 
    public static let `hpCollectorTcp`: Self = "_hp-collector._tcp"
    /// hp performance data collector 
    public static let `hpCollectorUdp`: Self = "_hp-collector._udp"
    /// hp performance data managed node 
    public static let `hpManagedNodeTcp`: Self = "_hp-managed-node._tcp"
    /// hp performance data managed node 
    public static let `hpManagedNodeUdp`: Self = "_hp-managed-node._udp"
    /// hp performance data alarm manager [Frank_Blakely]
    public static let `hpAlarmMgrTcp`: Self = "_hp-alarm-mgr._tcp"
    /// hp performance data alarm manager [Frank_Blakely]
    public static let `hpAlarmMgrUdp`: Self = "_hp-alarm-mgr._udp"
    /// A Remote Network Server System [David_Hornsby]
    public static let `arnsTcp`: Self = "_arns._tcp"
    /// A Remote Network Server System [David_Hornsby]
    public static let `arnsUdp`: Self = "_arns._udp"
    /// IBM Application [Lisa_Tomita]
    public static let `ibmAppTcp`: Self = "_ibm-app._tcp"
    /// IBM Application [Lisa_Tomita]
    public static let `ibmAppUdp`: Self = "_ibm-app._udp"
    /// ASA Message Router Object Def. [Steve_Laitinen]
    public static let `asaTcp`: Self = "_asa._tcp"
    /// ASA Message Router Object Def. [Steve_Laitinen]
    public static let `asaUdp`: Self = "_asa._udp"
    /// Appletalk Update-Based Routing Pro. [Chris_Ranch]
    public static let `aurpTcp`: Self = "_aurp._tcp"
    /// Appletalk Update-Based Routing Pro. [Chris_Ranch]
    public static let `aurpUdp`: Self = "_aurp._udp"
    /// Unidata LDM [University_Corporation_for_Atmospheric_Research2]
    public static let `unidataLdmTcp`: Self = "_unidata-ldm._tcp"
    /// Unidata LDM [University_Corporation_for_Atmospheric_Research2]
    public static let `unidataLdmUdp`: Self = "_unidata-ldm._udp"
    /// Lightweight Directory Access Protocol [Tim_Howes]
    public static let `ldapTcp`: Self = "_ldap._tcp"
    /// Lightweight Directory Access Protocol [Tim_Howes]
    public static let `ldapUdp`: Self = "_ldap._udp"
    /// UIS [Ed_Barron]
    public static let `uisTcp`: Self = "_uis._tcp"
    /// UIS [Ed_Barron]
    public static let `uisUdp`: Self = "_uis._udp"
    /// SynOptics SNMP Relay Port 
    public static let `synoticsRelayTcp`: Self = "_synotics-relay._tcp"
    /// SynOptics SNMP Relay Port 
    public static let `synoticsRelayUdp`: Self = "_synotics-relay._udp"
    /// SynOptics Port Broker Port [Illan_Raab]
    public static let `synoticsBrokerTcp`: Self = "_synotics-broker._tcp"
    /// SynOptics Port Broker Port [Illan_Raab]
    public static let `synoticsBrokerUdp`: Self = "_synotics-broker._udp"
    /// Meta5 [Jim_Kanzler]
    public static let `meta5Tcp`: Self = "_meta5._tcp"
    /// Meta5 [Jim_Kanzler]
    public static let `meta5Udp`: Self = "_meta5._udp"
    /// EMBL Nucleic Data Transfer [Peter_Gad]
    public static let `emblNdtTcp`: Self = "_embl-ndt._tcp"
    /// EMBL Nucleic Data Transfer [Peter_Gad]
    public static let `emblNdtUdp`: Self = "_embl-ndt._udp"
    /// NetScout Control Protocol [Ashwani_Singhal]
    public static let `netcpTcp`: Self = "_netcp._tcp"
    /// NetScout Control Protocol [Ashwani_Singhal]
    public static let `netcpUdp`: Self = "_netcp._udp"
    /// Novell Netware over IP 
    public static let `netwareIpTcp`: Self = "_netware-ip._tcp"
    /// Novell Netware over IP 
    public static let `netwareIpUdp`: Self = "_netware-ip._udp"
    /// Multi Protocol Trans. Net. [Soumitra_Sarkar]
    public static let `mptnTcp`: Self = "_mptn._tcp"
    /// Multi Protocol Trans. Net. [Soumitra_Sarkar]
    public static let `mptnUdp`: Self = "_mptn._udp"
    /// Kryptolan [Peter_de_Laval]
    public static let `kryptolanTcp`: Self = "_kryptolan._tcp"
    /// Kryptolan [Peter_de_Laval]
    public static let `kryptolanUdp`: Self = "_kryptolan._udp"
    /// ISO Transport Class 2 Non-Control over TCP [Yanick_Pouffary]
    public static let `isoTsapC2Tcp`: Self = "_iso-tsap-c2._tcp"
    /// ISO Transport Class 2 Non-Control over UDP [Yanick_Pouffary]
    public static let `isoTsapC2Udp`: Self = "_iso-tsap-c2._udp"
    /// Oracle Secure Backup [Steven_Fried]
    public static let `osbSdTcp`: Self = "_osb-sd._tcp"
    /// Oracle Secure Backup [Steven_Fried]
    public static let `osbSdUdp`: Self = "_osb-sd._udp"
    /// Uninterruptible Power Supply [Charles_Bennett]
    public static let `upsTcp`: Self = "_ups._tcp"
    /// Uninterruptible Power Supply [Charles_Bennett]
    public static let `upsUdp`: Self = "_ups._udp"
    /// Genie Protocol [Mark_Hankin]
    public static let `genieTcp`: Self = "_genie._tcp"
    /// Genie Protocol [Mark_Hankin]
    public static let `genieUdp`: Self = "_genie._udp"
    /// decap 
    public static let `decapTcp`: Self = "_decap._tcp"
    /// decap 
    public static let `decapUdp`: Self = "_decap._udp"
    /// nced 
    public static let `ncedTcp`: Self = "_nced._tcp"
    /// nced 
    public static let `ncedUdp`: Self = "_nced._udp"
    /// ncld [Richard_Jones]
    public static let `ncldTcp`: Self = "_ncld._tcp"
    /// ncld [Richard_Jones]
    public static let `ncldUdp`: Self = "_ncld._udp"
    /// Interactive Mail Support Protocol [John_Myers]
    public static let `imspTcp`: Self = "_imsp._tcp"
    /// Interactive Mail Support Protocol [John_Myers]
    public static let `imspUdp`: Self = "_imsp._udp"
    /// Timbuktu [Marc_Epard]
    public static let `timbuktuTcp`: Self = "_timbuktu._tcp"
    /// Timbuktu [Marc_Epard]
    public static let `timbuktuUdp`: Self = "_timbuktu._udp"
    /// Prospero Resource Manager Sys. Man. 
    public static let `prmSmTcp`: Self = "_prm-sm._tcp"
    /// Prospero Resource Manager Sys. Man. 
    public static let `prmSmUdp`: Self = "_prm-sm._udp"
    /// Prospero Resource Manager Node Man. [B_Clifford_Neuman]
    public static let `prmNmTcp`: Self = "_prm-nm._tcp"
    /// Prospero Resource Manager Node Man. [B_Clifford_Neuman]
    public static let `prmNmUdp`: Self = "_prm-nm._udp"
    /// DECLadebug Remote Debug Protocol [Hewlett_Packard]
    public static let `decladebugTcp`: Self = "_decladebug._tcp"
    /// DECLadebug Remote Debug Protocol [Hewlett_Packard]
    public static let `decladebugUdp`: Self = "_decladebug._udp"
    /// Remote MT Protocol [Peter_Eriksson]
    public static let `rmtTcp`: Self = "_rmt._tcp"
    /// Remote MT Protocol [Peter_Eriksson]
    public static let `rmtUdp`: Self = "_rmt._udp"
    /// Trap Convention Port [Illan_Raab]
    public static let `synopticsTrapTcp`: Self = "_synoptics-trap._tcp"
    /// Trap Convention Port [Illan_Raab]
    public static let `synopticsTrapUdp`: Self = "_synoptics-trap._udp"
    /// Storage Management Services Protocol [Murthy_Srinivas]
    public static let `smspTcp`: Self = "_smsp._tcp"
    /// Storage Management Services Protocol [Murthy_Srinivas]
    public static let `smspUdp`: Self = "_smsp._udp"
    /// InfoSeek [Steve_Kirsch]
    public static let `infoseekTcp`: Self = "_infoseek._tcp"
    /// InfoSeek [Steve_Kirsch]
    public static let `infoseekUdp`: Self = "_infoseek._udp"
    /// BNet [Jim_Mertz]
    public static let `bnetTcp`: Self = "_bnet._tcp"
    /// BNet [Jim_Mertz]
    public static let `bnetUdp`: Self = "_bnet._udp"
    /// Silverplatter [Peter_Ciuffetti]
    public static let `silverplatterTcp`: Self = "_silverplatter._tcp"
    /// Silverplatter [Peter_Ciuffetti]
    public static let `silverplatterUdp`: Self = "_silverplatter._udp"
    /// Onmux [Stephen_Hanna]
    public static let `onmuxTcp`: Self = "_onmux._tcp"
    /// Onmux [Stephen_Hanna]
    public static let `onmuxUdp`: Self = "_onmux._udp"
    /// Hyper-G [Frank_Kappe]
    public static let `hyperGTcp`: Self = "_hyper-g._tcp"
    /// Hyper-G [Frank_Kappe]
    public static let `hyperGUdp`: Self = "_hyper-g._udp"
    /// Ariel 1 [Joel_Karafin]
    public static let `ariel1Tcp`: Self = "_ariel1._tcp"
    /// Ariel 1 [Joel_Karafin]
    public static let `ariel1Udp`: Self = "_ariel1._udp"
    /// SMPTE [Si_Becker]
    public static let `smpteTcp`: Self = "_smpte._tcp"
    /// SMPTE [Si_Becker]
    public static let `smpteUdp`: Self = "_smpte._udp"
    /// Ariel 2 
    public static let `ariel2Tcp`: Self = "_ariel2._tcp"
    /// Ariel 2 
    public static let `ariel2Udp`: Self = "_ariel2._udp"
    /// Ariel 3 [Joel_Karafin]
    public static let `ariel3Tcp`: Self = "_ariel3._tcp"
    /// Ariel 3 [Joel_Karafin]
    public static let `ariel3Udp`: Self = "_ariel3._udp"
    /// IBM Operations Planning and Control Start 
    public static let `opcJobStartTcp`: Self = "_opc-job-start._tcp"
    /// IBM Operations Planning and Control Start 
    public static let `opcJobStartUdp`: Self = "_opc-job-start._udp"
    /// IBM Operations Planning and Control Track [Conny_Larsson]
    public static let `opcJobTrackTcp`: Self = "_opc-job-track._tcp"
    /// IBM Operations Planning and Control Track [Conny_Larsson]
    public static let `opcJobTrackUdp`: Self = "_opc-job-track._udp"
    /// ICAD [Larry_Stone]
    public static let `icadElTcp`: Self = "_icad-el._tcp"
    /// ICAD [Larry_Stone]
    public static let `icadElUdp`: Self = "_icad-el._udp"
    /// smartsdp [Marie_Pierre_Belange]
    public static let `smartsdpTcp`: Self = "_smartsdp._tcp"
    /// smartsdp [Marie_Pierre_Belange]
    public static let `smartsdpUdp`: Self = "_smartsdp._udp"
    /// Server Location [Veizades]
    public static let `svrlocTcp`: Self = "_svrloc._tcp"
    /// Server Location [Veizades]
    public static let `svrlocUdp`: Self = "_svrloc._udp"
    /// OCS_CMU IANA assigned this well-formed service name as a replacement for "ocs_cmu". 
    public static let `ocsCmuTcp`: Self = "_ocs-cmu._tcp"
    /// OCS_CMU 
    public static let `ocs_cmuTcp`: Self = "_ocs_cmu._tcp"
    /// OCS_CMU IANA assigned this well-formed service name as a replacement for "ocs_cmu". 
    public static let `ocsCmuUdp`: Self = "_ocs-cmu._udp"
    /// OCS_CMU 
    public static let `ocs_cmuUdp`: Self = "_ocs_cmu._udp"
    /// OCS_AMU IANA assigned this well-formed service name as a replacement for "ocs_amu". [Florence_Wyman]
    public static let `ocsAmuTcp`: Self = "_ocs-amu._tcp"
    /// OCS_AMU [Florence_Wyman]
    public static let `ocs_amuTcp`: Self = "_ocs_amu._tcp"
    /// OCS_AMU IANA assigned this well-formed service name as a replacement for "ocs_amu". [Florence_Wyman]
    public static let `ocsAmuUdp`: Self = "_ocs-amu._udp"
    /// OCS_AMU [Florence_Wyman]
    public static let `ocs_amuUdp`: Self = "_ocs_amu._udp"
    /// UTMPSD 
    public static let `utmpsdTcp`: Self = "_utmpsd._tcp"
    /// UTMPSD 
    public static let `utmpsdUdp`: Self = "_utmpsd._udp"
    /// UTMPCD 
    public static let `utmpcdTcp`: Self = "_utmpcd._tcp"
    /// UTMPCD 
    public static let `utmpcdUdp`: Self = "_utmpcd._udp"
    /// IASD [Nir_Baroz]
    public static let `iasdTcp`: Self = "_iasd._tcp"
    /// IASD [Nir_Baroz]
    public static let `iasdUdp`: Self = "_iasd._udp"
    /// NNTP for transit servers (NNSP) [IESG]
    public static let `nnspTcp`: Self = "_nnsp._tcp"
    /// NNTP for transit servers (NNSP) [IESG]
    public static let `nnspUdp`: Self = "_nnsp._udp"
    /// MobileIP-Agent 
    public static let `mobileipAgentTcp`: Self = "_mobileip-agent._tcp"
    /// MobileIP-Agent 
    public static let `mobileipAgentUdp`: Self = "_mobileip-agent._udp"
    /// MobilIP-MN [Kannan_Alagappan_2]
    public static let `mobilipMnTcp`: Self = "_mobilip-mn._tcp"
    /// MobilIP-MN [Kannan_Alagappan_2]
    public static let `mobilipMnUdp`: Self = "_mobilip-mn._udp"
    /// DNA-CML [Dan_Flowers]
    public static let `dnaCmlTcp`: Self = "_dna-cml._tcp"
    /// DNA-CML [Dan_Flowers]
    public static let `dnaCmlUdp`: Self = "_dna-cml._udp"
    /// comscm [Jim_Teague]
    public static let `comscmTcp`: Self = "_comscm._tcp"
    /// comscm [Jim_Teague]
    public static let `comscmUdp`: Self = "_comscm._udp"
    /// dsfgw [Andy_McKeen]
    public static let `dsfgwTcp`: Self = "_dsfgw._tcp"
    /// dsfgw [Andy_McKeen]
    public static let `dsfgwUdp`: Self = "_dsfgw._udp"
    /// dasp [Thomas_Obermair]
    public static let `daspTcp`: Self = "_dasp._tcp"
    /// dasp [Thomas_Obermair]
    public static let `daspUdp`: Self = "_dasp._udp"
    /// sgcp [Marshall_Rose]
    public static let `sgcpTcp`: Self = "_sgcp._tcp"
    /// sgcp [Marshall_Rose]
    public static let `sgcpUdp`: Self = "_sgcp._udp"
    /// decvms-sysmgt [Lee_Barton]
    public static let `decvmsSysmgtTcp`: Self = "_decvms-sysmgt._tcp"
    /// decvms-sysmgt [Lee_Barton]
    public static let `decvmsSysmgtUdp`: Self = "_decvms-sysmgt._udp"
    /// cvc_hostd IANA assigned this well-formed service name as a replacement for "cvc_hostd". [Bill_Davidson]
    public static let `cvcHostdTcp`: Self = "_cvc-hostd._tcp"
    /// cvc_hostd [Bill_Davidson]
    public static let `cvc_hostdTcp`: Self = "_cvc_hostd._tcp"
    /// cvc_hostd IANA assigned this well-formed service name as a replacement for "cvc_hostd". [Bill_Davidson]
    public static let `cvcHostdUdp`: Self = "_cvc-hostd._udp"
    /// cvc_hostd [Bill_Davidson]
    public static let `cvc_hostdUdp`: Self = "_cvc_hostd._udp"
    /// http protocol over TLS/SSL [IESG]
    public static let `httpsTcp`: Self = "_https._tcp"
    /// http protocol over TLS/SSL [IESG]
    public static let `httpsUdp`: Self = "_https._udp"
    /// HTTPS [Randall_Stewart]
    public static let `httpsSctp`: Self = "_https._sctp"
    /// Simple Network Paging Protocol 
    public static let `snppTcp`: Self = "_snpp._tcp"
    /// Simple Network Paging Protocol 
    public static let `snppUdp`: Self = "_snpp._udp"
    /// Microsoft-DS [Pradeep_Bahl]
    public static let `microsoftDsTcp`: Self = "_microsoft-ds._tcp"
    /// Microsoft-DS [Pradeep_Bahl]
    public static let `microsoftDsUdp`: Self = "_microsoft-ds._udp"
    /// DDM-Remote Relational Database Access 
    public static let `ddmRdbTcp`: Self = "_ddm-rdb._tcp"
    /// DDM-Remote Relational Database Access 
    public static let `ddmRdbUdp`: Self = "_ddm-rdb._udp"
    /// DDM-Distributed File Management [Steven_Ritland]
    public static let `ddmDfmTcp`: Self = "_ddm-dfm._tcp"
    /// DDM-Distributed File Management [Steven_Ritland]
    public static let `ddmDfmUdp`: Self = "_ddm-dfm._udp"
    /// DDM-Remote DB Access Using Secure Sockets [Steven_Ritland]
    public static let `ddmSslTcp`: Self = "_ddm-ssl._tcp"
    /// DDM-Remote DB Access Using Secure Sockets [Steven_Ritland]
    public static let `ddmSslUdp`: Self = "_ddm-ssl._udp"
    /// AS Server Mapper [Barbara_Foss]
    public static let `asServermapTcp`: Self = "_as-servermap._tcp"
    /// AS Server Mapper [Barbara_Foss]
    public static let `asServermapUdp`: Self = "_as-servermap._udp"
    /// Computer Supported Telecomunication Applications [Harvey_S_Schultz]
    public static let `tserverTcp`: Self = "_tserver._tcp"
    /// Computer Supported Telecomunication Applications [Harvey_S_Schultz]
    public static let `tserverUdp`: Self = "_tserver._udp"
    /// Cray Network Semaphore server 
    public static let `sfsSmpNetTcp`: Self = "_sfs-smp-net._tcp"
    /// Cray Network Semaphore server 
    public static let `sfsSmpNetUdp`: Self = "_sfs-smp-net._udp"
    /// Cray SFS config server [Walter_Poxon]
    public static let `sfsConfigTcp`: Self = "_sfs-config._tcp"
    /// Cray SFS config server [Walter_Poxon]
    public static let `sfsConfigUdp`: Self = "_sfs-config._udp"
    /// CreativeServer 
    public static let `creativeserverTcp`: Self = "_creativeserver._tcp"
    /// CreativeServer 
    public static let `creativeserverUdp`: Self = "_creativeserver._udp"
    /// ContentServer 
    public static let `contentserverTcp`: Self = "_contentserver._tcp"
    /// ContentServer 
    public static let `contentserverUdp`: Self = "_contentserver._udp"
    /// CreativePartnr [Jesus_Ortiz]
    public static let `creativepartnrTcp`: Self = "_creativepartnr._tcp"
    /// CreativePartnr [Jesus_Ortiz]
    public static let `creativepartnrUdp`: Self = "_creativepartnr._udp"
    /// macon-tcp [Yoshinobu_Inoue]
    public static let `maconTcpTcp`: Self = "_macon-tcp._tcp"
    /// macon-udp [Yoshinobu_Inoue]
    public static let `maconUdpUdp`: Self = "_macon-udp._udp"
    /// scohelp [Faith_Zack]
    public static let `scohelpTcp`: Self = "_scohelp._tcp"
    /// scohelp [Faith_Zack]
    public static let `scohelpUdp`: Self = "_scohelp._udp"
    /// apple quick time [Murali_Ranganathan]
    public static let `appleqtcTcp`: Self = "_appleqtc._tcp"
    /// apple quick time [Murali_Ranganathan]
    public static let `appleqtcUdp`: Self = "_appleqtc._udp"
    /// ampr-rcmd [Rob_Janssen]
    public static let `amprRcmdTcp`: Self = "_ampr-rcmd._tcp"
    /// ampr-rcmd [Rob_Janssen]
    public static let `amprRcmdUdp`: Self = "_ampr-rcmd._udp"
    /// skronk [Henry_Strickland]
    public static let `skronkTcp`: Self = "_skronk._tcp"
    /// skronk [Henry_Strickland]
    public static let `skronkUdp`: Self = "_skronk._udp"
    /// DataRampSrv 
    public static let `datasurfsrvTcp`: Self = "_datasurfsrv._tcp"
    /// DataRampSrv 
    public static let `datasurfsrvUdp`: Self = "_datasurfsrv._udp"
    /// DataRampSrvSec [Diane_Downie]
    public static let `datasurfsrvsecTcp`: Self = "_datasurfsrvsec._tcp"
    /// DataRampSrvSec [Diane_Downie]
    public static let `datasurfsrvsecUdp`: Self = "_datasurfsrvsec._udp"
    /// alpes [Alain_Durand]
    public static let `alpesTcp`: Self = "_alpes._tcp"
    /// alpes [Alain_Durand]
    public static let `alpesUdp`: Self = "_alpes._udp"
    /// kpasswd [Theodore_Ts_o]
    public static let `kpasswdTcp`: Self = "_kpasswd._tcp"
    /// kpasswd [Theodore_Ts_o]
    public static let `kpasswdUdp`: Self = "_kpasswd._udp"
    /// URL Rendezvous Directory for SSM [Toerless_Eckert]
    public static let `urdTcp`: Self = "_urd._tcp"
    /// Message Submission over TLS protocol [IESG]
    public static let `submissionsTcp`: Self = "_submissions._tcp"
    /// IGMP over UDP for SSM [Toerless_Eckert]
    public static let `igmpv3liteUdp`: Self = "_igmpv3lite._udp"
    /// digital-vrc [Peter_Higginson]
    public static let `digitalVrcTcp`: Self = "_digital-vrc._tcp"
    /// digital-vrc [Peter_Higginson]
    public static let `digitalVrcUdp`: Self = "_digital-vrc._udp"
    /// mylex-mapd [Gary_Lewis]
    public static let `mylexMapdTcp`: Self = "_mylex-mapd._tcp"
    /// mylex-mapd [Gary_Lewis]
    public static let `mylexMapdUdp`: Self = "_mylex-mapd._udp"
    /// proturis [Bill_Simpson_2]
    public static let `photurisTcp`: Self = "_photuris._tcp"
    /// proturis [Bill_Simpson_2]
    public static let `photurisUdp`: Self = "_photuris._udp"
    /// Radio Control Protocol [Jim_Jennings]
    public static let `rcpTcp`: Self = "_rcp._tcp"
    /// Radio Control Protocol [Jim_Jennings]
    public static let `rcpUdp`: Self = "_rcp._udp"
    /// scx-proxy [Scott_Narveson]
    public static let `scxProxyTcp`: Self = "_scx-proxy._tcp"
    /// scx-proxy [Scott_Narveson]
    public static let `scxProxyUdp`: Self = "_scx-proxy._udp"
    /// Mondex [Bill_Reding]
    public static let `mondexTcp`: Self = "_mondex._tcp"
    /// Mondex [Bill_Reding]
    public static let `mondexUdp`: Self = "_mondex._udp"
    /// ljk-login [LJK]
    public static let `ljkLoginTcp`: Self = "_ljk-login._tcp"
    /// ljk-login [LJK]
    public static let `ljkLoginUdp`: Self = "_ljk-login._udp"
    /// hybrid-pop [Rami_Rubin]
    public static let `hybridPopTcp`: Self = "_hybrid-pop._tcp"
    /// hybrid-pop [Rami_Rubin]
    public static let `hybridPopUdp`: Self = "_hybrid-pop._udp"
    /// tn-tl-w1 
    public static let `tnTlW1Tcp`: Self = "_tn-tl-w1._tcp"
    /// tn-tl-w2 [Ed_Kress]
    public static let `tnTlW2Udp`: Self = "_tn-tl-w2._udp"
    /// tcpnethaspsrv [Michael_Zunke]
    public static let `tcpnethaspsrvTcp`: Self = "_tcpnethaspsrv._tcp"
    /// tcpnethaspsrv [Michael_Zunke]
    public static let `tcpnethaspsrvUdp`: Self = "_tcpnethaspsrv._udp"
    /// tn-tl-fd1 [Ed_Kress]
    public static let `tnTlFd1Tcp`: Self = "_tn-tl-fd1._tcp"
    /// tn-tl-fd1 [Ed_Kress]
    public static let `tnTlFd1Udp`: Self = "_tn-tl-fd1._udp"
    /// ss7ns [Jean_Michel_URSCH]
    public static let `ss7nsTcp`: Self = "_ss7ns._tcp"
    /// ss7ns [Jean_Michel_URSCH]
    public static let `ss7nsUdp`: Self = "_ss7ns._udp"
    /// spsc [Mike_Rieker]
    public static let `spscTcp`: Self = "_spsc._tcp"
    /// spsc [Mike_Rieker]
    public static let `spscUdp`: Self = "_spsc._udp"
    /// iafserver 
    public static let `iafserverTcp`: Self = "_iafserver._tcp"
    /// iafserver 
    public static let `iafserverUdp`: Self = "_iafserver._udp"
    /// iafdbase [Rick_Yazwinski]
    public static let `iafdbaseTcp`: Self = "_iafdbase._tcp"
    /// iafdbase [Rick_Yazwinski]
    public static let `iafdbaseUdp`: Self = "_iafdbase._udp"
    /// Ph service [Roland_Hedberg]
    public static let `phTcp`: Self = "_ph._tcp"
    /// Ph service [Roland_Hedberg]
    public static let `phUdp`: Self = "_ph._udp"
    /// bgs-nsi [Jon_Saperia]
    public static let `bgsNsiTcp`: Self = "_bgs-nsi._tcp"
    /// bgs-nsi [Jon_Saperia]
    public static let `bgsNsiUdp`: Self = "_bgs-nsi._udp"
    /// ulpnet [Kevin_Mooney]
    public static let `ulpnetTcp`: Self = "_ulpnet._tcp"
    /// ulpnet [Kevin_Mooney]
    public static let `ulpnetUdp`: Self = "_ulpnet._udp"
    /// Integra Software Management Environment [Randall_Dow]
    public static let `integraSmeTcp`: Self = "_integra-sme._tcp"
    /// Integra Software Management Environment [Randall_Dow]
    public static let `integraSmeUdp`: Self = "_integra-sme._udp"
    /// Air Soft Power Burst [gary]
    public static let `powerburstTcp`: Self = "_powerburst._tcp"
    /// Air Soft Power Burst [gary]
    public static let `powerburstUdp`: Self = "_powerburst._udp"
    /// avian [Robert_Ullmann_2]
    public static let `avianTcp`: Self = "_avian._tcp"
    /// avian [Robert_Ullmann_2]
    public static let `avianUdp`: Self = "_avian._udp"
    /// saft Simple Asynchronous File Transfer [Ulli_Horlacher]
    public static let `saftTcp`: Self = "_saft._tcp"
    /// saft Simple Asynchronous File Transfer [Ulli_Horlacher]
    public static let `saftUdp`: Self = "_saft._udp"
    /// gss-http [Doug_Rosenthal]
    public static let `gssHttpTcp`: Self = "_gss-http._tcp"
    /// gss-http [Doug_Rosenthal]
    public static let `gssHttpUdp`: Self = "_gss-http._udp"
    /// nest-protocol [Gilles_Gameiro]
    public static let `nestProtocolTcp`: Self = "_nest-protocol._tcp"
    /// nest-protocol [Gilles_Gameiro]
    public static let `nestProtocolUdp`: Self = "_nest-protocol._udp"
    /// micom-pfs [David_Misunas]
    public static let `micomPfsTcp`: Self = "_micom-pfs._tcp"
    /// micom-pfs [David_Misunas]
    public static let `micomPfsUdp`: Self = "_micom-pfs._udp"
    /// go-login [Troy_Morrison]
    public static let `goLoginTcp`: Self = "_go-login._tcp"
    /// go-login [Troy_Morrison]
    public static let `goLoginUdp`: Self = "_go-login._udp"
    /// Transport Independent Convergence for FNA 
    public static let `ticf1Tcp`: Self = "_ticf-1._tcp"
    /// Transport Independent Convergence for FNA 
    public static let `ticf1Udp`: Self = "_ticf-1._udp"
    /// Transport Independent Convergence for FNA [Mamoru_Ito]
    public static let `ticf2Tcp`: Self = "_ticf-2._tcp"
    /// Transport Independent Convergence for FNA [Mamoru_Ito]
    public static let `ticf2Udp`: Self = "_ticf-2._udp"
    /// POV-Ray [POV_Team_Co_ordinato]
    public static let `povRayTcp`: Self = "_pov-ray._tcp"
    /// POV-Ray [POV_Team_Co_ordinato]
    public static let `povRayUdp`: Self = "_pov-ray._udp"
    /// intecourier [Steve_Favor]
    public static let `intecourierTcp`: Self = "_intecourier._tcp"
    /// intecourier [Steve_Favor]
    public static let `intecourierUdp`: Self = "_intecourier._udp"
    /// PIM-RP-DISC [Dino_Farinacci]
    public static let `pimRpDiscTcp`: Self = "_pim-rp-disc._tcp"
    /// PIM-RP-DISC [Dino_Farinacci]
    public static let `pimRpDiscUdp`: Self = "_pim-rp-disc._udp"
    /// Retrospect backup and restore service [Retrospect_Inc]
    public static let `retrospectTcp`: Self = "_retrospect._tcp"
    /// Retrospect backup and restore service [Retrospect_Inc]
    public static let `retrospectUdp`: Self = "_retrospect._udp"
    /// siam [Philippe_Gilbert]
    public static let `siamTcp`: Self = "_siam._tcp"
    /// siam [Philippe_Gilbert]
    public static let `siamUdp`: Self = "_siam._udp"
    /// ISO ILL Protocol [Mark_H_Needleman]
    public static let `isoIllTcp`: Self = "_iso-ill._tcp"
    /// ISO ILL Protocol [Mark_H_Needleman]
    public static let `isoIllUdp`: Self = "_iso-ill._udp"
    /// isakmp [Mark_Schertler]
    public static let `isakmpTcp`: Self = "_isakmp._tcp"
    /// isakmp [Mark_Schertler]
    public static let `isakmpUdp`: Self = "_isakmp._udp"
    /// STMF [Alan_Ungar]
    public static let `stmfTcp`: Self = "_stmf._tcp"
    /// STMF [Alan_Ungar]
    public static let `stmfUdp`: Self = "_stmf._udp"
    /// Modbus Application Protocol [modbus.org]
    public static let `mbapTcp`: Self = "_mbap._tcp"
    /// Modbus Application Protocol [modbus.org]
    public static let `mbapUdp`: Self = "_mbap._udp"
    /// Intrinsa [Robert_Ford]
    public static let `intrinsaTcp`: Self = "_intrinsa._tcp"
    /// Intrinsa [Robert_Ford]
    public static let `intrinsaUdp`: Self = "_intrinsa._udp"
    /// citadel [Art_Cancro]
    public static let `citadelTcp`: Self = "_citadel._tcp"
    /// citadel [Art_Cancro]
    public static let `citadelUdp`: Self = "_citadel._udp"
    /// mailbox-lm [Beverly_Moody]
    public static let `mailboxLmTcp`: Self = "_mailbox-lm._tcp"
    /// mailbox-lm [Beverly_Moody]
    public static let `mailboxLmUdp`: Self = "_mailbox-lm._udp"
    /// ohimsrv [Scott_Powell]
    public static let `ohimsrvTcp`: Self = "_ohimsrv._tcp"
    /// ohimsrv [Scott_Powell]
    public static let `ohimsrvUdp`: Self = "_ohimsrv._udp"
    /// crs [Brad_Wright]
    public static let `crsTcp`: Self = "_crs._tcp"
    /// crs [Brad_Wright]
    public static let `crsUdp`: Self = "_crs._udp"
    /// xvttp [Keith_J_Alphonso]
    public static let `xvttpTcp`: Self = "_xvttp._tcp"
    /// xvttp [Keith_J_Alphonso]
    public static let `xvttpUdp`: Self = "_xvttp._udp"
    /// snare [Dennis_Batchelder]
    public static let `snareTcp`: Self = "_snare._tcp"
    /// snare [Dennis_Batchelder]
    public static let `snareUdp`: Self = "_snare._udp"
    /// FirstClass Protocol [Mike_Marshburn]
    public static let `fcpTcp`: Self = "_fcp._tcp"
    /// FirstClass Protocol [Mike_Marshburn]
    public static let `fcpUdp`: Self = "_fcp._udp"
    /// PassGo [John_Rainford]
    public static let `passgoTcp`: Self = "_passgo._tcp"
    /// PassGo [John_Rainford]
    public static let `passgoUdp`: Self = "_passgo._udp"
    /// remote process execution; authentication performed using passwords and UNIX login names 
    public static let `execTcp`: Self = "_exec._tcp"
    ///  
    public static let `comsatUdp`: Self = "_comsat._udp"
    /// used by mail system to notify users of new mail received; currently receives messages only from processes on the same machine 
    public static let `biffUdp`: Self = "_biff._udp"
    /// remote login a la telnet; automatic authentication performed based on priviledged port numbers and distributed data bases which identify "authentication domains" 
    public static let `loginTcp`: Self = "_login._tcp"
    /// maintains data bases showing who's logged in to machines on a local net and the load average of the machine 
    public static let `whoUdp`: Self = "_who._udp"
    /// cmd like exec, but automatic authentication is performed as for login server 
    public static let `shellTcp`: Self = "_shell._tcp"
    ///  
    public static let `syslogUdp`: Self = "_syslog._udp"
    /// spooler 
    public static let `printerTcp`: Self = "_printer._tcp"
    /// spooler 
    public static let `printerUdp`: Self = "_printer._udp"
    /// videotex [Daniel_Mavrakis]
    public static let `videotexTcp`: Self = "_videotex._tcp"
    /// videotex [Daniel_Mavrakis]
    public static let `videotexUdp`: Self = "_videotex._udp"
    /// like tenex link, but across machine - unfortunately, doesn't use link protocol (this is actually just a rendezvous port from which a tcp connection is established) 
    public static let `talkTcp`: Self = "_talk._tcp"
    /// like tenex link, but across machine - unfortunately, doesn't use link protocol (this is actually just a rendezvous port from which a tcp connection is established) 
    public static let `talkUdp`: Self = "_talk._udp"
    ///  
    public static let `ntalkTcp`: Self = "_ntalk._tcp"
    ///  
    public static let `ntalkUdp`: Self = "_ntalk._udp"
    /// unixtime 
    public static let `utimeTcp`: Self = "_utime._tcp"
    /// unixtime 
    public static let `utimeUdp`: Self = "_utime._udp"
    /// extended file name server 
    public static let `efsTcp`: Self = "_efs._tcp"
    /// local routing process (on site); uses variant of Xerox NS routing information protocol - RIP 
    public static let `routerUdp`: Self = "_router._udp"
    /// ripng [Robert_E_Minnear]
    public static let `ripngTcp`: Self = "_ripng._tcp"
    /// ripng [Robert_E_Minnear]
    public static let `ripngUdp`: Self = "_ripng._udp"
    /// ULP [Max_Morris]
    public static let `ulpTcp`: Self = "_ulp._tcp"
    /// ULP [Max_Morris]
    public static let `ulpUdp`: Self = "_ulp._udp"
    /// IBM-DB2 [Juliana_Hsu]
    public static let `ibmDb2Tcp`: Self = "_ibm-db2._tcp"
    /// IBM-DB2 [Juliana_Hsu]
    public static let `ibmDb2Udp`: Self = "_ibm-db2._udp"
    /// NCP [Don_Provan_2]
    public static let `ncpTcp`: Self = "_ncp._tcp"
    /// NCP [Don_Provan_2]
    public static let `ncpUdp`: Self = "_ncp._udp"
    /// timeserver 
    public static let `timedTcp`: Self = "_timed._tcp"
    /// timeserver 
    public static let `timedUdp`: Self = "_timed._udp"
    /// newdate 
    public static let `tempoTcp`: Self = "_tempo._tcp"
    /// newdate 
    public static let `tempoUdp`: Self = "_tempo._udp"
    /// Stock IXChange [Ferdi_Ladeira]
    public static let `stxTcp`: Self = "_stx._tcp"
    /// Stock IXChange [Ferdi_Ladeira]
    public static let `stxUdp`: Self = "_stx._udp"
    /// Customer IXChange [Ferdi_Ladeira]
    public static let `custixTcp`: Self = "_custix._tcp"
    /// Customer IXChange [Ferdi_Ladeira]
    public static let `custixUdp`: Self = "_custix._udp"
    /// IRC-SERV [Brian_Tackett]
    public static let `ircServTcp`: Self = "_irc-serv._tcp"
    /// IRC-SERV [Brian_Tackett]
    public static let `ircServUdp`: Self = "_irc-serv._udp"
    /// rpc 
    public static let `courierTcp`: Self = "_courier._tcp"
    /// rpc 
    public static let `courierUdp`: Self = "_courier._udp"
    /// chat 
    public static let `conferenceTcp`: Self = "_conference._tcp"
    /// chat 
    public static let `conferenceUdp`: Self = "_conference._udp"
    /// readnews 
    public static let `netnewsTcp`: Self = "_netnews._tcp"
    /// readnews 
    public static let `netnewsUdp`: Self = "_netnews._udp"
    /// for emergency broadcasts [Andreas_Heidemann]
    public static let `netwallTcp`: Self = "_netwall._tcp"
    /// for emergency broadcasts [Andreas_Heidemann]
    public static let `netwallUdp`: Self = "_netwall._udp"
    /// windream Admin [Uwe_Honermann]
    public static let `windreamTcp`: Self = "_windream._tcp"
    /// windream Admin [Uwe_Honermann]
    public static let `windreamUdp`: Self = "_windream._udp"
    /// iiop [Jeff_M_Michaud]
    public static let `iiopTcp`: Self = "_iiop._tcp"
    /// iiop [Jeff_M_Michaud]
    public static let `iiopUdp`: Self = "_iiop._udp"
    /// opalis-rdv [Laurent_Domenech]
    public static let `opalisRdvTcp`: Self = "_opalis-rdv._tcp"
    /// opalis-rdv [Laurent_Domenech]
    public static let `opalisRdvUdp`: Self = "_opalis-rdv._udp"
    /// Networked Media Streaming Protocol [Paul_Santinelli_Jr]
    public static let `nmspTcp`: Self = "_nmsp._tcp"
    /// Networked Media Streaming Protocol [Paul_Santinelli_Jr]
    public static let `nmspUdp`: Self = "_nmsp._udp"
    /// gdomap [Richard_Frith_Macdon]
    public static let `gdomapTcp`: Self = "_gdomap._tcp"
    /// gdomap [Richard_Frith_Macdon]
    public static let `gdomapUdp`: Self = "_gdomap._udp"
    /// Apertus Technologies Load Determination 
    public static let `apertusLdpTcp`: Self = "_apertus-ldp._tcp"
    /// Apertus Technologies Load Determination 
    public static let `apertusLdpUdp`: Self = "_apertus-ldp._udp"
    /// uucpd 
    public static let `uucpTcp`: Self = "_uucp._tcp"
    /// uucpd 
    public static let `uucpUdp`: Self = "_uucp._udp"
    /// uucp-rlogin [Stuart_Lynne]
    public static let `uucpRloginTcp`: Self = "_uucp-rlogin._tcp"
    /// uucp-rlogin [Stuart_Lynne]
    public static let `uucpRloginUdp`: Self = "_uucp-rlogin._udp"
    /// commerce [Randy_Epstein]
    public static let `commerceTcp`: Self = "_commerce._tcp"
    /// commerce [Randy_Epstein]
    public static let `commerceUdp`: Self = "_commerce._udp"
    ///  
    public static let `kloginTcp`: Self = "_klogin._tcp"
    ///  
    public static let `kloginUdp`: Self = "_klogin._udp"
    /// krcmd 
    public static let `kshellTcp`: Self = "_kshell._tcp"
    /// krcmd 
    public static let `kshellUdp`: Self = "_kshell._udp"
    /// appleqtcsrvr [Murali_Ranganathan]
    public static let `appleqtcsrvrTcp`: Self = "_appleqtcsrvr._tcp"
    /// appleqtcsrvr [Murali_Ranganathan]
    public static let `appleqtcsrvrUdp`: Self = "_appleqtcsrvr._udp"
    /// DHCPv6 Client 
    public static let `dhcpv6ClientTcp`: Self = "_dhcpv6-client._tcp"
    /// DHCPv6 Client [IESG]
    public static let `dhcpv6ClientUdp`: Self = "_dhcpv6-client._udp"
    /// DHCPv6 Server [IESG]
    public static let `dhcpv6ServerTcp`: Self = "_dhcpv6-server._tcp"
    /// DHCPv6 Server [IESG]
    public static let `dhcpv6ServerUdp`: Self = "_dhcpv6-server._udp"
    /// AFP over TCP [Leland_Wallace]
    public static let `afpovertcpTcp`: Self = "_afpovertcp._tcp"
    /// AFP over TCP [Leland_Wallace]
    public static let `afpovertcpUdp`: Self = "_afpovertcp._udp"
    /// IDFP [Ramana_Kovi]
    public static let `idfpTcp`: Self = "_idfp._tcp"
    /// IDFP [Ramana_Kovi]
    public static let `idfpUdp`: Self = "_idfp._udp"
    /// new-who 
    public static let `newRwhoTcp`: Self = "_new-rwho._tcp"
    /// new-who 
    public static let `newRwhoUdp`: Self = "_new-rwho._udp"
    /// cybercash [Donald_E_Eastlake]
    public static let `cybercashTcp`: Self = "_cybercash._tcp"
    /// cybercash [Donald_E_Eastlake]
    public static let `cybercashUdp`: Self = "_cybercash._udp"
    /// DeviceShare [Benjamin_Rosenberg]
    public static let `devshrNtsTcp`: Self = "_devshr-nts._tcp"
    /// DeviceShare [Benjamin_Rosenberg]
    public static let `devshrNtsUdp`: Self = "_devshr-nts._udp"
    /// pirp [D_J_Bernstein]
    public static let `pirpTcp`: Self = "_pirp._tcp"
    /// pirp [D_J_Bernstein]
    public static let `pirpUdp`: Self = "_pirp._udp"
    /// Real Time Streaming Protocol (RTSP) [Rob_Lanphier]
    public static let `rtspTcp`: Self = "_rtsp._tcp"
    /// Real Time Streaming Protocol (RTSP) [Rob_Lanphier]
    public static let `rtspUdp`: Self = "_rtsp._udp"
    ///  
    public static let `dsfTcp`: Self = "_dsf._tcp"
    ///  
    public static let `dsfUdp`: Self = "_dsf._udp"
    /// rfs server 
    public static let `remotefsTcp`: Self = "_remotefs._tcp"
    /// rfs server 
    public static let `remotefsUdp`: Self = "_remotefs._udp"
    /// openvms-sysipc [Alan_Potter]
    public static let `openvmsSysipcTcp`: Self = "_openvms-sysipc._tcp"
    /// openvms-sysipc [Alan_Potter]
    public static let `openvmsSysipcUdp`: Self = "_openvms-sysipc._udp"
    /// SDNSKMP 
    public static let `sdnskmpTcp`: Self = "_sdnskmp._tcp"
    /// SDNSKMP 
    public static let `sdnskmpUdp`: Self = "_sdnskmp._udp"
    /// TEEDTAP [Charlie_Limoges]
    public static let `teedtapTcp`: Self = "_teedtap._tcp"
    /// TEEDTAP [Charlie_Limoges]
    public static let `teedtapUdp`: Self = "_teedtap._udp"
    /// rmonitord 
    public static let `rmonitorTcp`: Self = "_rmonitor._tcp"
    /// rmonitord 
    public static let `rmonitorUdp`: Self = "_rmonitor._udp"
    ///  
    public static let `monitorTcp`: Self = "_monitor._tcp"
    ///  
    public static let `monitorUdp`: Self = "_monitor._udp"
    /// chcmd 
    public static let `chshellTcp`: Self = "_chshell._tcp"
    /// chcmd 
    public static let `chshellUdp`: Self = "_chshell._udp"
    /// nntp protocol over TLS/SSL (was snntp) [IESG]
    public static let `nntpsTcp`: Self = "_nntps._tcp"
    /// nntp protocol over TLS/SSL (was snntp) [IESG]
    public static let `nntpsUdp`: Self = "_nntps._udp"
    /// whoami 
    public static let `whoamiTcp`: Self = "_whoami._tcp"
    /// whoami 
    public static let `whoamiUdp`: Self = "_whoami._udp"
    /// streettalk 
    public static let `streettalkTcp`: Self = "_streettalk._tcp"
    /// streettalk 
    public static let `streettalkUdp`: Self = "_streettalk._udp"
    /// banyan-rpc [Tom_Lemaire]
    public static let `banyanRpcTcp`: Self = "_banyan-rpc._tcp"
    /// banyan-rpc [Tom_Lemaire]
    public static let `banyanRpcUdp`: Self = "_banyan-rpc._udp"
    /// microsoft shuttle [Rudolph_Balaz]
    public static let `msShuttleTcp`: Self = "_ms-shuttle._tcp"
    /// microsoft shuttle [Rudolph_Balaz]
    public static let `msShuttleUdp`: Self = "_ms-shuttle._udp"
    /// microsoft rome [Rudolph_Balaz]
    public static let `msRomeTcp`: Self = "_ms-rome._tcp"
    /// microsoft rome [Rudolph_Balaz]
    public static let `msRomeUdp`: Self = "_ms-rome._udp"
    /// demon 
    public static let `meterTcp`: Self = "_meter._tcp"
    /// demon 
    public static let `meterUdp`: Self = "_meter._udp"
    /// sonar [Keith_Moore]
    public static let `sonarTcp`: Self = "_sonar._tcp"
    /// sonar [Keith_Moore]
    public static let `sonarUdp`: Self = "_sonar._udp"
    /// banyan-vip [Denis_Leclerc]
    public static let `banyanVipTcp`: Self = "_banyan-vip._tcp"
    /// banyan-vip [Denis_Leclerc]
    public static let `banyanVipUdp`: Self = "_banyan-vip._udp"
    /// FTP Software Agent System [Michael_S_Greenberg]
    public static let `ftpAgentTcp`: Self = "_ftp-agent._tcp"
    /// FTP Software Agent System [Michael_S_Greenberg]
    public static let `ftpAgentUdp`: Self = "_ftp-agent._udp"
    /// VEMMI [Daniel_Mavrakis_2]
    public static let `vemmiTcp`: Self = "_vemmi._tcp"
    /// VEMMI [Daniel_Mavrakis_2]
    public static let `vemmiUdp`: Self = "_vemmi._udp"
    /// ipcd 
    public static let `ipcdTcp`: Self = "_ipcd._tcp"
    /// ipcd 
    public static let `ipcdUdp`: Self = "_ipcd._udp"
    /// vnas 
    public static let `vnasTcp`: Self = "_vnas._tcp"
    /// vnas 
    public static let `vnasUdp`: Self = "_vnas._udp"
    /// ipdd [Jay_Farhat]
    public static let `ipddTcp`: Self = "_ipdd._tcp"
    /// ipdd [Jay_Farhat]
    public static let `ipddUdp`: Self = "_ipdd._udp"
    /// decbsrv [Rudi_Martin]
    public static let `decbsrvTcp`: Self = "_decbsrv._tcp"
    /// decbsrv [Rudi_Martin]
    public static let `decbsrvUdp`: Self = "_decbsrv._udp"
    /// SNTP HEARTBEAT [Louis_Mamakos_2]
    public static let `sntpHeartbeatTcp`: Self = "_sntp-heartbeat._tcp"
    /// SNTP HEARTBEAT [Louis_Mamakos_2]
    public static let `sntpHeartbeatUdp`: Self = "_sntp-heartbeat._udp"
    /// Bundle Discovery Protocol [Gary_Malkin]
    public static let `bdpTcp`: Self = "_bdp._tcp"
    /// Bundle Discovery Protocol [Gary_Malkin]
    public static let `bdpUdp`: Self = "_bdp._udp"
    /// SCC Security [Prashant_Dholakia]
    public static let `sccSecurityTcp`: Self = "_scc-security._tcp"
    /// SCC Security [Prashant_Dholakia]
    public static let `sccSecurityUdp`: Self = "_scc-security._udp"
    /// Philips Video-Conferencing [Janna_Chang]
    public static let `philipsVcTcp`: Self = "_philips-vc._tcp"
    /// Philips Video-Conferencing [Janna_Chang]
    public static let `philipsVcUdp`: Self = "_philips-vc._udp"
    /// Key Server [Gary_Howland]
    public static let `keyserverTcp`: Self = "_keyserver._tcp"
    /// Key Server [Gary_Howland]
    public static let `keyserverUdp`: Self = "_keyserver._udp"
    /// Password Change 
    public static let `passwordChgTcp`: Self = "_password-chg._tcp"
    /// Password Change 
    public static let `passwordChgUdp`: Self = "_password-chg._udp"
    /// Message Submission 
    public static let `submissionTcp`: Self = "_submission._tcp"
    /// Message Submission 
    public static let `submissionUdp`: Self = "_submission._udp"
    /// CAL [Myron_Hattig]
    public static let `calTcp`: Self = "_cal._tcp"
    /// CAL [Myron_Hattig]
    public static let `calUdp`: Self = "_cal._udp"
    /// EyeLink [Dave_Stampe]
    public static let `eyelinkTcp`: Self = "_eyelink._tcp"
    /// EyeLink [Dave_Stampe]
    public static let `eyelinkUdp`: Self = "_eyelink._udp"
    /// TNS CML [Jerome_Albin]
    public static let `tnsCmlTcp`: Self = "_tns-cml._tcp"
    /// TNS CML [Jerome_Albin]
    public static let `tnsCmlUdp`: Self = "_tns-cml._udp"
    /// FileMaker, Inc. - HTTP Alternate (see Port 80) [Clay_Maeckel]
    public static let `httpAltTcp`: Self = "_http-alt._tcp"
    /// FileMaker, Inc. - HTTP Alternate (see Port 80) [Clay_Maeckel]
    public static let `httpAltUdp`: Self = "_http-alt._udp"
    /// Eudora Set [Randall_Gellens]
    public static let `eudoraSetTcp`: Self = "_eudora-set._tcp"
    /// Eudora Set [Randall_Gellens]
    public static let `eudoraSetUdp`: Self = "_eudora-set._udp"
    /// HTTP RPC Ep Map [Edward_Reus]
    public static let `httpRpcEpmapTcp`: Self = "_http-rpc-epmap._tcp"
    /// HTTP RPC Ep Map [Edward_Reus]
    public static let `httpRpcEpmapUdp`: Self = "_http-rpc-epmap._udp"
    /// TPIP [Brad_Spear]
    public static let `tpipTcp`: Self = "_tpip._tcp"
    /// TPIP [Brad_Spear]
    public static let `tpipUdp`: Self = "_tpip._udp"
    /// CAB Protocol [Winston_Hetherington]
    public static let `cabProtocolTcp`: Self = "_cab-protocol._tcp"
    /// CAB Protocol [Winston_Hetherington]
    public static let `cabProtocolUdp`: Self = "_cab-protocol._udp"
    /// SMSD [Wayne_Barlow]
    public static let `smsdTcp`: Self = "_smsd._tcp"
    /// SMSD [Wayne_Barlow]
    public static let `smsdUdp`: Self = "_smsd._udp"
    /// PTC Name Service [Yuri_Machkasov]
    public static let `ptcnameserviceTcp`: Self = "_ptcnameservice._tcp"
    /// PTC Name Service [Yuri_Machkasov]
    public static let `ptcnameserviceUdp`: Self = "_ptcnameservice._udp"
    /// SCO Web Server Manager 3 [Simon_Baldwin]
    public static let `scoWebsrvrmg3Tcp`: Self = "_sco-websrvrmg3._tcp"
    /// SCO Web Server Manager 3 [Simon_Baldwin]
    public static let `scoWebsrvrmg3Udp`: Self = "_sco-websrvrmg3._udp"
    /// Aeolon Core Protocol [Michael_Alyn_Miller]
    public static let `acpTcp`: Self = "_acp._tcp"
    /// Aeolon Core Protocol [Michael_Alyn_Miller]
    public static let `acpUdp`: Self = "_acp._udp"
    /// Sun IPC server [Bill_Schiefelbein]
    public static let `ipcserverTcp`: Self = "_ipcserver._tcp"
    /// Sun IPC server [Bill_Schiefelbein]
    public static let `ipcserverUdp`: Self = "_ipcserver._udp"
    /// Reliable Syslog Service 
    public static let `syslogConnTcp`: Self = "_syslog-conn._tcp"
    /// Reliable Syslog Service 
    public static let `syslogConnUdp`: Self = "_syslog-conn._udp"
    /// XML-RPC over BEEP 
    public static let `xmlrpcBeepTcp`: Self = "_xmlrpc-beep._tcp"
    /// XML-RPC over BEEP 
    public static let `xmlrpcBeepUdp`: Self = "_xmlrpc-beep._udp"
    /// IDXP 
    public static let `idxpTcp`: Self = "_idxp._tcp"
    /// IDXP 
    public static let `idxpUdp`: Self = "_idxp._udp"
    /// TUNNEL 
    public static let `tunnelTcp`: Self = "_tunnel._tcp"
    /// TUNNEL 
    public static let `tunnelUdp`: Self = "_tunnel._udp"
    /// SOAP over BEEP 
    public static let `soapBeepTcp`: Self = "_soap-beep._tcp"
    /// SOAP over BEEP 
    public static let `soapBeepUdp`: Self = "_soap-beep._udp"
    /// Cray Unified Resource Manager 
    public static let `urmTcp`: Self = "_urm._tcp"
    /// Cray Unified Resource Manager 
    public static let `urmUdp`: Self = "_urm._udp"
    /// nqs [Bill_Schiefelbein]
    public static let `nqsTcp`: Self = "_nqs._tcp"
    /// nqs [Bill_Schiefelbein]
    public static let `nqsUdp`: Self = "_nqs._udp"
    /// Sender-Initiated/Unsolicited File Transfer [Rick_Troth]
    public static let `siftUftTcp`: Self = "_sift-uft._tcp"
    /// Sender-Initiated/Unsolicited File Transfer [Rick_Troth]
    public static let `siftUftUdp`: Self = "_sift-uft._udp"
    /// npmp-trap 
    public static let `npmpTrapTcp`: Self = "_npmp-trap._tcp"
    /// npmp-trap 
    public static let `npmpTrapUdp`: Self = "_npmp-trap._udp"
    /// npmp-local 
    public static let `npmpLocalTcp`: Self = "_npmp-local._tcp"
    /// npmp-local 
    public static let `npmpLocalUdp`: Self = "_npmp-local._udp"
    /// npmp-gui [John_Barnes]
    public static let `npmpGuiTcp`: Self = "_npmp-gui._tcp"
    /// npmp-gui [John_Barnes]
    public static let `npmpGuiUdp`: Self = "_npmp-gui._udp"
    /// HMMP Indication 
    public static let `hmmpIndTcp`: Self = "_hmmp-ind._tcp"
    /// HMMP Indication 
    public static let `hmmpIndUdp`: Self = "_hmmp-ind._udp"
    /// HMMP Operation [Andrew_Sinclair]
    public static let `hmmpOpTcp`: Self = "_hmmp-op._tcp"
    /// HMMP Operation [Andrew_Sinclair]
    public static let `hmmpOpUdp`: Self = "_hmmp-op._udp"
    /// SSLshell [Simon_J_Gerraty]
    public static let `sshellTcp`: Self = "_sshell._tcp"
    /// SSLshell [Simon_J_Gerraty]
    public static let `sshellUdp`: Self = "_sshell._udp"
    /// Internet Configuration Manager 
    public static let `scoInetmgrTcp`: Self = "_sco-inetmgr._tcp"
    /// Internet Configuration Manager 
    public static let `scoInetmgrUdp`: Self = "_sco-inetmgr._udp"
    /// SCO System Administration Server 
    public static let `scoSysmgrTcp`: Self = "_sco-sysmgr._tcp"
    /// SCO System Administration Server 
    public static let `scoSysmgrUdp`: Self = "_sco-sysmgr._udp"
    /// SCO Desktop Administration Server [Christopher_Durham]
    public static let `scoDtmgrTcp`: Self = "_sco-dtmgr._tcp"
    /// SCO Desktop Administration Server [Christopher_Durham]
    public static let `scoDtmgrUdp`: Self = "_sco-dtmgr._udp"
    /// DEI-ICDA [David_Turner]
    public static let `deiIcdaTcp`: Self = "_dei-icda._tcp"
    /// DEI-ICDA [David_Turner]
    public static let `deiIcdaUdp`: Self = "_dei-icda._udp"
    /// Compaq EVM [Jem_Treadwell]
    public static let `compaqEvmTcp`: Self = "_compaq-evm._tcp"
    /// Compaq EVM [Jem_Treadwell]
    public static let `compaqEvmUdp`: Self = "_compaq-evm._udp"
    /// SCO WebServer Manager [Christopher_Durham]
    public static let `scoWebsrvrmgrTcp`: Self = "_sco-websrvrmgr._tcp"
    /// SCO WebServer Manager [Christopher_Durham]
    public static let `scoWebsrvrmgrUdp`: Self = "_sco-websrvrmgr._udp"
    /// ESCP [Lai_Zit_Seng]
    public static let `escpIpTcp`: Self = "_escp-ip._tcp"
    /// ESCP [Lai_Zit_Seng]
    public static let `escpIpUdp`: Self = "_escp-ip._udp"
    /// Collaborator [Johnson_Davis]
    public static let `collaboratorTcp`: Self = "_collaborator._tcp"
    /// Collaborator [Johnson_Davis]
    public static let `collaboratorUdp`: Self = "_collaborator._udp"
    /// DMTF out-of-band web services management protocol [Jim_Davis]
    public static let `oobWsHttpTcp`: Self = "_oob-ws-http._tcp"
    /// ASF Remote Management and Control Protocol [Carl_First]
    public static let `asfRmcpUdp`: Self = "_asf-rmcp._udp"
    /// Crypto Admin [Tony_Walker]
    public static let `cryptoadminTcp`: Self = "_cryptoadmin._tcp"
    /// Crypto Admin [Tony_Walker]
    public static let `cryptoadminUdp`: Self = "_cryptoadmin._udp"
    /// DEC DLM IANA assigned this well-formed service name as a replacement for "dec_dlm". [Rudi_Martin_2]
    public static let `decDlmTcp`: Self = "_dec-dlm._tcp"
    /// DEC DLM [Rudi_Martin_2]
    public static let `dec_dlmTcp`: Self = "_dec_dlm._tcp"
    /// DEC DLM IANA assigned this well-formed service name as a replacement for "dec_dlm". [Rudi_Martin_2]
    public static let `decDlmUdp`: Self = "_dec-dlm._udp"
    /// DEC DLM [Rudi_Martin_2]
    public static let `dec_dlmUdp`: Self = "_dec_dlm._udp"
    /// ASIA [Michael_Dasenbrock]
    public static let `asiaTcp`: Self = "_asia._tcp"
    /// ASIA [Michael_Dasenbrock]
    public static let `asiaUdp`: Self = "_asia._udp"
    /// PassGo Tivoli [John_Rainford_2]
    public static let `passgoTivoliTcp`: Self = "_passgo-tivoli._tcp"
    /// PassGo Tivoli [John_Rainford_2]
    public static let `passgoTivoliUdp`: Self = "_passgo-tivoli._udp"
    /// QMQP [D_J_Bernstein]
    public static let `qmqpTcp`: Self = "_qmqp._tcp"
    /// QMQP [D_J_Bernstein]
    public static let `qmqpUdp`: Self = "_qmqp._udp"
    /// RDA [John_Hadjioannou]
    public static let `rdaTcp`: Self = "_rda._tcp"
    /// RDA [John_Hadjioannou]
    public static let `rdaUdp`: Self = "_rda._udp"
    /// IPP (Internet Printing Protocol) [IESG]
    public static let `ippTcp`: Self = "_ipp._tcp"
    /// IPP (Internet Printing Protocol) [IESG]
    public static let `ippUdp`: Self = "_ipp._udp"
    /// Internet Printing Protocol over HTTPS [IESG]
    public static let `ippsTcp`: Self = "_ipps._tcp"
    /// bmpp [Troy_Rollo]
    public static let `bmppTcp`: Self = "_bmpp._tcp"
    /// bmpp [Troy_Rollo]
    public static let `bmppUdp`: Self = "_bmpp._udp"
    /// Service Status update (Sterling Software) [Greg_Rose]
    public static let `servstatTcp`: Self = "_servstat._tcp"
    /// Service Status update (Sterling Software) [Greg_Rose]
    public static let `servstatUdp`: Self = "_servstat._udp"
    /// ginad [Mark_Crother]
    public static let `ginadTcp`: Self = "_ginad._tcp"
    /// ginad [Mark_Crother]
    public static let `ginadUdp`: Self = "_ginad._udp"
    /// RLZ DBase [Michael_Ginn]
    public static let `rlzdbaseTcp`: Self = "_rlzdbase._tcp"
    /// RLZ DBase [Michael_Ginn]
    public static let `rlzdbaseUdp`: Self = "_rlzdbase._udp"
    /// ldap protocol over TLS/SSL (was sldap) [Pat_Richard]
    public static let `ldapsTcp`: Self = "_ldaps._tcp"
    /// ldap protocol over TLS/SSL (was sldap) [Pat_Richard]
    public static let `ldapsUdp`: Self = "_ldaps._udp"
    /// lanserver [Chris_Larsson]
    public static let `lanserverTcp`: Self = "_lanserver._tcp"
    /// lanserver [Chris_Larsson]
    public static let `lanserverUdp`: Self = "_lanserver._udp"
    /// mcns-sec [Kaz_Ozawa]
    public static let `mcnsSecTcp`: Self = "_mcns-sec._tcp"
    /// mcns-sec [Kaz_Ozawa]
    public static let `mcnsSecUdp`: Self = "_mcns-sec._udp"
    /// MSDP [Dino_Farinacci]
    public static let `msdpTcp`: Self = "_msdp._tcp"
    /// MSDP [Dino_Farinacci]
    public static let `msdpUdp`: Self = "_msdp._udp"
    /// entrust-sps [Marek_Buchler]
    public static let `entrustSpsTcp`: Self = "_entrust-sps._tcp"
    /// entrust-sps [Marek_Buchler]
    public static let `entrustSpsUdp`: Self = "_entrust-sps._udp"
    /// repcmd [Scott_Dale]
    public static let `repcmdTcp`: Self = "_repcmd._tcp"
    /// repcmd [Scott_Dale]
    public static let `repcmdUdp`: Self = "_repcmd._udp"
    /// ESRO-EMSDP V1.3 [Mohsen_Banan_2]
    public static let `esroEmsdpTcp`: Self = "_esro-emsdp._tcp"
    /// ESRO-EMSDP V1.3 [Mohsen_Banan_2]
    public static let `esroEmsdpUdp`: Self = "_esro-emsdp._udp"
    /// SANity [Peter_Viscarola]
    public static let `sanityTcp`: Self = "_sanity._tcp"
    /// SANity [Peter_Viscarola]
    public static let `sanityUdp`: Self = "_sanity._udp"
    /// dwr [Bill_Fenner]
    public static let `dwrTcp`: Self = "_dwr._tcp"
    /// dwr [Bill_Fenner]
    public static let `dwrUdp`: Self = "_dwr._udp"
    /// PSSC [Egon_Meier_Engelen]
    public static let `psscTcp`: Self = "_pssc._tcp"
    /// PSSC [Egon_Meier_Engelen]
    public static let `psscUdp`: Self = "_pssc._udp"
    /// LDP [Bob_Thomas]
    public static let `ldpTcp`: Self = "_ldp._tcp"
    /// LDP [Bob_Thomas]
    public static let `ldpUdp`: Self = "_ldp._udp"
    /// DHCP Failover [IESG]
    public static let `dhcpFailoverTcp`: Self = "_dhcp-failover._tcp"
    /// DHCP Failover [Bernard_Volz]
    public static let `dhcpFailoverUdp`: Self = "_dhcp-failover._udp"
    /// Registry Registrar Protocol (RRP) [Scott_Hollenbeck]
    public static let `rrpTcp`: Self = "_rrp._tcp"
    /// Registry Registrar Protocol (RRP) [Scott_Hollenbeck]
    public static let `rrpUdp`: Self = "_rrp._udp"
    /// Cadview-3d - streaming 3d models over the internet [David_Cooper]
    public static let `cadview3dTcp`: Self = "_cadview-3d._tcp"
    /// Cadview-3d - streaming 3d models over the internet [David_Cooper]
    public static let `cadview3dUdp`: Self = "_cadview-3d._udp"
    /// OBEX [Jeff_Garbers]
    public static let `obexTcp`: Self = "_obex._tcp"
    /// OBEX [Jeff_Garbers]
    public static let `obexUdp`: Self = "_obex._udp"
    /// IEEE MMS [Curtis_Anderson]
    public static let `ieeeMmsTcp`: Self = "_ieee-mms._tcp"
    /// IEEE MMS [Curtis_Anderson]
    public static let `ieeeMmsUdp`: Self = "_ieee-mms._udp"
    /// HELLO_PORT [Patrick_Cipiere]
    public static let `helloPortTcp`: Self = "_hello-port._tcp"
    /// HELLO_PORT [Patrick_Cipiere]
    public static let `helloPortUdp`: Self = "_hello-port._udp"
    /// RepCmd [Scott_Dale_2]
    public static let `repscmdTcp`: Self = "_repscmd._tcp"
    /// RepCmd [Scott_Dale_2]
    public static let `repscmdUdp`: Self = "_repscmd._udp"
    /// AODV [Charles_Perkins]
    public static let `aodvTcp`: Self = "_aodv._tcp"
    /// AODV [Charles_Perkins]
    public static let `aodvUdp`: Self = "_aodv._udp"
    /// TINC [Ivo_Timmermans]
    public static let `tincTcp`: Self = "_tinc._tcp"
    /// TINC [Ivo_Timmermans]
    public static let `tincUdp`: Self = "_tinc._udp"
    /// SPMP [Jakob_Kaivo]
    public static let `spmpTcp`: Self = "_spmp._tcp"
    /// SPMP [Jakob_Kaivo]
    public static let `spmpUdp`: Self = "_spmp._udp"
    /// RMC [Michael_Schmidt]
    public static let `rmcTcp`: Self = "_rmc._tcp"
    /// RMC [Michael_Schmidt]
    public static let `rmcUdp`: Self = "_rmc._udp"
    /// TenFold [Louis_Olszyk]
    public static let `tenfoldTcp`: Self = "_tenfold._tcp"
    /// TenFold [Louis_Olszyk]
    public static let `tenfoldUdp`: Self = "_tenfold._udp"
    /// MacOS Server Admin [Forest_Hill]
    public static let `macSrvrAdminTcp`: Self = "_mac-srvr-admin._tcp"
    /// MacOS Server Admin [Forest_Hill]
    public static let `macSrvrAdminUdp`: Self = "_mac-srvr-admin._udp"
    /// HAP [Igor_Plotnikov]
    public static let `hapTcp`: Self = "_hap._tcp"
    /// HAP [Igor_Plotnikov]
    public static let `hapUdp`: Self = "_hap._udp"
    /// PFTP [Ben_Schluricke]
    public static let `pftpTcp`: Self = "_pftp._tcp"
    /// PFTP [Ben_Schluricke]
    public static let `pftpUdp`: Self = "_pftp._udp"
    /// PureNoise [Sam_Osa]
    public static let `purenoiseTcp`: Self = "_purenoise._tcp"
    /// PureNoise [Sam_Osa]
    public static let `purenoiseUdp`: Self = "_purenoise._udp"
    /// DMTF out-of-band secure web services management protocol [Jim_Davis]
    public static let `oobWsHttpsTcp`: Self = "_oob-ws-https._tcp"
    /// ASF Secure Remote Management and Control Protocol [Carl_First]
    public static let `asfSecureRmcpUdp`: Self = "_asf-secure-rmcp._udp"
    /// Sun DR [Harinder_Bhasin]
    public static let `sunDrTcp`: Self = "_sun-dr._tcp"
    /// Sun DR [Harinder_Bhasin]
    public static let `sunDrUdp`: Self = "_sun-dr._udp"
    ///  
    public static let `mdqsTcp`: Self = "_mdqs._tcp"
    ///  
    public static let `mdqsUdp`: Self = "_mdqs._udp"
    /// doom Id Software [ddt]
    public static let `doomTcp`: Self = "_doom._tcp"
    /// doom Id Software [ddt]
    public static let `doomUdp`: Self = "_doom._udp"
    /// campaign contribution disclosures - SDR Technologies [Jim_Dixon]
    public static let `discloseTcp`: Self = "_disclose._tcp"
    /// campaign contribution disclosures - SDR Technologies [Jim_Dixon]
    public static let `discloseUdp`: Self = "_disclose._udp"
    /// MeComm 
    public static let `mecommTcp`: Self = "_mecomm._tcp"
    /// MeComm 
    public static let `mecommUdp`: Self = "_mecomm._udp"
    /// MeRegister [Armin_Sawusch]
    public static let `meregisterTcp`: Self = "_meregister._tcp"
    /// MeRegister [Armin_Sawusch]
    public static let `meregisterUdp`: Self = "_meregister._udp"
    /// VACDSM-SWS 
    public static let `vacdsmSwsTcp`: Self = "_vacdsm-sws._tcp"
    /// VACDSM-SWS 
    public static let `vacdsmSwsUdp`: Self = "_vacdsm-sws._udp"
    /// VACDSM-APP 
    public static let `vacdsmAppTcp`: Self = "_vacdsm-app._tcp"
    /// VACDSM-APP 
    public static let `vacdsmAppUdp`: Self = "_vacdsm-app._udp"
    /// VPPS-QUA 
    public static let `vppsQuaTcp`: Self = "_vpps-qua._tcp"
    /// VPPS-QUA 
    public static let `vppsQuaUdp`: Self = "_vpps-qua._udp"
    /// CIMPLEX [Ulysses_G_Smith_Jr]
    public static let `cimplexTcp`: Self = "_cimplex._tcp"
    /// CIMPLEX [Ulysses_G_Smith_Jr]
    public static let `cimplexUdp`: Self = "_cimplex._udp"
    /// ACAP [Chris_Newman]
    public static let `acapTcp`: Self = "_acap._tcp"
    /// ACAP [Chris_Newman]
    public static let `acapUdp`: Self = "_acap._udp"
    /// DCTP [Andre_Kramer]
    public static let `dctpTcp`: Self = "_dctp._tcp"
    /// DCTP [Andre_Kramer]
    public static let `dctpUdp`: Self = "_dctp._udp"
    /// VPPS Via [Ulysses_G_Smith_Jr]
    public static let `vppsViaTcp`: Self = "_vpps-via._tcp"
    /// VPPS Via [Ulysses_G_Smith_Jr]
    public static let `vppsViaUdp`: Self = "_vpps-via._udp"
    /// Virtual Presence Protocol [Klaus_Wolf]
    public static let `vppTcp`: Self = "_vpp._tcp"
    /// Virtual Presence Protocol [Klaus_Wolf]
    public static let `vppUdp`: Self = "_vpp._udp"
    /// GNU Generation Foundation NCP [Noah_Paul]
    public static let `ggfNcpTcp`: Self = "_ggf-ncp._tcp"
    /// GNU Generation Foundation NCP [Noah_Paul]
    public static let `ggfNcpUdp`: Self = "_ggf-ncp._udp"
    /// MRM [Liming_Wei]
    public static let `mrmTcp`: Self = "_mrm._tcp"
    /// MRM [Liming_Wei]
    public static let `mrmUdp`: Self = "_mrm._udp"
    /// entrust-aaas 
    public static let `entrustAaasTcp`: Self = "_entrust-aaas._tcp"
    /// entrust-aaas 
    public static let `entrustAaasUdp`: Self = "_entrust-aaas._udp"
    /// entrust-aams [Adrian_Mancini]
    public static let `entrustAamsTcp`: Self = "_entrust-aams._tcp"
    /// entrust-aams [Adrian_Mancini]
    public static let `entrustAamsUdp`: Self = "_entrust-aams._udp"
    /// XFR [Noah_Paul_2]
    public static let `xfrTcp`: Self = "_xfr._tcp"
    /// XFR [Noah_Paul_2]
    public static let `xfrUdp`: Self = "_xfr._udp"
    /// CORBA IIOP 
    public static let `corbaIiopTcp`: Self = "_corba-iiop._tcp"
    /// CORBA IIOP 
    public static let `corbaIiopUdp`: Self = "_corba-iiop._udp"
    /// CORBA IIOP SSL [Andrew_Watson]
    public static let `corbaIiopSslTcp`: Self = "_corba-iiop-ssl._tcp"
    /// CORBA IIOP SSL [Andrew_Watson]
    public static let `corbaIiopSslUdp`: Self = "_corba-iiop-ssl._udp"
    /// MDC Port Mapper [Noah_Paul]
    public static let `mdcPortmapperTcp`: Self = "_mdc-portmapper._tcp"
    /// MDC Port Mapper [Noah_Paul]
    public static let `mdcPortmapperUdp`: Self = "_mdc-portmapper._udp"
    /// Hardware Control Protocol Wismar [David_Merchant]
    public static let `hcpWismarTcp`: Self = "_hcp-wismar._tcp"
    /// Hardware Control Protocol Wismar [David_Merchant]
    public static let `hcpWismarUdp`: Self = "_hcp-wismar._udp"
    /// asipregistry [Erik_Sea]
    public static let `asipregistryTcp`: Self = "_asipregistry._tcp"
    /// asipregistry [Erik_Sea]
    public static let `asipregistryUdp`: Self = "_asipregistry._udp"
    /// ApplianceWare managment protocol [Stacy_Kenworthy]
    public static let `realmRusdTcp`: Self = "_realm-rusd._tcp"
    /// ApplianceWare managment protocol [Stacy_Kenworthy]
    public static let `realmRusdUdp`: Self = "_realm-rusd._udp"
    /// NMAP [Peter_Dennis_Bartok]
    public static let `nmapTcp`: Self = "_nmap._tcp"
    /// NMAP [Peter_Dennis_Bartok]
    public static let `nmapUdp`: Self = "_nmap._udp"
    /// Velneo Application Transfer Protocol [Velneo]
    public static let `vatpTcp`: Self = "_vatp._tcp"
    /// Velneo Application Transfer Protocol [Velneo]
    public static let `vatpUdp`: Self = "_vatp._udp"
    /// MS Exchange Routing [David_Lemson]
    public static let `msexchRoutingTcp`: Self = "_msexch-routing._tcp"
    /// MS Exchange Routing [David_Lemson]
    public static let `msexchRoutingUdp`: Self = "_msexch-routing._udp"
    /// Hyperwave-ISP [Gerald_Mesaric]
    public static let `hyperwaveIspTcp`: Self = "_hyperwave-isp._tcp"
    /// Hyperwave-ISP [Gerald_Mesaric]
    public static let `hyperwaveIspUdp`: Self = "_hyperwave-isp._udp"
    /// almanid Connection Endpoint [Ronny_Bremer]
    public static let `connendpTcp`: Self = "_connendp._tcp"
    /// almanid Connection Endpoint [Ronny_Bremer]
    public static let `connendpUdp`: Self = "_connendp._udp"
    /// ha-cluster [Alan_Robertson]
    public static let `haClusterTcp`: Self = "_ha-cluster._tcp"
    /// ha-cluster [Alan_Robertson]
    public static let `haClusterUdp`: Self = "_ha-cluster._udp"
    /// IEEE-MMS-SSL [Curtis_Anderson_2]
    public static let `ieeeMmsSslTcp`: Self = "_ieee-mms-ssl._tcp"
    /// IEEE-MMS-SSL [Curtis_Anderson_2]
    public static let `ieeeMmsSslUdp`: Self = "_ieee-mms-ssl._udp"
    /// RUSHD [Greg_Ercolano]
    public static let `rushdTcp`: Self = "_rushd._tcp"
    /// RUSHD [Greg_Ercolano]
    public static let `rushdUdp`: Self = "_rushd._udp"
    /// UUIDGEN [James_Falkner]
    public static let `uuidgenTcp`: Self = "_uuidgen._tcp"
    /// UUIDGEN [James_Falkner]
    public static let `uuidgenUdp`: Self = "_uuidgen._udp"
    /// OLSR [Thomas_Clausen]
    public static let `olsrTcp`: Self = "_olsr._tcp"
    /// OLSR [Thomas_Clausen]
    public static let `olsrUdp`: Self = "_olsr._udp"
    /// Access Network [Yingchun_Xu]
    public static let `accessnetworkTcp`: Self = "_accessnetwork._tcp"
    /// Access Network [Yingchun_Xu]
    public static let `accessnetworkUdp`: Self = "_accessnetwork._udp"
    /// Extensible Provisioning Protocol 
    public static let `eppTcp`: Self = "_epp._tcp"
    /// Extensible Provisioning Protocol 
    public static let `eppUdp`: Self = "_epp._udp"
    /// Link Management Protocol (LMP) 
    public static let `lmpTcp`: Self = "_lmp._tcp"
    /// Link Management Protocol (LMP) 
    public static let `lmpUdp`: Self = "_lmp._udp"
    /// IRIS over BEEP 
    public static let `irisBeepTcp`: Self = "_iris-beep._tcp"
    /// IRIS over BEEP 
    public static let `irisBeepUdp`: Self = "_iris-beep._udp"
    /// errlog copy/server daemon 
    public static let `elcsdTcp`: Self = "_elcsd._tcp"
    /// errlog copy/server daemon 
    public static let `elcsdUdp`: Self = "_elcsd._udp"
    /// AgentX [Bob_Natale]
    public static let `agentxTcp`: Self = "_agentx._tcp"
    /// AgentX [Bob_Natale]
    public static let `agentxUdp`: Self = "_agentx._udp"
    /// SILC [Pekka_Riikonen]
    public static let `silcTcp`: Self = "_silc._tcp"
    /// SILC [Pekka_Riikonen]
    public static let `silcUdp`: Self = "_silc._udp"
    /// Borland DSJ [Gerg_Cole]
    public static let `borlandDsjTcp`: Self = "_borland-dsj._tcp"
    /// Borland DSJ [Gerg_Cole]
    public static let `borlandDsjUdp`: Self = "_borland-dsj._udp"
    /// Entrust Key Management Service Handler 
    public static let `entrustKmshTcp`: Self = "_entrust-kmsh._tcp"
    /// Entrust Key Management Service Handler 
    public static let `entrustKmshUdp`: Self = "_entrust-kmsh._udp"
    /// Entrust Administration Service Handler [Peter_Whittaker]
    public static let `entrustAshTcp`: Self = "_entrust-ash._tcp"
    /// Entrust Administration Service Handler [Peter_Whittaker]
    public static let `entrustAshUdp`: Self = "_entrust-ash._udp"
    /// Cisco TDP [Bruce_Davie]
    public static let `ciscoTdpTcp`: Self = "_cisco-tdp._tcp"
    /// Cisco TDP [Bruce_Davie]
    public static let `ciscoTdpUdp`: Self = "_cisco-tdp._udp"
    /// TBRPF 
    public static let `tbrpfTcp`: Self = "_tbrpf._tcp"
    /// TBRPF 
    public static let `tbrpfUdp`: Self = "_tbrpf._udp"
    /// IRIS over XPC 
    public static let `irisXpcTcp`: Self = "_iris-xpc._tcp"
    /// IRIS over XPC 
    public static let `irisXpcUdp`: Self = "_iris-xpc._udp"
    /// IRIS over XPCS 
    public static let `irisXpcsTcp`: Self = "_iris-xpcs._tcp"
    /// IRIS over XPCS 
    public static let `irisXpcsUdp`: Self = "_iris-xpcs._udp"
    /// IRIS-LWZ 
    public static let `irisLwzTcp`: Self = "_iris-lwz._tcp"
    /// IRIS-LWZ 
    public static let `irisLwzUdp`: Self = "_iris-lwz._udp"
    /// PANA Messages 
    public static let `panaUdp`: Self = "_pana._udp"
    /// IBM NetView DM/6000 Server/Client 
    public static let `netviewdm1Tcp`: Self = "_netviewdm1._tcp"
    /// IBM NetView DM/6000 Server/Client 
    public static let `netviewdm1Udp`: Self = "_netviewdm1._udp"
    /// IBM NetView DM/6000 send/tcp 
    public static let `netviewdm2Tcp`: Self = "_netviewdm2._tcp"
    /// IBM NetView DM/6000 send/tcp 
    public static let `netviewdm2Udp`: Self = "_netviewdm2._udp"
    /// IBM NetView DM/6000 receive/tcp [Philippe_Binet]
    public static let `netviewdm3Tcp`: Self = "_netviewdm3._tcp"
    /// IBM NetView DM/6000 receive/tcp [Philippe_Binet]
    public static let `netviewdm3Udp`: Self = "_netviewdm3._udp"
    /// netGW [Oliver_Korfmacher]
    public static let `netgwTcp`: Self = "_netgw._tcp"
    /// netGW [Oliver_Korfmacher]
    public static let `netgwUdp`: Self = "_netgw._udp"
    /// Network based Rev. Cont. Sys. [Gordon_C_Galligher]
    public static let `netrcsTcp`: Self = "_netrcs._tcp"
    /// Network based Rev. Cont. Sys. [Gordon_C_Galligher]
    public static let `netrcsUdp`: Self = "_netrcs._udp"
    /// Flexible License Manager [Matt_Christiano]
    public static let `flexlmTcp`: Self = "_flexlm._tcp"
    /// Flexible License Manager [Matt_Christiano]
    public static let `flexlmUdp`: Self = "_flexlm._udp"
    /// Fujitsu Device Control 
    public static let `fujitsuDevTcp`: Self = "_fujitsu-dev._tcp"
    /// Fujitsu Device Control 
    public static let `fujitsuDevUdp`: Self = "_fujitsu-dev._udp"
    /// Russell Info Sci Calendar Manager 
    public static let `risCmTcp`: Self = "_ris-cm._tcp"
    /// Russell Info Sci Calendar Manager 
    public static let `risCmUdp`: Self = "_ris-cm._udp"
    /// kerberos administration 
    public static let `kerberosAdmTcp`: Self = "_kerberos-adm._tcp"
    /// kerberos administration 
    public static let `kerberosAdmUdp`: Self = "_kerberos-adm._udp"
    ///  
    public static let `rfileTcp`: Self = "_rfile._tcp"
    ///  
    public static let `loadavUdp`: Self = "_loadav._udp"
    /// kerberos version iv [Martin_Hamilton]
    public static let `kerberosIvUdp`: Self = "_kerberos-iv._udp"
    ///  
    public static let `pumpTcp`: Self = "_pump._tcp"
    ///  
    public static let `pumpUdp`: Self = "_pump._udp"
    ///  
    public static let `qrhTcp`: Self = "_qrh._tcp"
    ///  
    public static let `qrhUdp`: Self = "_qrh._udp"
    ///  
    public static let `rrhTcp`: Self = "_rrh._tcp"
    ///  
    public static let `rrhUdp`: Self = "_rrh._udp"
    /// send [Josyula_R_Rao]
    public static let `tellTcp`: Self = "_tell._tcp"
    /// send [Josyula_R_Rao]
    public static let `tellUdp`: Self = "_tell._udp"
    ///  
    public static let `nloginTcp`: Self = "_nlogin._tcp"
    ///  
    public static let `nloginUdp`: Self = "_nlogin._udp"
    ///  
    public static let `conTcp`: Self = "_con._tcp"
    ///  
    public static let `conUdp`: Self = "_con._udp"
    ///  
    public static let `nsTcp`: Self = "_ns._tcp"
    ///  
    public static let `nsUdp`: Self = "_ns._udp"
    ///  
    public static let `rxeTcp`: Self = "_rxe._tcp"
    ///  
    public static let `rxeUdp`: Self = "_rxe._udp"
    ///  
    public static let `quotadTcp`: Self = "_quotad._tcp"
    ///  
    public static let `quotadUdp`: Self = "_quotad._udp"
    ///  
    public static let `cycleservTcp`: Self = "_cycleserv._tcp"
    ///  
    public static let `cycleservUdp`: Self = "_cycleserv._udp"
    ///  
    public static let `omservTcp`: Self = "_omserv._tcp"
    ///  
    public static let `omservUdp`: Self = "_omserv._udp"
    ///  [Josyula_R_Rao]
    public static let `websterTcp`: Self = "_webster._tcp"
    ///  [Josyula_R_Rao]
    public static let `websterUdp`: Self = "_webster._udp"
    /// phone [Josyula_R_Rao]
    public static let `phonebookTcp`: Self = "_phonebook._tcp"
    /// phone [Josyula_R_Rao]
    public static let `phonebookUdp`: Self = "_phonebook._udp"
    ///  
    public static let `vidTcp`: Self = "_vid._tcp"
    ///  
    public static let `vidUdp`: Self = "_vid._udp"
    ///  
    public static let `cadlockTcp`: Self = "_cadlock._tcp"
    ///  
    public static let `cadlockUdp`: Self = "_cadlock._udp"
    ///  
    public static let `rtipTcp`: Self = "_rtip._tcp"
    ///  
    public static let `rtipUdp`: Self = "_rtip._udp"
    ///  
    public static let `cycleserv2Tcp`: Self = "_cycleserv2._tcp"
    ///  
    public static let `cycleserv2Udp`: Self = "_cycleserv2._udp"
    ///  
    public static let `submitTcp`: Self = "_submit._tcp"
    ///  
    public static let `notifyUdp`: Self = "_notify._udp"
    ///  
    public static let `rpasswdTcp`: Self = "_rpasswd._tcp"
    /// IANA assigned this well-formed service name as a replacement for "acmaint_dbd". 
    public static let `acmaintDbdUdp`: Self = "_acmaint-dbd._udp"
    ///  
    public static let `acmaint_dbdUdp`: Self = "_acmaint_dbd._udp"
    ///  
    public static let `entombTcp`: Self = "_entomb._tcp"
    /// IANA assigned this well-formed service name as a replacement for "acmaint_transd". 
    public static let `acmaintTransdUdp`: Self = "_acmaint-transd._udp"
    ///  
    public static let `acmaint_transdUdp`: Self = "_acmaint_transd._udp"
    ///  [Josyula_R_Rao]
    public static let `wpagesTcp`: Self = "_wpages._tcp"
    ///  [Josyula_R_Rao]
    public static let `wpagesUdp`: Self = "_wpages._udp"
    /// Multiling HTTP [Alejandro_Bonet]
    public static let `multilingHttpTcp`: Self = "_multiling-http._tcp"
    /// Multiling HTTP [Alejandro_Bonet]
    public static let `multilingHttpUdp`: Self = "_multiling-http._udp"
    ///  [Josyula_R_Rao]
    public static let `wpgsTcp`: Self = "_wpgs._tcp"
    ///  [Josyula_R_Rao]
    public static let `wpgsUdp`: Self = "_wpgs._udp"
    /// IANA assigned this well-formed service name as a replacement for "mdbs_daemon". 
    public static let `mdbsDaemonTcp`: Self = "_mdbs-daemon._tcp"
    ///  
    public static let `mdbs_daemonTcp`: Self = "_mdbs_daemon._tcp"
    /// IANA assigned this well-formed service name as a replacement for "mdbs_daemon". 
    public static let `mdbsDaemonUdp`: Self = "_mdbs-daemon._udp"
    ///  
    public static let `mdbs_daemonUdp`: Self = "_mdbs_daemon._udp"
    ///  
    public static let `deviceTcp`: Self = "_device._tcp"
    ///  
    public static let `deviceUdp`: Self = "_device._udp"
    /// Modbus Application Protocol Secure [modbus.org]
    public static let `mbapSTcp`: Self = "_mbap-s._tcp"
    /// Modbus Application Protocol Secure [modbus.org]
    public static let `mbapSUdp`: Self = "_mbap-s._udp"
    /// FCP [Paul_Whittemore]
    public static let `fcpUdpTcp`: Self = "_fcp-udp._tcp"
    /// FCP Datagram [Paul_Whittemore]
    public static let `fcpUdpUdp`: Self = "_fcp-udp._udp"
    /// itm-mcell-s [Portnoy_Boxman]
    public static let `itmMcellSTcp`: Self = "_itm-mcell-s._tcp"
    /// itm-mcell-s [Portnoy_Boxman]
    public static let `itmMcellSUdp`: Self = "_itm-mcell-s._udp"
    /// PKIX-3 CA/RA [Carlisle_Adams]
    public static let `pkix3CaRaTcp`: Self = "_pkix-3-ca-ra._tcp"
    /// PKIX-3 CA/RA [Carlisle_Adams]
    public static let `pkix3CaRaUdp`: Self = "_pkix-3-ca-ra._udp"
    /// NETCONF over SSH 
    public static let `netconfSshTcp`: Self = "_netconf-ssh._tcp"
    /// NETCONF over SSH 
    public static let `netconfSshUdp`: Self = "_netconf-ssh._udp"
    /// NETCONF over BEEP 
    public static let `netconfBeepTcp`: Self = "_netconf-beep._tcp"
    /// NETCONF over BEEP 
    public static let `netconfBeepUdp`: Self = "_netconf-beep._udp"
    /// NETCONF for SOAP over HTTPS 
    public static let `netconfsoaphttpTcp`: Self = "_netconfsoaphttp._tcp"
    /// NETCONF for SOAP over HTTPS 
    public static let `netconfsoaphttpUdp`: Self = "_netconfsoaphttp._udp"
    /// NETCONF for SOAP over BEEP 
    public static let `netconfsoapbeepTcp`: Self = "_netconfsoapbeep._tcp"
    /// NETCONF for SOAP over BEEP 
    public static let `netconfsoapbeepUdp`: Self = "_netconfsoapbeep._udp"
    /// dhcp-failover 2 [Bernard_Volz]
    public static let `dhcpFailover2Tcp`: Self = "_dhcp-failover2._tcp"
    /// dhcp-failover 2 [Bernard_Volz]
    public static let `dhcpFailover2Udp`: Self = "_dhcp-failover2._udp"
    /// GDOI 
    public static let `gdoiTcp`: Self = "_gdoi._tcp"
    /// GDOI 
    public static let `gdoiUdp`: Self = "_gdoi._udp"
    /// DNS query-response protocol run over TLS [IESG]
    public static let `domainSTcp`: Self = "_domain-s._tcp"
    /// DNS query-response protocol run over DTLS or QUIC [IESG]
    public static let `domainSUdp`: Self = "_domain-s._udp"
    /// Dynamic Link Exchange Protocol (DLEP) [IESG]
    public static let `dlepTcp`: Self = "_dlep._tcp"
    /// Dynamic Link Exchange Protocol (DLEP) [IESG]
    public static let `dlepUdp`: Self = "_dlep._udp"
    /// iSCSI [IESG]
    public static let `iscsiTcp`: Self = "_iscsi._tcp"
    /// iSCSI [IESG]
    public static let `iscsiUdp`: Self = "_iscsi._udp"
    /// OWAMP-Control [IESG]
    public static let `owampControlTcp`: Self = "_owamp-control._tcp"
    /// OWAMP-Test [IESG]
    public static let `owampTestUdp`: Self = "_owamp-test._udp"
    /// TWAMP-Control [IESG]
    public static let `twampControlTcp`: Self = "_twamp-control._tcp"
    /// TWAMP-Test Receiver Port [IESG]
    public static let `twampTestUdp`: Self = "_twamp-test._udp"
    /// rsync [Andrew_Tridgell]
    public static let `rsyncTcp`: Self = "_rsync._tcp"
    /// rsync [Andrew_Tridgell]
    public static let `rsyncUdp`: Self = "_rsync._udp"
    /// ICL coNETion locate server [Bob_Lyon]
    public static let `iclcnetLocateTcp`: Self = "_iclcnet-locate._tcp"
    /// ICL coNETion locate server [Bob_Lyon]
    public static let `iclcnetLocateUdp`: Self = "_iclcnet-locate._udp"
    /// ICL coNETion server info IANA assigned this well-formed service name as a replacement for "iclcnet_svinfo". [Bob_Lyon]
    public static let `iclcnetSvinfoTcp`: Self = "_iclcnet-svinfo._tcp"
    /// ICL coNETion server info [Bob_Lyon]
    public static let `iclcnet_svinfoTcp`: Self = "_iclcnet_svinfo._tcp"
    /// ICL coNETion server info IANA assigned this well-formed service name as a replacement for "iclcnet_svinfo". [Bob_Lyon]
    public static let `iclcnetSvinfoUdp`: Self = "_iclcnet-svinfo._udp"
    /// ICL coNETion server info [Bob_Lyon]
    public static let `iclcnet_svinfoUdp`: Self = "_iclcnet_svinfo._udp"
    /// AccessBuilder [Steve_Sweeney]
    public static let `accessbuilderTcp`: Self = "_accessbuilder._tcp"
    /// AccessBuilder [Steve_Sweeney]
    public static let `accessbuilderUdp`: Self = "_accessbuilder._udp"
    /// CD Database Protocol [Steve_Scherf]
    public static let `cddbpTcp`: Self = "_cddbp._tcp"
    /// OMG Initial Refs [Christian_Callsen]
    public static let `omginitialrefsTcp`: Self = "_omginitialrefs._tcp"
    /// OMG Initial Refs [Christian_Callsen]
    public static let `omginitialrefsUdp`: Self = "_omginitialrefs._udp"
    /// SMPNAMERES [Leif_Ekblad]
    public static let `smpnameresTcp`: Self = "_smpnameres._tcp"
    /// SMPNAMERES [Leif_Ekblad]
    public static let `smpnameresUdp`: Self = "_smpnameres._udp"
    /// self documenting Telnet Door 
    public static let `ideafarmDoorTcp`: Self = "_ideafarm-door._tcp"
    /// self documenting Door: send 0x00 for info 
    public static let `ideafarmDoorUdp`: Self = "_ideafarm-door._udp"
    /// self documenting Telnet Panic Door [Wo_o_Ideafarm]
    public static let `ideafarmPanicTcp`: Self = "_ideafarm-panic._tcp"
    /// self documenting Panic Door: send 0x00 for info [Wo_o_Ideafarm]
    public static let `ideafarmPanicUdp`: Self = "_ideafarm-panic._udp"
    /// Kerberized Internet Negotiation of Keys (KINK) 
    public static let `kinkTcp`: Self = "_kink._tcp"
    /// Kerberized Internet Negotiation of Keys (KINK) 
    public static let `kinkUdp`: Self = "_kink._udp"
    /// xact-backup [Bill_Carroll]
    public static let `xactBackupTcp`: Self = "_xact-backup._tcp"
    /// xact-backup [Bill_Carroll]
    public static let `xactBackupUdp`: Self = "_xact-backup._udp"
    /// APEX relay-relay service 
    public static let `apexMeshTcp`: Self = "_apex-mesh._tcp"
    /// APEX relay-relay service 
    public static let `apexMeshUdp`: Self = "_apex-mesh._udp"
    /// APEX endpoint-relay service 
    public static let `apexEdgeTcp`: Self = "_apex-edge._tcp"
    /// APEX endpoint-relay service 
    public static let `apexEdgeUdp`: Self = "_apex-edge._udp"
    /// Routing in Fat Trees Link Information Elements (TEMPORARY - registered 2023-02-17, expires 2024-02-17) [RIFT_WG]
    public static let `riftLiesUdp`: Self = "_rift-lies._udp"
    /// Routing in Fat Trees Topology Information Elements (TEMPORARY - registered 2023-02-17, expires 2024-02-17) [RIFT_WG]
    public static let `riftTiesUdp`: Self = "_rift-ties._udp"
    /// BIND9 remote name daemon controller [Internet_Systems_Consortium_Inc]
    public static let `rndcTcp`: Self = "_rndc._tcp"
    /// ftp protocol, data, over TLS/SSL 
    public static let `ftpsDataTcp`: Self = "_ftps-data._tcp"
    /// ftp protocol, data, over TLS/SSL 
    public static let `ftpsDataUdp`: Self = "_ftps-data._udp"
    /// ftp protocol, control, over TLS/SSL [Christopher_Allen]
    public static let `ftpsTcp`: Self = "_ftps._tcp"
    /// ftp protocol, control, over TLS/SSL [Christopher_Allen]
    public static let `ftpsUdp`: Self = "_ftps._udp"
    /// Netnews Administration System [Vera_Heinau][Heiko_Schlichting]
    public static let `nasTcp`: Self = "_nas._tcp"
    /// Netnews Administration System [Vera_Heinau][Heiko_Schlichting]
    public static let `nasUdp`: Self = "_nas._udp"
    /// telnet protocol over TLS/SSL 
    public static let `telnetsTcp`: Self = "_telnets._tcp"
    /// telnet protocol over TLS/SSL 
    public static let `telnetsUdp`: Self = "_telnets._udp"
    /// IMAP over TLS protocol [IESG]
    public static let `imapsTcp`: Self = "_imaps._tcp"
    /// POP3 over TLS protocol [IESG]
    public static let `pop3sTcp`: Self = "_pop3s._tcp"
    /// pop3 protocol over TLS/SSL (was spop3) [Gordon_Mangione]
    public static let `pop3sUdp`: Self = "_pop3s._udp"
    /// vsinet [Rob_Juergens]
    public static let `vsinetTcp`: Self = "_vsinet._tcp"
    /// vsinet [Rob_Juergens]
    public static let `vsinetUdp`: Self = "_vsinet._udp"
    ///  
    public static let `maitrdTcp`: Self = "_maitrd._tcp"
    ///  
    public static let `maitrdUdp`: Self = "_maitrd._udp"
    ///  
    public static let `busboyTcp`: Self = "_busboy._tcp"
    ///  
    public static let `puparpUdp`: Self = "_puparp._udp"
    ///  
    public static let `garconTcp`: Self = "_garcon._tcp"
    /// Applix ac 
    public static let `applixUdp`: Self = "_applix._udp"
    ///  
    public static let `puprouterTcp`: Self = "_puprouter._tcp"
    ///  
    public static let `puprouterUdp`: Self = "_puprouter._udp"
    ///  
    public static let `cadlock2Tcp`: Self = "_cadlock2._tcp"
    ///  
    public static let `cadlock2Udp`: Self = "_cadlock2._udp"
    /// HTTP Web Push [IESG]
    public static let `webpushTcp`: Self = "_webpush._tcp"
    /// surf [Joseph_Geer]
    public static let `surfTcp`: Self = "_surf._tcp"
    /// surf [Joseph_Geer]
    public static let `surfUdp`: Self = "_surf._udp"
    /// RFC3692-style Experiment 1 [IESG]
    public static let `exp1Tcp`: Self = "_exp1._tcp"
    /// RFC3692-style Experiment 1 [IESG]
    public static let `exp1Udp`: Self = "_exp1._udp"
    /// RFC3692-style Experiment 1 [IESG]
    public static let `exp1Sctp`: Self = "_exp1._sctp"
    /// RFC3692-style Experiment 1 [IESG]
    public static let `exp1Dccp`: Self = "_exp1._dccp"
    /// RFC3692-style Experiment 2 [IESG]
    public static let `exp2Tcp`: Self = "_exp2._tcp"
    /// RFC3692-style Experiment 2 [IESG]
    public static let `exp2Udp`: Self = "_exp2._udp"
    /// RFC3692-style Experiment 2 [IESG]
    public static let `exp2Sctp`: Self = "_exp2._sctp"
    /// RFC3692-style Experiment 2 [IESG]
    public static let `exp2Dccp`: Self = "_exp2._dccp"
    /// network blackjack 
    public static let `blackjackTcp`: Self = "_blackjack._tcp"
    /// network blackjack 
    public static let `blackjackUdp`: Self = "_blackjack._udp"
    /// Calendar Access Protocol [Doug_Royer]
    public static let `capTcp`: Self = "_cap._tcp"
    /// Calendar Access Protocol [Doug_Royer]
    public static let `capUdp`: Self = "_cap._udp"
    /// Solid Mux Server [Anders_Borg]
    public static let `solidMuxTcp`: Self = "_solid-mux._tcp"
    /// Solid Mux Server [Anders_Borg]
    public static let `solidMuxUdp`: Self = "_solid-mux._udp"
    /// local netinfo port [Marc_Majka]
    public static let `netinfoLocalTcp`: Self = "_netinfo-local._tcp"
    /// local netinfo port [Marc_Majka]
    public static let `netinfoLocalUdp`: Self = "_netinfo-local._udp"
    /// ActiveSync Notifications [Sandra_Vargas]
    public static let `activesyncTcp`: Self = "_activesync._tcp"
    /// ActiveSync Notifications [Sandra_Vargas]
    public static let `activesyncUdp`: Self = "_activesync._udp"
    /// MX-XR RPC [Valassis]
    public static let `mxxrloginTcp`: Self = "_mxxrlogin._tcp"
    /// MX-XR RPC [Valassis]
    public static let `mxxrloginUdp`: Self = "_mxxrlogin._udp"
    /// Nebula Secure Segment Transfer Protocol [Steve_Ravida]
    public static let `nsstpTcp`: Self = "_nsstp._tcp"
    /// Nebula Secure Segment Transfer Protocol [Steve_Ravida]
    public static let `nsstpUdp`: Self = "_nsstp._udp"
    /// AMS [Ronald_R_Ohmer]
    public static let `amsTcp`: Self = "_ams._tcp"
    /// AMS [Ronald_R_Ohmer]
    public static let `amsUdp`: Self = "_ams._udp"
    /// Message Tracking Query Protocol 
    public static let `mtqpTcp`: Self = "_mtqp._tcp"
    /// Message Tracking Query Protocol 
    public static let `mtqpUdp`: Self = "_mtqp._udp"
    /// Streamlined Blackhole [Jonathan_A_Zdziaras]
    public static let `sblTcp`: Self = "_sbl._tcp"
    /// Streamlined Blackhole [Jonathan_A_Zdziaras]
    public static let `sblUdp`: Self = "_sbl._udp"
    /// Netarx Netcare [Sandy_Kronenberg]
    public static let `netarxTcp`: Self = "_netarx._tcp"
    /// Netarx Netcare [Sandy_Kronenberg]
    public static let `netarxUdp`: Self = "_netarx._udp"
    /// AK2 Product [Karl_Palsson]
    public static let `danfAk2Tcp`: Self = "_danf-ak2._tcp"
    /// AK2 Product [Karl_Palsson]
    public static let `danfAk2Udp`: Self = "_danf-ak2._udp"
    /// Subnet Roaming [Michael_Chapman]
    public static let `afrogTcp`: Self = "_afrog._tcp"
    /// Subnet Roaming [Michael_Chapman]
    public static let `afrogUdp`: Self = "_afrog._udp"
    /// BOINC Client Control [David_Anderson]
    public static let `boincClientTcp`: Self = "_boinc-client._tcp"
    /// BOINC Client Control [David_Anderson]
    public static let `boincClientUdp`: Self = "_boinc-client._udp"
    /// Dev Consortium Utility [Chris_Ryland]
    public static let `dcutilityTcp`: Self = "_dcutility._tcp"
    /// Dev Consortium Utility [Chris_Ryland]
    public static let `dcutilityUdp`: Self = "_dcutility._udp"
    /// Fingerprint Image Transfer Protocol [Steven_Fields]
    public static let `fpitpTcp`: Self = "_fpitp._tcp"
    /// Fingerprint Image Transfer Protocol [Steven_Fields]
    public static let `fpitpUdp`: Self = "_fpitp._udp"
    /// WebFilter Remote Monitor [Tim_Morgan]
    public static let `wfremotertmTcp`: Self = "_wfremotertm._tcp"
    /// WebFilter Remote Monitor [Tim_Morgan]
    public static let `wfremotertmUdp`: Self = "_wfremotertm._udp"
    /// Sun's NEO Object Request Broker 
    public static let `neod1Tcp`: Self = "_neod1._tcp"
    /// Sun's NEO Object Request Broker 
    public static let `neod1Udp`: Self = "_neod1._udp"
    /// Sun's NEO Object Request Broker [Rohit_Garg]
    public static let `neod2Tcp`: Self = "_neod2._tcp"
    /// Sun's NEO Object Request Broker [Rohit_Garg]
    public static let `neod2Udp`: Self = "_neod2._udp"
    /// Tobit David Postman VPMN [Franz_Josef_Leuders]
    public static let `tdPostmanTcp`: Self = "_td-postman._tcp"
    /// Tobit David Postman VPMN [Franz_Josef_Leuders]
    public static let `tdPostmanUdp`: Self = "_td-postman._udp"
    /// CORBA Management Agent [Ramy_Zaarour]
    public static let `cmaTcp`: Self = "_cma._tcp"
    /// CORBA Management Agent [Ramy_Zaarour]
    public static let `cmaUdp`: Self = "_cma._udp"
    /// Optima VNET [Ralf_Doewich]
    public static let `optimaVnetTcp`: Self = "_optima-vnet._tcp"
    /// Optima VNET [Ralf_Doewich]
    public static let `optimaVnetUdp`: Self = "_optima-vnet._udp"
    /// Dynamic DNS Tools [Remi_Lefebvre]
    public static let `ddtTcp`: Self = "_ddt._tcp"
    /// Dynamic DNS Tools [Remi_Lefebvre]
    public static let `ddtUdp`: Self = "_ddt._udp"
    /// Remote Assistant (RA) [Roman_Kriis]
    public static let `remoteAsTcp`: Self = "_remote-as._tcp"
    /// Remote Assistant (RA) [Roman_Kriis]
    public static let `remoteAsUdp`: Self = "_remote-as._udp"
    /// BRVREAD [A_Boninn]
    public static let `brvreadTcp`: Self = "_brvread._tcp"
    /// BRVREAD [A_Boninn]
    public static let `brvreadUdp`: Self = "_brvread._udp"
    /// ANSYS - License Manager [Suzanne_Lorrin]
    public static let `ansyslmdTcp`: Self = "_ansyslmd._tcp"
    /// ANSYS - License Manager [Suzanne_Lorrin]
    public static let `ansyslmdUdp`: Self = "_ansyslmd._udp"
    /// VFO [Anthony_Gonzalez]
    public static let `vfoTcp`: Self = "_vfo._tcp"
    /// VFO [Anthony_Gonzalez]
    public static let `vfoUdp`: Self = "_vfo._udp"
    /// STARTRON [Markus_Sabadello]
    public static let `startronTcp`: Self = "_startron._tcp"
    /// STARTRON [Markus_Sabadello]
    public static let `startronUdp`: Self = "_startron._udp"
    /// nim 
    public static let `nimTcp`: Self = "_nim._tcp"
    /// nim 
    public static let `nimUdp`: Self = "_nim._udp"
    /// nimreg [Robert_Gordon]
    public static let `nimregTcp`: Self = "_nimreg._tcp"
    /// nimreg [Robert_Gordon]
    public static let `nimregUdp`: Self = "_nimreg._udp"
    /// POLESTAR [Masakuni_Okada]
    public static let `polestarTcp`: Self = "_polestar._tcp"
    /// POLESTAR [Masakuni_Okada]
    public static let `polestarUdp`: Self = "_polestar._udp"
    /// KIOSK [Ken_Ksiazek]
    public static let `kioskTcp`: Self = "_kiosk._tcp"
    /// KIOSK [Ken_Ksiazek]
    public static let `kioskUdp`: Self = "_kiosk._udp"
    /// Veracity [Ross_Williams]
    public static let `veracityTcp`: Self = "_veracity._tcp"
    /// Veracity [Ross_Williams]
    public static let `veracityUdp`: Self = "_veracity._udp"
    /// KyoceraNetDev [Shigenaka_Kanemitsu]
    public static let `kyoceranetdevTcp`: Self = "_kyoceranetdev._tcp"
    /// KyoceraNetDev [Shigenaka_Kanemitsu]
    public static let `kyoceranetdevUdp`: Self = "_kyoceranetdev._udp"
    /// JSTEL [Duane_Kiser]
    public static let `jstelTcp`: Self = "_jstel._tcp"
    /// JSTEL [Duane_Kiser]
    public static let `jstelUdp`: Self = "_jstel._udp"
    /// SYSCOMLAN [Alexandre_Lechenne]
    public static let `syscomlanTcp`: Self = "_syscomlan._tcp"
    /// SYSCOMLAN [Alexandre_Lechenne]
    public static let `syscomlanUdp`: Self = "_syscomlan._udp"
    /// FPO-FNS [Jens_Klose]
    public static let `fpoFnsTcp`: Self = "_fpo-fns._tcp"
    /// FPO-FNS [Jens_Klose]
    public static let `fpoFnsUdp`: Self = "_fpo-fns._udp"
    /// Installation Bootstrap Proto. Serv. IANA assigned this well-formed service name as a replacement for "instl_boots". 
    public static let `instlBootsTcp`: Self = "_instl-boots._tcp"
    /// Installation Bootstrap Proto. Serv. 
    public static let `instl_bootsTcp`: Self = "_instl_boots._tcp"
    /// Installation Bootstrap Proto. Serv. IANA assigned this well-formed service name as a replacement for "instl_boots". 
    public static let `instlBootsUdp`: Self = "_instl-boots._udp"
    /// Installation Bootstrap Proto. Serv. 
    public static let `instl_bootsUdp`: Self = "_instl_boots._udp"
    /// Installation Bootstrap Proto. Cli. IANA assigned this well-formed service name as a replacement for "instl_bootc". [David_Arko]
    public static let `instlBootcTcp`: Self = "_instl-bootc._tcp"
    /// Installation Bootstrap Proto. Cli. [David_Arko]
    public static let `instl_bootcTcp`: Self = "_instl_bootc._tcp"
    /// Installation Bootstrap Proto. Cli. IANA assigned this well-formed service name as a replacement for "instl_bootc". [David_Arko]
    public static let `instlBootcUdp`: Self = "_instl-bootc._udp"
    /// Installation Bootstrap Proto. Cli. [David_Arko]
    public static let `instl_bootcUdp`: Self = "_instl_bootc._udp"
    /// COGNEX-INSIGHT [Steve_Olson]
    public static let `cognexInsightTcp`: Self = "_cognex-insight._tcp"
    /// COGNEX-INSIGHT [Steve_Olson]
    public static let `cognexInsightUdp`: Self = "_cognex-insight._udp"
    /// GMRUpdateSERV [Steve_Kellogg]
    public static let `gmrupdateservTcp`: Self = "_gmrupdateserv._tcp"
    /// GMRUpdateSERV [Steve_Kellogg]
    public static let `gmrupdateservUdp`: Self = "_gmrupdateserv._udp"
    /// BSQUARE-VOIP [Yen_Lee]
    public static let `bsquareVoipTcp`: Self = "_bsquare-voip._tcp"
    /// BSQUARE-VOIP [Yen_Lee]
    public static let `bsquareVoipUdp`: Self = "_bsquare-voip._udp"
    /// CARDAX [Charles_Oram]
    public static let `cardaxTcp`: Self = "_cardax._tcp"
    /// CARDAX [Charles_Oram]
    public static let `cardaxUdp`: Self = "_cardax._udp"
    /// Bridge Control [Andy_Heron]
    public static let `bridgecontrolTcp`: Self = "_bridgecontrol._tcp"
    /// Bridge Control [Andy_Heron]
    public static let `bridgecontrolUdp`: Self = "_bridgecontrol._udp"
    /// Warmspot Management Protocol [Robert_C_Henningsga]
    public static let `warmspotMgmtTcp`: Self = "_warmspotMgmt._tcp"
    /// Warmspot Management Protocol [Robert_C_Henningsga]
    public static let `warmspotMgmtUdp`: Self = "_warmspotMgmt._udp"
    /// RDRMSHC [Ericko_Shimada]
    public static let `rdrmshcTcp`: Self = "_rdrmshc._tcp"
    /// RDRMSHC [Ericko_Shimada]
    public static let `rdrmshcUdp`: Self = "_rdrmshc._udp"
    /// DAB STI-C [World_DAB]
    public static let `dabStiCTcp`: Self = "_dab-sti-c._tcp"
    /// DAB STI-C [World_DAB]
    public static let `dabStiCUdp`: Self = "_dab-sti-c._udp"
    /// IMGames [Jean_A_Ames]
    public static let `imgamesTcp`: Self = "_imgames._tcp"
    /// IMGames [Jean_A_Ames]
    public static let `imgamesUdp`: Self = "_imgames._udp"
    /// Avocent Proxy Protocol [Steven_W_Clark]
    public static let `avocentProxyTcp`: Self = "_avocent-proxy._tcp"
    /// Avocent Proxy Protocol [Steven_W_Clark]
    public static let `avocentProxyUdp`: Self = "_avocent-proxy._udp"
    /// ASPROVATalk [Chiew_Farn_Chung]
    public static let `asprovatalkTcp`: Self = "_asprovatalk._tcp"
    /// ASPROVATalk [Chiew_Farn_Chung]
    public static let `asprovatalkUdp`: Self = "_asprovatalk._udp"
    /// Socks [Ying_Da_Lee]
    public static let `socksTcp`: Self = "_socks._tcp"
    /// Socks [Ying_Da_Lee]
    public static let `socksUdp`: Self = "_socks._udp"
    /// PVUNIWIEN [Peter_Lipp]
    public static let `pvuniwienTcp`: Self = "_pvuniwien._tcp"
    /// PVUNIWIEN [Peter_Lipp]
    public static let `pvuniwienUdp`: Self = "_pvuniwien._udp"
    /// AMT-ESD-PROT [AMTEC_S_p_A]
    public static let `amtEsdProtTcp`: Self = "_amt-esd-prot._tcp"
    /// AMT-ESD-PROT [AMTEC_S_p_A]
    public static let `amtEsdProtUdp`: Self = "_amt-esd-prot._udp"
    /// Anasoft License Manager 
    public static let `ansoftLm1Tcp`: Self = "_ansoft-lm-1._tcp"
    /// Anasoft License Manager 
    public static let `ansoftLm1Udp`: Self = "_ansoft-lm-1._udp"
    /// Anasoft License Manager 
    public static let `ansoftLm2Tcp`: Self = "_ansoft-lm-2._tcp"
    /// Anasoft License Manager 
    public static let `ansoftLm2Udp`: Self = "_ansoft-lm-2._udp"
    /// Web Objects [Andy_Belk]
    public static let `webobjectsTcp`: Self = "_webobjects._tcp"
    /// Web Objects [Andy_Belk]
    public static let `webobjectsUdp`: Self = "_webobjects._udp"
    /// CPL Scrambler Logging 
    public static let `cplscramblerLgTcp`: Self = "_cplscrambler-lg._tcp"
    /// CPL Scrambler Logging 
    public static let `cplscramblerLgUdp`: Self = "_cplscrambler-lg._udp"
    /// CPL Scrambler Internal 
    public static let `cplscramblerInTcp`: Self = "_cplscrambler-in._tcp"
    /// CPL Scrambler Internal 
    public static let `cplscramblerInUdp`: Self = "_cplscrambler-in._udp"
    /// CPL Scrambler Alarm Log [Richard_Corn]
    public static let `cplscramblerAlTcp`: Self = "_cplscrambler-al._tcp"
    /// CPL Scrambler Alarm Log [Richard_Corn]
    public static let `cplscramblerAlUdp`: Self = "_cplscrambler-al._udp"
    /// FF Annunciation 
    public static let `ffAnnuncTcp`: Self = "_ff-annunc._tcp"
    /// FF Annunciation 
    public static let `ffAnnuncUdp`: Self = "_ff-annunc._udp"
    /// FF Fieldbus Message Specification 
    public static let `ffFmsTcp`: Self = "_ff-fms._tcp"
    /// FF Fieldbus Message Specification 
    public static let `ffFmsUdp`: Self = "_ff-fms._udp"
    /// FF System Management [Fieldbus_Foundation]
    public static let `ffSmTcp`: Self = "_ff-sm._tcp"
    /// FF System Management [Fieldbus_Foundation]
    public static let `ffSmUdp`: Self = "_ff-sm._udp"
    /// Open Business Reporting Protocol [William_Randolph_Roy]
    public static let `obrpdTcp`: Self = "_obrpd._tcp"
    /// Open Business Reporting Protocol [William_Randolph_Roy]
    public static let `obrpdUdp`: Self = "_obrpd._udp"
    /// PROOFD 
    public static let `proofdTcp`: Self = "_proofd._tcp"
    /// PROOFD 
    public static let `proofdUdp`: Self = "_proofd._udp"
    /// ROOTD [Fons_Rademakers]
    public static let `rootdTcp`: Self = "_rootd._tcp"
    /// ROOTD [Fons_Rademakers]
    public static let `rootdUdp`: Self = "_rootd._udp"
    /// NICELink [Jordi_Lisbona]
    public static let `nicelinkTcp`: Self = "_nicelink._tcp"
    /// NICELink [Jordi_Lisbona]
    public static let `nicelinkUdp`: Self = "_nicelink._udp"
    /// Common Name Resolution Protocol [Michael_Mealling]
    public static let `cnrprotocolTcp`: Self = "_cnrprotocol._tcp"
    /// Common Name Resolution Protocol [Michael_Mealling]
    public static let `cnrprotocolUdp`: Self = "_cnrprotocol._udp"
    /// Sun Cluster Manager [Ashit_Patel]
    public static let `sunclustermgrTcp`: Self = "_sunclustermgr._tcp"
    /// Sun Cluster Manager [Ashit_Patel]
    public static let `sunclustermgrUdp`: Self = "_sunclustermgr._udp"
    /// RMI Activation 
    public static let `rmiactivationTcp`: Self = "_rmiactivation._tcp"
    /// RMI Activation 
    public static let `rmiactivationUdp`: Self = "_rmiactivation._udp"
    /// RMI Registry [Mark_Hodapp]
    public static let `rmiregistryTcp`: Self = "_rmiregistry._tcp"
    /// RMI Registry [Mark_Hodapp]
    public static let `rmiregistryUdp`: Self = "_rmiregistry._udp"
    /// MCTP [Vitaly_Revsin]
    public static let `mctpTcp`: Self = "_mctp._tcp"
    /// MCTP [Vitaly_Revsin]
    public static let `mctpUdp`: Self = "_mctp._udp"
    /// PT2-DISCOVER [Ralph_Kammerlander]
    public static let `pt2DiscoverTcp`: Self = "_pt2-discover._tcp"
    /// PT2-DISCOVER [Ralph_Kammerlander]
    public static let `pt2DiscoverUdp`: Self = "_pt2-discover._udp"
    /// ADOBE SERVER 1 
    public static let `adobeserver1Tcp`: Self = "_adobeserver-1._tcp"
    /// ADOBE SERVER 1 
    public static let `adobeserver1Udp`: Self = "_adobeserver-1._udp"
    /// ADOBE SERVER 2 [Frank_Soetebeer]
    public static let `adobeserver2Tcp`: Self = "_adobeserver-2._tcp"
    /// ADOBE SERVER 2 [Frank_Soetebeer]
    public static let `adobeserver2Udp`: Self = "_adobeserver-2._udp"
    /// XRL [Patrick_Robinson]
    public static let `xrlTcp`: Self = "_xrl._tcp"
    /// XRL [Patrick_Robinson]
    public static let `xrlUdp`: Self = "_xrl._udp"
    /// FTRANHC [Eriko_Shimada]
    public static let `ftranhcTcp`: Self = "_ftranhc._tcp"
    /// FTRANHC [Eriko_Shimada]
    public static let `ftranhcUdp`: Self = "_ftranhc._udp"
    /// ISOIPSIGPORT-1 
    public static let `isoipsigport1Tcp`: Self = "_isoipsigport-1._tcp"
    /// ISOIPSIGPORT-1 
    public static let `isoipsigport1Udp`: Self = "_isoipsigport-1._udp"
    /// ISOIPSIGPORT-2 [Peter_Egli]
    public static let `isoipsigport2Tcp`: Self = "_isoipsigport-2._tcp"
    /// ISOIPSIGPORT-2 [Peter_Egli]
    public static let `isoipsigport2Udp`: Self = "_isoipsigport-2._udp"
    /// ratio-adp [Oliver_Thulke]
    public static let `ratioAdpTcp`: Self = "_ratio-adp._tcp"
    /// ratio-adp [Oliver_Thulke]
    public static let `ratioAdpUdp`: Self = "_ratio-adp._udp"
    /// Start web admin server 
    public static let `webadmstartTcp`: Self = "_webadmstart._tcp"
    /// Client status info [Beth_Crespo]
    public static let `nfsdKeepaliveUdp`: Self = "_nfsd-keepalive._udp"
    /// LM Social Server [Ron_Lussier]
    public static let `lmsocialserverTcp`: Self = "_lmsocialserver._tcp"
    /// LM Social Server [Ron_Lussier]
    public static let `lmsocialserverUdp`: Self = "_lmsocialserver._udp"
    /// Intelligent Communication Protocol [Mark_H_David]
    public static let `icpTcp`: Self = "_icp._tcp"
    /// Intelligent Communication Protocol [Mark_H_David]
    public static let `icpUdp`: Self = "_icp._udp"
    /// Licklider Transmission Protocol 
    public static let `ltpDeepspaceTcp`: Self = "_ltp-deepspace._tcp"
    /// Licklider Transmission Protocol 
    public static let `ltpDeepspaceUdp`: Self = "_ltp-deepspace._udp"
    /// Licklider Transmission Protocol 
    public static let `ltpDeepspaceDccp`: Self = "_ltp-deepspace._dccp"
    /// Mini SQL [David_Hughes]
    public static let `miniSqlTcp`: Self = "_mini-sql._tcp"
    /// Mini SQL [David_Hughes]
    public static let `miniSqlUdp`: Self = "_mini-sql._udp"
    /// ARDUS Transfer 
    public static let `ardusTrnsTcp`: Self = "_ardus-trns._tcp"
    /// ARDUS Transfer 
    public static let `ardusTrnsUdp`: Self = "_ardus-trns._udp"
    /// ARDUS Control 
    public static let `ardusCntlTcp`: Self = "_ardus-cntl._tcp"
    /// ARDUS Control 
    public static let `ardusCntlUdp`: Self = "_ardus-cntl._udp"
    /// ARDUS Multicast Transfer [Shinya_Abe]
    public static let `ardusMtrnsTcp`: Self = "_ardus-mtrns._tcp"
    /// ARDUS Multicast Transfer [Shinya_Abe]
    public static let `ardusMtrnsUdp`: Self = "_ardus-mtrns._udp"
    /// SACRED 
    public static let `sacredTcp`: Self = "_sacred._tcp"
    /// SACRED 
    public static let `sacredUdp`: Self = "_sacred._udp"
    /// Battle.net Chat/Game Protocol 
    public static let `bnetgameTcp`: Self = "_bnetgame._tcp"
    /// Battle.net Chat/Game Protocol 
    public static let `bnetgameUdp`: Self = "_bnetgame._udp"
    /// Battle.net File Transfer Protocol [Domain_Tech]
    public static let `bnetfileTcp`: Self = "_bnetfile._tcp"
    /// Battle.net File Transfer Protocol [Domain_Tech]
    public static let `bnetfileUdp`: Self = "_bnetfile._udp"
    /// Datalode RMPP [Dave_Ruedger]
    public static let `rmppTcp`: Self = "_rmpp._tcp"
    /// Datalode RMPP [Dave_Ruedger]
    public static let `rmppUdp`: Self = "_rmpp._udp"
    /// availant-mgr [Steven_Pelletier]
    public static let `availantMgrTcp`: Self = "_availant-mgr._tcp"
    /// availant-mgr [Steven_Pelletier]
    public static let `availantMgrUdp`: Self = "_availant-mgr._udp"
    /// Murray [Stu_Mark]
    public static let `murrayTcp`: Self = "_murray._tcp"
    /// Murray [Stu_Mark]
    public static let `murrayUdp`: Self = "_murray._udp"
    /// HP VMM Control 
    public static let `hpvmmcontrolTcp`: Self = "_hpvmmcontrol._tcp"
    /// HP VMM Control 
    public static let `hpvmmcontrolUdp`: Self = "_hpvmmcontrol._udp"
    /// HP VMM Agent 
    public static let `hpvmmagentTcp`: Self = "_hpvmmagent._tcp"
    /// HP VMM Agent 
    public static let `hpvmmagentUdp`: Self = "_hpvmmagent._udp"
    /// HP VMM Agent [John_Morton]
    public static let `hpvmmdataTcp`: Self = "_hpvmmdata._tcp"
    /// HP VMM Agent [John_Morton]
    public static let `hpvmmdataUdp`: Self = "_hpvmmdata._udp"
    /// KWDB Remote Communication [Lal_Samuel_Varghese]
    public static let `kwdbCommnTcp`: Self = "_kwdb-commn._tcp"
    /// KWDB Remote Communication [Lal_Samuel_Varghese]
    public static let `kwdbCommnUdp`: Self = "_kwdb-commn._udp"
    /// SAPHostControl over SOAP/HTTP 
    public static let `saphostctrlTcp`: Self = "_saphostctrl._tcp"
    /// SAPHostControl over SOAP/HTTP 
    public static let `saphostctrlUdp`: Self = "_saphostctrl._udp"
    /// SAPHostControl over SOAP/HTTPS [Muscarella_Fabrizio]
    public static let `saphostctrlsTcp`: Self = "_saphostctrls._tcp"
    /// SAPHostControl over SOAP/HTTPS [Muscarella_Fabrizio]
    public static let `saphostctrlsUdp`: Self = "_saphostctrls._udp"
    /// CAC App Service Protocol 
    public static let `caspTcp`: Self = "_casp._tcp"
    /// CAC App Service Protocol 
    public static let `caspUdp`: Self = "_casp._udp"
    /// CAC App Service Protocol Encripted [Enrique_Corujo]
    public static let `caspsslTcp`: Self = "_caspssl._tcp"
    /// CAC App Service Protocol Encripted [Enrique_Corujo]
    public static let `caspsslUdp`: Self = "_caspssl._udp"
    /// KVM-via-IP Management Service [Ian_Miller]
    public static let `kvmViaIpTcp`: Self = "_kvm-via-ip._tcp"
    /// KVM-via-IP Management Service [Ian_Miller]
    public static let `kvmViaIpUdp`: Self = "_kvm-via-ip._udp"
    /// Data Flow Network [Mikhailov_Center]
    public static let `dfnTcp`: Self = "_dfn._tcp"
    /// Data Flow Network [Mikhailov_Center]
    public static let `dfnUdp`: Self = "_dfn._udp"
    /// MicroAPL APLX [Richard_Nabavi]
    public static let `aplxTcp`: Self = "_aplx._tcp"
    /// MicroAPL APLX [Richard_Nabavi]
    public static let `aplxUdp`: Self = "_aplx._udp"
    /// OmniVision Communication Service [Serge_Vacquier]
    public static let `omnivisionTcp`: Self = "_omnivision._tcp"
    /// OmniVision Communication Service [Serge_Vacquier]
    public static let `omnivisionUdp`: Self = "_omnivision._udp"
    /// HHB Gateway Control [Richard_Harwell]
    public static let `hhbGatewayTcp`: Self = "_hhb-gateway._tcp"
    /// HHB Gateway Control [Richard_Harwell]
    public static let `hhbGatewayUdp`: Self = "_hhb-gateway._udp"
    /// TRIM Workgroup Service [Siva_Poobalasingam]
    public static let `trimTcp`: Self = "_trim._tcp"
    /// TRIM Workgroup Service [Siva_Poobalasingam]
    public static let `trimUdp`: Self = "_trim._udp"
    /// encrypted admin requests IANA assigned this well-formed service name as a replacement for "encrypted_admin". [Michael_Elizarov]
    public static let `encryptedAdminTcp`: Self = "_encrypted-admin._tcp"
    /// encrypted admin requests [Michael_Elizarov]
    public static let `encrypted_adminTcp`: Self = "_encrypted_admin._tcp"
    /// encrypted admin requests IANA assigned this well-formed service name as a replacement for "encrypted_admin". [Michael_Elizarov]
    public static let `encryptedAdminUdp`: Self = "_encrypted-admin._udp"
    /// encrypted admin requests [Michael_Elizarov]
    public static let `encrypted_adminUdp`: Self = "_encrypted_admin._udp"
    /// Enterprise Virtual Manager [Thomas_Hennessy]
    public static let `evmTcp`: Self = "_evm._tcp"
    /// Enterprise Virtual Manager [Thomas_Hennessy]
    public static let `evmUdp`: Self = "_evm._udp"
    /// AutoNOC Network Operations Protocol [Kyle_Lussier]
    public static let `autonocTcp`: Self = "_autonoc._tcp"
    /// AutoNOC Network Operations Protocol [Kyle_Lussier]
    public static let `autonocUdp`: Self = "_autonoc._udp"
    /// User Message Service [Chaoyi_Lang]
    public static let `mxomssTcp`: Self = "_mxomss._tcp"
    /// User Message Service [Chaoyi_Lang]
    public static let `mxomssUdp`: Self = "_mxomss._udp"
    /// User Discovery Service [Lee_Dolson]
    public static let `edtoolsTcp`: Self = "_edtools._tcp"
    /// User Discovery Service [Lee_Dolson]
    public static let `edtoolsUdp`: Self = "_edtools._udp"
    /// Infomatryx Exchange [David_Walling]
    public static let `imyxTcp`: Self = "_imyx._tcp"
    /// Infomatryx Exchange [David_Walling]
    public static let `imyxUdp`: Self = "_imyx._udp"
    /// Fusion Script [Peter_Loveday]
    public static let `fuscriptTcp`: Self = "_fuscript._tcp"
    /// Fusion Script [Peter_Loveday]
    public static let `fuscriptUdp`: Self = "_fuscript._udp"
    /// X9 iCue Show Control [Brandon_Potter]
    public static let `x9IcueTcp`: Self = "_x9-icue._tcp"
    /// X9 iCue Show Control [Brandon_Potter]
    public static let `x9IcueUdp`: Self = "_x9-icue._udp"
    /// audit transfer [Mark_Wahl]
    public static let `auditTransferTcp`: Self = "_audit-transfer._tcp"
    /// audit transfer [Mark_Wahl]
    public static let `auditTransferUdp`: Self = "_audit-transfer._udp"
    /// CAPIoverLAN [Diego_Friedel]
    public static let `capioverlanTcp`: Self = "_capioverlan._tcp"
    /// CAPIoverLAN [Diego_Friedel]
    public static let `capioverlanUdp`: Self = "_capioverlan._udp"
    /// Elfiq Replication Service [Frederick_Parent]
    public static let `elfiqReplTcp`: Self = "_elfiq-repl._tcp"
    /// Elfiq Replication Service [Frederick_Parent]
    public static let `elfiqReplUdp`: Self = "_elfiq-repl._udp"
    /// BlueView Sonar Service [Teledyne_BlueView_Inc]
    public static let `bvtsonarTcp`: Self = "_bvtsonar._tcp"
    /// BlueView Sonar Service [Teledyne_BlueView_Inc]
    public static let `bvtsonarUdp`: Self = "_bvtsonar._udp"
    /// Blaze File Server [Curt_Schimmel]
    public static let `blazeTcp`: Self = "_blaze._tcp"
    /// Blaze File Server [Curt_Schimmel]
    public static let `blazeUdp`: Self = "_blaze._udp"
    /// Unizensus Login Server [Dirk_Materlik]
    public static let `unizensusTcp`: Self = "_unizensus._tcp"
    /// Unizensus Login Server [Dirk_Materlik]
    public static let `unizensusUdp`: Self = "_unizensus._udp"
    /// Winpopup LAN Messenger [Vitali_Fomine]
    public static let `winpoplanmessTcp`: Self = "_winpoplanmess._tcp"
    /// Winpopup LAN Messenger [Vitali_Fomine]
    public static let `winpoplanmessUdp`: Self = "_winpoplanmess._udp"
    /// ANSI C12.22 Port 
    public static let `c1222AcseTcp`: Self = "_c1222-acse._tcp"
    /// ANSI C12.22 Port 
    public static let `c1222AcseUdp`: Self = "_c1222-acse._udp"
    /// Community Service [Stephane_MONS]
    public static let `resacommunityTcp`: Self = "_resacommunity._tcp"
    /// Community Service [Stephane_MONS]
    public static let `resacommunityUdp`: Self = "_resacommunity._udp"
    /// Network File Access [James_Powell]
    public static let `nfaTcp`: Self = "_nfa._tcp"
    /// Network File Access [James_Powell]
    public static let `nfaUdp`: Self = "_nfa._udp"
    /// iasControl OMS [Todd_Guay]
    public static let `iascontrolOmsTcp`: Self = "_iascontrol-oms._tcp"
    /// iasControl OMS [Todd_Guay]
    public static let `iascontrolOmsUdp`: Self = "_iascontrol-oms._udp"
    /// Oracle iASControl [Todd_Guay]
    public static let `iascontrolTcp`: Self = "_iascontrol._tcp"
    /// Oracle iASControl [Todd_Guay]
    public static let `iascontrolUdp`: Self = "_iascontrol._udp"
    /// dbControl OMS [Todd_Guay]
    public static let `dbcontrolOmsTcp`: Self = "_dbcontrol-oms._tcp"
    /// dbControl OMS [Todd_Guay]
    public static let `dbcontrolOmsUdp`: Self = "_dbcontrol-oms._udp"
    /// Oracle OMS [Todd_Guay]
    public static let `oracleOmsTcp`: Self = "_oracle-oms._tcp"
    /// Oracle OMS [Todd_Guay]
    public static let `oracleOmsUdp`: Self = "_oracle-oms._udp"
    /// DB Lite Mult-User Server [Philip_Stephenson]
    public static let `olsvTcp`: Self = "_olsv._tcp"
    /// DB Lite Mult-User Server [Philip_Stephenson]
    public static let `olsvUdp`: Self = "_olsv._udp"
    /// Health Polling 
    public static let `healthPollingTcp`: Self = "_health-polling._tcp"
    /// Health Polling 
    public static let `healthPollingUdp`: Self = "_health-polling._udp"
    /// Health Trap 
    public static let `healthTrapTcp`: Self = "_health-trap._tcp"
    /// Health Trap 
    public static let `healthTrapUdp`: Self = "_health-trap._udp"
    /// SmartDialer Data Protocol [Lee_Griffiths]
    public static let `sddpTcp`: Self = "_sddp._tcp"
    /// SmartDialer Data Protocol [Lee_Griffiths]
    public static let `sddpUdp`: Self = "_sddp._udp"
    /// QSM Proxy Service [Norm_Lunde]
    public static let `qsmProxyTcp`: Self = "_qsm-proxy._tcp"
    /// QSM Proxy Service [Norm_Lunde]
    public static let `qsmProxyUdp`: Self = "_qsm-proxy._udp"
    /// QSM GUI Service [Norm_Lunde]
    public static let `qsmGuiTcp`: Self = "_qsm-gui._tcp"
    /// QSM GUI Service [Norm_Lunde]
    public static let `qsmGuiUdp`: Self = "_qsm-gui._udp"
    /// QSM RemoteExec [Norm_Lunde]
    public static let `qsmRemoteTcp`: Self = "_qsm-remote._tcp"
    /// QSM RemoteExec [Norm_Lunde]
    public static let `qsmRemoteUdp`: Self = "_qsm-remote._udp"
    /// Cisco IP SLAs Control Protocol [Emmanuel_Tychon]
    public static let `ciscoIpslaTcp`: Self = "_cisco-ipsla._tcp"
    /// Cisco IP SLAs Control Protocol [Emmanuel_Tychon]
    public static let `ciscoIpslaUdp`: Self = "_cisco-ipsla._udp"
    /// Cisco IP SLAs Control Protocol [Emmanuel_Tychon]
    public static let `ciscoIpslaSctp`: Self = "_cisco-ipsla._sctp"
    /// VChat Conference Service [Andreas_Wetzel]
    public static let `vchatTcp`: Self = "_vchat._tcp"
    /// VChat Conference Service [Andreas_Wetzel]
    public static let `vchatUdp`: Self = "_vchat._udp"
    /// TRIPWIRE [Ed_Metcalf][Albert_Holt]
    public static let `tripwireTcp`: Self = "_tripwire._tcp"
    /// TRIPWIRE [Ed_Metcalf][Albert_Holt]
    public static let `tripwireUdp`: Self = "_tripwire._udp"
    /// AT+C License Manager [Peter_Schafer]
    public static let `atcLmTcp`: Self = "_atc-lm._tcp"
    /// AT+C License Manager [Peter_Schafer]
    public static let `atcLmUdp`: Self = "_atc-lm._udp"
    /// AT+C FmiApplicationServer [Peter_Schafer]
    public static let `atcAppserverTcp`: Self = "_atc-appserver._tcp"
    /// AT+C FmiApplicationServer [Peter_Schafer]
    public static let `atcAppserverUdp`: Self = "_atc-appserver._udp"
    /// DNA Protocol [David_McLaughlin]
    public static let `dnapTcp`: Self = "_dnap._tcp"
    /// DNA Protocol [David_McLaughlin]
    public static let `dnapUdp`: Self = "_dnap._udp"
    /// D-Cinema Request-Response [Robert_Baldwin]
    public static let `dCinemaRrpTcp`: Self = "_d-cinema-rrp._tcp"
    /// D-Cinema Request-Response [Robert_Baldwin]
    public static let `dCinemaRrpUdp`: Self = "_d-cinema-rrp._udp"
    /// FlashNet Remote Admin [Terry_Smyth]
    public static let `fnetRemoteUiTcp`: Self = "_fnet-remote-ui._tcp"
    /// FlashNet Remote Admin [Terry_Smyth]
    public static let `fnetRemoteUiUdp`: Self = "_fnet-remote-ui._udp"
    /// Dossier Server [Rob_Minerick]
    public static let `dossierTcp`: Self = "_dossier._tcp"
    /// Dossier Server [Rob_Minerick]
    public static let `dossierUdp`: Self = "_dossier._udp"
    /// Indigo Home Server [Matt_Bendiksen]
    public static let `indigoServerTcp`: Self = "_indigo-server._tcp"
    /// Indigo Home Server [Matt_Bendiksen]
    public static let `indigoServerUdp`: Self = "_indigo-server._udp"
    /// DKMessenger Protocol [Douglas_Kadlecek]
    public static let `dkmessengerTcp`: Self = "_dkmessenger._tcp"
    /// DKMessenger Protocol [Douglas_Kadlecek]
    public static let `dkmessengerUdp`: Self = "_dkmessenger._udp"
    /// SGI Storage Manager [Greg_Banks]
    public static let `sgiStormanTcp`: Self = "_sgi-storman._tcp"
    /// SGI Storage Manager [Greg_Banks]
    public static let `sgiStormanUdp`: Self = "_sgi-storman._udp"
    /// Backup To Neighbor [Thomas_Fok]
    public static let `b2nTcp`: Self = "_b2n._tcp"
    /// Backup To Neighbor [Thomas_Fok]
    public static let `b2nUdp`: Self = "_b2n._udp"
    /// Millicent Client Proxy [Steve_Glassman]
    public static let `mcClientTcp`: Self = "_mc-client._tcp"
    /// Millicent Client Proxy [Steve_Glassman]
    public static let `mcClientUdp`: Self = "_mc-client._udp"
    /// AcceleNet Control 
    public static let `accelenetTcp`: Self = "_accelenet._tcp"
    /// AcceleNet Data [Peter_Lepeska]
    public static let `accelenetDataUdp`: Self = "_accelenet-data._udp"
    /// LL Surfup HTTP 
    public static let `llsurfupHttpTcp`: Self = "_llsurfup-http._tcp"
    /// LL Surfup HTTP 
    public static let `llsurfupHttpUdp`: Self = "_llsurfup-http._udp"
    /// LL Surfup HTTPS [Katy_Lynn_McCullough]
    public static let `llsurfupHttpsTcp`: Self = "_llsurfup-https._tcp"
    /// LL Surfup HTTPS [Katy_Lynn_McCullough]
    public static let `llsurfupHttpsUdp`: Self = "_llsurfup-https._udp"
    /// Catchpole port [Christian_Catchpole]
    public static let `catchpoleTcp`: Self = "_catchpole._tcp"
    /// Catchpole port [Christian_Catchpole]
    public static let `catchpoleUdp`: Self = "_catchpole._udp"
    /// MySQL Cluster Manager [Arjen_Lentz]
    public static let `mysqlClusterTcp`: Self = "_mysql-cluster._tcp"
    /// MySQL Cluster Manager [Arjen_Lentz]
    public static let `mysqlClusterUdp`: Self = "_mysql-cluster._udp"
    /// Alias Service [Paul_Tokarchuk]
    public static let `aliasTcp`: Self = "_alias._tcp"
    /// Alias Service [Paul_Tokarchuk]
    public static let `aliasUdp`: Self = "_alias._udp"
    /// HP Web Admin [Lance_Kind]
    public static let `hpWebadminTcp`: Self = "_hp-webadmin._tcp"
    /// HP Web Admin [Lance_Kind]
    public static let `hpWebadminUdp`: Self = "_hp-webadmin._udp"
    /// Unet Connection [Anthony_Stahler]
    public static let `unetTcp`: Self = "_unet._tcp"
    /// Unet Connection [Anthony_Stahler]
    public static let `unetUdp`: Self = "_unet._udp"
    /// CommLinx GPS / AVL System [Peter_Johnson]
    public static let `commlinxAvlTcp`: Self = "_commlinx-avl._tcp"
    /// CommLinx GPS / AVL System [Peter_Johnson]
    public static let `commlinxAvlUdp`: Self = "_commlinx-avl._udp"
    /// General Parallel File System [Dave_Craft]
    public static let `gpfsTcp`: Self = "_gpfs._tcp"
    /// General Parallel File System [Dave_Craft]
    public static let `gpfsUdp`: Self = "_gpfs._udp"
    /// caids sensors channel [Gregory_Hostettler]
    public static let `caidsSensorTcp`: Self = "_caids-sensor._tcp"
    /// caids sensors channel [Gregory_Hostettler]
    public static let `caidsSensorUdp`: Self = "_caids-sensor._udp"
    /// Five Across Server [Glenn_Reid]
    public static let `fiveacrossTcp`: Self = "_fiveacross._tcp"
    /// Five Across Server [Glenn_Reid]
    public static let `fiveacrossUdp`: Self = "_fiveacross._udp"
    /// OpenVPN [James_Yonan]
    public static let `openvpnTcp`: Self = "_openvpn._tcp"
    /// OpenVPN [James_Yonan]
    public static let `openvpnUdp`: Self = "_openvpn._udp"
    /// RSF-1 clustering [Dave_Hines]
    public static let `rsf1Tcp`: Self = "_rsf-1._tcp"
    /// RSF-1 clustering [Dave_Hines]
    public static let `rsf1Udp`: Self = "_rsf-1._udp"
    /// Network Magic [Nick_Holt]
    public static let `netmagicTcp`: Self = "_netmagic._tcp"
    /// Network Magic [Nick_Holt]
    public static let `netmagicUdp`: Self = "_netmagic._udp"
    /// Carrius Remote Access [Gerry_Dubois]
    public static let `carriusRshellTcp`: Self = "_carrius-rshell._tcp"
    /// Carrius Remote Access [Gerry_Dubois]
    public static let `carriusRshellUdp`: Self = "_carrius-rshell._udp"
    /// cajo reference discovery [John_Catherino]
    public static let `cajoDiscoveryTcp`: Self = "_cajo-discovery._tcp"
    /// cajo reference discovery [John_Catherino]
    public static let `cajoDiscoveryUdp`: Self = "_cajo-discovery._udp"
    /// DMIDI [Phil_Kerr]
    public static let `dmidiTcp`: Self = "_dmidi._tcp"
    /// DMIDI [Phil_Kerr]
    public static let `dmidiUdp`: Self = "_dmidi._udp"
    /// SCOL [Cryo_Networks]
    public static let `scolTcp`: Self = "_scol._tcp"
    /// SCOL [Cryo_Networks]
    public static let `scolUdp`: Self = "_scol._udp"
    /// Nucleus Sand Database Server [James_Marsh]
    public static let `nucleusSandTcp`: Self = "_nucleus-sand._tcp"
    /// Nucleus Sand Database Server [James_Marsh]
    public static let `nucleusSandUdp`: Self = "_nucleus-sand._udp"
    /// caiccipc [Vince_Re]
    public static let `caiccipcTcp`: Self = "_caiccipc._tcp"
    /// caiccipc [Vince_Re]
    public static let `caiccipcUdp`: Self = "_caiccipc._udp"
    /// License Validation 
    public static let `ssslicMgrTcp`: Self = "_ssslic-mgr._tcp"
    /// License Validation 
    public static let `ssslicMgrUdp`: Self = "_ssslic-mgr._udp"
    /// Log Request Listener [Eric_Bruno]
    public static let `ssslogMgrTcp`: Self = "_ssslog-mgr._tcp"
    /// Log Request Listener [Eric_Bruno]
    public static let `ssslogMgrUdp`: Self = "_ssslog-mgr._udp"
    /// Accord-MGC [Roni_Even]
    public static let `accordMgcTcp`: Self = "_accord-mgc._tcp"
    /// Accord-MGC [Roni_Even]
    public static let `accordMgcUdp`: Self = "_accord-mgc._udp"
    /// Anthony Data [Paul_Dollemore]
    public static let `anthonyDataTcp`: Self = "_anthony-data._tcp"
    /// Anthony Data [Paul_Dollemore]
    public static let `anthonyDataUdp`: Self = "_anthony-data._udp"
    /// MetaSage [Peter_Anvelt]
    public static let `metasageTcp`: Self = "_metasage._tcp"
    /// MetaSage [Peter_Anvelt]
    public static let `metasageUdp`: Self = "_metasage._udp"
    /// SEAGULL AIS [Lee_Breisacher]
    public static let `seagullAisTcp`: Self = "_seagull-ais._tcp"
    /// SEAGULL AIS [Lee_Breisacher]
    public static let `seagullAisUdp`: Self = "_seagull-ais._udp"
    /// IPCD3 [Mark_Ciskey]
    public static let `ipcd3Tcp`: Self = "_ipcd3._tcp"
    /// IPCD3 [Mark_Ciskey]
    public static let `ipcd3Udp`: Self = "_ipcd3._udp"
    /// EOSS [Robert_Armes]
    public static let `eossTcp`: Self = "_eoss._tcp"
    /// EOSS [Robert_Armes]
    public static let `eossUdp`: Self = "_eoss._udp"
    /// Groove DPP [Ken_Moore]
    public static let `grooveDppTcp`: Self = "_groove-dpp._tcp"
    /// Groove DPP [Ken_Moore]
    public static let `grooveDppUdp`: Self = "_groove-dpp._udp"
    /// lupa [Barney_Wolff]
    public static let `lupaTcp`: Self = "_lupa._tcp"
    /// lupa [Barney_Wolff]
    public static let `lupaUdp`: Self = "_lupa._udp"
    /// Medtronic/Physio-Control LIFENET [Physio-Control_Inc]
    public static let `mpcLifenetTcp`: Self = "_mpc-lifenet._tcp"
    /// Medtronic/Physio-Control LIFENET [Physio-Control_Inc]
    public static let `mpcLifenetUdp`: Self = "_mpc-lifenet._udp"
    /// KAZAA [Ahti_Heinla]
    public static let `kazaaTcp`: Self = "_kazaa._tcp"
    /// KAZAA [Ahti_Heinla]
    public static let `kazaaUdp`: Self = "_kazaa._udp"
    /// scanSTAT 1.0 [William_Scheding]
    public static let `scanstat1Tcp`: Self = "_scanstat-1._tcp"
    /// scanSTAT 1.0 [William_Scheding]
    public static let `scanstat1Udp`: Self = "_scanstat-1._udp"
    /// ETEBAC 5 [Jean_Louis_Barbut]
    public static let `etebac5Tcp`: Self = "_etebac5._tcp"
    /// ETEBAC 5 [Jean_Louis_Barbut]
    public static let `etebac5Udp`: Self = "_etebac5._udp"
    /// HPSS NonDCE Gateway [Michael_Gleicher]
    public static let `hpssNdapiTcp`: Self = "_hpss-ndapi._tcp"
    /// HPSS NonDCE Gateway [Michael_Gleicher]
    public static let `hpssNdapiUdp`: Self = "_hpss-ndapi._udp"
    /// AeroFlight-ADs 
    public static let `aeroflightAdsTcp`: Self = "_aeroflight-ads._tcp"
    /// AeroFlight-ADs 
    public static let `aeroflightAdsUdp`: Self = "_aeroflight-ads._udp"
    /// AeroFlight-Ret [Eric_Johnson]
    public static let `aeroflightRetTcp`: Self = "_aeroflight-ret._tcp"
    /// AeroFlight-Ret [Eric_Johnson]
    public static let `aeroflightRetUdp`: Self = "_aeroflight-ret._udp"
    /// QT SERVER ADMIN [Chris_LeCroy]
    public static let `qtServeradminTcp`: Self = "_qt-serveradmin._tcp"
    /// QT SERVER ADMIN [Chris_LeCroy]
    public static let `qtServeradminUdp`: Self = "_qt-serveradmin._udp"
    /// SweetWARE Apps [David_Dunetz]
    public static let `sweetwareAppsTcp`: Self = "_sweetware-apps._tcp"
    /// SweetWARE Apps [David_Dunetz]
    public static let `sweetwareAppsUdp`: Self = "_sweetware-apps._udp"
    /// SNI R&D network [Martin_Freiss]
    public static let `nervTcp`: Self = "_nerv._tcp"
    /// SNI R&D network [Martin_Freiss]
    public static let `nervUdp`: Self = "_nerv._udp"
    /// TrulyGlobal Protocol [Gur_Kimchi]
    public static let `tgpTcp`: Self = "_tgp._tcp"
    /// TrulyGlobal Protocol [Gur_Kimchi]
    public static let `tgpUdp`: Self = "_tgp._udp"
    /// VPNz [Tom_Strack]
    public static let `vpnzTcp`: Self = "_vpnz._tcp"
    /// VPNz [Tom_Strack]
    public static let `vpnzUdp`: Self = "_vpnz._udp"
    /// SLINKYSEARCH [Desmond_Chan]
    public static let `slinkysearchTcp`: Self = "_slinkysearch._tcp"
    /// SLINKYSEARCH [Desmond_Chan]
    public static let `slinkysearchUdp`: Self = "_slinkysearch._udp"
    /// STGXFWS [Tetsuya_Shioda]
    public static let `stgxfwsTcp`: Self = "_stgxfws._tcp"
    /// STGXFWS [Tetsuya_Shioda]
    public static let `stgxfwsUdp`: Self = "_stgxfws._udp"
    /// DNS2Go [Deerfield_Communications_Inc]
    public static let `dns2goTcp`: Self = "_dns2go._tcp"
    /// DNS2Go [Deerfield_Communications_Inc]
    public static let `dns2goUdp`: Self = "_dns2go._udp"
    /// FLORENCE [Brian_Trammell]
    public static let `florenceTcp`: Self = "_florence._tcp"
    /// FLORENCE [Brian_Trammell]
    public static let `florenceUdp`: Self = "_florence._udp"
    /// ZENworks Tiered Electronic Distribution [Ty_Ellis]
    public static let `zentedTcp`: Self = "_zented._tcp"
    /// ZENworks Tiered Electronic Distribution [Ty_Ellis]
    public static let `zentedUdp`: Self = "_zented._udp"
    /// Periscope [Kevin_Madden]
    public static let `periscopeTcp`: Self = "_periscope._tcp"
    /// Periscope [Kevin_Madden]
    public static let `periscopeUdp`: Self = "_periscope._udp"
    /// menandmice-lpm [Sigfus_Magnusson]
    public static let `menandmiceLpmTcp`: Self = "_menandmice-lpm._tcp"
    /// menandmice-lpm [Sigfus_Magnusson]
    public static let `menandmiceLpmUdp`: Self = "_menandmice-lpm._udp"
    /// Remote systems monitoring [Nexum]
    public static let `firstDefenseTcp`: Self = "_first-defense._tcp"
    /// Remote systems monitoring [Nexum]
    public static let `firstDefenseUdp`: Self = "_first-defense._udp"
    /// Universal App Server [Tim_Sent]
    public static let `univAppserverTcp`: Self = "_univ-appserver._tcp"
    /// Universal App Server [Tim_Sent]
    public static let `univAppserverUdp`: Self = "_univ-appserver._udp"
    /// Infoseek Search Agent [Jackie_Wu]
    public static let `searchAgentTcp`: Self = "_search-agent._tcp"
    /// Infoseek Search Agent [Jackie_Wu]
    public static let `searchAgentUdp`: Self = "_search-agent._udp"
    /// mosaicsyssvc1 [Brian_Matthews]
    public static let `mosaicsyssvc1Tcp`: Self = "_mosaicsyssvc1._tcp"
    /// mosaicsyssvc1 [Brian_Matthews]
    public static let `mosaicsyssvc1Udp`: Self = "_mosaicsyssvc1._udp"
    /// bvcontrol [Daniel_J_Walsh]
    public static let `bvcontrolTcp`: Self = "_bvcontrol._tcp"
    /// bvcontrol [Daniel_J_Walsh]
    public static let `bvcontrolUdp`: Self = "_bvcontrol._udp"
    /// tsdos390 [Ben_Pracht]
    public static let `tsdos390Tcp`: Self = "_tsdos390._tcp"
    /// tsdos390 [Ben_Pracht]
    public static let `tsdos390Udp`: Self = "_tsdos390._udp"
    /// hacl-qs [Farid_Faez]
    public static let `haclQsTcp`: Self = "_hacl-qs._tcp"
    /// hacl-qs [Farid_Faez]
    public static let `haclQsUdp`: Self = "_hacl-qs._udp"
    /// NMSD [Yuri_Machkasov]
    public static let `nmsdTcp`: Self = "_nmsd._tcp"
    /// NMSD [Yuri_Machkasov]
    public static let `nmsdUdp`: Self = "_nmsd._udp"
    /// Instantia [Ruth_Slater]
    public static let `instantiaTcp`: Self = "_instantia._tcp"
    /// Instantia [Ruth_Slater]
    public static let `instantiaUdp`: Self = "_instantia._udp"
    /// nessus [Jordan_Hrycaj]
    public static let `nessusTcp`: Self = "_nessus._tcp"
    /// nessus [Jordan_Hrycaj]
    public static let `nessusUdp`: Self = "_nessus._udp"
    /// NMAS over IP [Hal_Henderson]
    public static let `nmasoveripTcp`: Self = "_nmasoverip._tcp"
    /// NMAS over IP [Hal_Henderson]
    public static let `nmasoveripUdp`: Self = "_nmasoverip._udp"
    /// SerialGateway [Stephen_LaValley]
    public static let `serialgatewayTcp`: Self = "_serialgateway._tcp"
    /// SerialGateway [Stephen_LaValley]
    public static let `serialgatewayUdp`: Self = "_serialgateway._udp"
    /// isbconference1 
    public static let `isbconference1Tcp`: Self = "_isbconference1._tcp"
    /// isbconference1 
    public static let `isbconference1Udp`: Self = "_isbconference1._udp"
    /// isbconference2 [Arnold_Dittmann]
    public static let `isbconference2Tcp`: Self = "_isbconference2._tcp"
    /// isbconference2 [Arnold_Dittmann]
    public static let `isbconference2Udp`: Self = "_isbconference2._udp"
    /// payrouter [David_Wilson]
    public static let `payrouterTcp`: Self = "_payrouter._tcp"
    /// payrouter [David_Wilson]
    public static let `payrouterUdp`: Self = "_payrouter._udp"
    /// VisionPyramid [Gavin_Hutchinson]
    public static let `visionpyramidTcp`: Self = "_visionpyramid._tcp"
    /// VisionPyramid [Gavin_Hutchinson]
    public static let `visionpyramidUdp`: Self = "_visionpyramid._udp"
    /// hermes 
    public static let `hermesTcp`: Self = "_hermes._tcp"
    /// hermes 
    public static let `hermesUdp`: Self = "_hermes._udp"
    /// Mesa Vista Co [Rick_LaBanca]
    public static let `mesavistacoTcp`: Self = "_mesavistaco._tcp"
    /// Mesa Vista Co [Rick_LaBanca]
    public static let `mesavistacoUdp`: Self = "_mesavistaco._udp"
    /// swldy-sias [Peter_E_Williams]
    public static let `swldySiasTcp`: Self = "_swldy-sias._tcp"
    /// swldy-sias [Peter_E_Williams]
    public static let `swldySiasUdp`: Self = "_swldy-sias._udp"
    /// servergraph [Lindsay_Morris]
    public static let `servergraphTcp`: Self = "_servergraph._tcp"
    /// servergraph [Lindsay_Morris]
    public static let `servergraphUdp`: Self = "_servergraph._udp"
    /// bspne-pcc 
    public static let `bspnePccTcp`: Self = "_bspne-pcc._tcp"
    /// bspne-pcc 
    public static let `bspnePccUdp`: Self = "_bspne-pcc._udp"
    /// q55-pcc [Prem_Tirilok]
    public static let `q55PccTcp`: Self = "_q55-pcc._tcp"
    /// q55-pcc [Prem_Tirilok]
    public static let `q55PccUdp`: Self = "_q55-pcc._udp"
    /// de-noc 
    public static let `deNocTcp`: Self = "_de-noc._tcp"
    /// de-noc 
    public static let `deNocUdp`: Self = "_de-noc._udp"
    /// de-cache-query 
    public static let `deCacheQueryTcp`: Self = "_de-cache-query._tcp"
    /// de-cache-query 
    public static let `deCacheQueryUdp`: Self = "_de-cache-query._udp"
    /// de-server [Jeff_Burdette]
    public static let `deServerTcp`: Self = "_de-server._tcp"
    /// de-server [Jeff_Burdette]
    public static let `deServerUdp`: Self = "_de-server._udp"
    /// Shockwave 2 [Dave_Simmons]
    public static let `shockwave2Tcp`: Self = "_shockwave2._tcp"
    /// Shockwave 2 [Dave_Simmons]
    public static let `shockwave2Udp`: Self = "_shockwave2._udp"
    /// Open Network Library [Phil_Frisbie]
    public static let `opennlTcp`: Self = "_opennl._tcp"
    /// Open Network Library [Phil_Frisbie]
    public static let `opennlUdp`: Self = "_opennl._udp"
    /// Open Network Library Voice [Phil_Frisbie]
    public static let `opennlVoiceTcp`: Self = "_opennl-voice._tcp"
    /// Open Network Library Voice [Phil_Frisbie]
    public static let `opennlVoiceUdp`: Self = "_opennl-voice._udp"
    /// ibm-ssd [Barry_Whyte]
    public static let `ibmSsdTcp`: Self = "_ibm-ssd._tcp"
    /// ibm-ssd [Barry_Whyte]
    public static let `ibmSsdUdp`: Self = "_ibm-ssd._udp"
    /// mpshrsv [Makoto_Ikeyama]
    public static let `mpshrsvTcp`: Self = "_mpshrsv._tcp"
    /// mpshrsv [Makoto_Ikeyama]
    public static let `mpshrsvUdp`: Self = "_mpshrsv._udp"
    /// QNTS-ORB [Raghurama_Bhat]
    public static let `qntsOrbTcp`: Self = "_qnts-orb._tcp"
    /// QNTS-ORB [Raghurama_Bhat]
    public static let `qntsOrbUdp`: Self = "_qnts-orb._udp"
    /// dka [Chris_Griffin]
    public static let `dkaTcp`: Self = "_dka._tcp"
    /// dka [Chris_Griffin]
    public static let `dkaUdp`: Self = "_dka._udp"
    /// PRAT [Keith_Wood]
    public static let `pratTcp`: Self = "_prat._tcp"
    /// PRAT [Keith_Wood]
    public static let `pratUdp`: Self = "_prat._udp"
    /// DSSIAPI [Jim_Turner]
    public static let `dssiapiTcp`: Self = "_dssiapi._tcp"
    /// DSSIAPI [Jim_Turner]
    public static let `dssiapiUdp`: Self = "_dssiapi._udp"
    /// DELLPWRAPPKS [David_Troeger]
    public static let `dellpwrappksTcp`: Self = "_dellpwrappks._tcp"
    /// DELLPWRAPPKS [David_Troeger]
    public static let `dellpwrappksUdp`: Self = "_dellpwrappks._udp"
    /// eTrust Policy Compliance [Aaron_Stein]
    public static let `epcTcp`: Self = "_epc._tcp"
    /// eTrust Policy Compliance [Aaron_Stein]
    public static let `epcUdp`: Self = "_epc._udp"
    /// PROPEL-MSGSYS [Bert_Van_der_Linden]
    public static let `propelMsgsysTcp`: Self = "_propel-msgsys._tcp"
    /// PROPEL-MSGSYS [Bert_Van_der_Linden]
    public static let `propelMsgsysUdp`: Self = "_propel-msgsys._udp"
    /// WATiLaPP [Frederic_Weymann]
    public static let `watilappTcp`: Self = "_watilapp._tcp"
    /// WATiLaPP [Frederic_Weymann]
    public static let `watilappUdp`: Self = "_watilapp._udp"
    /// Microsoft Operations Manager [Ashvin_Sanghvi]
    public static let `opsmgrTcp`: Self = "_opsmgr._tcp"
    /// Microsoft Operations Manager [Ashvin_Sanghvi]
    public static let `opsmgrUdp`: Self = "_opsmgr._udp"
    /// eXcW [Norm_Freedman]
    public static let `excwTcp`: Self = "_excw._tcp"
    /// eXcW [Norm_Freedman]
    public static let `excwUdp`: Self = "_excw._udp"
    /// CSPMLockMgr [Ibtsam_Mahfouz]
    public static let `cspmlockmgrTcp`: Self = "_cspmlockmgr._tcp"
    /// CSPMLockMgr [Ibtsam_Mahfouz]
    public static let `cspmlockmgrUdp`: Self = "_cspmlockmgr._udp"
    /// EMC-Gateway [Rene_Fontaine]
    public static let `emcGatewayTcp`: Self = "_emc-gateway._tcp"
    /// EMC-Gateway [Rene_Fontaine]
    public static let `emcGatewayUdp`: Self = "_emc-gateway._udp"
    /// t1distproc [Julian_Biddle]
    public static let `t1distprocTcp`: Self = "_t1distproc._tcp"
    /// t1distproc [Julian_Biddle]
    public static let `t1distprocUdp`: Self = "_t1distproc._udp"
    /// ivcollector 
    public static let `ivcollectorTcp`: Self = "_ivcollector._tcp"
    /// ivcollector 
    public static let `ivcollectorUdp`: Self = "_ivcollector._udp"
    /// mqs [Miva_Corporation]
    public static let `mivaMqsTcp`: Self = "_miva-mqs._tcp"
    /// mqs [Miva_Corporation]
    public static let `mivaMqsUdp`: Self = "_miva-mqs._udp"
    /// Dell Web Admin 1 [Bridget_Navoda]
    public static let `dellwebadmin1Tcp`: Self = "_dellwebadmin-1._tcp"
    /// Dell Web Admin 1 [Bridget_Navoda]
    public static let `dellwebadmin1Udp`: Self = "_dellwebadmin-1._udp"
    /// Dell Web Admin 2 [Bridget_Navoda]
    public static let `dellwebadmin2Tcp`: Self = "_dellwebadmin-2._tcp"
    /// Dell Web Admin 2 [Bridget_Navoda]
    public static let `dellwebadmin2Udp`: Self = "_dellwebadmin-2._udp"
    /// Pictrography [Takashi_Hoshino]
    public static let `pictrographyTcp`: Self = "_pictrography._tcp"
    /// Pictrography [Takashi_Hoshino]
    public static let `pictrographyUdp`: Self = "_pictrography._udp"
    /// healthd [James_E_Housley]
    public static let `healthdTcp`: Self = "_healthd._tcp"
    /// healthd [James_E_Housley]
    public static let `healthdUdp`: Self = "_healthd._udp"
    /// Emperion [Claus_Thor_Barth]
    public static let `emperionTcp`: Self = "_emperion._tcp"
    /// Emperion [Claus_Thor_Barth]
    public static let `emperionUdp`: Self = "_emperion._udp"
    /// Product Information 
    public static let `productinfoTcp`: Self = "_productinfo._tcp"
    /// Product Information 
    public static let `productinfoUdp`: Self = "_productinfo._udp"
    /// IEE-QFX [Mehrdad_Ashtiani]
    public static let `ieeQfxTcp`: Self = "_iee-qfx._tcp"
    /// IEE-QFX [Mehrdad_Ashtiani]
    public static let `ieeQfxUdp`: Self = "_iee-qfx._udp"
    /// neoiface [Jason_McManus]
    public static let `neoifaceTcp`: Self = "_neoiface._tcp"
    /// neoiface [Jason_McManus]
    public static let `neoifaceUdp`: Self = "_neoiface._udp"
    /// netuitive [JF_Huard]
    public static let `netuitiveTcp`: Self = "_netuitive._tcp"
    /// netuitive [JF_Huard]
    public static let `netuitiveUdp`: Self = "_netuitive._udp"
    /// RouteMatch Com [Jeff_Jones]
    public static let `routematchTcp`: Self = "_routematch._tcp"
    /// RouteMatch Com [Jeff_Jones]
    public static let `routematchUdp`: Self = "_routematch._udp"
    /// NavBuddy [Eric_Hackman]
    public static let `navbuddyTcp`: Self = "_navbuddy._tcp"
    /// NavBuddy [Eric_Hackman]
    public static let `navbuddyUdp`: Self = "_navbuddy._udp"
    /// JWalkServer 
    public static let `jwalkserverTcp`: Self = "_jwalkserver._tcp"
    /// JWalkServer 
    public static let `jwalkserverUdp`: Self = "_jwalkserver._udp"
    /// WinJaServer 
    public static let `winjaserverTcp`: Self = "_winjaserver._tcp"
    /// WinJaServer 
    public static let `winjaserverUdp`: Self = "_winjaserver._udp"
    /// SEAGULLLMS [Lee_Breisacher]
    public static let `seagulllmsTcp`: Self = "_seagulllms._tcp"
    /// SEAGULLLMS [Lee_Breisacher]
    public static let `seagulllmsUdp`: Self = "_seagulllms._udp"
    /// dsdn [Stanislaw_Skowronek]
    public static let `dsdnTcp`: Self = "_dsdn._tcp"
    /// dsdn [Stanislaw_Skowronek]
    public static let `dsdnUdp`: Self = "_dsdn._udp"
    /// PKT-KRB-IPSec [Nancy_Davoust]
    public static let `pktKrbIpsecTcp`: Self = "_pkt-krb-ipsec._tcp"
    /// PKT-KRB-IPSec [Nancy_Davoust]
    public static let `pktKrbIpsecUdp`: Self = "_pkt-krb-ipsec._udp"
    /// CMMdriver [Lutz_Karras]
    public static let `cmmdriverTcp`: Self = "_cmmdriver._tcp"
    /// CMMdriver [Lutz_Karras]
    public static let `cmmdriverUdp`: Self = "_cmmdriver._udp"
    /// End-by-Hop Transmission Protocol [Alexander_Bogdanov]
    public static let `ehtpTcp`: Self = "_ehtp._tcp"
    /// End-by-Hop Transmission Protocol [Alexander_Bogdanov]
    public static let `ehtpUdp`: Self = "_ehtp._udp"
    /// dproxy 
    public static let `dproxyTcp`: Self = "_dproxy._tcp"
    /// dproxy 
    public static let `dproxyUdp`: Self = "_dproxy._udp"
    /// sdproxy [Raimond_Diederik]
    public static let `sdproxyTcp`: Self = "_sdproxy._tcp"
    /// sdproxy [Raimond_Diederik]
    public static let `sdproxyUdp`: Self = "_sdproxy._udp"
    /// lpcp [Christian_Stredicke]
    public static let `lpcpTcp`: Self = "_lpcp._tcp"
    /// lpcp [Christian_Stredicke]
    public static let `lpcpUdp`: Self = "_lpcp._udp"
    /// hp-sci [Kim_Scott]
    public static let `hpSciTcp`: Self = "_hp-sci._tcp"
    /// hp-sci [Kim_Scott]
    public static let `hpSciUdp`: Self = "_hp-sci._udp"
    /// H.323 Secure Call Control Signalling [ITU-T]
    public static let `h323hostcallscTcp`: Self = "_h323hostcallsc._tcp"
    /// H.323 Secure Call Control Signalling [ITU-T]
    public static let `h323hostcallscUdp`: Self = "_h323hostcallsc._udp"
    /// sftsrv [Robert_Frazier]
    public static let `sftsrvTcp`: Self = "_sftsrv._tcp"
    /// sftsrv [Robert_Frazier]
    public static let `sftsrvUdp`: Self = "_sftsrv._udp"
    /// Boomerang [Bruce_Lueckenhoff]
    public static let `boomerangTcp`: Self = "_boomerang._tcp"
    /// Boomerang [Bruce_Lueckenhoff]
    public static let `boomerangUdp`: Self = "_boomerang._udp"
    /// pe-mike [Stephen_Hemminger]
    public static let `peMikeTcp`: Self = "_pe-mike._tcp"
    /// pe-mike [Stephen_Hemminger]
    public static let `peMikeUdp`: Self = "_pe-mike._udp"
    /// RE-Conn-Proto [Sandeep_Singhal]
    public static let `reConnProtoTcp`: Self = "_re-conn-proto._tcp"
    /// RE-Conn-Proto [Sandeep_Singhal]
    public static let `reConnProtoUdp`: Self = "_re-conn-proto._udp"
    /// Pacmand [Edward_T_O_Shea]
    public static let `pacmandTcp`: Self = "_pacmand._tcp"
    /// Pacmand [Edward_T_O_Shea]
    public static let `pacmandUdp`: Self = "_pacmand._udp"
    /// Optical Domain Service Interconnect (ODSI) [K_Arvind]
    public static let `odsiTcp`: Self = "_odsi._tcp"
    /// Optical Domain Service Interconnect (ODSI) [K_Arvind]
    public static let `odsiUdp`: Self = "_odsi._udp"
    /// JTAG server [Andrew_Draper]
    public static let `jtagServerTcp`: Self = "_jtag-server._tcp"
    /// JTAG server [Andrew_Draper]
    public static let `jtagServerUdp`: Self = "_jtag-server._udp"
    /// Husky [Mark_Zang]
    public static let `huskyTcp`: Self = "_husky._tcp"
    /// Husky [Mark_Zang]
    public static let `huskyUdp`: Self = "_husky._udp"
    /// RxMon [Javier_Jiminez]
    public static let `rxmonTcp`: Self = "_rxmon._tcp"
    /// RxMon [Javier_Jiminez]
    public static let `rxmonUdp`: Self = "_rxmon._udp"
    /// STI Envision [Don_Stedman]
    public static let `stiEnvisionTcp`: Self = "_sti-envision._tcp"
    /// STI Envision [Don_Stedman]
    public static let `stiEnvisionUdp`: Self = "_sti-envision._udp"
    /// BMC_PATROLDB IANA assigned this well-formed service name as a replacement for "bmc_patroldb". [Portnoy_Boxman]
    public static let `bmcPatroldbTcp`: Self = "_bmc-patroldb._tcp"
    /// BMC_PATROLDB [Portnoy_Boxman]
    public static let `bmc_patroldbTcp`: Self = "_bmc_patroldb._tcp"
    /// BMC_PATROLDB IANA assigned this well-formed service name as a replacement for "bmc_patroldb". [Portnoy_Boxman]
    public static let `bmcPatroldbUdp`: Self = "_bmc-patroldb._udp"
    /// BMC_PATROLDB [Portnoy_Boxman]
    public static let `bmc_patroldbUdp`: Self = "_bmc_patroldb._udp"
    /// Photoscript Distributed Printing System [Les_Klein]
    public static let `pdpsTcp`: Self = "_pdps._tcp"
    /// Photoscript Distributed Printing System [Les_Klein]
    public static let `pdpsUdp`: Self = "_pdps._udp"
    /// E.L.S., Event Listener Service [Jim_Cleppe]
    public static let `elsTcp`: Self = "_els._tcp"
    /// E.L.S., Event Listener Service [Jim_Cleppe]
    public static let `elsUdp`: Self = "_els._udp"
    /// Exbit-ESCP [Morten_Christensen]
    public static let `exbitEscpTcp`: Self = "_exbit-escp._tcp"
    /// Exbit-ESCP [Morten_Christensen]
    public static let `exbitEscpUdp`: Self = "_exbit-escp._udp"
    /// vrts-ipcserver [Bruce_Hestand]
    public static let `vrtsIpcserverTcp`: Self = "_vrts-ipcserver._tcp"
    /// vrts-ipcserver [Bruce_Hestand]
    public static let `vrtsIpcserverUdp`: Self = "_vrts-ipcserver._udp"
    /// krb5gatekeeper [Patrick_Moore]
    public static let `krb5gatekeeperTcp`: Self = "_krb5gatekeeper._tcp"
    /// krb5gatekeeper [Patrick_Moore]
    public static let `krb5gatekeeperUdp`: Self = "_krb5gatekeeper._udp"
    /// AMX-ICSP [Jeff_Burch]
    public static let `amxIcspTcp`: Self = "_amx-icsp._tcp"
    /// AMX-ICSP [Jeff_Burch]
    public static let `amxIcspUdp`: Self = "_amx-icsp._udp"
    /// AMX-AXBNET [Jeff_Burch]
    public static let `amxAxbnetTcp`: Self = "_amx-axbnet._tcp"
    /// AMX-AXBNET [Jeff_Burch]
    public static let `amxAxbnetUdp`: Self = "_amx-axbnet._udp"
    /// Novation [Alan_Dano]
    public static let `novationTcp`: Self = "_novation._tcp"
    /// Novation [Alan_Dano]
    public static let `novationUdp`: Self = "_novation._udp"
    /// brcd [Todd_Picquelle]
    public static let `brcdTcp`: Self = "_brcd._tcp"
    /// brcd [Todd_Picquelle]
    public static let `brcdUdp`: Self = "_brcd._udp"
    /// delta-mcp [Quinton_Tormanen]
    public static let `deltaMcpTcp`: Self = "_delta-mcp._tcp"
    /// delta-mcp [Quinton_Tormanen]
    public static let `deltaMcpUdp`: Self = "_delta-mcp._udp"
    /// DX-Instrument [Walt_Modic]
    public static let `dxInstrumentTcp`: Self = "_dx-instrument._tcp"
    /// DX-Instrument [Walt_Modic]
    public static let `dxInstrumentUdp`: Self = "_dx-instrument._udp"
    /// WIMSIC [James_Brown]
    public static let `wimsicTcp`: Self = "_wimsic._tcp"
    /// WIMSIC [James_Brown]
    public static let `wimsicUdp`: Self = "_wimsic._udp"
    /// Ultrex [Tim_Walsh]
    public static let `ultrexTcp`: Self = "_ultrex._tcp"
    /// Ultrex [Tim_Walsh]
    public static let `ultrexUdp`: Self = "_ultrex._udp"
    /// EWALL [Jeff_Busma]
    public static let `ewallTcp`: Self = "_ewall._tcp"
    /// EWALL [Jeff_Busma]
    public static let `ewallUdp`: Self = "_ewall._udp"
    /// netdb-export [Konstantinos_Kostis]
    public static let `netdbExportTcp`: Self = "_netdb-export._tcp"
    /// netdb-export [Konstantinos_Kostis]
    public static let `netdbExportUdp`: Self = "_netdb-export._udp"
    /// StreetPerfect [Michael_R_Young]
    public static let `streetperfectTcp`: Self = "_streetperfect._tcp"
    /// StreetPerfect [Michael_R_Young]
    public static let `streetperfectUdp`: Self = "_streetperfect._udp"
    /// intersan [Barry_H_Feild]
    public static let `intersanTcp`: Self = "_intersan._tcp"
    /// intersan [Barry_H_Feild]
    public static let `intersanUdp`: Self = "_intersan._udp"
    /// PCIA RXP-B [James_Dabbs]
    public static let `pciaRxpBTcp`: Self = "_pcia-rxp-b._tcp"
    /// PCIA RXP-B [James_Dabbs]
    public static let `pciaRxpBUdp`: Self = "_pcia-rxp-b._udp"
    /// Password Policy [Tonio_Pirotta]
    public static let `passwrdPolicyTcp`: Self = "_passwrd-policy._tcp"
    /// Password Policy [Tonio_Pirotta]
    public static let `passwrdPolicyUdp`: Self = "_passwrd-policy._udp"
    /// writesrv [Marvin_Toungate]
    public static let `writesrvTcp`: Self = "_writesrv._tcp"
    /// writesrv [Marvin_Toungate]
    public static let `writesrvUdp`: Self = "_writesrv._udp"
    /// Digital Notary Protocol [Wes_Doonan]
    public static let `digitalNotaryTcp`: Self = "_digital-notary._tcp"
    /// Digital Notary Protocol [Wes_Doonan]
    public static let `digitalNotaryUdp`: Self = "_digital-notary._udp"
    /// Instant Service Chat [Mike_Clise]
    public static let `ischatTcp`: Self = "_ischat._tcp"
    /// Instant Service Chat [Mike_Clise]
    public static let `ischatUdp`: Self = "_ischat._udp"
    /// menandmice DNS [Sigfus_Magnusson]
    public static let `menandmiceDnsTcp`: Self = "_menandmice-dns._tcp"
    /// menandmice DNS [Sigfus_Magnusson]
    public static let `menandmiceDnsUdp`: Self = "_menandmice-dns._udp"
    /// WMC-log-svr [Scott_Anderson]
    public static let `wmcLogSvcTcp`: Self = "_wmc-log-svc._tcp"
    /// WMC-log-svr [Scott_Anderson]
    public static let `wmcLogSvcUdp`: Self = "_wmc-log-svc._udp"
    /// kjtsiteserver [Jason_Aubain]
    public static let `kjtsiteserverTcp`: Self = "_kjtsiteserver._tcp"
    /// kjtsiteserver [Jason_Aubain]
    public static let `kjtsiteserverUdp`: Self = "_kjtsiteserver._udp"
    /// NAAP [Henry_Haverinen]
    public static let `naapTcp`: Self = "_naap._tcp"
    /// NAAP [Henry_Haverinen]
    public static let `naapUdp`: Self = "_naap._udp"
    /// QuBES [Eric_Grange]
    public static let `qubesTcp`: Self = "_qubes._tcp"
    /// QuBES [Eric_Grange]
    public static let `qubesUdp`: Self = "_qubes._udp"
    /// ESBroker [Alexander_Medvinsky]
    public static let `esbrokerTcp`: Self = "_esbroker._tcp"
    /// ESBroker [Alexander_Medvinsky]
    public static let `esbrokerUdp`: Self = "_esbroker._udp"
    /// re101 [Doriano_Blengino]
    public static let `re101Tcp`: Self = "_re101._tcp"
    /// re101 [Doriano_Blengino]
    public static let `re101Udp`: Self = "_re101._udp"
    /// ICAP [Jeremy_Elson]
    public static let `icapTcp`: Self = "_icap._tcp"
    /// ICAP [Jeremy_Elson]
    public static let `icapUdp`: Self = "_icap._udp"
    /// VPJP [Michael_Collins]
    public static let `vpjpTcp`: Self = "_vpjp._tcp"
    /// VPJP [Michael_Collins]
    public static let `vpjpUdp`: Self = "_vpjp._udp"
    /// Alta Analytics License Manager 
    public static let `altaAnaLmTcp`: Self = "_alta-ana-lm._tcp"
    /// Alta Analytics License Manager 
    public static let `altaAnaLmUdp`: Self = "_alta-ana-lm._udp"
    /// multi media conferencing 
    public static let `bbnMmcTcp`: Self = "_bbn-mmc._tcp"
    /// multi media conferencing 
    public static let `bbnMmcUdp`: Self = "_bbn-mmc._udp"
    /// multi media conferencing 
    public static let `bbnMmxTcp`: Self = "_bbn-mmx._tcp"
    /// multi media conferencing 
    public static let `bbnMmxUdp`: Self = "_bbn-mmx._udp"
    /// Registration Network Protocol 
    public static let `sbookTcp`: Self = "_sbook._tcp"
    /// Registration Network Protocol 
    public static let `sbookUdp`: Self = "_sbook._udp"
    /// Registration Network Protocol [Simson_L_Garfinkel]
    public static let `editbenchTcp`: Self = "_editbench._tcp"
    /// Registration Network Protocol [Simson_L_Garfinkel]
    public static let `editbenchUdp`: Self = "_editbench._udp"
    /// Digital Tool Works (MIT) [Terrence_J_Talbot]
    public static let `equationbuilderTcp`: Self = "_equationbuilder._tcp"
    /// Digital Tool Works (MIT) [Terrence_J_Talbot]
    public static let `equationbuilderUdp`: Self = "_equationbuilder._udp"
    /// Lotus Note [Greg_Pflaum]
    public static let `lotusnoteTcp`: Self = "_lotusnote._tcp"
    /// Lotus Note [Greg_Pflaum]
    public static let `lotusnoteUdp`: Self = "_lotusnote._udp"
    /// Relief Consulting [John_Feiler]
    public static let `reliefTcp`: Self = "_relief._tcp"
    /// Relief Consulting [John_Feiler]
    public static let `reliefUdp`: Self = "_relief._udp"
    /// Five Across XSIP Network [Glenn_Reid]
    public static let `XSIPNetworkTcp`: Self = "_XSIP-network._tcp"
    /// Five Across XSIP Network [Glenn_Reid]
    public static let `XSIPNetworkUdp`: Self = "_XSIP-network._udp"
    /// Intuitive Edge [Montgomery_Zukowski]
    public static let `intuitiveEdgeTcp`: Self = "_intuitive-edge._tcp"
    /// Intuitive Edge [Montgomery_Zukowski]
    public static let `intuitiveEdgeUdp`: Self = "_intuitive-edge._udp"
    /// CuillaMartin Company 
    public static let `cuillamartinTcp`: Self = "_cuillamartin._tcp"
    /// CuillaMartin Company 
    public static let `cuillamartinUdp`: Self = "_cuillamartin._udp"
    /// Electronic PegBoard [Chris_Cuilla]
    public static let `pegboardTcp`: Self = "_pegboard._tcp"
    /// Electronic PegBoard [Chris_Cuilla]
    public static let `pegboardUdp`: Self = "_pegboard._udp"
    /// CONNLCLI 
    public static let `connlcliTcp`: Self = "_connlcli._tcp"
    /// CONNLCLI 
    public static let `connlcliUdp`: Self = "_connlcli._udp"
    /// FTSRV [Ines_Homem_de_Melo]
    public static let `ftsrvTcp`: Self = "_ftsrv._tcp"
    /// FTSRV [Ines_Homem_de_Melo]
    public static let `ftsrvUdp`: Self = "_ftsrv._udp"
    /// MIMER [Per_Schroeder]
    public static let `mimerTcp`: Self = "_mimer._tcp"
    /// MIMER [Per_Schroeder]
    public static let `mimerUdp`: Self = "_mimer._udp"
    /// LinX [Steffen_Schilke]
    public static let `linxTcp`: Self = "_linx._tcp"
    /// LinX [Steffen_Schilke]
    public static let `linxUdp`: Self = "_linx._udp"
    /// TimeFlies [Doug_Kent]
    public static let `timefliesTcp`: Self = "_timeflies._tcp"
    /// TimeFlies [Doug_Kent]
    public static let `timefliesUdp`: Self = "_timeflies._udp"
    /// Network DataMover Requester 
    public static let `ndmRequesterTcp`: Self = "_ndm-requester._tcp"
    /// Network DataMover Requester 
    public static let `ndmRequesterUdp`: Self = "_ndm-requester._udp"
    /// Network DataMover Server [Toshio_Watanabe]
    public static let `ndmServerTcp`: Self = "_ndm-server._tcp"
    /// Network DataMover Server [Toshio_Watanabe]
    public static let `ndmServerUdp`: Self = "_ndm-server._udp"
    /// Network Software Associates [Jeffery_Chiao]
    public static let `adaptSnaTcp`: Self = "_adapt-sna._tcp"
    /// Network Software Associates [Jeffery_Chiao]
    public static let `adaptSnaUdp`: Self = "_adapt-sna._udp"
    /// Novell NetWare Comm Service Platform [Laurie_Lindsey]
    public static let `netwareCspTcp`: Self = "_netware-csp._tcp"
    /// Novell NetWare Comm Service Platform [Laurie_Lindsey]
    public static let `netwareCspUdp`: Self = "_netware-csp._udp"
    /// DCS [Stefan_Siebert]
    public static let `dcsTcp`: Self = "_dcs._tcp"
    /// DCS [Stefan_Siebert]
    public static let `dcsUdp`: Self = "_dcs._udp"
    /// ScreenCast [Bill_Tschumy]
    public static let `screencastTcp`: Self = "_screencast._tcp"
    /// ScreenCast [Bill_Tschumy]
    public static let `screencastUdp`: Self = "_screencast._udp"
    /// GlobalView to Unix Shell 
    public static let `gvUsTcp`: Self = "_gv-us._tcp"
    /// GlobalView to Unix Shell 
    public static let `gvUsUdp`: Self = "_gv-us._udp"
    /// Unix Shell to GlobalView [Makoto_Mita]
    public static let `usGvTcp`: Self = "_us-gv._tcp"
    /// Unix Shell to GlobalView [Makoto_Mita]
    public static let `usGvUdp`: Self = "_us-gv._udp"
    /// Fujitsu Config Protocol 
    public static let `fcCliTcp`: Self = "_fc-cli._tcp"
    /// Fujitsu Config Protocol 
    public static let `fcCliUdp`: Self = "_fc-cli._udp"
    /// Fujitsu Config Protocol [Ryuichi_Horie]
    public static let `fcSerTcp`: Self = "_fc-ser._tcp"
    /// Fujitsu Config Protocol [Ryuichi_Horie]
    public static let `fcSerUdp`: Self = "_fc-ser._udp"
    /// Chromagrafx [Mike_Barthelemy]
    public static let `chromagrafxTcp`: Self = "_chromagrafx._tcp"
    /// Chromagrafx [Mike_Barthelemy]
    public static let `chromagrafxUdp`: Self = "_chromagrafx._udp"
    /// EPI Software Systems [Jim_Vlcek]
    public static let `mollyTcp`: Self = "_molly._tcp"
    /// EPI Software Systems [Jim_Vlcek]
    public static let `mollyUdp`: Self = "_molly._udp"
    /// Bytex [Mary_Ann_Burt]
    public static let `bytexTcp`: Self = "_bytex._tcp"
    /// Bytex [Mary_Ann_Burt]
    public static let `bytexUdp`: Self = "_bytex._udp"
    /// IBM Person to Person Software [Simon_Phipps]
    public static let `ibmPpsTcp`: Self = "_ibm-pps._tcp"
    /// IBM Person to Person Software [Simon_Phipps]
    public static let `ibmPpsUdp`: Self = "_ibm-pps._udp"
    /// Cichlid License Manager [Andy_Burgess]
    public static let `cichlidTcp`: Self = "_cichlid._tcp"
    /// Cichlid License Manager [Andy_Burgess]
    public static let `cichlidUdp`: Self = "_cichlid._udp"
    /// Elan License Manager [Ken_Greer]
    public static let `elanTcp`: Self = "_elan._tcp"
    /// Elan License Manager [Ken_Greer]
    public static let `elanUdp`: Self = "_elan._udp"
    /// Integrity Solutions [Tim_Dawson]
    public static let `dbreporterTcp`: Self = "_dbreporter._tcp"
    /// Integrity Solutions [Tim_Dawson]
    public static let `dbreporterUdp`: Self = "_dbreporter._udp"
    /// Telesis Network License Manager [Karl_Schendel_Jr]
    public static let `telesisLicmanTcp`: Self = "_telesis-licman._tcp"
    /// Telesis Network License Manager [Karl_Schendel_Jr]
    public static let `telesisLicmanUdp`: Self = "_telesis-licman._udp"
    /// Apple Network License Manager [Earl_Wallace]
    public static let `appleLicmanTcp`: Self = "_apple-licman._tcp"
    /// Apple Network License Manager [Earl_Wallace]
    public static let `appleLicmanUdp`: Self = "_apple-licman._udp"
    /// udt_os IANA assigned this well-formed service name as a replacement for "udt_os". 
    public static let `udtOsTcp`: Self = "_udt-os._tcp"
    /// udt_os 
    public static let `udt_osTcp`: Self = "_udt_os._tcp"
    /// udt_os IANA assigned this well-formed service name as a replacement for "udt_os". 
    public static let `udtOsUdp`: Self = "_udt-os._udp"
    /// udt_os 
    public static let `udt_osUdp`: Self = "_udt_os._udp"
    /// GW Hannaway Network License Manager [J_Gabriel_Foster]
    public static let `gwhaTcp`: Self = "_gwha._tcp"
    /// GW Hannaway Network License Manager [J_Gabriel_Foster]
    public static let `gwhaUdp`: Self = "_gwha._udp"
    /// Objective Solutions License Manager [Donald_Cornwell]
    public static let `osLicmanTcp`: Self = "_os-licman._tcp"
    /// Objective Solutions License Manager [Donald_Cornwell]
    public static let `osLicmanUdp`: Self = "_os-licman._udp"
    /// Atex Publishing License Manager IANA assigned this well-formed service name as a replacement for "atex_elmd". [Brett_Sorenson]
    public static let `atexElmdTcp`: Self = "_atex-elmd._tcp"
    /// Atex Publishing License Manager [Brett_Sorenson]
    public static let `atex_elmdTcp`: Self = "_atex_elmd._tcp"
    /// Atex Publishing License Manager IANA assigned this well-formed service name as a replacement for "atex_elmd". [Brett_Sorenson]
    public static let `atexElmdUdp`: Self = "_atex-elmd._udp"
    /// Atex Publishing License Manager [Brett_Sorenson]
    public static let `atex_elmdUdp`: Self = "_atex_elmd._udp"
    /// CheckSum License Manager [Andreas_Glocker]
    public static let `checksumTcp`: Self = "_checksum._tcp"
    /// CheckSum License Manager [Andreas_Glocker]
    public static let `checksumUdp`: Self = "_checksum._udp"
    /// Computer Aided Design Software Inc LM [Sulistio_Muljadi]
    public static let `cadsiLmTcp`: Self = "_cadsi-lm._tcp"
    /// Computer Aided Design Software Inc LM [Sulistio_Muljadi]
    public static let `cadsiLmUdp`: Self = "_cadsi-lm._udp"
    /// Objective Solutions DataBase Cache [Donald_Cornwell_2]
    public static let `objectiveDbcTcp`: Self = "_objective-dbc._tcp"
    /// Objective Solutions DataBase Cache [Donald_Cornwell_2]
    public static let `objectiveDbcUdp`: Self = "_objective-dbc._udp"
    /// Document Manager 
    public static let `iclpvDmTcp`: Self = "_iclpv-dm._tcp"
    /// Document Manager 
    public static let `iclpvDmUdp`: Self = "_iclpv-dm._udp"
    /// Storage Controller 
    public static let `iclpvScTcp`: Self = "_iclpv-sc._tcp"
    /// Storage Controller 
    public static let `iclpvScUdp`: Self = "_iclpv-sc._udp"
    /// Storage Access Server 
    public static let `iclpvSasTcp`: Self = "_iclpv-sas._tcp"
    /// Storage Access Server 
    public static let `iclpvSasUdp`: Self = "_iclpv-sas._udp"
    /// Print Manager 
    public static let `iclpvPmTcp`: Self = "_iclpv-pm._tcp"
    /// Print Manager 
    public static let `iclpvPmUdp`: Self = "_iclpv-pm._udp"
    /// Network Log Server 
    public static let `iclpvNlsTcp`: Self = "_iclpv-nls._tcp"
    /// Network Log Server 
    public static let `iclpvNlsUdp`: Self = "_iclpv-nls._udp"
    /// Network Log Client 
    public static let `iclpvNlcTcp`: Self = "_iclpv-nlc._tcp"
    /// Network Log Client 
    public static let `iclpvNlcUdp`: Self = "_iclpv-nlc._udp"
    /// PC Workstation Manager software [A_P_Hobson]
    public static let `iclpvWsmTcp`: Self = "_iclpv-wsm._tcp"
    /// PC Workstation Manager software [A_P_Hobson]
    public static let `iclpvWsmUdp`: Self = "_iclpv-wsm._udp"
    /// DVL Active Mail 
    public static let `dvlActivemailTcp`: Self = "_dvl-activemail._tcp"
    /// DVL Active Mail 
    public static let `dvlActivemailUdp`: Self = "_dvl-activemail._udp"
    /// Audio Active Mail 
    public static let `audioActivmailTcp`: Self = "_audio-activmail._tcp"
    /// Audio Active Mail 
    public static let `audioActivmailUdp`: Self = "_audio-activmail._udp"
    /// Video Active Mail [Avshalom_Houri]
    public static let `videoActivmailTcp`: Self = "_video-activmail._tcp"
    /// Video Active Mail [Avshalom_Houri]
    public static let `videoActivmailUdp`: Self = "_video-activmail._udp"
    /// Cadkey License Manager 
    public static let `cadkeyLicmanTcp`: Self = "_cadkey-licman._tcp"
    /// Cadkey License Manager 
    public static let `cadkeyLicmanUdp`: Self = "_cadkey-licman._udp"
    /// Cadkey Tablet Daemon [Joe_McCollough]
    public static let `cadkeyTabletTcp`: Self = "_cadkey-tablet._tcp"
    /// Cadkey Tablet Daemon [Joe_McCollough]
    public static let `cadkeyTabletUdp`: Self = "_cadkey-tablet._udp"
    /// Goldleaf License Manager [John_Fox]
    public static let `goldleafLicmanTcp`: Self = "_goldleaf-licman._tcp"
    /// Goldleaf License Manager [John_Fox]
    public static let `goldleafLicmanUdp`: Self = "_goldleaf-licman._udp"
    /// Prospero Resource Manager 
    public static let `prmSmNpTcp`: Self = "_prm-sm-np._tcp"
    /// Prospero Resource Manager 
    public static let `prmSmNpUdp`: Self = "_prm-sm-np._udp"
    /// Prospero Resource Manager [B_Clifford_Neuman]
    public static let `prmNmNpTcp`: Self = "_prm-nm-np._tcp"
    /// Prospero Resource Manager [B_Clifford_Neuman]
    public static let `prmNmNpUdp`: Self = "_prm-nm-np._udp"
    /// Infinite Graphics License Manager 
    public static let `igiLmTcp`: Self = "_igi-lm._tcp"
    /// Infinite Graphics License Manager 
    public static let `igiLmUdp`: Self = "_igi-lm._udp"
    /// IBM Remote Execution Starter 
    public static let `ibmResTcp`: Self = "_ibm-res._tcp"
    /// IBM Remote Execution Starter 
    public static let `ibmResUdp`: Self = "_ibm-res._udp"
    /// NetLabs License Manager 
    public static let `netlabsLmTcp`: Self = "_netlabs-lm._tcp"
    /// NetLabs License Manager 
    public static let `netlabsLmUdp`: Self = "_netlabs-lm._udp"
    /// TIBET Data Server [Technical_Pursuit_Inc]
    public static let `tibetServerTcp`: Self = "_tibet-server._tcp"
    /// Sophia License Manager [Eric_Brown]
    public static let `sophiaLmTcp`: Self = "_sophia-lm._tcp"
    /// Sophia License Manager [Eric_Brown]
    public static let `sophiaLmUdp`: Self = "_sophia-lm._udp"
    /// Here License Manager [David_Ison]
    public static let `hereLmTcp`: Self = "_here-lm._tcp"
    /// Here License Manager [David_Ison]
    public static let `hereLmUdp`: Self = "_here-lm._udp"
    /// HiQ License Manager [Rick_Pugh]
    public static let `hiqTcp`: Self = "_hiq._tcp"
    /// HiQ License Manager [Rick_Pugh]
    public static let `hiqUdp`: Self = "_hiq._udp"
    /// AudioFile [Jim_Gettys]
    public static let `afTcp`: Self = "_af._tcp"
    /// AudioFile [Jim_Gettys]
    public static let `afUdp`: Self = "_af._udp"
    /// InnoSys 
    public static let `innosysTcp`: Self = "_innosys._tcp"
    /// InnoSys 
    public static let `innosysUdp`: Self = "_innosys._udp"
    /// Innosys-ACL [Eric_Welch]
    public static let `innosysAclTcp`: Self = "_innosys-acl._tcp"
    /// Innosys-ACL [Eric_Welch]
    public static let `innosysAclUdp`: Self = "_innosys-acl._udp"
    /// IBM MQSeries [Roger_Meli]
    public static let `ibmMqseriesTcp`: Self = "_ibm-mqseries._tcp"
    /// IBM MQSeries [Roger_Meli]
    public static let `ibmMqseriesUdp`: Self = "_ibm-mqseries._udp"
    /// DBStar [Jeffrey_Millman]
    public static let `dbstarTcp`: Self = "_dbstar._tcp"
    /// DBStar [Jeffrey_Millman]
    public static let `dbstarUdp`: Self = "_dbstar._udp"
    /// Novell LU6.2 IANA assigned this well-formed service name as a replacement for "novell-lu6.2". [Peter_Liu]
    public static let `novellLu62Tcp`: Self = "_novell-lu6-2._tcp"
    /// Novell LU6.2 IANA assigned this well-formed service name as a replacement for "novell-lu6.2". [Peter_Liu]
    public static let `novellLu62Udp`: Self = "_novell-lu6-2._udp"
    /// Timbuktu Service 1 Port 
    public static let `timbuktuSrv1Tcp`: Self = "_timbuktu-srv1._tcp"
    /// Timbuktu Service 1 Port 
    public static let `timbuktuSrv1Udp`: Self = "_timbuktu-srv1._udp"
    /// Timbuktu Service 2 Port 
    public static let `timbuktuSrv2Tcp`: Self = "_timbuktu-srv2._tcp"
    /// Timbuktu Service 2 Port 
    public static let `timbuktuSrv2Udp`: Self = "_timbuktu-srv2._udp"
    /// Timbuktu Service 3 Port 
    public static let `timbuktuSrv3Tcp`: Self = "_timbuktu-srv3._tcp"
    /// Timbuktu Service 3 Port 
    public static let `timbuktuSrv3Udp`: Self = "_timbuktu-srv3._udp"
    /// Timbuktu Service 4 Port [Marc_Epard]
    public static let `timbuktuSrv4Tcp`: Self = "_timbuktu-srv4._tcp"
    /// Timbuktu Service 4 Port [Marc_Epard]
    public static let `timbuktuSrv4Udp`: Self = "_timbuktu-srv4._udp"
    /// Gandalf License Manager [gilmer]
    public static let `gandalfLmTcp`: Self = "_gandalf-lm._tcp"
    /// Gandalf License Manager [gilmer]
    public static let `gandalfLmUdp`: Self = "_gandalf-lm._udp"
    /// Autodesk License Manager [David_Ko]
    public static let `autodeskLmTcp`: Self = "_autodesk-lm._tcp"
    /// Autodesk License Manager [David_Ko]
    public static let `autodeskLmUdp`: Self = "_autodesk-lm._udp"
    /// Essbase Arbor Software 
    public static let `essbaseTcp`: Self = "_essbase._tcp"
    /// Essbase Arbor Software 
    public static let `essbaseUdp`: Self = "_essbase._udp"
    /// Hybrid Encryption Protocol [Howard_Hart]
    public static let `hybridTcp`: Self = "_hybrid._tcp"
    /// Hybrid Encryption Protocol [Howard_Hart]
    public static let `hybridUdp`: Self = "_hybrid._udp"
    /// Zion Software License Manager [David_Ferrero]
    public static let `zionLmTcp`: Self = "_zion-lm._tcp"
    /// Zion Software License Manager [David_Ferrero]
    public static let `zionLmUdp`: Self = "_zion-lm._udp"
    /// Satellite-data Acquisition System 1 [Bill_Taylor]
    public static let `saisTcp`: Self = "_sais._tcp"
    /// Satellite-data Acquisition System 1 [Bill_Taylor]
    public static let `saisUdp`: Self = "_sais._udp"
    /// mloadd monitoring tool [Bob_Braden_2]
    public static let `mloaddTcp`: Self = "_mloadd._tcp"
    /// mloadd monitoring tool [Bob_Braden_2]
    public static let `mloaddUdp`: Self = "_mloadd._udp"
    /// Informatik License Manager [Harald_Schlangmann]
    public static let `informatikLmTcp`: Self = "_informatik-lm._tcp"
    /// Informatik License Manager [Harald_Schlangmann]
    public static let `informatikLmUdp`: Self = "_informatik-lm._udp"
    /// Hypercom NMS 
    public static let `nmsTcp`: Self = "_nms._tcp"
    /// Hypercom NMS 
    public static let `nmsUdp`: Self = "_nms._udp"
    /// Hypercom TPDU [Noor_Chowdhury]
    public static let `tpduTcp`: Self = "_tpdu._tcp"
    /// Hypercom TPDU [Noor_Chowdhury]
    public static let `tpduUdp`: Self = "_tpdu._udp"
    /// Reverse Gossip Transport [Ian_Jackson]
    public static let `rgtpTcp`: Self = "_rgtp._tcp"
    /// Reverse Gossip Transport [Ian_Jackson]
    public static let `rgtpUdp`: Self = "_rgtp._udp"
    /// Blueberry Software License Manager [Steve_Beigel]
    public static let `blueberryLmTcp`: Self = "_blueberry-lm._tcp"
    /// Blueberry Software License Manager [Steve_Beigel]
    public static let `blueberryLmUdp`: Self = "_blueberry-lm._udp"
    /// Microsoft-SQL-Server 
    public static let `msSqlSTcp`: Self = "_ms-sql-s._tcp"
    /// Microsoft-SQL-Server 
    public static let `msSqlSUdp`: Self = "_ms-sql-s._udp"
    /// Microsoft-SQL-Monitor [Peter_Hussey]
    public static let `msSqlMTcp`: Self = "_ms-sql-m._tcp"
    /// Microsoft-SQL-Monitor [Peter_Hussey]
    public static let `msSqlMUdp`: Self = "_ms-sql-m._udp"
    /// IBM CICS [Geoff_Meacock]
    public static let `ibmCicsTcp`: Self = "_ibm-cics._tcp"
    /// IBM CICS [Geoff_Meacock]
    public static let `ibmCicsUdp`: Self = "_ibm-cics._udp"
    /// Satellite-data Acquisition System 2 [Bill_Taylor]
    public static let `saismTcp`: Self = "_saism._tcp"
    /// Satellite-data Acquisition System 2 [Bill_Taylor]
    public static let `saismUdp`: Self = "_saism._udp"
    /// Tabula [Marcelo_Einhorn]
    public static let `tabulaTcp`: Self = "_tabula._tcp"
    /// Tabula [Marcelo_Einhorn]
    public static let `tabulaUdp`: Self = "_tabula._udp"
    /// Eicon Security Agent/Server 
    public static let `eiconServerTcp`: Self = "_eicon-server._tcp"
    /// Eicon Security Agent/Server 
    public static let `eiconServerUdp`: Self = "_eicon-server._udp"
    /// Eicon X25/SNA Gateway 
    public static let `eiconX25Tcp`: Self = "_eicon-x25._tcp"
    /// Eicon X25/SNA Gateway 
    public static let `eiconX25Udp`: Self = "_eicon-x25._udp"
    /// Eicon Service Location Protocol [Pat_Calhoun]
    public static let `eiconSlpTcp`: Self = "_eicon-slp._tcp"
    /// Eicon Service Location Protocol [Pat_Calhoun]
    public static let `eiconSlpUdp`: Self = "_eicon-slp._udp"
    /// Cadis License Management 
    public static let `cadis1Tcp`: Self = "_cadis-1._tcp"
    /// Cadis License Management 
    public static let `cadis1Udp`: Self = "_cadis-1._udp"
    /// Cadis License Management [Todd_Wichers]
    public static let `cadis2Tcp`: Self = "_cadis-2._tcp"
    /// Cadis License Management [Todd_Wichers]
    public static let `cadis2Udp`: Self = "_cadis-2._udp"
    /// Integrated Engineering Software [David_Tong]
    public static let `iesLmTcp`: Self = "_ies-lm._tcp"
    /// Integrated Engineering Software [David_Tong]
    public static let `iesLmUdp`: Self = "_ies-lm._udp"
    /// Marcam  License Management [Therese_Hunt]
    public static let `marcamLmTcp`: Self = "_marcam-lm._tcp"
    /// Marcam  License Management [Therese_Hunt]
    public static let `marcamLmUdp`: Self = "_marcam-lm._udp"
    /// Proxima License Manager 
    public static let `proximaLmTcp`: Self = "_proxima-lm._tcp"
    /// Proxima License Manager 
    public static let `proximaLmUdp`: Self = "_proxima-lm._udp"
    /// Optical Research Associates License Manager 
    public static let `oraLmTcp`: Self = "_ora-lm._tcp"
    /// Optical Research Associates License Manager 
    public static let `oraLmUdp`: Self = "_ora-lm._udp"
    /// Applied Parallel Research LM [Jim_Dillon]
    public static let `apriLmTcp`: Self = "_apri-lm._tcp"
    /// Applied Parallel Research LM [Jim_Dillon]
    public static let `apriLmUdp`: Self = "_apri-lm._udp"
    /// OpenConnect License Manager [Sue_Barnhill]
    public static let `ocLmTcp`: Self = "_oc-lm._tcp"
    /// OpenConnect License Manager [Sue_Barnhill]
    public static let `ocLmUdp`: Self = "_oc-lm._udp"
    /// PEport [Qentin_Neill]
    public static let `peportTcp`: Self = "_peport._tcp"
    /// PEport [Qentin_Neill]
    public static let `peportUdp`: Self = "_peport._udp"
    /// Tandem Distributed Workbench Facility [Mike_Bert]
    public static let `dwfTcp`: Self = "_dwf._tcp"
    /// Tandem Distributed Workbench Facility [Mike_Bert]
    public static let `dwfUdp`: Self = "_dwf._udp"
    /// IBM Information Management [Karen_Burns]
    public static let `infomanTcp`: Self = "_infoman._tcp"
    /// IBM Information Management [Karen_Burns]
    public static let `infomanUdp`: Self = "_infoman._udp"
    /// GTE Government Systems License Man [Mike_Gregory]
    public static let `gtegscLmTcp`: Self = "_gtegsc-lm._tcp"
    /// GTE Government Systems License Man [Mike_Gregory]
    public static let `gtegscLmUdp`: Self = "_gtegsc-lm._udp"
    /// Genie License Manager [Paul_Applegate]
    public static let `genieLmTcp`: Self = "_genie-lm._tcp"
    /// Genie License Manager [Paul_Applegate]
    public static let `genieLmUdp`: Self = "_genie-lm._udp"
    /// interHDL License Manager IANA assigned this well-formed service name as a replacement for "interhdl_elmd". [Eli_Sternheim]
    public static let `interhdlElmdTcp`: Self = "_interhdl-elmd._tcp"
    /// interHDL License Manager [Eli_Sternheim]
    public static let `interhdl_elmdTcp`: Self = "_interhdl_elmd._tcp"
    /// interHDL License Manager IANA assigned this well-formed service name as a replacement for "interhdl_elmd". [Eli_Sternheim]
    public static let `interhdlElmdUdp`: Self = "_interhdl-elmd._udp"
    /// interHDL License Manager [Eli_Sternheim]
    public static let `interhdl_elmdUdp`: Self = "_interhdl_elmd._udp"
    /// ESL License Manager [Abel_Chou]
    public static let `eslLmTcp`: Self = "_esl-lm._tcp"
    /// ESL License Manager [Abel_Chou]
    public static let `eslLmUdp`: Self = "_esl-lm._udp"
    /// DCA [Jeff_Garbers_2]
    public static let `dcaTcp`: Self = "_dca._tcp"
    /// DCA [Jeff_Garbers_2]
    public static let `dcaUdp`: Self = "_dca._udp"
    /// Valisys License Manager [Leslie_Lincoln]
    public static let `valisysLmTcp`: Self = "_valisys-lm._tcp"
    /// Valisys License Manager [Leslie_Lincoln]
    public static let `valisysLmUdp`: Self = "_valisys-lm._udp"
    /// Nichols Research Corp. [Howard_Cole]
    public static let `nrcabqLmTcp`: Self = "_nrcabq-lm._tcp"
    /// Nichols Research Corp. [Howard_Cole]
    public static let `nrcabqLmUdp`: Self = "_nrcabq-lm._udp"
    /// Proshare Notebook Application 
    public static let `proshare1Tcp`: Self = "_proshare1._tcp"
    /// Proshare Notebook Application 
    public static let `proshare1Udp`: Self = "_proshare1._udp"
    /// Proshare Notebook Application [Robin_Kar]
    public static let `proshare2Tcp`: Self = "_proshare2._tcp"
    /// Proshare Notebook Application [Robin_Kar]
    public static let `proshare2Udp`: Self = "_proshare2._udp"
    /// IBM Wireless LAN IANA assigned this well-formed service name as a replacement for "ibm_wrless_lan". [flanne]
    public static let `ibmWrlessLanTcp`: Self = "_ibm-wrless-lan._tcp"
    /// IBM Wireless LAN [flanne]
    public static let `ibm_wrless_lanTcp`: Self = "_ibm_wrless_lan._tcp"
    /// IBM Wireless LAN IANA assigned this well-formed service name as a replacement for "ibm_wrless_lan". [flanne]
    public static let `ibmWrlessLanUdp`: Self = "_ibm-wrless-lan._udp"
    /// IBM Wireless LAN [flanne]
    public static let `ibm_wrless_lanUdp`: Self = "_ibm_wrless_lan._udp"
    /// World License Manager [Michael_S_Amirault]
    public static let `worldLmTcp`: Self = "_world-lm._tcp"
    /// World License Manager [Michael_S_Amirault]
    public static let `worldLmUdp`: Self = "_world-lm._udp"
    /// Nucleus [Venky_Nagar]
    public static let `nucleusTcp`: Self = "_nucleus._tcp"
    /// Nucleus [Venky_Nagar]
    public static let `nucleusUdp`: Self = "_nucleus._udp"
    /// MSL License Manager IANA assigned this well-formed service name as a replacement for "msl_lmd". [Matt_Timmermans]
    public static let `mslLmdTcp`: Self = "_msl-lmd._tcp"
    /// MSL License Manager [Matt_Timmermans]
    public static let `msl_lmdTcp`: Self = "_msl_lmd._tcp"
    /// MSL License Manager IANA assigned this well-formed service name as a replacement for "msl_lmd". [Matt_Timmermans]
    public static let `mslLmdUdp`: Self = "_msl-lmd._udp"
    /// MSL License Manager [Matt_Timmermans]
    public static let `msl_lmdUdp`: Self = "_msl_lmd._udp"
    /// Pipes Platform [Mark_Farlin]
    public static let `pipesTcp`: Self = "_pipes._tcp"
    /// Pipes Platform [Mark_Farlin]
    public static let `pipesUdp`: Self = "_pipes._udp"
    /// Ocean Software License Manager [Randy_Leonard]
    public static let `oceansoftLmTcp`: Self = "_oceansoft-lm._tcp"
    /// Ocean Software License Manager [Randy_Leonard]
    public static let `oceansoftLmUdp`: Self = "_oceansoft-lm._udp"
    /// CSDMBASE 
    public static let `csdmbaseTcp`: Self = "_csdmbase._tcp"
    /// CSDMBASE 
    public static let `csdmbaseUdp`: Self = "_csdmbase._udp"
    /// CSDM [Robert_Stabl]
    public static let `csdmTcp`: Self = "_csdm._tcp"
    /// CSDM [Robert_Stabl]
    public static let `csdmUdp`: Self = "_csdm._udp"
    /// Active Analysis Limited License Manager [David_Snocken]
    public static let `aalLmTcp`: Self = "_aal-lm._tcp"
    /// Active Analysis Limited License Manager [David_Snocken]
    public static let `aalLmUdp`: Self = "_aal-lm._udp"
    /// Universal Analytics [Mark_R_Ludwig]
    public static let `uaiactTcp`: Self = "_uaiact._tcp"
    /// Universal Analytics [Mark_R_Ludwig]
    public static let `uaiactUdp`: Self = "_uaiact._udp"
    /// OpenMath [Garth_Mayville]
    public static let `openmathTcp`: Self = "_openmath._tcp"
    /// OpenMath [Garth_Mayville]
    public static let `openmathUdp`: Self = "_openmath._udp"
    /// Telefinder [Jim_White]
    public static let `telefinderTcp`: Self = "_telefinder._tcp"
    /// Telefinder [Jim_White]
    public static let `telefinderUdp`: Self = "_telefinder._udp"
    /// Taligent License Manager [Mark_Sapsford]
    public static let `taligentLmTcp`: Self = "_taligent-lm._tcp"
    /// Taligent License Manager [Mark_Sapsford]
    public static let `taligentLmUdp`: Self = "_taligent-lm._udp"
    /// clvm-cfg [Eric_Soderberg]
    public static let `clvmCfgTcp`: Self = "_clvm-cfg._tcp"
    /// clvm-cfg [Eric_Soderberg]
    public static let `clvmCfgUdp`: Self = "_clvm-cfg._udp"
    /// ms-sna-server 
    public static let `msSnaServerTcp`: Self = "_ms-sna-server._tcp"
    /// ms-sna-server 
    public static let `msSnaServerUdp`: Self = "_ms-sna-server._udp"
    /// ms-sna-base [Gordon_Mangione]
    public static let `msSnaBaseTcp`: Self = "_ms-sna-base._tcp"
    /// ms-sna-base [Gordon_Mangione]
    public static let `msSnaBaseUdp`: Self = "_ms-sna-base._udp"
    /// dberegister [Brian_Griswold]
    public static let `dberegisterTcp`: Self = "_dberegister._tcp"
    /// dberegister [Brian_Griswold]
    public static let `dberegisterUdp`: Self = "_dberegister._udp"
    /// PacerForum [Peter_Caswell]
    public static let `pacerforumTcp`: Self = "_pacerforum._tcp"
    /// PacerForum [Peter_Caswell]
    public static let `pacerforumUdp`: Self = "_pacerforum._udp"
    /// AIRS [Bruce_Wilson]
    public static let `airsTcp`: Self = "_airs._tcp"
    /// AIRS [Bruce_Wilson]
    public static let `airsUdp`: Self = "_airs._udp"
    /// Miteksys License Manager [Shane_McRoberts]
    public static let `miteksysLmTcp`: Self = "_miteksys-lm._tcp"
    /// Miteksys License Manager [Shane_McRoberts]
    public static let `miteksysLmUdp`: Self = "_miteksys-lm._udp"
    /// AFS License Manager [Michael_R_Pizolato]
    public static let `afsTcp`: Self = "_afs._tcp"
    /// AFS License Manager [Michael_R_Pizolato]
    public static let `afsUdp`: Self = "_afs._udp"
    /// Confluent License Manager [James_Greenfiel]
    public static let `confluentTcp`: Self = "_confluent._tcp"
    /// Confluent License Manager [James_Greenfiel]
    public static let `confluentUdp`: Self = "_confluent._udp"
    /// LANSource [Christopher_Wells]
    public static let `lansourceTcp`: Self = "_lansource._tcp"
    /// LANSource [Christopher_Wells]
    public static let `lansourceUdp`: Self = "_lansource._udp"
    /// nms_topo_serv IANA assigned this well-formed service name as a replacement for "nms_topo_serv". [Sylvia_Siu]
    public static let `nmsTopoServTcp`: Self = "_nms-topo-serv._tcp"
    /// nms_topo_serv [Sylvia_Siu]
    public static let `nms_topo_servTcp`: Self = "_nms_topo_serv._tcp"
    /// nms_topo_serv IANA assigned this well-formed service name as a replacement for "nms_topo_serv". [Sylvia_Siu]
    public static let `nmsTopoServUdp`: Self = "_nms-topo-serv._udp"
    /// nms_topo_serv [Sylvia_Siu]
    public static let `nms_topo_servUdp`: Self = "_nms_topo_serv._udp"
    /// LocalInfoSrvr [Brian_Matthews_2]
    public static let `localinfosrvrTcp`: Self = "_localinfosrvr._tcp"
    /// LocalInfoSrvr [Brian_Matthews_2]
    public static let `localinfosrvrUdp`: Self = "_localinfosrvr._udp"
    /// DocStor [Brian_Spears]
    public static let `docstorTcp`: Self = "_docstor._tcp"
    /// DocStor [Brian_Spears]
    public static let `docstorUdp`: Self = "_docstor._udp"
    /// dmdocbroker [Razmik_Abnous]
    public static let `dmdocbrokerTcp`: Self = "_dmdocbroker._tcp"
    /// dmdocbroker [Razmik_Abnous]
    public static let `dmdocbrokerUdp`: Self = "_dmdocbroker._udp"
    /// insitu-conf [Paul_Blacknell]
    public static let `insituConfTcp`: Self = "_insitu-conf._tcp"
    /// insitu-conf [Paul_Blacknell]
    public static let `insituConfUdp`: Self = "_insitu-conf._udp"
    /// stone-design-1 [Andrew_Stone]
    public static let `stoneDesign1Tcp`: Self = "_stone-design-1._tcp"
    /// stone-design-1 [Andrew_Stone]
    public static let `stoneDesign1Udp`: Self = "_stone-design-1._udp"
    /// netmap_lm IANA assigned this well-formed service name as a replacement for "netmap_lm". [Phillip_Magson]
    public static let `netmapLmTcp`: Self = "_netmap-lm._tcp"
    /// netmap_lm [Phillip_Magson]
    public static let `netmap_lmTcp`: Self = "_netmap_lm._tcp"
    /// netmap_lm IANA assigned this well-formed service name as a replacement for "netmap_lm". [Phillip_Magson]
    public static let `netmapLmUdp`: Self = "_netmap-lm._udp"
    /// netmap_lm [Phillip_Magson]
    public static let `netmap_lmUdp`: Self = "_netmap_lm._udp"
    /// ica [John_Richardson]
    public static let `icaTcp`: Self = "_ica._tcp"
    /// ica [John_Richardson]
    public static let `icaUdp`: Self = "_ica._udp"
    /// cvc [Bill_Davidson]
    public static let `cvcTcp`: Self = "_cvc._tcp"
    /// cvc [Bill_Davidson]
    public static let `cvcUdp`: Self = "_cvc._udp"
    /// liberty-lm [Jim_Rogers]
    public static let `libertyLmTcp`: Self = "_liberty-lm._tcp"
    /// liberty-lm [Jim_Rogers]
    public static let `libertyLmUdp`: Self = "_liberty-lm._udp"
    /// rfx-lm [Bill_Bishop]
    public static let `rfxLmTcp`: Self = "_rfx-lm._tcp"
    /// rfx-lm [Bill_Bishop]
    public static let `rfxLmUdp`: Self = "_rfx-lm._udp"
    /// Sybase SQL Any [Dave_Neudoerffer]
    public static let `sybaseSqlanyTcp`: Self = "_sybase-sqlany._tcp"
    /// Sybase SQL Any [Dave_Neudoerffer]
    public static let `sybaseSqlanyUdp`: Self = "_sybase-sqlany._udp"
    /// Federico Heinz Consultora [Federico_Heinz]
    public static let `fhcTcp`: Self = "_fhc._tcp"
    /// Federico Heinz Consultora [Federico_Heinz]
    public static let `fhcUdp`: Self = "_fhc._udp"
    /// VLSI License Manager [Shue_Lin_Kuo]
    public static let `vlsiLmTcp`: Self = "_vlsi-lm._tcp"
    /// VLSI License Manager [Shue_Lin_Kuo]
    public static let `vlsiLmUdp`: Self = "_vlsi-lm._udp"
    /// Satellite-data Acquisition System 3 [Bill_Taylor]
    public static let `saiscmTcp`: Self = "_saiscm._tcp"
    /// Satellite-data Acquisition System 3 [Bill_Taylor]
    public static let `saiscmUdp`: Self = "_saiscm._udp"
    /// Shiva [Jonathan_Wenocur]
    public static let `shivadiscoveryTcp`: Self = "_shivadiscovery._tcp"
    /// Shiva [Jonathan_Wenocur]
    public static let `shivadiscoveryUdp`: Self = "_shivadiscovery._udp"
    /// Databeam [Jim_Johnston]
    public static let `imtcMcsTcp`: Self = "_imtc-mcs._tcp"
    /// Databeam [Jim_Johnston]
    public static let `imtcMcsUdp`: Self = "_imtc-mcs._udp"
    /// EVB Software Engineering License Manager [B_G_Mahesh]
    public static let `evbElmTcp`: Self = "_evb-elm._tcp"
    /// EVB Software Engineering License Manager [B_G_Mahesh]
    public static let `evbElmUdp`: Self = "_evb-elm._udp"
    /// Funk Software, Inc. [Robert_D_Vincent]
    public static let `funkproxyTcp`: Self = "_funkproxy._tcp"
    /// Funk Software, Inc. [Robert_D_Vincent]
    public static let `funkproxyUdp`: Self = "_funkproxy._udp"
    /// Universal Time daemon (utcd) [Walter_Poxon]
    public static let `utcdTcp`: Self = "_utcd._tcp"
    /// Universal Time daemon (utcd) [Walter_Poxon]
    public static let `utcdUdp`: Self = "_utcd._udp"
    /// symplex [Mike_Turley]
    public static let `symplexTcp`: Self = "_symplex._tcp"
    /// symplex [Mike_Turley]
    public static let `symplexUdp`: Self = "_symplex._udp"
    /// diagmond [Pete_Moscatelli]
    public static let `diagmondTcp`: Self = "_diagmond._tcp"
    /// diagmond [Pete_Moscatelli]
    public static let `diagmondUdp`: Self = "_diagmond._udp"
    /// Robcad, Ltd. License Manager [Hindin_Joseph]
    public static let `robcadLmTcp`: Self = "_robcad-lm._tcp"
    /// Robcad, Ltd. License Manager [Hindin_Joseph]
    public static let `robcadLmUdp`: Self = "_robcad-lm._udp"
    /// Midland Valley Exploration Ltd. Lic. Man. [Neil_Salter]
    public static let `mvxLmTcp`: Self = "_mvx-lm._tcp"
    /// Midland Valley Exploration Ltd. Lic. Man. [Neil_Salter]
    public static let `mvxLmUdp`: Self = "_mvx-lm._udp"
    /// Microsoft's Windows Internet Name Service [Pradeep_Bahl]
    public static let `winsTcp`: Self = "_wins._tcp"
    /// Microsoft's Windows Internet Name Service [Pradeep_Bahl]
    public static let `winsUdp`: Self = "_wins._udp"
    /// Fujitsu Systems Business of America, Inc 
    public static let `fujitsuDtcTcp`: Self = "_fujitsu-dtc._tcp"
    /// Fujitsu Systems Business of America, Inc 
    public static let `fujitsuDtcUdp`: Self = "_fujitsu-dtc._udp"
    /// Fujitsu Systems Business of America, Inc [Charles_A_Higgins]
    public static let `fujitsuDtcnsTcp`: Self = "_fujitsu-dtcns._tcp"
    /// Fujitsu Systems Business of America, Inc [Charles_A_Higgins]
    public static let `fujitsuDtcnsUdp`: Self = "_fujitsu-dtcns._udp"
    /// ifor-protocol [Dr_R_P_Alston]
    public static let `iforProtocolTcp`: Self = "_ifor-protocol._tcp"
    /// ifor-protocol [Dr_R_P_Alston]
    public static let `iforProtocolUdp`: Self = "_ifor-protocol._udp"
    /// Virtual Places Audio data 
    public static let `vpadTcp`: Self = "_vpad._tcp"
    /// Virtual Places Audio data 
    public static let `vpadUdp`: Self = "_vpad._udp"
    /// Virtual Places Audio control 
    public static let `vpacTcp`: Self = "_vpac._tcp"
    /// Virtual Places Audio control 
    public static let `vpacUdp`: Self = "_vpac._udp"
    /// Virtual Places Video data 
    public static let `vpvdTcp`: Self = "_vpvd._tcp"
    /// Virtual Places Video data 
    public static let `vpvdUdp`: Self = "_vpvd._udp"
    /// Virtual Places Video control [Avshalom_Houri]
    public static let `vpvcTcp`: Self = "_vpvc._tcp"
    /// Virtual Places Video control [Avshalom_Houri]
    public static let `vpvcUdp`: Self = "_vpvc._udp"
    /// atm zip office [Wilson_Kwan]
    public static let `atmZipOfficeTcp`: Self = "_atm-zip-office._tcp"
    /// atm zip office [Wilson_Kwan]
    public static let `atmZipOfficeUdp`: Self = "_atm-zip-office._udp"
    /// nCube License Manager [Maxine_Yuen]
    public static let `ncubeLmTcp`: Self = "_ncube-lm._tcp"
    /// nCube License Manager [Maxine_Yuen]
    public static let `ncubeLmUdp`: Self = "_ncube-lm._udp"
    /// Ricardo North America License Manager [Mike_Flemming]
    public static let `ricardoLmTcp`: Self = "_ricardo-lm._tcp"
    /// Ricardo North America License Manager [Mike_Flemming]
    public static let `ricardoLmUdp`: Self = "_ricardo-lm._udp"
    /// cichild [Andy_Burgess]
    public static let `cichildLmTcp`: Self = "_cichild-lm._tcp"
    /// cichild [Andy_Burgess]
    public static let `cichildLmUdp`: Self = "_cichild-lm._udp"
    /// ingres 
    public static let `ingreslockTcp`: Self = "_ingreslock._tcp"
    /// ingres 
    public static let `ingreslockUdp`: Self = "_ingreslock._udp"
    /// oracle 
    public static let `orasrvTcp`: Self = "_orasrv._tcp"
    /// oracle 
    public static let `orasrvUdp`: Self = "_orasrv._udp"
    /// Prospero Directory Service non-priv 
    public static let `prosperoNpTcp`: Self = "_prospero-np._tcp"
    /// Prospero Directory Service non-priv 
    public static let `prosperoNpUdp`: Self = "_prospero-np._udp"
    /// Prospero Data Access Prot non-priv [B_Clifford_Neuman]
    public static let `pdapNpTcp`: Self = "_pdap-np._tcp"
    /// Prospero Data Access Prot non-priv [B_Clifford_Neuman]
    public static let `pdapNpUdp`: Self = "_pdap-np._udp"
    /// oracle 
    public static let `tlisrvTcp`: Self = "_tlisrv._tcp"
    /// oracle 
    public static let `tlisrvUdp`: Self = "_tlisrv._udp"
    /// Not Only a Routeing Protocol [nyantec]
    public static let `norpTcp`: Self = "_norp._tcp"
    /// Not Only a Routeing Protocol [nyantec]
    public static let `norpUdp`: Self = "_norp._udp"
    /// Not Only a Routeing Protocol [nyantec]
    public static let `norpSctp`: Self = "_norp._sctp"
    /// oracle 
    public static let `coauthorTcp`: Self = "_coauthor._tcp"
    /// oracle 
    public static let `coauthorUdp`: Self = "_coauthor._udp"
    /// rap-service 
    public static let `rapServiceTcp`: Self = "_rap-service._tcp"
    /// rap-service 
    public static let `rapServiceUdp`: Self = "_rap-service._udp"
    /// rap-listen [Phil_Servita]
    public static let `rapListenTcp`: Self = "_rap-listen._tcp"
    /// rap-listen [Phil_Servita]
    public static let `rapListenUdp`: Self = "_rap-listen._udp"
    /// miroconnect [Michael_Fischer_2]
    public static let `miroconnectTcp`: Self = "_miroconnect._tcp"
    /// miroconnect [Michael_Fischer_2]
    public static let `miroconnectUdp`: Self = "_miroconnect._udp"
    /// Virtual Places Software [Avshalom_Houri]
    public static let `virtualPlacesTcp`: Self = "_virtual-places._tcp"
    /// Virtual Places Software [Avshalom_Houri]
    public static let `virtualPlacesUdp`: Self = "_virtual-places._udp"
    /// micromuse-lm [Adam_Kerrison]
    public static let `micromuseLmTcp`: Self = "_micromuse-lm._tcp"
    /// micromuse-lm [Adam_Kerrison]
    public static let `micromuseLmUdp`: Self = "_micromuse-lm._udp"
    /// ampr-info 
    public static let `amprInfoTcp`: Self = "_ampr-info._tcp"
    /// ampr-info 
    public static let `amprInfoUdp`: Self = "_ampr-info._udp"
    /// ampr-inter [Rob_Janssen]
    public static let `amprInterTcp`: Self = "_ampr-inter._tcp"
    /// ampr-inter [Rob_Janssen]
    public static let `amprInterUdp`: Self = "_ampr-inter._udp"
    /// isi-lm [Len_Wanger]
    public static let `sdscLmTcp`: Self = "_sdsc-lm._tcp"
    /// isi-lm [Len_Wanger]
    public static let `sdscLmUdp`: Self = "_sdsc-lm._udp"
    /// Intellistor License Manager [Ron_Vaughn]
    public static let `intellistorLmTcp`: Self = "_intellistor-lm._tcp"
    /// Intellistor License Manager [Ron_Vaughn]
    public static let `intellistorLmUdp`: Self = "_intellistor-lm._udp"
    /// rds 
    public static let `rdsTcp`: Self = "_rds._tcp"
    /// rds 
    public static let `rdsUdp`: Self = "_rds._udp"
    /// rds2 [Sudhakar_Rajamannar]
    public static let `rds2Tcp`: Self = "_rds2._tcp"
    /// rds2 [Sudhakar_Rajamannar]
    public static let `rds2Udp`: Self = "_rds2._udp"
    /// gridgen-elmd [John_R_Chawner]
    public static let `gridgenElmdTcp`: Self = "_gridgen-elmd._tcp"
    /// gridgen-elmd [John_R_Chawner]
    public static let `gridgenElmdUdp`: Self = "_gridgen-elmd._udp"
    /// simba-cs [Betsy_Alexander]
    public static let `simbaCsTcp`: Self = "_simba-cs._tcp"
    /// simba-cs [Betsy_Alexander]
    public static let `simbaCsUdp`: Self = "_simba-cs._udp"
    /// aspeclmd [V_Balaji]
    public static let `aspeclmdTcp`: Self = "_aspeclmd._tcp"
    /// aspeclmd [V_Balaji]
    public static let `aspeclmdUdp`: Self = "_aspeclmd._udp"
    /// vistium-share [Allison_Carleton]
    public static let `vistiumShareTcp`: Self = "_vistium-share._tcp"
    /// vistium-share [Allison_Carleton]
    public static let `vistiumShareUdp`: Self = "_vistium-share._udp"
    /// abbaccuray [John_Wendt]
    public static let `abbaccurayTcp`: Self = "_abbaccuray._tcp"
    /// abbaccuray [John_Wendt]
    public static let `abbaccurayUdp`: Self = "_abbaccuray._udp"
    /// laplink [Michael_Crawford]
    public static let `laplinkTcp`: Self = "_laplink._tcp"
    /// laplink [Michael_Crawford]
    public static let `laplinkUdp`: Self = "_laplink._udp"
    /// Axon License Manager [Mark_Pearce]
    public static let `axonLmTcp`: Self = "_axon-lm._tcp"
    /// Axon License Manager [Mark_Pearce]
    public static let `axonLmUdp`: Self = "_axon-lm._udp"
    /// Shiva Hose 
    public static let `shivahoseTcp`: Self = "_shivahose._tcp"
    /// Shiva Sound [Kin_Chan]
    public static let `shivasoundUdp`: Self = "_shivasound._udp"
    /// HECMTL-DB [Maxime_Belanger]
    public static let `hecmtlDbTcp`: Self = "_hecmtl-db._tcp"
    /// HECMTL-DB [Maxime_Belanger]
    public static let `hecmtlDbUdp`: Self = "_hecmtl-db._udp"
    /// pciarray [Ron_Folk]
    public static let `pciarrayTcp`: Self = "_pciarray._tcp"
    /// pciarray [Ron_Folk]
    public static let `pciarrayUdp`: Self = "_pciarray._udp"
    /// sna-cs [Tony_Sowter]
    public static let `snaCsTcp`: Self = "_sna-cs._tcp"
    /// sna-cs [Tony_Sowter]
    public static let `snaCsUdp`: Self = "_sna-cs._udp"
    /// CACI Products Company License Manager [Erik_Blume]
    public static let `caciLmTcp`: Self = "_caci-lm._tcp"
    /// CACI Products Company License Manager [Erik_Blume]
    public static let `caciLmUdp`: Self = "_caci-lm._udp"
    /// livelan [Kaynam_Hedayat]
    public static let `livelanTcp`: Self = "_livelan._tcp"
    /// livelan [Kaynam_Hedayat]
    public static let `livelanUdp`: Self = "_livelan._udp"
    /// VERITAS Private Branch Exchange IANA assigned this well-formed service name as a replacement for "veritas_pbx". [Stefan_Winkel]
    public static let `veritasPbxTcp`: Self = "_veritas-pbx._tcp"
    /// VERITAS Private Branch Exchange [Stefan_Winkel]
    public static let `veritas_pbxTcp`: Self = "_veritas_pbx._tcp"
    /// VERITAS Private Branch Exchange IANA assigned this well-formed service name as a replacement for "veritas_pbx". [Stefan_Winkel]
    public static let `veritasPbxUdp`: Self = "_veritas-pbx._udp"
    /// VERITAS Private Branch Exchange [Stefan_Winkel]
    public static let `veritas_pbxUdp`: Self = "_veritas_pbx._udp"
    /// ArborText License Manager [David_J_Wilson]
    public static let `arbortextLmTcp`: Self = "_arbortext-lm._tcp"
    /// ArborText License Manager [David_J_Wilson]
    public static let `arbortextLmUdp`: Self = "_arbortext-lm._udp"
    /// xingmpeg [Howard_Gordon]
    public static let `xingmpegTcp`: Self = "_xingmpeg._tcp"
    /// xingmpeg [Howard_Gordon]
    public static let `xingmpegUdp`: Self = "_xingmpeg._udp"
    /// web2host [Stephen_Johnson]
    public static let `web2hostTcp`: Self = "_web2host._tcp"
    /// web2host [Stephen_Johnson]
    public static let `web2hostUdp`: Self = "_web2host._udp"
    /// ASCI-RemoteSHADOW [Benjamin_Rosenberg]
    public static let `asciValTcp`: Self = "_asci-val._tcp"
    /// ASCI-RemoteSHADOW [Benjamin_Rosenberg]
    public static let `asciValUdp`: Self = "_asci-val._udp"
    /// facilityview [Ed_Green]
    public static let `facilityviewTcp`: Self = "_facilityview._tcp"
    /// facilityview [Ed_Green]
    public static let `facilityviewUdp`: Self = "_facilityview._udp"
    /// pconnectmgr [Bob_Kaiser]
    public static let `pconnectmgrTcp`: Self = "_pconnectmgr._tcp"
    /// pconnectmgr [Bob_Kaiser]
    public static let `pconnectmgrUdp`: Self = "_pconnectmgr._udp"
    /// Cadabra License Manager [Arthur_Castonguay]
    public static let `cadabraLmTcp`: Self = "_cadabra-lm._tcp"
    /// Cadabra License Manager [Arthur_Castonguay]
    public static let `cadabraLmUdp`: Self = "_cadabra-lm._udp"
    /// Pay-Per-View [Brian_Tung]
    public static let `payPerViewTcp`: Self = "_pay-per-view._tcp"
    /// Pay-Per-View [Brian_Tung]
    public static let `payPerViewUdp`: Self = "_pay-per-view._udp"
    /// WinDD [Kelly_Sims]
    public static let `winddlbTcp`: Self = "_winddlb._tcp"
    /// WinDD [Kelly_Sims]
    public static let `winddlbUdp`: Self = "_winddlb._udp"
    /// CORELVIDEO [Ming_Poon]
    public static let `corelvideoTcp`: Self = "_corelvideo._tcp"
    /// CORELVIDEO [Ming_Poon]
    public static let `corelvideoUdp`: Self = "_corelvideo._udp"
    /// jlicelmd [Christian_Schormann]
    public static let `jlicelmdTcp`: Self = "_jlicelmd._tcp"
    /// jlicelmd [Christian_Schormann]
    public static let `jlicelmdUdp`: Self = "_jlicelmd._udp"
    /// tsspmap [Paul_W_Nelson]
    public static let `tsspmapTcp`: Self = "_tsspmap._tcp"
    /// tsspmap [Paul_W_Nelson]
    public static let `tsspmapUdp`: Self = "_tsspmap._udp"
    /// ets [Carstein_Seeberg]
    public static let `etsTcp`: Self = "_ets._tcp"
    /// ets [Carstein_Seeberg]
    public static let `etsUdp`: Self = "_ets._udp"
    /// orbixd [Bridget_Walsh]
    public static let `orbixdTcp`: Self = "_orbixd._tcp"
    /// orbixd [Bridget_Walsh]
    public static let `orbixdUdp`: Self = "_orbixd._udp"
    /// Oracle Remote Data Base [mackin]
    public static let `rdbDbsDispTcp`: Self = "_rdb-dbs-disp._tcp"
    /// Oracle Remote Data Base [mackin]
    public static let `rdbDbsDispUdp`: Self = "_rdb-dbs-disp._udp"
    /// Chipcom License Manager 
    public static let `chipLmTcp`: Self = "_chip-lm._tcp"
    /// Chipcom License Manager 
    public static let `chipLmUdp`: Self = "_chip-lm._udp"
    /// itscomm-ns [Rich_Thompson]
    public static let `itscommNsTcp`: Self = "_itscomm-ns._tcp"
    /// itscomm-ns [Rich_Thompson]
    public static let `itscommNsUdp`: Self = "_itscomm-ns._udp"
    /// mvel-lm [David_Bisset]
    public static let `mvelLmTcp`: Self = "_mvel-lm._tcp"
    /// mvel-lm [David_Bisset]
    public static let `mvelLmUdp`: Self = "_mvel-lm._udp"
    /// oraclenames [P_V_Shivkumar]
    public static let `oraclenamesTcp`: Self = "_oraclenames._tcp"
    /// oraclenames [P_V_Shivkumar]
    public static let `oraclenamesUdp`: Self = "_oraclenames._udp"
    /// Moldflow License Manager [Lech_Laskowski]
    public static let `moldflowLmTcp`: Self = "_moldflow-lm._tcp"
    /// Moldflow License Manager [Lech_Laskowski]
    public static let `moldflowLmUdp`: Self = "_moldflow-lm._udp"
    /// hypercube-lm [Christopher_McLendon]
    public static let `hypercubeLmTcp`: Self = "_hypercube-lm._tcp"
    /// hypercube-lm [Christopher_McLendon]
    public static let `hypercubeLmUdp`: Self = "_hypercube-lm._udp"
    /// Jacobus License Manager [Tony_Cleveland]
    public static let `jacobusLmTcp`: Self = "_jacobus-lm._tcp"
    /// Jacobus License Manager [Tony_Cleveland]
    public static let `jacobusLmUdp`: Self = "_jacobus-lm._udp"
    /// ioc-sea-lm [Paul_Nelson]
    public static let `iocSeaLmTcp`: Self = "_ioc-sea-lm._tcp"
    /// ioc-sea-lm [Paul_Nelson]
    public static let `iocSeaLmUdp`: Self = "_ioc-sea-lm._udp"
    /// tn-tl-r1 
    public static let `tnTlR1Tcp`: Self = "_tn-tl-r1._tcp"
    /// tn-tl-r2 [Ed_Kress]
    public static let `tnTlR2Udp`: Self = "_tn-tl-r2._udp"
    /// MIL-2045-47001 [Eric_Whitehill]
    public static let `mil204547001Tcp`: Self = "_mil-2045-47001._tcp"
    /// MIL-2045-47001 [Eric_Whitehill]
    public static let `mil204547001Udp`: Self = "_mil-2045-47001._udp"
    /// MSIMS [Glenn_Olander]
    public static let `msimsTcp`: Self = "_msims._tcp"
    /// MSIMS [Glenn_Olander]
    public static let `msimsUdp`: Self = "_msims._udp"
    /// simbaexpress [Betsy_Alexander]
    public static let `simbaexpressTcp`: Self = "_simbaexpress._tcp"
    /// simbaexpress [Betsy_Alexander]
    public static let `simbaexpressUdp`: Self = "_simbaexpress._udp"
    /// tn-tl-fd2 [Ed_Kress]
    public static let `tnTlFd2Tcp`: Self = "_tn-tl-fd2._tcp"
    /// tn-tl-fd2 [Ed_Kress]
    public static let `tnTlFd2Udp`: Self = "_tn-tl-fd2._udp"
    /// intv [Dermot_Tynand]
    public static let `intvTcp`: Self = "_intv._tcp"
    /// intv [Dermot_Tynand]
    public static let `intvUdp`: Self = "_intv._udp"
    /// ibm-abtact [Sandeep_K_Singhal]
    public static let `ibmAbtactTcp`: Self = "_ibm-abtact._tcp"
    /// ibm-abtact [Sandeep_K_Singhal]
    public static let `ibmAbtactUdp`: Self = "_ibm-abtact._udp"
    /// pra_elmd IANA assigned this well-formed service name as a replacement for "pra_elmd". [Dennis_Mastin]
    public static let `praElmdTcp`: Self = "_pra-elmd._tcp"
    /// pra_elmd [Dennis_Mastin]
    public static let `pra_elmdTcp`: Self = "_pra_elmd._tcp"
    /// pra_elmd IANA assigned this well-formed service name as a replacement for "pra_elmd". [Dennis_Mastin]
    public static let `praElmdUdp`: Self = "_pra-elmd._udp"
    /// pra_elmd [Dennis_Mastin]
    public static let `pra_elmdUdp`: Self = "_pra_elmd._udp"
    /// triquest-lm [Nand_Kumar]
    public static let `triquestLmTcp`: Self = "_triquest-lm._tcp"
    /// triquest-lm [Nand_Kumar]
    public static let `triquestLmUdp`: Self = "_triquest-lm._udp"
    /// VQP [Keith_McCloghrie]
    public static let `vqpTcp`: Self = "_vqp._tcp"
    /// VQP [Keith_McCloghrie]
    public static let `vqpUdp`: Self = "_vqp._udp"
    /// gemini-lm [Tony_Sawyer]
    public static let `geminiLmTcp`: Self = "_gemini-lm._tcp"
    /// gemini-lm [Tony_Sawyer]
    public static let `geminiLmUdp`: Self = "_gemini-lm._udp"
    /// ncpm-pm [Ted_Power]
    public static let `ncpmPmTcp`: Self = "_ncpm-pm._tcp"
    /// ncpm-pm [Ted_Power]
    public static let `ncpmPmUdp`: Self = "_ncpm-pm._udp"
    /// commonspace [Rob_Chandhok_2]
    public static let `commonspaceTcp`: Self = "_commonspace._tcp"
    /// commonspace [Rob_Chandhok_2]
    public static let `commonspaceUdp`: Self = "_commonspace._udp"
    /// mainsoft-lm [Anand_Gangadharan]
    public static let `mainsoftLmTcp`: Self = "_mainsoft-lm._tcp"
    /// mainsoft-lm [Anand_Gangadharan]
    public static let `mainsoftLmUdp`: Self = "_mainsoft-lm._udp"
    /// sixtrak [Red_Lion_Controls]
    public static let `sixtrakTcp`: Self = "_sixtrak._tcp"
    /// sixtrak [Red_Lion_Controls]
    public static let `sixtrakUdp`: Self = "_sixtrak._udp"
    /// radio 
    public static let `radioTcp`: Self = "_radio._tcp"
    /// radio 
    public static let `radioUdp`: Self = "_radio._udp"
    /// radio-sm 
    public static let `radioSmTcp`: Self = "_radio-sm._tcp"
    /// radio-bc [Ken_Chapman]
    public static let `radioBcUdp`: Self = "_radio-bc._udp"
    /// orbplus-iiop [Robert_A_Kukura]
    public static let `orbplusIiopTcp`: Self = "_orbplus-iiop._tcp"
    /// orbplus-iiop [Robert_A_Kukura]
    public static let `orbplusIiopUdp`: Self = "_orbplus-iiop._udp"
    /// picknfs [John_Lombardo]
    public static let `picknfsTcp`: Self = "_picknfs._tcp"
    /// picknfs [John_Lombardo]
    public static let `picknfsUdp`: Self = "_picknfs._udp"
    /// simbaservices [Betsy_Alexander]
    public static let `simbaservicesTcp`: Self = "_simbaservices._tcp"
    /// simbaservices [Betsy_Alexander]
    public static let `simbaservicesUdp`: Self = "_simbaservices._udp"
    /// issd 
    public static let `issdTcp`: Self = "_issd._tcp"
    /// issd 
    public static let `issdUdp`: Self = "_issd._udp"
    /// aas [Bob_Beard]
    public static let `aasTcp`: Self = "_aas._tcp"
    /// aas [Bob_Beard]
    public static let `aasUdp`: Self = "_aas._udp"
    /// inspect [Frank_O_Neill]
    public static let `inspectTcp`: Self = "_inspect._tcp"
    /// inspect [Frank_O_Neill]
    public static let `inspectUdp`: Self = "_inspect._udp"
    /// pickodbc [John_Lombardo]
    public static let `picodbcTcp`: Self = "_picodbc._tcp"
    /// pickodbc [John_Lombardo]
    public static let `picodbcUdp`: Self = "_picodbc._udp"
    /// icabrowser [Brad_Pedersen]
    public static let `icabrowserTcp`: Self = "_icabrowser._tcp"
    /// icabrowser [Brad_Pedersen]
    public static let `icabrowserUdp`: Self = "_icabrowser._udp"
    /// Salutation Manager (Salutation Protocol) 
    public static let `slpTcp`: Self = "_slp._tcp"
    /// Salutation Manager (Salutation Protocol) 
    public static let `slpUdp`: Self = "_slp._udp"
    /// Salutation Manager (SLM-API) [Tohru_Mori]
    public static let `slmApiTcp`: Self = "_slm-api._tcp"
    /// Salutation Manager (SLM-API) [Tohru_Mori]
    public static let `slmApiUdp`: Self = "_slm-api._udp"
    /// stt [Ryan_Bolz]
    public static let `sttTcp`: Self = "_stt._tcp"
    /// stt [Ryan_Bolz]
    public static let `sttUdp`: Self = "_stt._udp"
    /// Smart Corp. License Manager [Connie_Qiu]
    public static let `smartLmTcp`: Self = "_smart-lm._tcp"
    /// Smart Corp. License Manager [Connie_Qiu]
    public static let `smartLmUdp`: Self = "_smart-lm._udp"
    /// isysg-lm [Adam_Curtin]
    public static let `isysgLmTcp`: Self = "_isysg-lm._tcp"
    /// isysg-lm [Adam_Curtin]
    public static let `isysgLmUdp`: Self = "_isysg-lm._udp"
    /// taurus-wh [Jeff_Moffatt]
    public static let `taurusWhTcp`: Self = "_taurus-wh._tcp"
    /// taurus-wh [Jeff_Moffatt]
    public static let `taurusWhUdp`: Self = "_taurus-wh._udp"
    /// Inter Library Loan [Niall_Murphy]
    public static let `illTcp`: Self = "_ill._tcp"
    /// Inter Library Loan [Niall_Murphy]
    public static let `illUdp`: Self = "_ill._udp"
    /// NetBill Transaction Server 
    public static let `netbillTransTcp`: Self = "_netbill-trans._tcp"
    /// NetBill Transaction Server 
    public static let `netbillTransUdp`: Self = "_netbill-trans._udp"
    /// NetBill Key Repository 
    public static let `netbillKeyrepTcp`: Self = "_netbill-keyrep._tcp"
    /// NetBill Key Repository 
    public static let `netbillKeyrepUdp`: Self = "_netbill-keyrep._udp"
    /// NetBill Credential Server 
    public static let `netbillCredTcp`: Self = "_netbill-cred._tcp"
    /// NetBill Credential Server 
    public static let `netbillCredUdp`: Self = "_netbill-cred._udp"
    /// NetBill Authorization Server 
    public static let `netbillAuthTcp`: Self = "_netbill-auth._tcp"
    /// NetBill Authorization Server 
    public static let `netbillAuthUdp`: Self = "_netbill-auth._udp"
    /// NetBill Product Server [Marvin_Sirbu]
    public static let `netbillProdTcp`: Self = "_netbill-prod._tcp"
    /// NetBill Product Server [Marvin_Sirbu]
    public static let `netbillProdUdp`: Self = "_netbill-prod._udp"
    /// Nimrod Inter-Agent Communication [Charles_Lynn]
    public static let `nimrodAgentTcp`: Self = "_nimrod-agent._tcp"
    /// Nimrod Inter-Agent Communication [Charles_Lynn]
    public static let `nimrodAgentUdp`: Self = "_nimrod-agent._udp"
    /// skytelnet [Byron_Jones]
    public static let `skytelnetTcp`: Self = "_skytelnet._tcp"
    /// skytelnet [Byron_Jones]
    public static let `skytelnetUdp`: Self = "_skytelnet._udp"
    /// xs-openstorage [XuiS_Software_Ltd]
    public static let `xsOpenstorageTcp`: Self = "_xs-openstorage._tcp"
    /// xs-openstorage [XuiS_Software_Ltd]
    public static let `xsOpenstorageUdp`: Self = "_xs-openstorage._udp"
    /// faxportwinport [Chris_Wells]
    public static let `faxportwinportTcp`: Self = "_faxportwinport._tcp"
    /// faxportwinport [Chris_Wells]
    public static let `faxportwinportUdp`: Self = "_faxportwinport._udp"
    /// softdataphone [Dror_Gill]
    public static let `softdataphoneTcp`: Self = "_softdataphone._tcp"
    /// softdataphone [Dror_Gill]
    public static let `softdataphoneUdp`: Self = "_softdataphone._udp"
    /// ontime [Keith_Rhodes]
    public static let `ontimeTcp`: Self = "_ontime._tcp"
    /// ontime [Keith_Rhodes]
    public static let `ontimeUdp`: Self = "_ontime._udp"
    /// jaleosnd [Christian_Schormann]
    public static let `jaleosndTcp`: Self = "_jaleosnd._tcp"
    /// jaleosnd [Christian_Schormann]
    public static let `jaleosndUdp`: Self = "_jaleosnd._udp"
    /// udp-sr-port [Herb_Jensen]
    public static let `udpSrPortTcp`: Self = "_udp-sr-port._tcp"
    /// udp-sr-port [Herb_Jensen]
    public static let `udpSrPortUdp`: Self = "_udp-sr-port._udp"
    /// svs-omagent [Alberto_Berlen]
    public static let `svsOmagentTcp`: Self = "_svs-omagent._tcp"
    /// svs-omagent [Alberto_Berlen]
    public static let `svsOmagentUdp`: Self = "_svs-omagent._udp"
    /// Shockwave [Sarah_Allen]
    public static let `shockwaveTcp`: Self = "_shockwave._tcp"
    /// Shockwave [Sarah_Allen]
    public static let `shockwaveUdp`: Self = "_shockwave._udp"
    /// T.128 Gateway [Phil_May]
    public static let `t128GatewayTcp`: Self = "_t128-gateway._tcp"
    /// T.128 Gateway [Phil_May]
    public static let `t128GatewayUdp`: Self = "_t128-gateway._udp"
    /// LonTalk normal 
    public static let `lontalkNormTcp`: Self = "_lontalk-norm._tcp"
    /// LonTalk normal 
    public static let `lontalkNormUdp`: Self = "_lontalk-norm._udp"
    /// LonTalk urgent [Bob_Dolin]
    public static let `lontalkUrgntTcp`: Self = "_lontalk-urgnt._tcp"
    /// LonTalk urgent [Bob_Dolin]
    public static let `lontalkUrgntUdp`: Self = "_lontalk-urgnt._udp"
    /// Oracle Net8 Cman [Tong_Ming_Lee]
    public static let `oraclenet8cmanTcp`: Self = "_oraclenet8cman._tcp"
    /// Oracle Net8 Cman [Tong_Ming_Lee]
    public static let `oraclenet8cmanUdp`: Self = "_oraclenet8cman._udp"
    /// Visit view [Tom_Whittaker]
    public static let `visitviewTcp`: Self = "_visitview._tcp"
    /// Visit view [Tom_Whittaker]
    public static let `visitviewUdp`: Self = "_visitview._udp"
    /// PAMMRATC 
    public static let `pammratcTcp`: Self = "_pammratc._tcp"
    /// PAMMRATC 
    public static let `pammratcUdp`: Self = "_pammratc._udp"
    /// PAMMRPC [John_Britton]
    public static let `pammrpcTcp`: Self = "_pammrpc._tcp"
    /// PAMMRPC [John_Britton]
    public static let `pammrpcUdp`: Self = "_pammrpc._udp"
    /// Log On America Probe [James_Tavares]
    public static let `loaprobeTcp`: Self = "_loaprobe._tcp"
    /// Log On America Probe [James_Tavares]
    public static let `loaprobeUdp`: Self = "_loaprobe._udp"
    /// EDB Server 1 [Carlos_Portela]
    public static let `edbServer1Tcp`: Self = "_edb-server1._tcp"
    /// EDB Server 1 [Carlos_Portela]
    public static let `edbServer1Udp`: Self = "_edb-server1._udp"
    /// ISP shared public data control 
    public static let `isdcTcp`: Self = "_isdc._tcp"
    /// ISP shared public data control 
    public static let `isdcUdp`: Self = "_isdc._udp"
    /// ISP shared local data control 
    public static let `islcTcp`: Self = "_islc._tcp"
    /// ISP shared local data control 
    public static let `islcUdp`: Self = "_islc._udp"
    /// ISP shared management control [Nick_Austin]
    public static let `ismcTcp`: Self = "_ismc._tcp"
    /// ISP shared management control [Nick_Austin]
    public static let `ismcUdp`: Self = "_ismc._udp"
    /// cert-initiator 
    public static let `certInitiatorTcp`: Self = "_cert-initiator._tcp"
    /// cert-initiator 
    public static let `certInitiatorUdp`: Self = "_cert-initiator._udp"
    /// cert-responder [Tom_Markson]
    public static let `certResponderTcp`: Self = "_cert-responder._tcp"
    /// cert-responder [Tom_Markson]
    public static let `certResponderUdp`: Self = "_cert-responder._udp"
    /// InVision [Christopher_Davey]
    public static let `invisionTcp`: Self = "_invision._tcp"
    /// InVision [Christopher_Davey]
    public static let `invisionUdp`: Self = "_invision._udp"
    /// isis-am 
    public static let `isisAmTcp`: Self = "_isis-am._tcp"
    /// isis-am 
    public static let `isisAmUdp`: Self = "_isis-am._udp"
    /// isis-ambc [Ken_Chapman]
    public static let `isisAmbcTcp`: Self = "_isis-ambc._tcp"
    /// isis-ambc [Ken_Chapman]
    public static let `isisAmbcUdp`: Self = "_isis-ambc._udp"
    /// Satellite-data Acquisition System 4 [Bill_Taylor]
    public static let `saisehTcp`: Self = "_saiseh._tcp"
    /// Satellite-data Acquisition System 4 [Bill_Taylor]
    public static let `saisehUdp`: Self = "_saiseh._udp"
    /// SightLine [admin]
    public static let `sightlineTcp`: Self = "_sightline._tcp"
    /// SightLine [admin]
    public static let `sightlineUdp`: Self = "_sightline._udp"
    /// sa-msg-port [Eric_Whitehill]
    public static let `saMsgPortTcp`: Self = "_sa-msg-port._tcp"
    /// sa-msg-port [Eric_Whitehill]
    public static let `saMsgPortUdp`: Self = "_sa-msg-port._udp"
    /// rsap [Holger_Reif]
    public static let `rsapTcp`: Self = "_rsap._tcp"
    /// rsap [Holger_Reif]
    public static let `rsapUdp`: Self = "_rsap._udp"
    /// concurrent-lm [Maggie_Brinsford]
    public static let `concurrentLmTcp`: Self = "_concurrent-lm._tcp"
    /// concurrent-lm [Maggie_Brinsford]
    public static let `concurrentLmUdp`: Self = "_concurrent-lm._udp"
    /// kermit [Frank_da_Cruz]
    public static let `kermitTcp`: Self = "_kermit._tcp"
    /// kermit [Frank_da_Cruz]
    public static let `kermitUdp`: Self = "_kermit._udp"
    /// nkdn 
    public static let `nkdTcp`: Self = "_nkd._tcp"
    /// nkd 
    public static let `nkdUdp`: Self = "_nkd._udp"
    /// shiva_confsrvr IANA assigned this well-formed service name as a replacement for "shiva_confsrvr". [Mike_Horowitz]
    public static let `shivaConfsrvrTcp`: Self = "_shiva-confsrvr._tcp"
    /// shiva_confsrvr [Mike_Horowitz]
    public static let `shiva_confsrvrTcp`: Self = "_shiva_confsrvr._tcp"
    /// shiva_confsrvr IANA assigned this well-formed service name as a replacement for "shiva_confsrvr". [Mike_Horowitz]
    public static let `shivaConfsrvrUdp`: Self = "_shiva-confsrvr._udp"
    /// shiva_confsrvr [Mike_Horowitz]
    public static let `shiva_confsrvrUdp`: Self = "_shiva_confsrvr._udp"
    /// xnmp [Ali_Saleh]
    public static let `xnmpTcp`: Self = "_xnmp._tcp"
    /// xnmp [Ali_Saleh]
    public static let `xnmpUdp`: Self = "_xnmp._udp"
    /// alphatech-lm [Joseph_Hauk]
    public static let `alphatechLmTcp`: Self = "_alphatech-lm._tcp"
    /// alphatech-lm [Joseph_Hauk]
    public static let `alphatechLmUdp`: Self = "_alphatech-lm._udp"
    /// stargatealerts [Tim_Coppernoll]
    public static let `stargatealertsTcp`: Self = "_stargatealerts._tcp"
    /// stargatealerts [Tim_Coppernoll]
    public static let `stargatealertsUdp`: Self = "_stargatealerts._udp"
    /// dec-mbadmin 
    public static let `decMbadminTcp`: Self = "_dec-mbadmin._tcp"
    /// dec-mbadmin 
    public static let `decMbadminUdp`: Self = "_dec-mbadmin._udp"
    /// dec-mbadmin-h [Nick_Shipman]
    public static let `decMbadminHTcp`: Self = "_dec-mbadmin-h._tcp"
    /// dec-mbadmin-h [Nick_Shipman]
    public static let `decMbadminHUdp`: Self = "_dec-mbadmin-h._udp"
    /// fujitsu-mmpdc [Katsumi_Oomuro]
    public static let `fujitsuMmpdcTcp`: Self = "_fujitsu-mmpdc._tcp"
    /// fujitsu-mmpdc [Katsumi_Oomuro]
    public static let `fujitsuMmpdcUdp`: Self = "_fujitsu-mmpdc._udp"
    /// sixnetudr [Red_Lion_Controls]
    public static let `sixnetudrTcp`: Self = "_sixnetudr._tcp"
    /// sixnetudr [Red_Lion_Controls]
    public static let `sixnetudrUdp`: Self = "_sixnetudr._udp"
    /// Silicon Grail License Manager [William_R_Bishop]
    public static let `sgLmTcp`: Self = "_sg-lm._tcp"
    /// Silicon Grail License Manager [William_R_Bishop]
    public static let `sgLmUdp`: Self = "_sg-lm._udp"
    /// skip-mc-gikreq [Tom_Markson]
    public static let `skipMcGikreqTcp`: Self = "_skip-mc-gikreq._tcp"
    /// skip-mc-gikreq [Tom_Markson]
    public static let `skipMcGikreqUdp`: Self = "_skip-mc-gikreq._udp"
    /// netview-aix-1 
    public static let `netviewAix1Tcp`: Self = "_netview-aix-1._tcp"
    /// netview-aix-1 
    public static let `netviewAix1Udp`: Self = "_netview-aix-1._udp"
    /// netview-aix-2 
    public static let `netviewAix2Tcp`: Self = "_netview-aix-2._tcp"
    /// netview-aix-2 
    public static let `netviewAix2Udp`: Self = "_netview-aix-2._udp"
    /// netview-aix-3 
    public static let `netviewAix3Tcp`: Self = "_netview-aix-3._tcp"
    /// netview-aix-3 
    public static let `netviewAix3Udp`: Self = "_netview-aix-3._udp"
    /// netview-aix-4 
    public static let `netviewAix4Tcp`: Self = "_netview-aix-4._tcp"
    /// netview-aix-4 
    public static let `netviewAix4Udp`: Self = "_netview-aix-4._udp"
    /// netview-aix-5 
    public static let `netviewAix5Tcp`: Self = "_netview-aix-5._tcp"
    /// netview-aix-5 
    public static let `netviewAix5Udp`: Self = "_netview-aix-5._udp"
    /// netview-aix-6 
    public static let `netviewAix6Tcp`: Self = "_netview-aix-6._tcp"
    /// netview-aix-6 
    public static let `netviewAix6Udp`: Self = "_netview-aix-6._udp"
    /// netview-aix-7 
    public static let `netviewAix7Tcp`: Self = "_netview-aix-7._tcp"
    /// netview-aix-7 
    public static let `netviewAix7Udp`: Self = "_netview-aix-7._udp"
    /// netview-aix-8 
    public static let `netviewAix8Tcp`: Self = "_netview-aix-8._tcp"
    /// netview-aix-8 
    public static let `netviewAix8Udp`: Self = "_netview-aix-8._udp"
    /// netview-aix-9 
    public static let `netviewAix9Tcp`: Self = "_netview-aix-9._tcp"
    /// netview-aix-9 
    public static let `netviewAix9Udp`: Self = "_netview-aix-9._udp"
    /// netview-aix-10 
    public static let `netviewAix10Tcp`: Self = "_netview-aix-10._tcp"
    /// netview-aix-10 
    public static let `netviewAix10Udp`: Self = "_netview-aix-10._udp"
    /// netview-aix-11 
    public static let `netviewAix11Tcp`: Self = "_netview-aix-11._tcp"
    /// netview-aix-11 
    public static let `netviewAix11Udp`: Self = "_netview-aix-11._udp"
    /// netview-aix-12 [Martha_Crisson]
    public static let `netviewAix12Tcp`: Self = "_netview-aix-12._tcp"
    /// netview-aix-12 [Martha_Crisson]
    public static let `netviewAix12Udp`: Self = "_netview-aix-12._udp"
    /// Intel Proshare Multicast 
    public static let `proshareMc1Tcp`: Self = "_proshare-mc-1._tcp"
    /// Intel Proshare Multicast 
    public static let `proshareMc1Udp`: Self = "_proshare-mc-1._udp"
    /// Intel Proshare Multicast [Mark_Lewis]
    public static let `proshareMc2Tcp`: Self = "_proshare-mc-2._tcp"
    /// Intel Proshare Multicast [Mark_Lewis]
    public static let `proshareMc2Udp`: Self = "_proshare-mc-2._udp"
    /// Pacific Data Products [Gary_Morton]
    public static let `pdpTcp`: Self = "_pdp._tcp"
    /// Pacific Data Products [Gary_Morton]
    public static let `pdpUdp`: Self = "_pdp._udp"
    /// netcomm1 
    public static let `netcomm1Tcp`: Self = "_netcomm1._tcp"
    /// netcomm2 [Bulent_Kasman]
    public static let `netcomm2Udp`: Self = "_netcomm2._udp"
    /// groupwise [Brent_Bradshaw]
    public static let `groupwiseTcp`: Self = "_groupwise._tcp"
    /// groupwise [Brent_Bradshaw]
    public static let `groupwiseUdp`: Self = "_groupwise._udp"
    /// prolink [Brian_Abramson]
    public static let `prolinkTcp`: Self = "_prolink._tcp"
    /// prolink [Brian_Abramson]
    public static let `prolinkUdp`: Self = "_prolink._udp"
    /// darcorp-lm [DARcorp]
    public static let `darcorpLmTcp`: Self = "_darcorp-lm._tcp"
    /// darcorp-lm [DARcorp]
    public static let `darcorpLmUdp`: Self = "_darcorp-lm._udp"
    /// microcom-sbp [Boris_B_Maiden]
    public static let `microcomSbpTcp`: Self = "_microcom-sbp._tcp"
    /// microcom-sbp [Boris_B_Maiden]
    public static let `microcomSbpUdp`: Self = "_microcom-sbp._udp"
    /// sd-elmd [Bryan_Otey]
    public static let `sdElmdTcp`: Self = "_sd-elmd._tcp"
    /// sd-elmd [Bryan_Otey]
    public static let `sdElmdUdp`: Self = "_sd-elmd._udp"
    /// lanyon-lantern [Robin_Lewis]
    public static let `lanyonLanternTcp`: Self = "_lanyon-lantern._tcp"
    /// lanyon-lantern [Robin_Lewis]
    public static let `lanyonLanternUdp`: Self = "_lanyon-lantern._udp"
    /// ncpm-hip [Ken_Hearn]
    public static let `ncpmHipTcp`: Self = "_ncpm-hip._tcp"
    /// ncpm-hip [Ken_Hearn]
    public static let `ncpmHipUdp`: Self = "_ncpm-hip._udp"
    /// SnareSecure [Marty_Batchelder]
    public static let `snaresecureTcp`: Self = "_snaresecure._tcp"
    /// SnareSecure [Marty_Batchelder]
    public static let `snaresecureUdp`: Self = "_snaresecure._udp"
    /// n2nremote [Kin_Chan_2]
    public static let `n2nremoteTcp`: Self = "_n2nremote._tcp"
    /// n2nremote [Kin_Chan_2]
    public static let `n2nremoteUdp`: Self = "_n2nremote._udp"
    /// cvmon [Carol_Ann_Krug]
    public static let `cvmonTcp`: Self = "_cvmon._tcp"
    /// cvmon [Carol_Ann_Krug]
    public static let `cvmonUdp`: Self = "_cvmon._udp"
    /// nsjtp-ctrl 
    public static let `nsjtpCtrlTcp`: Self = "_nsjtp-ctrl._tcp"
    /// nsjtp-ctrl 
    public static let `nsjtpCtrlUdp`: Self = "_nsjtp-ctrl._udp"
    /// nsjtp-data [Orazio_Granato]
    public static let `nsjtpDataTcp`: Self = "_nsjtp-data._tcp"
    /// nsjtp-data [Orazio_Granato]
    public static let `nsjtpDataUdp`: Self = "_nsjtp-data._udp"
    /// firefox [Mark_S_Edwards]
    public static let `firefoxTcp`: Self = "_firefox._tcp"
    /// firefox [Mark_S_Edwards]
    public static let `firefoxUdp`: Self = "_firefox._udp"
    /// ng-umds [Louis_E_Simard]
    public static let `ngUmdsTcp`: Self = "_ng-umds._tcp"
    /// ng-umds [Louis_E_Simard]
    public static let `ngUmdsUdp`: Self = "_ng-umds._udp"
    /// empire-empuma [Bobby_Krupczak]
    public static let `empireEmpumaTcp`: Self = "_empire-empuma._tcp"
    /// empire-empuma [Bobby_Krupczak]
    public static let `empireEmpumaUdp`: Self = "_empire-empuma._udp"
    /// sstsys-lm [Yih_Wu_Wang]
    public static let `sstsysLmTcp`: Self = "_sstsys-lm._tcp"
    /// sstsys-lm [Yih_Wu_Wang]
    public static let `sstsysLmUdp`: Self = "_sstsys-lm._udp"
    /// rrirtr 
    public static let `rrirtrTcp`: Self = "_rrirtr._tcp"
    /// rrirtr 
    public static let `rrirtrUdp`: Self = "_rrirtr._udp"
    /// rrimwm 
    public static let `rrimwmTcp`: Self = "_rrimwm._tcp"
    /// rrimwm 
    public static let `rrimwmUdp`: Self = "_rrimwm._udp"
    /// rrilwm 
    public static let `rrilwmTcp`: Self = "_rrilwm._tcp"
    /// rrilwm 
    public static let `rrilwmUdp`: Self = "_rrilwm._udp"
    /// rrifmm 
    public static let `rrifmmTcp`: Self = "_rrifmm._tcp"
    /// rrifmm 
    public static let `rrifmmUdp`: Self = "_rrifmm._udp"
    /// rrisat [Allen_Briggs]
    public static let `rrisatTcp`: Self = "_rrisat._tcp"
    /// rrisat [Allen_Briggs]
    public static let `rrisatUdp`: Self = "_rrisat._udp"
    /// RSVP-ENCAPSULATION-1 
    public static let `rsvpEncap1Tcp`: Self = "_rsvp-encap-1._tcp"
    /// RSVP-ENCAPSULATION-1 
    public static let `rsvpEncap1Udp`: Self = "_rsvp-encap-1._udp"
    /// RSVP-ENCAPSULATION-2 [Bob_Braden_2]
    public static let `rsvpEncap2Tcp`: Self = "_rsvp-encap-2._tcp"
    /// RSVP-ENCAPSULATION-2 [Bob_Braden_2]
    public static let `rsvpEncap2Udp`: Self = "_rsvp-encap-2._udp"
    /// mps-raft [Jason_Leupen]
    public static let `mpsRaftTcp`: Self = "_mps-raft._tcp"
    /// mps-raft [Jason_Leupen]
    public static let `mpsRaftUdp`: Self = "_mps-raft._udp"
    /// l2f 
    public static let `l2fTcp`: Self = "_l2f._tcp"
    /// l2f 
    public static let `l2fUdp`: Self = "_l2f._udp"
    /// l2tp [Andy_Valencia]
    public static let `l2tpTcp`: Self = "_l2tp._tcp"
    /// l2tp [Andy_Valencia]
    public static let `l2tpUdp`: Self = "_l2tp._udp"
    /// deskshare [Sarah_Thompson]
    public static let `deskshareTcp`: Self = "_deskshare._tcp"
    /// deskshare [Sarah_Thompson]
    public static let `deskshareUdp`: Self = "_deskshare._udp"
    /// hb-engine [Charles_C_L_Chou]
    public static let `hbEngineTcp`: Self = "_hb-engine._tcp"
    /// hb-engine [Charles_C_L_Chou]
    public static let `hbEngineUdp`: Self = "_hb-engine._udp"
    /// bcs-broker [Andy_Warner]
    public static let `bcsBrokerTcp`: Self = "_bcs-broker._tcp"
    /// bcs-broker [Andy_Warner]
    public static let `bcsBrokerUdp`: Self = "_bcs-broker._udp"
    /// slingshot [Paul_Groarke]
    public static let `slingshotTcp`: Self = "_slingshot._tcp"
    /// slingshot [Paul_Groarke]
    public static let `slingshotUdp`: Self = "_slingshot._udp"
    /// jetform [gdeinsta]
    public static let `jetformTcp`: Self = "_jetform._tcp"
    /// jetform [gdeinsta]
    public static let `jetformUdp`: Self = "_jetform._udp"
    /// vdmplay [David_Thielen]
    public static let `vdmplayTcp`: Self = "_vdmplay._tcp"
    /// vdmplay [David_Thielen]
    public static let `vdmplayUdp`: Self = "_vdmplay._udp"
    /// gat-lmd [Igor_Zaoutine]
    public static let `gatLmdTcp`: Self = "_gat-lmd._tcp"
    /// gat-lmd [Igor_Zaoutine]
    public static let `gatLmdUdp`: Self = "_gat-lmd._udp"
    /// centra [Drew_Wolff]
    public static let `centraTcp`: Self = "_centra._tcp"
    /// centra [Drew_Wolff]
    public static let `centraUdp`: Self = "_centra._udp"
    /// impera [Stepehen_Campbell]
    public static let `imperaTcp`: Self = "_impera._tcp"
    /// impera [Stepehen_Campbell]
    public static let `imperaUdp`: Self = "_impera._udp"
    /// pptconference [John_Tafoya]
    public static let `pptconferenceTcp`: Self = "_pptconference._tcp"
    /// pptconference [John_Tafoya]
    public static let `pptconferenceUdp`: Self = "_pptconference._udp"
    /// resource monitoring service [Ron_Lawson]
    public static let `registrarTcp`: Self = "_registrar._tcp"
    /// resource monitoring service [Ron_Lawson]
    public static let `registrarUdp`: Self = "_registrar._udp"
    /// ConferenceTalk [George_Kajos]
    public static let `conferencetalkTcp`: Self = "_conferencetalk._tcp"
    /// ConferenceTalk [George_Kajos]
    public static let `conferencetalkUdp`: Self = "_conferencetalk._udp"
    /// sesi-lm 
    public static let `sesiLmTcp`: Self = "_sesi-lm._tcp"
    /// sesi-lm 
    public static let `sesiLmUdp`: Self = "_sesi-lm._udp"
    /// houdini-lm [Paul_Breslin]
    public static let `houdiniLmTcp`: Self = "_houdini-lm._tcp"
    /// houdini-lm [Paul_Breslin]
    public static let `houdiniLmUdp`: Self = "_houdini-lm._udp"
    /// xmsg [Mark_E_Fogle]
    public static let `xmsgTcp`: Self = "_xmsg._tcp"
    /// xmsg [Mark_E_Fogle]
    public static let `xmsgUdp`: Self = "_xmsg._udp"
    /// fj-hdnet [Manabu_Makino]
    public static let `fjHdnetTcp`: Self = "_fj-hdnet._tcp"
    /// fj-hdnet [Manabu_Makino]
    public static let `fjHdnetUdp`: Self = "_fj-hdnet._udp"
    /// H.323 Multicast Gatekeeper Discover [ITU-T]
    public static let `h323gatediscTcp`: Self = "_h323gatedisc._tcp"
    /// H.323 Multicast Gatekeeper Discover [ITU-T]
    public static let `h323gatediscUdp`: Self = "_h323gatedisc._udp"
    /// H.323 Unicast Gatekeeper Signaling [ITU-T]
    public static let `h323gatestatTcp`: Self = "_h323gatestat._tcp"
    /// H.323 Unicast Gatekeeper Signaling [ITU-T]
    public static let `h323gatestatUdp`: Self = "_h323gatestat._udp"
    /// H.323 Call Control Signalling [ITU-T]
    public static let `h323hostcallTcp`: Self = "_h323hostcall._tcp"
    /// H.323 Call Control Signalling [ITU-T]
    public static let `h323hostcallUdp`: Self = "_h323hostcall._udp"
    /// H.323 Call Control [ITU-T]
    public static let `h323hostcallSctp`: Self = "_h323hostcall._sctp"
    /// caicci [Sylvia_Scheuren]
    public static let `caicciTcp`: Self = "_caicci._tcp"
    /// caicci [Sylvia_Scheuren]
    public static let `caicciUdp`: Self = "_caicci._udp"
    /// HKS License Manager [Michael_Wood]
    public static let `hksLmTcp`: Self = "_hks-lm._tcp"
    /// HKS License Manager [Michael_Wood]
    public static let `hksLmUdp`: Self = "_hks-lm._udp"
    /// pptp [Ken_Crocker]
    public static let `pptpTcp`: Self = "_pptp._tcp"
    /// pptp [Ken_Crocker]
    public static let `pptpUdp`: Self = "_pptp._udp"
    /// csbphonemaster [Hans_Peter_Heffels]
    public static let `csbphonemasterTcp`: Self = "_csbphonemaster._tcp"
    /// csbphonemaster [Hans_Peter_Heffels]
    public static let `csbphonemasterUdp`: Self = "_csbphonemaster._udp"
    /// iden-ralp [Chris_Stanaway]
    public static let `idenRalpTcp`: Self = "_iden-ralp._tcp"
    /// iden-ralp [Chris_Stanaway]
    public static let `idenRalpUdp`: Self = "_iden-ralp._udp"
    /// IBERIAGAMES [Jose_Luis]
    public static let `iberiagamesTcp`: Self = "_iberiagames._tcp"
    /// IBERIAGAMES [Jose_Luis]
    public static let `iberiagamesUdp`: Self = "_iberiagames._udp"
    /// winddx [Bill_Andrews]
    public static let `winddxTcp`: Self = "_winddx._tcp"
    /// winddx [Bill_Andrews]
    public static let `winddxUdp`: Self = "_winddx._udp"
    /// TELINDUS [Paul_Pyck]
    public static let `telindusTcp`: Self = "_telindus._tcp"
    /// TELINDUS [Paul_Pyck]
    public static let `telindusUdp`: Self = "_telindus._udp"
    /// CityNL License Management [CityDisc]
    public static let `citynlTcp`: Self = "_citynl._tcp"
    /// CityNL License Management [CityDisc]
    public static let `citynlUdp`: Self = "_citynl._udp"
    /// roketz [Ahti_Heinla]
    public static let `roketzTcp`: Self = "_roketz._tcp"
    /// roketz [Ahti_Heinla]
    public static let `roketzUdp`: Self = "_roketz._udp"
    /// MSICCP [Max_Morris]
    public static let `msiccpTcp`: Self = "_msiccp._tcp"
    /// MSICCP [Max_Morris]
    public static let `msiccpUdp`: Self = "_msiccp._udp"
    /// proxim [Srinivas_N_Mogalapa]
    public static let `proximTcp`: Self = "_proxim._tcp"
    /// proxim [Srinivas_N_Mogalapa]
    public static let `proximUdp`: Self = "_proxim._udp"
    /// SIMS - SIIPAT Protocol for Alarm Transmission [Steve_Ryckman]
    public static let `siipatTcp`: Self = "_siipat._tcp"
    /// SIMS - SIIPAT Protocol for Alarm Transmission [Steve_Ryckman]
    public static let `siipatUdp`: Self = "_siipat._udp"
    /// Camber Corporation License Management [Jeannie_Burleson]
    public static let `cambertxLmTcp`: Self = "_cambertx-lm._tcp"
    /// Camber Corporation License Management [Jeannie_Burleson]
    public static let `cambertxLmUdp`: Self = "_cambertx-lm._udp"
    /// PrivateChat [Louis_E_Simard]
    public static let `privatechatTcp`: Self = "_privatechat._tcp"
    /// PrivateChat [Louis_E_Simard]
    public static let `privatechatUdp`: Self = "_privatechat._udp"
    /// street-stream [Glenn_Levitt]
    public static let `streetStreamTcp`: Self = "_street-stream._tcp"
    /// street-stream [Glenn_Levitt]
    public static let `streetStreamUdp`: Self = "_street-stream._udp"
    /// ultimad [Michael_Lanzetta]
    public static let `ultimadTcp`: Self = "_ultimad._tcp"
    /// ultimad [Michael_Lanzetta]
    public static let `ultimadUdp`: Self = "_ultimad._udp"
    /// GameGen1 [Glen_Pearson]
    public static let `gamegen1Tcp`: Self = "_gamegen1._tcp"
    /// GameGen1 [Glen_Pearson]
    public static let `gamegen1Udp`: Self = "_gamegen1._udp"
    /// webaccess [Christian_Saether]
    public static let `webaccessTcp`: Self = "_webaccess._tcp"
    /// webaccess [Christian_Saether]
    public static let `webaccessUdp`: Self = "_webaccess._udp"
    /// encore [Stuart_Button]
    public static let `encoreTcp`: Self = "_encore._tcp"
    /// encore [Stuart_Button]
    public static let `encoreUdp`: Self = "_encore._udp"
    /// cisco-net-mgmt [John_McCormack]
    public static let `ciscoNetMgmtTcp`: Self = "_cisco-net-mgmt._tcp"
    /// cisco-net-mgmt [John_McCormack]
    public static let `ciscoNetMgmtUdp`: Self = "_cisco-net-mgmt._udp"
    /// Cinema Graphics License Manager [Rodney_Iwashina]
    public static let `cinegrfxLmTcp`: Self = "_cinegrfx-lm._tcp"
    /// Cinema Graphics License Manager [Rodney_Iwashina]
    public static let `cinegrfxLmUdp`: Self = "_cinegrfx-lm._udp"
    /// ncpm-ft [Ken_Hearn]
    public static let `ncpmFtTcp`: Self = "_ncpm-ft._tcp"
    /// ncpm-ft [Ken_Hearn]
    public static let `ncpmFtUdp`: Self = "_ncpm-ft._udp"
    /// remote-winsock [Avi_Nathan]
    public static let `remoteWinsockTcp`: Self = "_remote-winsock._tcp"
    /// remote-winsock [Avi_Nathan]
    public static let `remoteWinsockUdp`: Self = "_remote-winsock._udp"
    /// ftrapid-1 
    public static let `ftrapid1Tcp`: Self = "_ftrapid-1._tcp"
    /// ftrapid-1 
    public static let `ftrapid1Udp`: Self = "_ftrapid-1._udp"
    /// ftrapid-2 [Richard_J_Williams]
    public static let `ftrapid2Tcp`: Self = "_ftrapid-2._tcp"
    /// ftrapid-2 [Richard_J_Williams]
    public static let `ftrapid2Udp`: Self = "_ftrapid-2._udp"
    /// oracle-em1 [Bob_Purvy]
    public static let `oracleEm1Tcp`: Self = "_oracle-em1._tcp"
    /// oracle-em1 [Bob_Purvy]
    public static let `oracleEm1Udp`: Self = "_oracle-em1._udp"
    /// aspen-services [Mark_B_Hurst]
    public static let `aspenServicesTcp`: Self = "_aspen-services._tcp"
    /// aspen-services [Mark_B_Hurst]
    public static let `aspenServicesUdp`: Self = "_aspen-services._udp"
    /// Simple Socket Library's PortMaster [Dr_Charles_E_Campb]
    public static let `sslpTcp`: Self = "_sslp._tcp"
    /// Simple Socket Library's PortMaster [Dr_Charles_E_Campb]
    public static let `sslpUdp`: Self = "_sslp._udp"
    /// SwiftNet [Terry_Lim]
    public static let `swiftnetTcp`: Self = "_swiftnet._tcp"
    /// SwiftNet [Terry_Lim]
    public static let `swiftnetUdp`: Self = "_swiftnet._udp"
    /// Leap of Faith Research License Manager 
    public static let `lofrLmTcp`: Self = "_lofr-lm._tcp"
    /// Leap of Faith Research License Manager 
    public static let `lofrLmUdp`: Self = "_lofr-lm._udp"
    /// Predatar Comms Service [Silverstring_Ltd]
    public static let `predatarCommsTcp`: Self = "_predatar-comms._tcp"
    /// oracle-em2 [Bob_Purvy]
    public static let `oracleEm2Tcp`: Self = "_oracle-em2._tcp"
    /// oracle-em2 [Bob_Purvy]
    public static let `oracleEm2Udp`: Self = "_oracle-em2._udp"
    /// ms-streaming [Bret_O_Rourke]
    public static let `msStreamingTcp`: Self = "_ms-streaming._tcp"
    /// ms-streaming [Bret_O_Rourke]
    public static let `msStreamingUdp`: Self = "_ms-streaming._udp"
    /// capfast-lmd [Chuck_Neal]
    public static let `capfastLmdTcp`: Self = "_capfast-lmd._tcp"
    /// capfast-lmd [Chuck_Neal]
    public static let `capfastLmdUdp`: Self = "_capfast-lmd._udp"
    /// cnhrp [William_Stoye]
    public static let `cnhrpTcp`: Self = "_cnhrp._tcp"
    /// cnhrp [William_Stoye]
    public static let `cnhrpUdp`: Self = "_cnhrp._udp"
    /// tftp-mcast [Tom_Emberson]
    public static let `tftpMcastTcp`: Self = "_tftp-mcast._tcp"
    /// tftp-mcast [Tom_Emberson]
    public static let `tftpMcastUdp`: Self = "_tftp-mcast._udp"
    /// SPSS License Manager [Tex_Hull]
    public static let `spssLmTcp`: Self = "_spss-lm._tcp"
    /// SPSS License Manager [Tex_Hull]
    public static let `spssLmUdp`: Self = "_spss-lm._udp"
    /// www-ldap-gw [Nick_Emery]
    public static let `wwwLdapGwTcp`: Self = "_www-ldap-gw._tcp"
    /// www-ldap-gw [Nick_Emery]
    public static let `wwwLdapGwUdp`: Self = "_www-ldap-gw._udp"
    /// cft-0 [Martine_Marchand]
    public static let `cft0Tcp`: Self = "_cft-0._tcp"
    /// cft-0 [Martine_Marchand]
    public static let `cft0Udp`: Self = "_cft-0._udp"
    /// cft-1 [Martine_Marchand]
    public static let `cft1Tcp`: Self = "_cft-1._tcp"
    /// cft-1 [Martine_Marchand]
    public static let `cft1Udp`: Self = "_cft-1._udp"
    /// cft-2 [Martine_Marchand]
    public static let `cft2Tcp`: Self = "_cft-2._tcp"
    /// cft-2 [Martine_Marchand]
    public static let `cft2Udp`: Self = "_cft-2._udp"
    /// cft-3 [Martine_Marchand]
    public static let `cft3Tcp`: Self = "_cft-3._tcp"
    /// cft-3 [Martine_Marchand]
    public static let `cft3Udp`: Self = "_cft-3._udp"
    /// cft-4 [Martine_Marchand]
    public static let `cft4Tcp`: Self = "_cft-4._tcp"
    /// cft-4 [Martine_Marchand]
    public static let `cft4Udp`: Self = "_cft-4._udp"
    /// cft-5 [Martine_Marchand]
    public static let `cft5Tcp`: Self = "_cft-5._tcp"
    /// cft-5 [Martine_Marchand]
    public static let `cft5Udp`: Self = "_cft-5._udp"
    /// cft-6 [Martine_Marchand]
    public static let `cft6Tcp`: Self = "_cft-6._tcp"
    /// cft-6 [Martine_Marchand]
    public static let `cft6Udp`: Self = "_cft-6._udp"
    /// cft-7 [Martine_Marchand]
    public static let `cft7Tcp`: Self = "_cft-7._tcp"
    /// cft-7 [Martine_Marchand]
    public static let `cft7Udp`: Self = "_cft-7._udp"
    /// bmc-net-adm [Portnoy_Boxman]
    public static let `bmcNetAdmTcp`: Self = "_bmc-net-adm._tcp"
    /// bmc-net-adm [Portnoy_Boxman]
    public static let `bmcNetAdmUdp`: Self = "_bmc-net-adm._udp"
    /// bmc-net-svc [Portnoy_Boxman]
    public static let `bmcNetSvcTcp`: Self = "_bmc-net-svc._tcp"
    /// bmc-net-svc [Portnoy_Boxman]
    public static let `bmcNetSvcUdp`: Self = "_bmc-net-svc._udp"
    /// vaultbase [Jose_A_Sesin]
    public static let `vaultbaseTcp`: Self = "_vaultbase._tcp"
    /// vaultbase [Jose_A_Sesin]
    public static let `vaultbaseUdp`: Self = "_vaultbase._udp"
    /// EssWeb Gateway [Bob_Nattenberg]
    public static let `esswebGwTcp`: Self = "_essweb-gw._tcp"
    /// EssWeb Gateway [Bob_Nattenberg]
    public static let `esswebGwUdp`: Self = "_essweb-gw._udp"
    /// KMSControl [Roy_Chastain]
    public static let `kmscontrolTcp`: Self = "_kmscontrol._tcp"
    /// KMSControl [Roy_Chastain]
    public static let `kmscontrolUdp`: Self = "_kmscontrol._udp"
    /// global-dtserv [Nicholas_Davies]
    public static let `globalDtservTcp`: Self = "_global-dtserv._tcp"
    /// global-dtserv [Nicholas_Davies]
    public static let `globalDtservUdp`: Self = "_global-dtserv._udp"
    /// data interchange between visual processing containers [MJA_Technology_LLC]
    public static let `vdabTcp`: Self = "_vdab._tcp"
    /// Federal Emergency Management Information System [Larry_Gerhardstein]
    public static let `femisTcp`: Self = "_femis._tcp"
    /// Federal Emergency Management Information System [Larry_Gerhardstein]
    public static let `femisUdp`: Self = "_femis._udp"
    /// powerguardian [Charles_Bennett]
    public static let `powerguardianTcp`: Self = "_powerguardian._tcp"
    /// powerguardian [Charles_Bennett]
    public static let `powerguardianUdp`: Self = "_powerguardian._udp"
    /// prodigy-internet [Bob_Dedrick]
    public static let `prodigyIntrnetTcp`: Self = "_prodigy-intrnet._tcp"
    /// prodigy-internet [Bob_Dedrick]
    public static let `prodigyIntrnetUdp`: Self = "_prodigy-intrnet._udp"
    /// pharmasoft [Ola_Strandberg]
    public static let `pharmasoftTcp`: Self = "_pharmasoft._tcp"
    /// pharmasoft [Ola_Strandberg]
    public static let `pharmasoftUdp`: Self = "_pharmasoft._udp"
    /// dpkeyserv [Yasunari_Gon_Yamasit]
    public static let `dpkeyservTcp`: Self = "_dpkeyserv._tcp"
    /// dpkeyserv [Yasunari_Gon_Yamasit]
    public static let `dpkeyservUdp`: Self = "_dpkeyserv._udp"
    /// answersoft-lm [James_A_Brewster]
    public static let `answersoftLmTcp`: Self = "_answersoft-lm._tcp"
    /// answersoft-lm [James_A_Brewster]
    public static let `answersoftLmUdp`: Self = "_answersoft-lm._udp"
    /// hp-hcip [Allen_Baker]
    public static let `hpHcipTcp`: Self = "_hp-hcip._tcp"
    /// hp-hcip [Allen_Baker]
    public static let `hpHcipUdp`: Self = "_hp-hcip._udp"
    /// Finle License Manager [Dongling_Wang]
    public static let `finleLmTcp`: Self = "_finle-lm._tcp"
    /// Finle License Manager [Dongling_Wang]
    public static let `finleLmUdp`: Self = "_finle-lm._udp"
    /// Wind River Systems License Manager [Will_Dere]
    public static let `windlmTcp`: Self = "_windlm._tcp"
    /// Wind River Systems License Manager [Will_Dere]
    public static let `windlmUdp`: Self = "_windlm._udp"
    /// funk-logger 
    public static let `funkLoggerTcp`: Self = "_funk-logger._tcp"
    /// funk-logger 
    public static let `funkLoggerUdp`: Self = "_funk-logger._udp"
    /// funk-license [Cimarron_Boozer][Eric_Wilde]
    public static let `funkLicenseTcp`: Self = "_funk-license._tcp"
    /// funk-license [Cimarron_Boozer][Eric_Wilde]
    public static let `funkLicenseUdp`: Self = "_funk-license._udp"
    /// psmond [Will_Golson]
    public static let `psmondTcp`: Self = "_psmond._tcp"
    /// psmond [Will_Golson]
    public static let `psmondUdp`: Self = "_psmond._udp"
    /// hello [D_J_Bernstein]
    public static let `helloTcp`: Self = "_hello._tcp"
    /// hello [D_J_Bernstein]
    public static let `helloUdp`: Self = "_hello._udp"
    /// EA1 [Kirk_MacLean]
    public static let `ea1Tcp`: Self = "_ea1._tcp"
    /// EA1 [Kirk_MacLean]
    public static let `ea1Udp`: Self = "_ea1._udp"
    /// ibm-dt-2 [Sam_Borman]
    public static let `ibmDt2Tcp`: Self = "_ibm-dt-2._tcp"
    /// ibm-dt-2 [Sam_Borman]
    public static let `ibmDt2Udp`: Self = "_ibm-dt-2._udp"
    /// rsc-robot [Andrew_Jay_Schneider]
    public static let `rscRobotTcp`: Self = "_rsc-robot._tcp"
    /// rsc-robot [Andrew_Jay_Schneider]
    public static let `rscRobotUdp`: Self = "_rsc-robot._udp"
    /// cera-bcm [Leo_Moesgaard]
    public static let `ceraBcmTcp`: Self = "_cera-bcm._tcp"
    /// cera-bcm [Leo_Moesgaard]
    public static let `ceraBcmUdp`: Self = "_cera-bcm._udp"
    /// dpi-proxy [Charles_Gordon]
    public static let `dpiProxyTcp`: Self = "_dpi-proxy._tcp"
    /// dpi-proxy [Charles_Gordon]
    public static let `dpiProxyUdp`: Self = "_dpi-proxy._udp"
    /// Vocaltec Server Administration [Scott_Petrack]
    public static let `vocaltecAdminTcp`: Self = "_vocaltec-admin._tcp"
    /// Vocaltec Server Administration [Scott_Petrack]
    public static let `vocaltecAdminUdp`: Self = "_vocaltec-admin._udp"
    /// Event Transfer Protocol [Mike_Wray]
    public static let `etpTcp`: Self = "_etp._tcp"
    /// Event Transfer Protocol [Mike_Wray]
    public static let `etpUdp`: Self = "_etp._udp"
    /// NETRISK [Kevin_Green]
    public static let `netriskTcp`: Self = "_netrisk._tcp"
    /// NETRISK [Kevin_Green]
    public static let `netriskUdp`: Self = "_netrisk._udp"
    /// ANSYS-License manager [Suzanne_Lorrin_2]
    public static let `ansysLmTcp`: Self = "_ansys-lm._tcp"
    /// ANSYS-License manager [Suzanne_Lorrin_2]
    public static let `ansysLmUdp`: Self = "_ansys-lm._udp"
    /// Microsoft Message Que [Amnon_Horowitz]
    public static let `msmqTcp`: Self = "_msmq._tcp"
    /// Microsoft Message Que [Amnon_Horowitz]
    public static let `msmqUdp`: Self = "_msmq._udp"
    /// ConComp1 [Ed_Vincent]
    public static let `concomp1Tcp`: Self = "_concomp1._tcp"
    /// ConComp1 [Ed_Vincent]
    public static let `concomp1Udp`: Self = "_concomp1._udp"
    /// HP-HCIP-GWY [Allen_Baker]
    public static let `hpHcipGwyTcp`: Self = "_hp-hcip-gwy._tcp"
    /// HP-HCIP-GWY [Allen_Baker]
    public static let `hpHcipGwyUdp`: Self = "_hp-hcip-gwy._udp"
    /// ENL [Brian_Olson]
    public static let `enlTcp`: Self = "_enl._tcp"
    /// ENL [Brian_Olson]
    public static let `enlUdp`: Self = "_enl._udp"
    /// ENL-Name [Brian_Olson]
    public static let `enlNameTcp`: Self = "_enl-name._tcp"
    /// ENL-Name [Brian_Olson]
    public static let `enlNameUdp`: Self = "_enl-name._udp"
    /// Musiconline [Craig_Weeks]
    public static let `musiconlineTcp`: Self = "_musiconline._tcp"
    /// Musiconline [Craig_Weeks]
    public static let `musiconlineUdp`: Self = "_musiconline._udp"
    /// Fujitsu Hot Standby Protocol [Eiki_Iwata]
    public static let `fhspTcp`: Self = "_fhsp._tcp"
    /// Fujitsu Hot Standby Protocol [Eiki_Iwata]
    public static let `fhspUdp`: Self = "_fhsp._udp"
    /// Oracle-VP2 [Craig_Fowler]
    public static let `oracleVp2Tcp`: Self = "_oracle-vp2._tcp"
    /// Oracle-VP2 [Craig_Fowler]
    public static let `oracleVp2Udp`: Self = "_oracle-vp2._udp"
    /// Oracle-VP1 [Craig_Fowler]
    public static let `oracleVp1Tcp`: Self = "_oracle-vp1._tcp"
    /// Oracle-VP1 [Craig_Fowler]
    public static let `oracleVp1Udp`: Self = "_oracle-vp1._udp"
    /// Jerand License Manager [Robert_Monat]
    public static let `jerandLmTcp`: Self = "_jerand-lm._tcp"
    /// Jerand License Manager [Robert_Monat]
    public static let `jerandLmUdp`: Self = "_jerand-lm._udp"
    /// Scientia-SDB [SYSTEMS_MANAGER]
    public static let `scientiaSdbTcp`: Self = "_scientia-sdb._tcp"
    /// Scientia-SDB [SYSTEMS_MANAGER]
    public static let `scientiaSdbUdp`: Self = "_scientia-sdb._udp"
    /// RADIUS 
    public static let `radiusTcp`: Self = "_radius._tcp"
    /// RADIUS 
    public static let `radiusUdp`: Self = "_radius._udp"
    /// RADIUS Accounting 
    public static let `radiusAcctTcp`: Self = "_radius-acct._tcp"
    /// RADIUS Accounting 
    public static let `radiusAcctUdp`: Self = "_radius-acct._udp"
    /// TDP Suite [Rob_Lockhart]
    public static let `tdpSuiteTcp`: Self = "_tdp-suite._tcp"
    /// TDP Suite [Rob_Lockhart]
    public static let `tdpSuiteUdp`: Self = "_tdp-suite._udp"
    /// MMPFT [Ralf_Muckenhirn]
    public static let `mmpftTcp`: Self = "_mmpft._tcp"
    /// MMPFT [Ralf_Muckenhirn]
    public static let `mmpftUdp`: Self = "_mmpft._udp"
    /// HARP [Bjorn_Chambless]
    public static let `harpTcp`: Self = "_harp._tcp"
    /// HARP [Bjorn_Chambless]
    public static let `harpUdp`: Self = "_harp._udp"
    /// RKB-OSCS [Robert_Kevin_Breton]
    public static let `rkbOscsTcp`: Self = "_rkb-oscs._tcp"
    /// RKB-OSCS [Robert_Kevin_Breton]
    public static let `rkbOscsUdp`: Self = "_rkb-oscs._udp"
    /// Enhanced Trivial File Transfer Protocol [William_Polites]
    public static let `etftpTcp`: Self = "_etftp._tcp"
    /// Enhanced Trivial File Transfer Protocol [William_Polites]
    public static let `etftpUdp`: Self = "_etftp._udp"
    /// Plato License Manager [Mark_Morris]
    public static let `platoLmTcp`: Self = "_plato-lm._tcp"
    /// Plato License Manager [Mark_Morris]
    public static let `platoLmUdp`: Self = "_plato-lm._udp"
    /// mcagent [Ryoichi_Shinohara]
    public static let `mcagentTcp`: Self = "_mcagent._tcp"
    /// mcagent [Ryoichi_Shinohara]
    public static let `mcagentUdp`: Self = "_mcagent._udp"
    /// donnyworld [Don_Oliver]
    public static let `donnyworldTcp`: Self = "_donnyworld._tcp"
    /// donnyworld [Don_Oliver]
    public static let `donnyworldUdp`: Self = "_donnyworld._udp"
    /// es-elmd [David_Duncan]
    public static let `esElmdTcp`: Self = "_es-elmd._tcp"
    /// es-elmd [David_Duncan]
    public static let `esElmdUdp`: Self = "_es-elmd._udp"
    /// Unisys Natural Language License Manager [Raymond_A_Diedrichs]
    public static let `unisysLmTcp`: Self = "_unisys-lm._tcp"
    /// Unisys Natural Language License Manager [Raymond_A_Diedrichs]
    public static let `unisysLmUdp`: Self = "_unisys-lm._udp"
    /// metrics-pas [Tom_Haapanen]
    public static let `metricsPasTcp`: Self = "_metrics-pas._tcp"
    /// metrics-pas [Tom_Haapanen]
    public static let `metricsPasUdp`: Self = "_metrics-pas._udp"
    /// DirecPC Video [Chris_Kerrigan]
    public static let `direcpcVideoTcp`: Self = "_direcpc-video._tcp"
    /// DirecPC Video [Chris_Kerrigan]
    public static let `direcpcVideoUdp`: Self = "_direcpc-video._udp"
    /// ARDT [Mike_Goddard]
    public static let `ardtTcp`: Self = "_ardt._tcp"
    /// ARDT [Mike_Goddard]
    public static let `ardtUdp`: Self = "_ardt._udp"
    /// ASI [Bob_Tournoux]
    public static let `asiTcp`: Self = "_asi._tcp"
    /// ASI [Bob_Tournoux]
    public static let `asiUdp`: Self = "_asi._udp"
    /// itm-mcell-u [Portnoy_Boxman]
    public static let `itmMcellUTcp`: Self = "_itm-mcell-u._tcp"
    /// itm-mcell-u [Portnoy_Boxman]
    public static let `itmMcellUUdp`: Self = "_itm-mcell-u._udp"
    /// Optika eMedia [Daryle_DeBalski]
    public static let `optikaEmediaTcp`: Self = "_optika-emedia._tcp"
    /// Optika eMedia [Daryle_DeBalski]
    public static let `optikaEmediaUdp`: Self = "_optika-emedia._udp"
    /// Oracle Net8 CMan Admin [Shuvayu_Kanjilal]
    public static let `net8CmanTcp`: Self = "_net8-cman._tcp"
    /// Oracle Net8 CMan Admin [Shuvayu_Kanjilal]
    public static let `net8CmanUdp`: Self = "_net8-cman._udp"
    /// Myrtle [Ron_Achin]
    public static let `myrtleTcp`: Self = "_myrtle._tcp"
    /// Myrtle [Ron_Achin]
    public static let `myrtleUdp`: Self = "_myrtle._udp"
    /// ThoughtTreasure [Erik_Mueller]
    public static let `thtTreasureTcp`: Self = "_tht-treasure._tcp"
    /// ThoughtTreasure [Erik_Mueller]
    public static let `thtTreasureUdp`: Self = "_tht-treasure._udp"
    /// udpradio [Guus_Sliepen]
    public static let `udpradioTcp`: Self = "_udpradio._tcp"
    /// udpradio [Guus_Sliepen]
    public static let `udpradioUdp`: Self = "_udpradio._udp"
    /// ARDUS Unicast 
    public static let `ardusuniTcp`: Self = "_ardusuni._tcp"
    /// ARDUS Unicast 
    public static let `ardusuniUdp`: Self = "_ardusuni._udp"
    /// ARDUS Multicast [Toshikatsu_Ito]
    public static let `ardusmulTcp`: Self = "_ardusmul._tcp"
    /// ARDUS Multicast [Toshikatsu_Ito]
    public static let `ardusmulUdp`: Self = "_ardusmul._udp"
    /// ste-smsc [Tom_Snauwaert]
    public static let `steSmscTcp`: Self = "_ste-smsc._tcp"
    /// ste-smsc [Tom_Snauwaert]
    public static let `steSmscUdp`: Self = "_ste-smsc._udp"
    /// csoft1 [John_Coll]
    public static let `csoft1Tcp`: Self = "_csoft1._tcp"
    /// csoft1 [John_Coll]
    public static let `csoft1Udp`: Self = "_csoft1._udp"
    /// TALNET [Aaron_Lav]
    public static let `talnetTcp`: Self = "_talnet._tcp"
    /// TALNET [Aaron_Lav]
    public static let `talnetUdp`: Self = "_talnet._udp"
    /// netopia-vo1 
    public static let `netopiaVo1Tcp`: Self = "_netopia-vo1._tcp"
    /// netopia-vo1 
    public static let `netopiaVo1Udp`: Self = "_netopia-vo1._udp"
    /// netopia-vo2 
    public static let `netopiaVo2Tcp`: Self = "_netopia-vo2._tcp"
    /// netopia-vo2 
    public static let `netopiaVo2Udp`: Self = "_netopia-vo2._udp"
    /// netopia-vo3 
    public static let `netopiaVo3Tcp`: Self = "_netopia-vo3._tcp"
    /// netopia-vo3 
    public static let `netopiaVo3Udp`: Self = "_netopia-vo3._udp"
    /// netopia-vo4 
    public static let `netopiaVo4Tcp`: Self = "_netopia-vo4._tcp"
    /// netopia-vo4 
    public static let `netopiaVo4Udp`: Self = "_netopia-vo4._udp"
    /// netopia-vo5 [Marc_Epard]
    public static let `netopiaVo5Tcp`: Self = "_netopia-vo5._tcp"
    /// netopia-vo5 [Marc_Epard]
    public static let `netopiaVo5Udp`: Self = "_netopia-vo5._udp"
    /// DirecPC-DLL [Chris_Kerrigan]
    public static let `direcpcDllTcp`: Self = "_direcpc-dll._tcp"
    /// DirecPC-DLL [Chris_Kerrigan]
    public static let `direcpcDllUdp`: Self = "_direcpc-dll._udp"
    /// altalink [Alberto_Raydan]
    public static let `altalinkTcp`: Self = "_altalink._tcp"
    /// altalink [Alberto_Raydan]
    public static let `altalinkUdp`: Self = "_altalink._udp"
    /// Tunstall PNC [Robert_M_Moore]
    public static let `tunstallPncTcp`: Self = "_tunstall-pnc._tcp"
    /// Tunstall PNC [Robert_M_Moore]
    public static let `tunstallPncUdp`: Self = "_tunstall-pnc._udp"
    /// SLP Notification 
    public static let `slpNotifyTcp`: Self = "_slp-notify._tcp"
    /// SLP Notification 
    public static let `slpNotifyUdp`: Self = "_slp-notify._udp"
    /// fjdocdist [Yuichi_Ohiwa]
    public static let `fjdocdistTcp`: Self = "_fjdocdist._tcp"
    /// fjdocdist [Yuichi_Ohiwa]
    public static let `fjdocdistUdp`: Self = "_fjdocdist._udp"
    /// ALPHA-SMS [Benjamin_Grimm]
    public static let `alphaSmsTcp`: Self = "_alpha-sms._tcp"
    /// ALPHA-SMS [Benjamin_Grimm]
    public static let `alphaSmsUdp`: Self = "_alpha-sms._udp"
    /// GSI [William_Mullaney]
    public static let `gsiTcp`: Self = "_gsi._tcp"
    /// GSI [William_Mullaney]
    public static let `gsiUdp`: Self = "_gsi._udp"
    /// ctcd [John_Ryan]
    public static let `ctcdTcp`: Self = "_ctcd._tcp"
    /// ctcd [John_Ryan]
    public static let `ctcdUdp`: Self = "_ctcd._udp"
    /// Virtual Time [Angie_S_Morner]
    public static let `virtualTimeTcp`: Self = "_virtual-time._tcp"
    /// Virtual Time [Angie_S_Morner]
    public static let `virtualTimeUdp`: Self = "_virtual-time._udp"
    /// VIDS-AVTP [Sascha_Kuemmel]
    public static let `vidsAvtpTcp`: Self = "_vids-avtp._tcp"
    /// VIDS-AVTP [Sascha_Kuemmel]
    public static let `vidsAvtpUdp`: Self = "_vids-avtp._udp"
    /// Buddy Draw [Marvin_Shin]
    public static let `buddyDrawTcp`: Self = "_buddy-draw._tcp"
    /// Buddy Draw [Marvin_Shin]
    public static let `buddyDrawUdp`: Self = "_buddy-draw._udp"
    /// Fiorano RtrSvc 
    public static let `fioranoRtrsvcTcp`: Self = "_fiorano-rtrsvc._tcp"
    /// Fiorano RtrSvc 
    public static let `fioranoRtrsvcUdp`: Self = "_fiorano-rtrsvc._udp"
    /// Fiorano MsgSvc [Albert_Holt_2]
    public static let `fioranoMsgsvcTcp`: Self = "_fiorano-msgsvc._tcp"
    /// Fiorano MsgSvc [Albert_Holt_2]
    public static let `fioranoMsgsvcUdp`: Self = "_fiorano-msgsvc._udp"
    /// DataCaptor [Steven_M_Forrester]
    public static let `datacaptorTcp`: Self = "_datacaptor._tcp"
    /// DataCaptor [Steven_M_Forrester]
    public static let `datacaptorUdp`: Self = "_datacaptor._udp"
    /// PrivateArk [Ronen_Zoran]
    public static let `privatearkTcp`: Self = "_privateark._tcp"
    /// PrivateArk [Ronen_Zoran]
    public static let `privatearkUdp`: Self = "_privateark._udp"
    /// Gamma Fetcher Server [Cnaan_Aviv]
    public static let `gammafetchsvrTcp`: Self = "_gammafetchsvr._tcp"
    /// Gamma Fetcher Server [Cnaan_Aviv]
    public static let `gammafetchsvrUdp`: Self = "_gammafetchsvr._udp"
    /// SunSCALAR Services [Sanjay_Radia]
    public static let `sunscalarSvcTcp`: Self = "_sunscalar-svc._tcp"
    /// SunSCALAR Services [Sanjay_Radia]
    public static let `sunscalarSvcUdp`: Self = "_sunscalar-svc._udp"
    /// LeCroy VICP [Anthony_Cake]
    public static let `lecroyVicpTcp`: Self = "_lecroy-vicp._tcp"
    /// LeCroy VICP [Anthony_Cake]
    public static let `lecroyVicpUdp`: Self = "_lecroy-vicp._udp"
    /// MySQL Cluster Manager Agent [Andrew_Morgan]
    public static let `mysqlCmAgentTcp`: Self = "_mysql-cm-agent._tcp"
    /// MySQL Cluster Manager Agent [Andrew_Morgan]
    public static let `mysqlCmAgentUdp`: Self = "_mysql-cm-agent._udp"
    /// MSNP [William_Lai]
    public static let `msnpTcp`: Self = "_msnp._tcp"
    /// MSNP [William_Lai]
    public static let `msnpUdp`: Self = "_msnp._udp"
    /// Paradym 31 Port [David_Wooden]
    public static let `paradym31portTcp`: Self = "_paradym-31port._tcp"
    /// Paradym 31 Port [David_Wooden]
    public static let `paradym31portUdp`: Self = "_paradym-31port._udp"
    /// ENTP [Seiko_Epson]
    public static let `entpTcp`: Self = "_entp._tcp"
    /// ENTP [Seiko_Epson]
    public static let `entpUdp`: Self = "_entp._udp"
    /// swrmi [Jun_Yoshii]
    public static let `swrmiTcp`: Self = "_swrmi._tcp"
    /// swrmi [Jun_Yoshii]
    public static let `swrmiUdp`: Self = "_swrmi._udp"
    /// UDRIVE [Robby_Walker]
    public static let `udriveTcp`: Self = "_udrive._tcp"
    /// UDRIVE [Robby_Walker]
    public static let `udriveUdp`: Self = "_udrive._udp"
    /// VizibleBrowser [Jimmy_Talbot]
    public static let `viziblebrowserTcp`: Self = "_viziblebrowser._tcp"
    /// VizibleBrowser [Jimmy_Talbot]
    public static let `viziblebrowserUdp`: Self = "_viziblebrowser._udp"
    /// TransAct [TransAct_Futures_Dev]
    public static let `transactTcp`: Self = "_transact._tcp"
    /// TransAct [TransAct_Futures_Dev]
    public static let `transactUdp`: Self = "_transact._udp"
    /// SunSCALAR DNS Service [Sanjay_Radia]
    public static let `sunscalarDnsTcp`: Self = "_sunscalar-dns._tcp"
    /// SunSCALAR DNS Service [Sanjay_Radia]
    public static let `sunscalarDnsUdp`: Self = "_sunscalar-dns._udp"
    /// Cano Central 0 
    public static let `canocentral0Tcp`: Self = "_canocentral0._tcp"
    /// Cano Central 0 
    public static let `canocentral0Udp`: Self = "_canocentral0._udp"
    /// Cano Central 1 [Mark_McNamara]
    public static let `canocentral1Tcp`: Self = "_canocentral1._tcp"
    /// Cano Central 1 [Mark_McNamara]
    public static let `canocentral1Udp`: Self = "_canocentral1._udp"
    /// Fjmpjps 
    public static let `fjmpjpsTcp`: Self = "_fjmpjps._tcp"
    /// Fjmpjps 
    public static let `fjmpjpsUdp`: Self = "_fjmpjps._udp"
    /// Fjswapsnp [Y_Ohiwa]
    public static let `fjswapsnpTcp`: Self = "_fjswapsnp._tcp"
    /// Fjswapsnp [Y_Ohiwa]
    public static let `fjswapsnpUdp`: Self = "_fjswapsnp._udp"
    /// westell stats [Thomas_McCabe]
    public static let `westellStatsTcp`: Self = "_westell-stats._tcp"
    /// westell stats [Thomas_McCabe]
    public static let `westellStatsUdp`: Self = "_westell-stats._udp"
    /// ewcappsrv [Howard_Yin]
    public static let `ewcappsrvTcp`: Self = "_ewcappsrv._tcp"
    /// ewcappsrv [Howard_Yin]
    public static let `ewcappsrvUdp`: Self = "_ewcappsrv._udp"
    /// hp-webqosdb [Kim_Scott]
    public static let `hpWebqosdbTcp`: Self = "_hp-webqosdb._tcp"
    /// hp-webqosdb [Kim_Scott]
    public static let `hpWebqosdbUdp`: Self = "_hp-webqosdb._udp"
    /// drmsmc [Katsuhiko_Abe]
    public static let `drmsmcTcp`: Self = "_drmsmc._tcp"
    /// drmsmc [Katsuhiko_Abe]
    public static let `drmsmcUdp`: Self = "_drmsmc._udp"
    /// NettGain NMS [Dr_Yair_Shapira]
    public static let `nettgainNmsTcp`: Self = "_nettgain-nms._tcp"
    /// NettGain NMS [Dr_Yair_Shapira]
    public static let `nettgainNmsUdp`: Self = "_nettgain-nms._udp"
    /// Gilat VSAT Control [Yariv_Kaplan]
    public static let `vsatControlTcp`: Self = "_vsat-control._tcp"
    /// Gilat VSAT Control [Yariv_Kaplan]
    public static let `vsatControlUdp`: Self = "_vsat-control._udp"
    /// IBM WebSphere MQ Everyplace [Jane_Porter]
    public static let `ibmMqseries2Tcp`: Self = "_ibm-mqseries2._tcp"
    /// IBM WebSphere MQ Everyplace [Jane_Porter]
    public static let `ibmMqseries2Udp`: Self = "_ibm-mqseries2._udp"
    /// CA eTrust Common Services [Paul_Wissmiller]
    public static let `ecsqdmnTcp`: Self = "_ecsqdmn._tcp"
    /// CA eTrust Common Services [Paul_Wissmiller]
    public static let `ecsqdmnUdp`: Self = "_ecsqdmn._udp"
    /// Message Queuing Telemetry Transport Protocol [OASIS]
    public static let `mqttTcp`: Self = "_mqtt._tcp"
    /// Message Queuing Telemetry Transport Protocol [OASIS]
    public static let `mqttUdp`: Self = "_mqtt._udp"
    /// Internet Distance Map Svc [Sugih_Jamim]
    public static let `idmapsTcp`: Self = "_idmaps._tcp"
    /// Internet Distance Map Svc [Sugih_Jamim]
    public static let `idmapsUdp`: Self = "_idmaps._udp"
    /// Veritas Trap Server [Russell_Thrasher]
    public static let `vrtstrapserverTcp`: Self = "_vrtstrapserver._tcp"
    /// Veritas Trap Server [Russell_Thrasher]
    public static let `vrtstrapserverUdp`: Self = "_vrtstrapserver._udp"
    /// Leonardo over IP [Dietmar_Finkler]
    public static let `leoipTcp`: Self = "_leoip._tcp"
    /// Leonardo over IP [Dietmar_Finkler]
    public static let `leoipUdp`: Self = "_leoip._udp"
    /// FileX Listening Port [Megan_Woods]
    public static let `filexLportTcp`: Self = "_filex-lport._tcp"
    /// FileX Listening Port [Megan_Woods]
    public static let `filexLportUdp`: Self = "_filex-lport._udp"
    /// NC Config Port [Simon_Parker]
    public static let `ncconfigTcp`: Self = "_ncconfig._tcp"
    /// NC Config Port [Simon_Parker]
    public static let `ncconfigUdp`: Self = "_ncconfig._udp"
    /// Unify Web Adapter Service [Daegis_Inc]
    public static let `unifyAdapterTcp`: Self = "_unify-adapter._tcp"
    /// Unify Web Adapter Service [Daegis_Inc]
    public static let `unifyAdapterUdp`: Self = "_unify-adapter._udp"
    /// wilkenListener [Wilken_GmbH]
    public static let `wilkenlistenerTcp`: Self = "_wilkenlistener._tcp"
    /// wilkenListener [Wilken_GmbH]
    public static let `wilkenlistenerUdp`: Self = "_wilkenlistener._udp"
    /// ChildKey Notification 
    public static let `childkeyNotifTcp`: Self = "_childkey-notif._tcp"
    /// ChildKey Notification 
    public static let `childkeyNotifUdp`: Self = "_childkey-notif._udp"
    /// ChildKey Control [Ivan_Berardinelli]
    public static let `childkeyCtrlTcp`: Self = "_childkey-ctrl._tcp"
    /// ChildKey Control [Ivan_Berardinelli]
    public static let `childkeyCtrlUdp`: Self = "_childkey-ctrl._udp"
    /// ELAD Protocol [Franco_Milan]
    public static let `eladTcp`: Self = "_elad._tcp"
    /// ELAD Protocol [Franco_Milan]
    public static let `eladUdp`: Self = "_elad._udp"
    /// O2Server Port [Tim_Howard]
    public static let `o2serverPortTcp`: Self = "_o2server-port._tcp"
    /// O2Server Port [Tim_Howard]
    public static let `o2serverPortUdp`: Self = "_o2server-port._udp"
    /// b-novative license server [Matthias_Riese]
    public static let `bNovativeLsTcp`: Self = "_b-novative-ls._tcp"
    /// b-novative license server [Matthias_Riese]
    public static let `bNovativeLsUdp`: Self = "_b-novative-ls._udp"
    /// MetaAgent [Marie_France_Dubreui]
    public static let `metaagentTcp`: Self = "_metaagent._tcp"
    /// MetaAgent [Marie_France_Dubreui]
    public static let `metaagentUdp`: Self = "_metaagent._udp"
    /// Cymtec secure management [Michael_Mester]
    public static let `cymtecPortTcp`: Self = "_cymtec-port._tcp"
    /// Cymtec secure management [Michael_Mester]
    public static let `cymtecPortUdp`: Self = "_cymtec-port._udp"
    /// MC2Studios [Michael_Coon]
    public static let `mc2studiosTcp`: Self = "_mc2studios._tcp"
    /// MC2Studios [Michael_Coon]
    public static let `mc2studiosUdp`: Self = "_mc2studios._udp"
    /// SSDP [UPnP_Forum]
    public static let `ssdpTcp`: Self = "_ssdp._tcp"
    /// SSDP [UPnP_Forum]
    public static let `ssdpUdp`: Self = "_ssdp._udp"
    /// Fujitsu ICL Terminal Emulator Program A [Bob_Lyon]
    public static let `fjiclTepATcp`: Self = "_fjicl-tep-a._tcp"
    /// Fujitsu ICL Terminal Emulator Program A [Bob_Lyon]
    public static let `fjiclTepAUdp`: Self = "_fjicl-tep-a._udp"
    /// Fujitsu ICL Terminal Emulator Program B [Bob_Lyon]
    public static let `fjiclTepBTcp`: Self = "_fjicl-tep-b._tcp"
    /// Fujitsu ICL Terminal Emulator Program B [Bob_Lyon]
    public static let `fjiclTepBUdp`: Self = "_fjicl-tep-b._udp"
    /// Local Link Name Resolution [Dan_Harrington]
    public static let `linknameTcp`: Self = "_linkname._tcp"
    /// Local Link Name Resolution [Dan_Harrington]
    public static let `linknameUdp`: Self = "_linkname._udp"
    /// Fujitsu ICL Terminal Emulator Program C [Bob_Lyon]
    public static let `fjiclTepCTcp`: Self = "_fjicl-tep-c._tcp"
    /// Fujitsu ICL Terminal Emulator Program C [Bob_Lyon]
    public static let `fjiclTepCUdp`: Self = "_fjicl-tep-c._udp"
    /// Secure UP.Link Gateway Protocol [Peter_King]
    public static let `sugpTcp`: Self = "_sugp._tcp"
    /// Secure UP.Link Gateway Protocol [Peter_King]
    public static let `sugpUdp`: Self = "_sugp._udp"
    /// TPortMapperReq [Sheila_Devins]
    public static let `tpmdTcp`: Self = "_tpmd._tcp"
    /// TPortMapperReq [Sheila_Devins]
    public static let `tpmdUdp`: Self = "_tpmd._udp"
    /// IntraSTAR [Peter_Schoenberger]
    public static let `intrastarTcp`: Self = "_intrastar._tcp"
    /// IntraSTAR [Peter_Schoenberger]
    public static let `intrastarUdp`: Self = "_intrastar._udp"
    /// Dawn [Michael_Crawford_2]
    public static let `dawnTcp`: Self = "_dawn._tcp"
    /// Dawn [Michael_Crawford_2]
    public static let `dawnUdp`: Self = "_dawn._udp"
    /// Global World Link [Nicholas_Davies]
    public static let `globalWlinkTcp`: Self = "_global-wlink._tcp"
    /// Global World Link [Nicholas_Davies]
    public static let `globalWlinkUdp`: Self = "_global-wlink._udp"
    /// UltraBac Software communications port [Paul_Bunn]
    public static let `ultrabacTcp`: Self = "_ultrabac._tcp"
    /// UltraBac Software communications port [Paul_Bunn]
    public static let `ultrabacUdp`: Self = "_ultrabac._udp"
    /// Starlight Networks Multimedia Transport Protocol [Bruce_Lieberman]
    public static let `mtpTcp`: Self = "_mtp._tcp"
    /// Starlight Networks Multimedia Transport Protocol [Bruce_Lieberman]
    public static let `mtpUdp`: Self = "_mtp._udp"
    /// rhp-iibp [George_Nachman][Tom_Lake]
    public static let `rhpIibpTcp`: Self = "_rhp-iibp._tcp"
    /// rhp-iibp [George_Nachman][Tom_Lake]
    public static let `rhpIibpUdp`: Self = "_rhp-iibp._udp"
    /// armadp [Kevin_Welton]
    public static let `armadpTcp`: Self = "_armadp._tcp"
    /// armadp [Kevin_Welton]
    public static let `armadpUdp`: Self = "_armadp._udp"
    /// Elm-Momentum [Willie_Wu]
    public static let `elmMomentumTcp`: Self = "_elm-momentum._tcp"
    /// Elm-Momentum [Willie_Wu]
    public static let `elmMomentumUdp`: Self = "_elm-momentum._udp"
    /// FACELINK [J_H_Hermans]
    public static let `facelinkTcp`: Self = "_facelink._tcp"
    /// FACELINK [J_H_Hermans]
    public static let `facelinkUdp`: Self = "_facelink._udp"
    /// Persoft Persona [Tom_Spidell]
    public static let `personaTcp`: Self = "_persona._tcp"
    /// Persoft Persona [Tom_Spidell]
    public static let `personaUdp`: Self = "_persona._udp"
    /// nOAgent [Martin_Bestmann]
    public static let `noagentTcp`: Self = "_noagent._tcp"
    /// nOAgent [Martin_Bestmann]
    public static let `noagentUdp`: Self = "_noagent._udp"
    /// IBM Tivole Directory Service - NDS 
    public static let `canNdsTcp`: Self = "_can-nds._tcp"
    /// IBM Tivole Directory Service - NDS 
    public static let `canNdsUdp`: Self = "_can-nds._udp"
    /// IBM Tivoli Directory Service - DCH 
    public static let `canDchTcp`: Self = "_can-dch._tcp"
    /// IBM Tivoli Directory Service - DCH 
    public static let `canDchUdp`: Self = "_can-dch._udp"
    /// IBM Tivoli Directory Service - FERRET [Nic_Catrambone]
    public static let `canFerretTcp`: Self = "_can-ferret._tcp"
    /// IBM Tivoli Directory Service - FERRET [Nic_Catrambone]
    public static let `canFerretUdp`: Self = "_can-ferret._udp"
    /// NoAdmin [Martin_Bestmann]
    public static let `noadminTcp`: Self = "_noadmin._tcp"
    /// NoAdmin [Martin_Bestmann]
    public static let `noadminUdp`: Self = "_noadmin._udp"
    /// Tapestry [Ken_Oliver]
    public static let `tapestryTcp`: Self = "_tapestry._tcp"
    /// Tapestry [Ken_Oliver]
    public static let `tapestryUdp`: Self = "_tapestry._udp"
    /// SPICE [Nicholas_Chua]
    public static let `spiceTcp`: Self = "_spice._tcp"
    /// SPICE [Nicholas_Chua]
    public static let `spiceUdp`: Self = "_spice._udp"
    /// XIIP [Alain_Robert_2]
    public static let `xiipTcp`: Self = "_xiip._tcp"
    /// XIIP [Alain_Robert_2]
    public static let `xiipUdp`: Self = "_xiip._udp"
    /// Surrogate Discovery Port [Keith_Thompson]
    public static let `discoveryPortTcp`: Self = "_discovery-port._tcp"
    /// Surrogate Discovery Port [Keith_Thompson]
    public static let `discoveryPortUdp`: Self = "_discovery-port._udp"
    /// Evolution Game Server [Simon_Butcher]
    public static let `egsTcp`: Self = "_egs._tcp"
    /// Evolution Game Server [Simon_Butcher]
    public static let `egsUdp`: Self = "_egs._udp"
    /// Videte CIPC Port [Videte_IT]
    public static let `videteCipcTcp`: Self = "_videte-cipc._tcp"
    /// Videte CIPC Port [Videte_IT]
    public static let `videteCipcUdp`: Self = "_videte-cipc._udp"
    /// Expnd Maui Srvr Dscovr [Edo_Yahav]
    public static let `emsdPortTcp`: Self = "_emsd-port._tcp"
    /// Expnd Maui Srvr Dscovr [Edo_Yahav]
    public static let `emsdPortUdp`: Self = "_emsd-port._udp"
    /// Bandwiz System - Server [Joseph_Weihs]
    public static let `bandwizSystemTcp`: Self = "_bandwiz-system._tcp"
    /// Bandwiz System - Server [Joseph_Weihs]
    public static let `bandwizSystemUdp`: Self = "_bandwiz-system._udp"
    /// Drive AppServer [Andrew_Johnson]
    public static let `driveappserverTcp`: Self = "_driveappserver._tcp"
    /// Drive AppServer [Andrew_Johnson]
    public static let `driveappserverUdp`: Self = "_driveappserver._udp"
    /// AMD SCHED [Michael_Walsh]
    public static let `amdschedTcp`: Self = "_amdsched._tcp"
    /// AMD SCHED [Michael_Walsh]
    public static let `amdschedUdp`: Self = "_amdsched._udp"
    /// CTT Broker [Jens_Edlund]
    public static let `cttBrokerTcp`: Self = "_ctt-broker._tcp"
    /// CTT Broker [Jens_Edlund]
    public static let `cttBrokerUdp`: Self = "_ctt-broker._udp"
    /// IBM LM MT Agent 
    public static let `xmapiTcp`: Self = "_xmapi._tcp"
    /// IBM LM MT Agent 
    public static let `xmapiUdp`: Self = "_xmapi._udp"
    /// IBM LM Appl Agent [Helga_Wolin]
    public static let `xaapiTcp`: Self = "_xaapi._tcp"
    /// IBM LM Appl Agent [Helga_Wolin]
    public static let `xaapiUdp`: Self = "_xaapi._udp"
    /// Macromedia Flash Communications Server MX [Pritham_Shetty]
    public static let `macromediaFcsTcp`: Self = "_macromedia-fcs._tcp"
    /// Macromedia Flash Communications server MX [Pritham_Shetty]
    public static let `macromediaFcsUdp`: Self = "_macromedia-fcs._udp"
    /// JetCmeServer Server Port 
    public static let `jetcmeserverTcp`: Self = "_jetcmeserver._tcp"
    /// JetCmeServer Server Port 
    public static let `jetcmeserverUdp`: Self = "_jetcmeserver._udp"
    /// JetVWay Server Port 
    public static let `jwserverTcp`: Self = "_jwserver._tcp"
    /// JetVWay Server Port 
    public static let `jwserverUdp`: Self = "_jwserver._udp"
    /// JetVWay Client Port 
    public static let `jwclientTcp`: Self = "_jwclient._tcp"
    /// JetVWay Client Port 
    public static let `jwclientUdp`: Self = "_jwclient._udp"
    /// JetVision Server Port 
    public static let `jvserverTcp`: Self = "_jvserver._tcp"
    /// JetVision Server Port 
    public static let `jvserverUdp`: Self = "_jvserver._udp"
    /// JetVision Client Port [Stephen_Tsun]
    public static let `jvclientTcp`: Self = "_jvclient._tcp"
    /// JetVision Client Port [Stephen_Tsun]
    public static let `jvclientUdp`: Self = "_jvclient._udp"
    /// DIC-Aida [Frans_S_C_Witte]
    public static let `dicAidaTcp`: Self = "_dic-aida._tcp"
    /// DIC-Aida [Frans_S_C_Witte]
    public static let `dicAidaUdp`: Self = "_dic-aida._udp"
    /// Real Enterprise Service [Bob_Janssen]
    public static let `resTcp`: Self = "_res._tcp"
    /// Real Enterprise Service [Bob_Janssen]
    public static let `resUdp`: Self = "_res._udp"
    /// Beeyond Media [Bob_Deblier]
    public static let `beeyondMediaTcp`: Self = "_beeyond-media._tcp"
    /// Beeyond Media [Bob_Deblier]
    public static let `beeyondMediaUdp`: Self = "_beeyond-media._udp"
    /// close-combat [David_Hua]
    public static let `closeCombatTcp`: Self = "_close-combat._tcp"
    /// close-combat [David_Hua]
    public static let `closeCombatUdp`: Self = "_close-combat._udp"
    /// dialogic-elmd [Roger_Kay]
    public static let `dialogicElmdTcp`: Self = "_dialogic-elmd._tcp"
    /// dialogic-elmd [Roger_Kay]
    public static let `dialogicElmdUdp`: Self = "_dialogic-elmd._udp"
    /// tekpls [Brian_Abramson_2]
    public static let `tekplsTcp`: Self = "_tekpls._tcp"
    /// tekpls [Brian_Abramson_2]
    public static let `tekplsUdp`: Self = "_tekpls._udp"
    /// SentinelSRM [Michael_Zunke_2]
    public static let `sentinelsrmTcp`: Self = "_sentinelsrm._tcp"
    /// SentinelSRM [Michael_Zunke_2]
    public static let `sentinelsrmUdp`: Self = "_sentinelsrm._udp"
    /// eye2eye [Trevor_Bell]
    public static let `eye2eyeTcp`: Self = "_eye2eye._tcp"
    /// eye2eye [Trevor_Bell]
    public static let `eye2eyeUdp`: Self = "_eye2eye._udp"
    /// ISMA Easdaq Live [Stephen_Dunne]
    public static let `ismaeasdaqliveTcp`: Self = "_ismaeasdaqlive._tcp"
    /// ISMA Easdaq Live [Stephen_Dunne]
    public static let `ismaeasdaqliveUdp`: Self = "_ismaeasdaqlive._udp"
    /// ISMA Easdaq Test [Stephen_Dunne]
    public static let `ismaeasdaqtestTcp`: Self = "_ismaeasdaqtest._tcp"
    /// ISMA Easdaq Test [Stephen_Dunne]
    public static let `ismaeasdaqtestUdp`: Self = "_ismaeasdaqtest._udp"
    /// bcs-lmserver [Andy_Warner]
    public static let `bcsLmserverTcp`: Self = "_bcs-lmserver._tcp"
    /// bcs-lmserver [Andy_Warner]
    public static let `bcsLmserverUdp`: Self = "_bcs-lmserver._udp"
    /// mpnjsc [Takenori_Miyahara]
    public static let `mpnjscTcp`: Self = "_mpnjsc._tcp"
    /// mpnjsc [Takenori_Miyahara]
    public static let `mpnjscUdp`: Self = "_mpnjsc._udp"
    /// Rapid Base [Antoni_Wolski]
    public static let `rapidbaseTcp`: Self = "_rapidbase._tcp"
    /// Rapid Base [Antoni_Wolski]
    public static let `rapidbaseUdp`: Self = "_rapidbase._udp"
    /// ABR-API (diskbridge) 
    public static let `abrApiTcp`: Self = "_abr-api._tcp"
    /// ABR-API (diskbridge) 
    public static let `abrApiUdp`: Self = "_abr-api._udp"
    /// ABR-Secure Data (diskbridge) [Graham_Wooden]
    public static let `abrSecureTcp`: Self = "_abr-secure._tcp"
    /// ABR-Secure Data (diskbridge) [Graham_Wooden]
    public static let `abrSecureUdp`: Self = "_abr-secure._udp"
    /// Vertel VMF DS [Alan_Akahoshi]
    public static let `vrtlVmfDsTcp`: Self = "_vrtl-vmf-ds._tcp"
    /// Vertel VMF DS [Alan_Akahoshi]
    public static let `vrtlVmfDsUdp`: Self = "_vrtl-vmf-ds._udp"
    /// unix-status [Thomas_Erskine]
    public static let `unixStatusTcp`: Self = "_unix-status._tcp"
    /// unix-status [Thomas_Erskine]
    public static let `unixStatusUdp`: Self = "_unix-status._udp"
    /// CA Administration Daemon [John_Birrell]
    public static let `dxadmindTcp`: Self = "_dxadmind._tcp"
    /// CA Administration Daemon [John_Birrell]
    public static let `dxadmindUdp`: Self = "_dxadmind._udp"
    /// SIMP Channel [Tim_Hunnewell]
    public static let `simpAllTcp`: Self = "_simp-all._tcp"
    /// SIMP Channel [Tim_Hunnewell]
    public static let `simpAllUdp`: Self = "_simp-all._udp"
    /// Merit DAC NASmanager [Richard_S_Conto]
    public static let `nasmanagerTcp`: Self = "_nasmanager._tcp"
    /// Merit DAC NASmanager [Richard_S_Conto]
    public static let `nasmanagerUdp`: Self = "_nasmanager._udp"
    /// BTS APPSERVER [Carl_Obsorn]
    public static let `btsAppserverTcp`: Self = "_bts-appserver._tcp"
    /// BTS APPSERVER [Carl_Obsorn]
    public static let `btsAppserverUdp`: Self = "_bts-appserver._udp"
    /// BIAP-MP [Louis_Slothouber]
    public static let `biapMpTcp`: Self = "_biap-mp._tcp"
    /// BIAP-MP [Louis_Slothouber]
    public static let `biapMpUdp`: Self = "_biap-mp._udp"
    /// WebMachine [Tim_Jowers]
    public static let `webmachineTcp`: Self = "_webmachine._tcp"
    /// WebMachine [Tim_Jowers]
    public static let `webmachineUdp`: Self = "_webmachine._udp"
    /// SOLID E ENGINE [Ari_Valtanen]
    public static let `solidEEngineTcp`: Self = "_solid-e-engine._tcp"
    /// SOLID E ENGINE [Ari_Valtanen]
    public static let `solidEEngineUdp`: Self = "_solid-e-engine._udp"
    /// Tivoli NPM [Ivana_Cuozzo]
    public static let `tivoliNpmTcp`: Self = "_tivoli-npm._tcp"
    /// Tivoli NPM [Ivana_Cuozzo]
    public static let `tivoliNpmUdp`: Self = "_tivoli-npm._udp"
    /// Slush [Damien_Miller]
    public static let `slushTcp`: Self = "_slush._tcp"
    /// Slush [Damien_Miller]
    public static let `slushUdp`: Self = "_slush._udp"
    /// SNS Quote [Robert_Ellman]
    public static let `snsQuoteTcp`: Self = "_sns-quote._tcp"
    /// SNS Quote [Robert_Ellman]
    public static let `snsQuoteUdp`: Self = "_sns-quote._udp"
    /// LIPSinc 
    public static let `lipsincTcp`: Self = "_lipsinc._tcp"
    /// LIPSinc 
    public static let `lipsincUdp`: Self = "_lipsinc._udp"
    /// LIPSinc 1 [Robert_Armington]
    public static let `lipsinc1Tcp`: Self = "_lipsinc1._tcp"
    /// LIPSinc 1 [Robert_Armington]
    public static let `lipsinc1Udp`: Self = "_lipsinc1._udp"
    /// NetOp Remote Control 
    public static let `netopRcTcp`: Self = "_netop-rc._tcp"
    /// NetOp Remote Control 
    public static let `netopRcUdp`: Self = "_netop-rc._udp"
    /// NetOp School [NetOp_Technical_Supp]
    public static let `netopSchoolTcp`: Self = "_netop-school._tcp"
    /// NetOp School [NetOp_Technical_Supp]
    public static let `netopSchoolUdp`: Self = "_netop-school._udp"
    /// Cache [Mark_Hanson]
    public static let `intersysCacheTcp`: Self = "_intersys-cache._tcp"
    /// Cache [Mark_Hanson]
    public static let `intersysCacheUdp`: Self = "_intersys-cache._udp"
    /// Data Link Switching Remote Access Protocol [Steve_T_Chiang]
    public static let `dlsrapTcp`: Self = "_dlsrap._tcp"
    /// Data Link Switching Remote Access Protocol [Steve_T_Chiang]
    public static let `dlsrapUdp`: Self = "_dlsrap._udp"
    /// DRP [Richard_Alan_Johnson]
    public static let `drpTcp`: Self = "_drp._tcp"
    /// DRP [Richard_Alan_Johnson]
    public static let `drpUdp`: Self = "_drp._udp"
    /// TCO Flash Agent 
    public static let `tcoflashagentTcp`: Self = "_tcoflashagent._tcp"
    /// TCO Flash Agent 
    public static let `tcoflashagentUdp`: Self = "_tcoflashagent._udp"
    /// TCO Reg Agent 
    public static let `tcoregagentTcp`: Self = "_tcoregagent._tcp"
    /// TCO Reg Agent 
    public static let `tcoregagentUdp`: Self = "_tcoregagent._udp"
    /// TCO Address Book [Allan_Panitch]
    public static let `tcoaddressbookTcp`: Self = "_tcoaddressbook._tcp"
    /// TCO Address Book [Allan_Panitch]
    public static let `tcoaddressbookUdp`: Self = "_tcoaddressbook._udp"
    /// UniSQL 
    public static let `unisqlTcp`: Self = "_unisql._tcp"
    /// UniSQL 
    public static let `unisqlUdp`: Self = "_unisql._udp"
    /// UniSQL Java [Keith_Yarbrough]
    public static let `unisqlJavaTcp`: Self = "_unisql-java._tcp"
    /// UniSQL Java [Keith_Yarbrough]
    public static let `unisqlJavaUdp`: Self = "_unisql-java._udp"
    /// PearlDoc XACT [Chris_Vertonghen]
    public static let `pearldocXactTcp`: Self = "_pearldoc-xact._tcp"
    /// PearlDoc XACT [Chris_Vertonghen]
    public static let `pearldocXactUdp`: Self = "_pearldoc-xact._udp"
    /// p2pQ [Warren_Alexander]
    public static let `p2pqTcp`: Self = "_p2pq._tcp"
    /// p2pQ [Warren_Alexander]
    public static let `p2pqUdp`: Self = "_p2pq._udp"
    /// Evidentiary Timestamp [Todd_Glassey]
    public static let `estampTcp`: Self = "_estamp._tcp"
    /// Evidentiary Timestamp [Todd_Glassey]
    public static let `estampUdp`: Self = "_estamp._udp"
    /// Loophole Test Protocol [Kade_Hansson]
    public static let `lhtpTcp`: Self = "_lhtp._tcp"
    /// Loophole Test Protocol [Kade_Hansson]
    public static let `lhtpUdp`: Self = "_lhtp._udp"
    /// BB [Sean_MacGuire]
    public static let `bbTcp`: Self = "_bb._tcp"
    /// BB [Sean_MacGuire]
    public static let `bbUdp`: Self = "_bb._udp"
    /// Hot Standby Router Protocol 
    public static let `hsrpTcp`: Self = "_hsrp._tcp"
    /// Hot Standby Router Protocol 
    public static let `hsrpUdp`: Self = "_hsrp._udp"
    /// cisco license management 
    public static let `licensedaemonTcp`: Self = "_licensedaemon._tcp"
    /// cisco license management 
    public static let `licensedaemonUdp`: Self = "_licensedaemon._udp"
    /// cisco RSRB Priority 1 port 
    public static let `trRsrbP1Tcp`: Self = "_tr-rsrb-p1._tcp"
    /// cisco RSRB Priority 1 port 
    public static let `trRsrbP1Udp`: Self = "_tr-rsrb-p1._udp"
    /// cisco RSRB Priority 2 port 
    public static let `trRsrbP2Tcp`: Self = "_tr-rsrb-p2._tcp"
    /// cisco RSRB Priority 2 port 
    public static let `trRsrbP2Udp`: Self = "_tr-rsrb-p2._udp"
    /// cisco RSRB Priority 3 port 
    public static let `trRsrbP3Tcp`: Self = "_tr-rsrb-p3._tcp"
    /// cisco RSRB Priority 3 port 
    public static let `trRsrbP3Udp`: Self = "_tr-rsrb-p3._udp"
    /// MHSnet system [Bob_Kummerfeld]
    public static let `mshnetTcp`: Self = "_mshnet._tcp"
    /// MHSnet system [Bob_Kummerfeld]
    public static let `mshnetUdp`: Self = "_mshnet._udp"
    /// cisco STUN Priority 1 port 
    public static let `stunP1Tcp`: Self = "_stun-p1._tcp"
    /// cisco STUN Priority 1 port 
    public static let `stunP1Udp`: Self = "_stun-p1._udp"
    /// cisco STUN Priority 2 port 
    public static let `stunP2Tcp`: Self = "_stun-p2._tcp"
    /// cisco STUN Priority 2 port 
    public static let `stunP2Udp`: Self = "_stun-p2._udp"
    /// cisco STUN Priority 3 port 
    public static let `stunP3Tcp`: Self = "_stun-p3._tcp"
    /// cisco STUN Priority 3 port 
    public static let `stunP3Udp`: Self = "_stun-p3._udp"
    /// IPsendmsg [Bob_Kummerfeld]
    public static let `ipsendmsgTcp`: Self = "_ipsendmsg._tcp"
    /// IPsendmsg [Bob_Kummerfeld]
    public static let `ipsendmsgUdp`: Self = "_ipsendmsg._udp"
    /// cisco SNMP TCP port 
    public static let `snmpTcpPortTcp`: Self = "_snmp-tcp-port._tcp"
    /// cisco SNMP TCP port 
    public static let `snmpTcpPortUdp`: Self = "_snmp-tcp-port._udp"
    /// cisco serial tunnel port 
    public static let `stunPortTcp`: Self = "_stun-port._tcp"
    /// cisco serial tunnel port 
    public static let `stunPortUdp`: Self = "_stun-port._udp"
    /// cisco perf port 
    public static let `perfPortTcp`: Self = "_perf-port._tcp"
    /// cisco perf port 
    public static let `perfPortUdp`: Self = "_perf-port._udp"
    /// cisco Remote SRB port 
    public static let `trRsrbPortTcp`: Self = "_tr-rsrb-port._tcp"
    /// cisco Remote SRB port 
    public static let `trRsrbPortUdp`: Self = "_tr-rsrb-port._udp"
    /// cisco Gateway Discovery Protocol 
    public static let `gdpPortTcp`: Self = "_gdp-port._tcp"
    /// cisco Gateway Discovery Protocol 
    public static let `gdpPortUdp`: Self = "_gdp-port._udp"
    /// cisco X.25 service (XOT) 
    public static let `x25SvcPortTcp`: Self = "_x25-svc-port._tcp"
    /// cisco X.25 service (XOT) 
    public static let `x25SvcPortUdp`: Self = "_x25-svc-port._udp"
    /// cisco identification port 
    public static let `tcpIdPortTcp`: Self = "_tcp-id-port._tcp"
    /// cisco identification port 
    public static let `tcpIdPortUdp`: Self = "_tcp-id-port._udp"
    /// Cisco SCCP [Dan_Wing]
    public static let `ciscoSccpTcp`: Self = "_cisco-sccp._tcp"
    /// Cisco SCCp [Dan_Wing]
    public static let `ciscoSccpUdp`: Self = "_cisco-sccp._udp"
    ///  
    public static let `dcTcp`: Self = "_dc._tcp"
    /// curry 
    public static let `wizardUdp`: Self = "_wizard._udp"
    ///  
    public static let `globeTcp`: Self = "_globe._tcp"
    ///  
    public static let `globeUdp`: Self = "_globe._udp"
    /// Brutus Server [Johannes_Skov_Frands]
    public static let `brutusTcp`: Self = "_brutus._tcp"
    /// Brutus Server [Johannes_Skov_Frands]
    public static let `brutusUdp`: Self = "_brutus._udp"
    ///  
    public static let `mailboxTcp`: Self = "_mailbox._tcp"
    /// CCWS mm conf 
    public static let `emceUdp`: Self = "_emce._udp"
    ///  
    public static let `berknetTcp`: Self = "_berknet._tcp"
    ///  
    public static let `oracleUdp`: Self = "_oracle._udp"
    ///  
    public static let `invokatorTcp`: Self = "_invokator._tcp"
    /// raid 
    public static let `raidCdUdp`: Self = "_raid-cd._udp"
    ///  
    public static let `dectalkTcp`: Self = "_dectalk._tcp"
    ///  
    public static let `raidAmUdp`: Self = "_raid-am._udp"
    ///  
    public static let `confTcp`: Self = "_conf._tcp"
    ///  
    public static let `terminaldbUdp`: Self = "_terminaldb._udp"
    ///  
    public static let `newsTcp`: Self = "_news._tcp"
    ///  
    public static let `whosockamiUdp`: Self = "_whosockami._udp"
    ///  
    public static let `searchTcp`: Self = "_search._tcp"
    /// IANA assigned this well-formed service name as a replacement for "pipe_server". 
    public static let `pipeServerUdp`: Self = "_pipe-server._udp"
    ///  
    public static let `pipe_serverUdp`: Self = "_pipe_server._udp"
    /// raid 
    public static let `raidCcTcp`: Self = "_raid-cc._tcp"
    ///  
    public static let `servservUdp`: Self = "_servserv._udp"
    ///  
    public static let `ttyinfoTcp`: Self = "_ttyinfo._tcp"
    ///  
    public static let `raidAcUdp`: Self = "_raid-ac._udp"
    ///  
    public static let `raidAmTcp`: Self = "_raid-am._tcp"
    ///  
    public static let `troffTcp`: Self = "_troff._tcp"
    ///  
    public static let `raidSfUdp`: Self = "_raid-sf._udp"
    ///  
    public static let `cypressTcp`: Self = "_cypress._tcp"
    ///  
    public static let `raidCsUdp`: Self = "_raid-cs._udp"
    ///  
    public static let `bootserverTcp`: Self = "_bootserver._tcp"
    ///  
    public static let `bootserverUdp`: Self = "_bootserver._udp"
    ///  
    public static let `cypressStatTcp`: Self = "_cypress-stat._tcp"
    ///  
    public static let `bootclientUdp`: Self = "_bootclient._udp"
    ///  
    public static let `terminaldbTcp`: Self = "_terminaldb._tcp"
    ///  
    public static let `rellpackUdp`: Self = "_rellpack._udp"
    ///  
    public static let `whosockamiTcp`: Self = "_whosockami._tcp"
    ///  
    public static let `aboutUdp`: Self = "_about._udp"
    ///  
    public static let `xinupageserverTcp`: Self = "_xinupageserver._tcp"
    ///  
    public static let `xinupageserverUdp`: Self = "_xinupageserver._udp"
    ///  
    public static let `servexecTcp`: Self = "_servexec._tcp"
    ///  
    public static let `xinuexpansion1Udp`: Self = "_xinuexpansion1._udp"
    ///  
    public static let `downTcp`: Self = "_down._tcp"
    ///  
    public static let `xinuexpansion2Udp`: Self = "_xinuexpansion2._udp"
    ///  
    public static let `xinuexpansion3Tcp`: Self = "_xinuexpansion3._tcp"
    ///  
    public static let `xinuexpansion3Udp`: Self = "_xinuexpansion3._udp"
    ///  
    public static let `xinuexpansion4Tcp`: Self = "_xinuexpansion4._tcp"
    ///  
    public static let `xinuexpansion4Udp`: Self = "_xinuexpansion4._udp"
    ///  
    public static let `ellpackTcp`: Self = "_ellpack._tcp"
    ///  
    public static let `xribsUdp`: Self = "_xribs._udp"
    ///  
    public static let `scrabbleTcp`: Self = "_scrabble._tcp"
    ///  
    public static let `scrabbleUdp`: Self = "_scrabble._udp"
    ///  
    public static let `shadowserverTcp`: Self = "_shadowserver._tcp"
    ///  
    public static let `shadowserverUdp`: Self = "_shadowserver._udp"
    ///  
    public static let `submitserverTcp`: Self = "_submitserver._tcp"
    ///  
    public static let `submitserverUdp`: Self = "_submitserver._udp"
    /// Hot Standby Router Protocol IPv6 [Ian_Wilson]
    public static let `hsrpv6Tcp`: Self = "_hsrpv6._tcp"
    /// Hot Standby Router Protocol IPv6 [Ian_Wilson]
    public static let `hsrpv6Udp`: Self = "_hsrpv6._udp"
    ///  
    public static let `device2Tcp`: Self = "_device2._tcp"
    ///  
    public static let `device2Udp`: Self = "_device2._udp"
    /// mobrien-chat [Mike_O_Brien]
    public static let `mobrienChatTcp`: Self = "_mobrien-chat._tcp"
    /// mobrien-chat [Mike_O_Brien]
    public static let `mobrienChatUdp`: Self = "_mobrien-chat._udp"
    ///  
    public static let `blackboardTcp`: Self = "_blackboard._tcp"
    ///  
    public static let `blackboardUdp`: Self = "_blackboard._udp"
    ///  
    public static let `gloggerTcp`: Self = "_glogger._tcp"
    ///  
    public static let `gloggerUdp`: Self = "_glogger._udp"
    ///  
    public static let `scoremgrTcp`: Self = "_scoremgr._tcp"
    ///  
    public static let `scoremgrUdp`: Self = "_scoremgr._udp"
    ///  
    public static let `imsldocTcp`: Self = "_imsldoc._tcp"
    ///  
    public static let `imsldocUdp`: Self = "_imsldoc._udp"
    /// Ethernet WS DP network [Peter_Kaever]
    public static let `eDpnetTcp`: Self = "_e-dpnet._tcp"
    /// Ethernet WS DP network [Peter_Kaever]
    public static let `eDpnetUdp`: Self = "_e-dpnet._udp"
    /// APplus Application Server [Alfred_Weindl]
    public static let `applusTcp`: Self = "_applus._tcp"
    /// APplus Application Server [Alfred_Weindl]
    public static let `applusUdp`: Self = "_applus._udp"
    ///  
    public static let `objectmanagerTcp`: Self = "_objectmanager._tcp"
    ///  
    public static let `objectmanagerUdp`: Self = "_objectmanager._udp"
    /// Prizma Monitoring Service [Dotan_Ofek]
    public static let `prizmaTcp`: Self = "_prizma._tcp"
    /// Prizma Monitoring Service [Dotan_Ofek]
    public static let `prizmaUdp`: Self = "_prizma._udp"
    ///  
    public static let `lamTcp`: Self = "_lam._tcp"
    ///  
    public static let `lamUdp`: Self = "_lam._udp"
    ///  
    public static let `interbaseTcp`: Self = "_interbase._tcp"
    ///  
    public static let `interbaseUdp`: Self = "_interbase._udp"
    /// isis 
    public static let `isisTcp`: Self = "_isis._tcp"
    /// isis 
    public static let `isisUdp`: Self = "_isis._udp"
    /// isis-bcast [Ken_Chapman]
    public static let `isisBcastTcp`: Self = "_isis-bcast._tcp"
    /// isis-bcast [Ken_Chapman]
    public static let `isisBcastUdp`: Self = "_isis-bcast._udp"
    ///  
    public static let `rimslTcp`: Self = "_rimsl._tcp"
    ///  
    public static let `rimslUdp`: Self = "_rimsl._udp"
    ///  
    public static let `cdfuncTcp`: Self = "_cdfunc._tcp"
    ///  
    public static let `cdfuncUdp`: Self = "_cdfunc._udp"
    ///  
    public static let `sdfuncTcp`: Self = "_sdfunc._tcp"
    ///  
    public static let `sdfuncUdp`: Self = "_sdfunc._udp"
    ///  
    public static let `dlsMonitorTcp`: Self = "_dls-monitor._tcp"
    ///  
    public static let `dlsMonitorUdp`: Self = "_dls-monitor._udp"
    ///  
    public static let `shilpTcp`: Self = "_shilp._tcp"
    ///  
    public static let `shilpUdp`: Self = "_shilp._udp"
    /// Network File System - Sun Microsystems [Brent_Callaghan]
    public static let `nfsTcp`: Self = "_nfs._tcp"
    /// Network File System - Sun Microsystems [Brent_Callaghan]
    public static let `nfsUdp`: Self = "_nfs._udp"
    /// Network File System 
    public static let `nfsSctp`: Self = "_nfs._sctp"
    /// Avaya EMB Config Port [John_Yeager]
    public static let `avEmbConfigTcp`: Self = "_av-emb-config._tcp"
    /// Avaya EMB Config Port [John_Yeager]
    public static let `avEmbConfigUdp`: Self = "_av-emb-config._udp"
    /// EPNSDP [Hiroyasu_Ogata]
    public static let `epnsdpTcp`: Self = "_epnsdp._tcp"
    /// EPNSDP [Hiroyasu_Ogata]
    public static let `epnsdpUdp`: Self = "_epnsdp._udp"
    /// clearVisn Services Port [Dave_Lyons]
    public static let `clearvisnTcp`: Self = "_clearvisn._tcp"
    /// clearVisn Services Port [Dave_Lyons]
    public static let `clearvisnUdp`: Self = "_clearvisn._udp"
    /// Lot105 DSuper Updates [Piers_Scannell]
    public static let `lot105DsUpdTcp`: Self = "_lot105-ds-upd._tcp"
    /// Lot105 DSuper Updates [Piers_Scannell]
    public static let `lot105DsUpdUdp`: Self = "_lot105-ds-upd._udp"
    /// Weblogin Port [Diego_Saravia]
    public static let `webloginTcp`: Self = "_weblogin._tcp"
    /// Weblogin Port [Diego_Saravia]
    public static let `webloginUdp`: Self = "_weblogin._udp"
    /// Iliad-Odyssey Protocol [Bruce_Lueckenhoff]
    public static let `iopTcp`: Self = "_iop._tcp"
    /// Iliad-Odyssey Protocol [Bruce_Lueckenhoff]
    public static let `iopUdp`: Self = "_iop._udp"
    /// OmniSky Port [Oren_Hurvitz]
    public static let `omniskyTcp`: Self = "_omnisky._tcp"
    /// OmniSky Port [Oren_Hurvitz]
    public static let `omniskyUdp`: Self = "_omnisky._udp"
    /// Rich Content Protocol [Ronen_Vainish]
    public static let `richCpTcp`: Self = "_rich-cp._tcp"
    /// Rich Content Protocol [Ronen_Vainish]
    public static let `richCpUdp`: Self = "_rich-cp._udp"
    /// NewWaveSearchables RMI [Thomas_Kerkau]
    public static let `newwavesearchTcp`: Self = "_newwavesearch._tcp"
    /// NewWaveSearchables RMI [Thomas_Kerkau]
    public static let `newwavesearchUdp`: Self = "_newwavesearch._udp"
    /// BMC Messaging Service [Portnoy_Boxman]
    public static let `bmcMessagingTcp`: Self = "_bmc-messaging._tcp"
    /// BMC Messaging Service [Portnoy_Boxman]
    public static let `bmcMessagingUdp`: Self = "_bmc-messaging._udp"
    /// Telenium Daemon IF [Nick_Woronuk]
    public static let `teleniumdaemonTcp`: Self = "_teleniumdaemon._tcp"
    /// Telenium Daemon IF [Nick_Woronuk]
    public static let `teleniumdaemonUdp`: Self = "_teleniumdaemon._udp"
    /// NetMount [Alex_Oberlander]
    public static let `netmountTcp`: Self = "_netmount._tcp"
    /// NetMount [Alex_Oberlander]
    public static let `netmountUdp`: Self = "_netmount._udp"
    /// ICG SWP Port 
    public static let `icgSwpTcp`: Self = "_icg-swp._tcp"
    /// ICG SWP Port 
    public static let `icgSwpUdp`: Self = "_icg-swp._udp"
    /// ICG Bridge Port 
    public static let `icgBridgeTcp`: Self = "_icg-bridge._tcp"
    /// ICG Bridge Port 
    public static let `icgBridgeUdp`: Self = "_icg-bridge._udp"
    /// ICG IP Relay Port [Steve_Quintana]
    public static let `icgIprelayTcp`: Self = "_icg-iprelay._tcp"
    /// ICG IP Relay Port [Steve_Quintana]
    public static let `icgIprelayUdp`: Self = "_icg-iprelay._udp"
    /// Data Link Switch Read Port Number [Amir_Peless]
    public static let `dlsrpnTcp`: Self = "_dlsrpn._tcp"
    /// Data Link Switch Read Port Number [Amir_Peless]
    public static let `dlsrpnUdp`: Self = "_dlsrpn._udp"
    /// AVM USB Remote Architecture [Diego_Friedel]
    public static let `auraTcp`: Self = "_aura._tcp"
    /// AVM USB Remote Architecture [Diego_Friedel]
    public static let `auraUdp`: Self = "_aura._udp"
    /// Data Link Switch Write Port Number [Amir_Peless]
    public static let `dlswpnTcp`: Self = "_dlswpn._tcp"
    /// Data Link Switch Write Port Number [Amir_Peless]
    public static let `dlswpnUdp`: Self = "_dlswpn._udp"
    /// Avocent AuthSrv Protocol [Steven_W_Clark_2]
    public static let `avauthsrvprtclTcp`: Self = "_avauthsrvprtcl._tcp"
    /// Avocent AuthSrv Protocol [Steven_W_Clark_2]
    public static let `avauthsrvprtclUdp`: Self = "_avauthsrvprtcl._udp"
    /// HTTP Event Port [Larry_Emlich]
    public static let `eventPortTcp`: Self = "_event-port._tcp"
    /// HTTP Event Port [Larry_Emlich]
    public static let `eventPortUdp`: Self = "_event-port._udp"
    /// AH and ESP Encapsulated in UDP packet [Amy_Weaver]
    public static let `ahEspEncapTcp`: Self = "_ah-esp-encap._tcp"
    /// AH and ESP Encapsulated in UDP packet [Amy_Weaver]
    public static let `ahEspEncapUdp`: Self = "_ah-esp-encap._udp"
    /// Axon Control Protocol [Christiaan_Simons]
    public static let `acpPortTcp`: Self = "_acp-port._tcp"
    /// Axon Control Protocol [Christiaan_Simons]
    public static let `acpPortUdp`: Self = "_acp-port._udp"
    /// GlobeCast mSync [Piers_Scannell_2]
    public static let `msyncTcp`: Self = "_msync._tcp"
    /// GlobeCast mSync [Piers_Scannell_2]
    public static let `msyncUdp`: Self = "_msync._udp"
    /// DataReel Database Socket [Douglas_M_Gaer]
    public static let `gxsDataPortTcp`: Self = "_gxs-data-port._tcp"
    /// DataReel Database Socket [Douglas_M_Gaer]
    public static let `gxsDataPortUdp`: Self = "_gxs-data-port._udp"
    /// Vertel VMF SA [Alan_Akahoshi]
    public static let `vrtlVmfSaTcp`: Self = "_vrtl-vmf-sa._tcp"
    /// Vertel VMF SA [Alan_Akahoshi]
    public static let `vrtlVmfSaUdp`: Self = "_vrtl-vmf-sa._udp"
    /// Newlix ServerWare Engine 
    public static let `newlixengineTcp`: Self = "_newlixengine._tcp"
    /// Newlix ServerWare Engine 
    public static let `newlixengineUdp`: Self = "_newlixengine._udp"
    /// Newlix JSPConfig [Jean_Serge_Gagnon]
    public static let `newlixconfigTcp`: Self = "_newlixconfig._tcp"
    /// Newlix JSPConfig [Jean_Serge_Gagnon]
    public static let `newlixconfigUdp`: Self = "_newlixconfig._udp"
    /// Old Tivoli Storage Manager 
    public static let `tsrmagtTcp`: Self = "_tsrmagt._tcp"
    /// Old Tivoli Storage Manager 
    public static let `tsrmagtUdp`: Self = "_tsrmagt._udp"
    /// IBM Total Productivity Center Server [Justin_R_Bendich]
    public static let `tpcsrvrTcp`: Self = "_tpcsrvr._tcp"
    /// IBM Total Productivity Center Server [Justin_R_Bendich]
    public static let `tpcsrvrUdp`: Self = "_tpcsrvr._udp"
    /// IDWARE Router Port [Zdenek_Kolba]
    public static let `idwareRouterTcp`: Self = "_idware-router._tcp"
    /// IDWARE Router Port [Zdenek_Kolba]
    public static let `idwareRouterUdp`: Self = "_idware-router._udp"
    /// Autodesk NLM (FLEXlm) [Greg_Suppes]
    public static let `autodeskNlmTcp`: Self = "_autodesk-nlm._tcp"
    /// Autodesk NLM (FLEXlm) [Greg_Suppes]
    public static let `autodeskNlmUdp`: Self = "_autodesk-nlm._udp"
    /// KME PRINTER TRAP PORT [Masakatsu_Matsuo]
    public static let `kmeTrapPortTcp`: Self = "_kme-trap-port._tcp"
    /// KME PRINTER TRAP PORT [Masakatsu_Matsuo]
    public static let `kmeTrapPortUdp`: Self = "_kme-trap-port._udp"
    /// Infowave Mobility Server [Kaz_Kylheku]
    public static let `infowaveTcp`: Self = "_infowave._tcp"
    /// Infowave Mobility Server [Kaz_Kylheku]
    public static let `infowaveUdp`: Self = "_infowave._udp"
    /// Secure Radius Service [IESG]
    public static let `radsecTcp`: Self = "_radsec._tcp"
    /// Secure Radius Service [IESG]
    public static let `radsecUdp`: Self = "_radsec._udp"
    /// SunCluster Geographic [Oracle_2]
    public static let `sunclustergeoTcp`: Self = "_sunclustergeo._tcp"
    /// SunCluster Geographic [Oracle_2]
    public static let `sunclustergeoUdp`: Self = "_sunclustergeo._udp"
    /// ADA Control [Eugene_Frenkel]
    public static let `adaCipTcp`: Self = "_ada-cip._tcp"
    /// ADA Control [Eugene_Frenkel]
    public static let `adaCipUdp`: Self = "_ada-cip._udp"
    /// GNUnet [Christian_Grothoff]
    public static let `gnunetTcp`: Self = "_gnunet._tcp"
    /// GNUnet [Christian_Grothoff]
    public static let `gnunetUdp`: Self = "_gnunet._udp"
    /// ELI - Event Logging Integration [Maya_Zimerman]
    public static let `eliTcp`: Self = "_eli._tcp"
    /// ELI - Event Logging Integration [Maya_Zimerman]
    public static let `eliUdp`: Self = "_eli._udp"
    /// IP Busy Lamp Field [Jeffrey_Szczepanski]
    public static let `ipBlfTcp`: Self = "_ip-blf._tcp"
    /// IP Busy Lamp Field [Jeffrey_Szczepanski]
    public static let `ipBlfUdp`: Self = "_ip-blf._udp"
    /// Security Encapsulation Protocol - SEP [Maya_Zimerman]
    public static let `sepTcp`: Self = "_sep._tcp"
    /// Security Encapsulation Protocol - SEP [Maya_Zimerman]
    public static let `sepUdp`: Self = "_sep._udp"
    /// Load Report Protocol [Amir_Peless]
    public static let `lrpTcp`: Self = "_lrp._tcp"
    /// Load Report Protocol [Amir_Peless]
    public static let `lrpUdp`: Self = "_lrp._udp"
    /// PRP [Amir_Peless]
    public static let `prpTcp`: Self = "_prp._tcp"
    /// PRP [Amir_Peless]
    public static let `prpUdp`: Self = "_prp._udp"
    /// Descent 3 [Kevin_Bentley]
    public static let `descent3Tcp`: Self = "_descent3._tcp"
    /// Descent 3 [Kevin_Bentley]
    public static let `descent3Udp`: Self = "_descent3._udp"
    /// NBX CC 
    public static let `nbxCcTcp`: Self = "_nbx-cc._tcp"
    /// NBX CC 
    public static let `nbxCcUdp`: Self = "_nbx-cc._udp"
    /// NBX AU 
    public static let `nbxAuTcp`: Self = "_nbx-au._tcp"
    /// NBX AU 
    public static let `nbxAuUdp`: Self = "_nbx-au._udp"
    /// NBX SER 
    public static let `nbxSerTcp`: Self = "_nbx-ser._tcp"
    /// NBX SER 
    public static let `nbxSerUdp`: Self = "_nbx-ser._udp"
    /// NBX DIR [Henry_Houh]
    public static let `nbxDirTcp`: Self = "_nbx-dir._tcp"
    /// NBX DIR [Henry_Houh]
    public static let `nbxDirUdp`: Self = "_nbx-dir._udp"
    /// Jet Form Preview [Zygmunt_Wiercioch]
    public static let `jetformpreviewTcp`: Self = "_jetformpreview._tcp"
    /// Jet Form Preview [Zygmunt_Wiercioch]
    public static let `jetformpreviewUdp`: Self = "_jetformpreview._udp"
    /// Dialog Port [Joseph_Mathew]
    public static let `dialogPortTcp`: Self = "_dialog-port._tcp"
    /// Dialog Port [Joseph_Mathew]
    public static let `dialogPortUdp`: Self = "_dialog-port._udp"
    /// H.225.0 Annex G Signalling [ITU-T]
    public static let `h2250AnnexGTcp`: Self = "_h2250-annex-g._tcp"
    /// H.225.0 Annex G Signalling [ITU-T]
    public static let `h2250AnnexGUdp`: Self = "_h2250-annex-g._udp"
    /// Amiga Network Filesystem [Rudi_Chiarito]
    public static let `amiganetfsTcp`: Self = "_amiganetfs._tcp"
    /// Amiga Network Filesystem [Rudi_Chiarito]
    public static let `amiganetfsUdp`: Self = "_amiganetfs._udp"
    /// rtcm-sc104 [Wolfgang_Rupprecht]
    public static let `rtcmSc104Tcp`: Self = "_rtcm-sc104._tcp"
    /// rtcm-sc104 [Wolfgang_Rupprecht]
    public static let `rtcmSc104Udp`: Self = "_rtcm-sc104._udp"
    /// Zephyr server 
    public static let `zephyrSrvTcp`: Self = "_zephyr-srv._tcp"
    /// Zephyr server 
    public static let `zephyrSrvUdp`: Self = "_zephyr-srv._udp"
    /// Zephyr serv-hm connection 
    public static let `zephyrCltTcp`: Self = "_zephyr-clt._tcp"
    /// Zephyr serv-hm connection 
    public static let `zephyrCltUdp`: Self = "_zephyr-clt._udp"
    /// Zephyr hostmanager [Greg_Hudson]
    public static let `zephyrHmTcp`: Self = "_zephyr-hm._tcp"
    /// Zephyr hostmanager [Greg_Hudson]
    public static let `zephyrHmUdp`: Self = "_zephyr-hm._udp"
    /// MiniPay [Amir_Herzberg]
    public static let `minipayTcp`: Self = "_minipay._tcp"
    /// MiniPay [Amir_Herzberg]
    public static let `minipayUdp`: Self = "_minipay._udp"
    /// MZAP [Dave_Thaler_2]
    public static let `mzapTcp`: Self = "_mzap._tcp"
    /// MZAP [Dave_Thaler_2]
    public static let `mzapUdp`: Self = "_mzap._udp"
    /// BinTec Admin [Thomas_Schmidt]
    public static let `bintecAdminTcp`: Self = "_bintec-admin._tcp"
    /// BinTec Admin [Thomas_Schmidt]
    public static let `bintecAdminUdp`: Self = "_bintec-admin._udp"
    /// Comcam [Don_Gilbreath]
    public static let `comcamTcp`: Self = "_comcam._tcp"
    /// Comcam [Don_Gilbreath]
    public static let `comcamUdp`: Self = "_comcam._udp"
    /// Ergolight [Jindra_Ryvola]
    public static let `ergolightTcp`: Self = "_ergolight._tcp"
    /// Ergolight [Jindra_Ryvola]
    public static let `ergolightUdp`: Self = "_ergolight._udp"
    /// UMSP [Alexander_Bogdanov_2]
    public static let `umspTcp`: Self = "_umsp._tcp"
    /// UMSP [Alexander_Bogdanov_2]
    public static let `umspUdp`: Self = "_umsp._udp"
    /// OPNET Dynamic Sampling Agent Transaction Protocol [OPNET_Technologies_Inc]
    public static let `dsatpTcp`: Self = "_dsatp._tcp"
    /// OPNET Dynamic Sampling Agent Transaction Protocol [OPNET_Technologies_Inc]
    public static let `dsatpUdp`: Self = "_dsatp._udp"
    /// Idonix MetaNet [Paul_Harrison]
    public static let `idonixMetanetTcp`: Self = "_idonix-metanet._tcp"
    /// Idonix MetaNet [Paul_Harrison]
    public static let `idonixMetanetUdp`: Self = "_idonix-metanet._udp"
    /// HSL StoRM [Jost_Faganel]
    public static let `hslStormTcp`: Self = "_hsl-storm._tcp"
    /// HSL StoRM [Jost_Faganel]
    public static let `hslStormUdp`: Self = "_hsl-storm._udp"
    /// Classical Music Meta-Data Access and Enhancement [Aria_Scribe_Software_Ltd]
    public static let `ariascribeTcp`: Self = "_ariascribe._tcp"
    /// Classical Music Meta-Data Access and Enhancement [Aria_Scribe_Software_Ltd]
    public static let `ariascribeUdp`: Self = "_ariascribe._udp"
    /// Key Distribution Manager [Mike_Little]
    public static let `kdmTcp`: Self = "_kdm._tcp"
    /// Key Distribution Manager [Mike_Little]
    public static let `kdmUdp`: Self = "_kdm._udp"
    /// CCOWCMR [Mark_Morwood]
    public static let `ccowcmrTcp`: Self = "_ccowcmr._tcp"
    /// CCOWCMR [Mark_Morwood]
    public static let `ccowcmrUdp`: Self = "_ccowcmr._udp"
    /// MENTACLIENT 
    public static let `mentaclientTcp`: Self = "_mentaclient._tcp"
    /// MENTACLIENT 
    public static let `mentaclientUdp`: Self = "_mentaclient._udp"
    /// MENTASERVER [Ilan_Shlosberg]
    public static let `mentaserverTcp`: Self = "_mentaserver._tcp"
    /// MENTASERVER [Ilan_Shlosberg]
    public static let `mentaserverUdp`: Self = "_mentaserver._udp"
    /// GSIGATEKEEPER [Steve_Tuecke]
    public static let `gsigatekeeperTcp`: Self = "_gsigatekeeper._tcp"
    /// GSIGATEKEEPER [Steve_Tuecke]
    public static let `gsigatekeeperUdp`: Self = "_gsigatekeeper._udp"
    /// Quick Eagle Networks CP [Santa_Dasu]
    public static let `qencpTcp`: Self = "_qencp._tcp"
    /// Quick Eagle Networks CP [Santa_Dasu]
    public static let `qencpUdp`: Self = "_qencp._udp"
    /// SCIENTIA-SSDB [SYSTEMS_MANAGER]
    public static let `scientiaSsdbTcp`: Self = "_scientia-ssdb._tcp"
    /// SCIENTIA-SSDB [SYSTEMS_MANAGER]
    public static let `scientiaSsdbUdp`: Self = "_scientia-ssdb._udp"
    /// CauPC Remote Control [Environics_Oy]
    public static let `caupcRemoteTcp`: Self = "_caupc-remote._tcp"
    /// CauPC Remote Control [Environics_Oy]
    public static let `caupcRemoteUdp`: Self = "_caupc-remote._udp"
    /// GTP-Control Plane (3GPP) [Alessio_Casati]
    public static let `gtpControlTcp`: Self = "_gtp-control._tcp"
    /// GTP-Control Plane (3GPP) [Alessio_Casati]
    public static let `gtpControlUdp`: Self = "_gtp-control._udp"
    /// ELATELINK [Tim_Lawrence]
    public static let `elatelinkTcp`: Self = "_elatelink._tcp"
    /// ELATELINK [Tim_Lawrence]
    public static let `elatelinkUdp`: Self = "_elatelink._udp"
    /// LOCKSTEP [Karl_Forster]
    public static let `lockstepTcp`: Self = "_lockstep._tcp"
    /// LOCKSTEP [Karl_Forster]
    public static let `lockstepUdp`: Self = "_lockstep._udp"
    /// PktCable-COPS [Glenn_Russell]
    public static let `pktcableCopsTcp`: Self = "_pktcable-cops._tcp"
    /// PktCable-COPS [Glenn_Russell]
    public static let `pktcableCopsUdp`: Self = "_pktcable-cops._udp"
    /// INDEX-PC-WB [James_David_Fisher]
    public static let `indexPcWbTcp`: Self = "_index-pc-wb._tcp"
    /// INDEX-PC-WB [James_David_Fisher]
    public static let `indexPcWbUdp`: Self = "_index-pc-wb._udp"
    /// Net Steward Control [Martin_Norman]
    public static let `netStewardTcp`: Self = "_net-steward._tcp"
    /// Net Steward Control [Martin_Norman]
    public static let `netStewardUdp`: Self = "_net-steward._udp"
    /// cs-live.com [Matt_Lachance]
    public static let `csLiveTcp`: Self = "_cs-live._tcp"
    /// cs-live.com [Matt_Lachance]
    public static let `csLiveUdp`: Self = "_cs-live._udp"
    /// XDS [Peter_Zurich]
    public static let `xdsTcp`: Self = "_xds._tcp"
    /// XDS [Peter_Zurich]
    public static let `xdsUdp`: Self = "_xds._udp"
    /// Avantageb2b [Avi_Software]
    public static let `avantageb2bTcp`: Self = "_avantageb2b._tcp"
    /// Avantageb2b [Avi_Software]
    public static let `avantageb2bUdp`: Self = "_avantageb2b._udp"
    /// SoleraTec End Point Map [Mark_Armstrong]
    public static let `soleraEpmapTcp`: Self = "_solera-epmap._tcp"
    /// SoleraTec End Point Map [Mark_Armstrong]
    public static let `soleraEpmapUdp`: Self = "_solera-epmap._udp"
    /// ZYMED-ZPP [Gregg_Welker]
    public static let `zymedZppTcp`: Self = "_zymed-zpp._tcp"
    /// ZYMED-ZPP [Gregg_Welker]
    public static let `zymedZppUdp`: Self = "_zymed-zpp._udp"
    /// AVENUE [Jason_Cater]
    public static let `avenueTcp`: Self = "_avenue._tcp"
    /// AVENUE [Jason_Cater]
    public static let `avenueUdp`: Self = "_avenue._udp"
    /// Grid Resource Information Server [Steve_Tuecke]
    public static let `grisTcp`: Self = "_gris._tcp"
    /// Grid Resource Information Server [Steve_Tuecke]
    public static let `grisUdp`: Self = "_gris._udp"
    /// APPWORXSRV [Fred_McLain]
    public static let `appworxsrvTcp`: Self = "_appworxsrv._tcp"
    /// APPWORXSRV [Fred_McLain]
    public static let `appworxsrvUdp`: Self = "_appworxsrv._udp"
    /// CONNECT [Reid_Ligon]
    public static let `connectTcp`: Self = "_connect._tcp"
    /// CONNECT [Reid_Ligon]
    public static let `connectUdp`: Self = "_connect._udp"
    /// UNBIND-CLUSTER [Francois_Harvey]
    public static let `unbindClusterTcp`: Self = "_unbind-cluster._tcp"
    /// UNBIND-CLUSTER [Francois_Harvey]
    public static let `unbindClusterUdp`: Self = "_unbind-cluster._udp"
    /// IAS-AUTH 
    public static let `iasAuthTcp`: Self = "_ias-auth._tcp"
    /// IAS-AUTH 
    public static let `iasAuthUdp`: Self = "_ias-auth._udp"
    /// IAS-REG 
    public static let `iasRegTcp`: Self = "_ias-reg._tcp"
    /// IAS-REG 
    public static let `iasRegUdp`: Self = "_ias-reg._udp"
    /// IAS-ADMIND [Baiju_V_Patel]
    public static let `iasAdmindTcp`: Self = "_ias-admind._tcp"
    /// IAS-ADMIND [Baiju_V_Patel]
    public static let `iasAdmindUdp`: Self = "_ias-admind._udp"
    /// TDM OVER IP [Yaakov_Stein]
    public static let `tdmoipTcp`: Self = "_tdmoip._tcp"
    /// TDM OVER IP [Yaakov_Stein]
    public static let `tdmoipUdp`: Self = "_tdmoip._udp"
    /// Live Vault Job Control 
    public static let `lvJcTcp`: Self = "_lv-jc._tcp"
    /// Live Vault Job Control 
    public static let `lvJcUdp`: Self = "_lv-jc._udp"
    /// Live Vault Fast Object Transfer 
    public static let `lvFfxTcp`: Self = "_lv-ffx._tcp"
    /// Live Vault Fast Object Transfer 
    public static let `lvFfxUdp`: Self = "_lv-ffx._udp"
    /// Live Vault Remote Diagnostic Console Support 
    public static let `lvPiciTcp`: Self = "_lv-pici._tcp"
    /// Live Vault Remote Diagnostic Console Support 
    public static let `lvPiciUdp`: Self = "_lv-pici._udp"
    /// Live Vault Admin Event Notification 
    public static let `lvNotTcp`: Self = "_lv-not._tcp"
    /// Live Vault Admin Event Notification 
    public static let `lvNotUdp`: Self = "_lv-not._udp"
    /// Live Vault Authentication [Ted_Hess]
    public static let `lvAuthTcp`: Self = "_lv-auth._tcp"
    /// Live Vault Authentication [Ted_Hess]
    public static let `lvAuthUdp`: Self = "_lv-auth._udp"
    /// VERITAS UNIVERSAL COMMUNICATION LAYER [Songlin_Ren]
    public static let `veritasUclTcp`: Self = "_veritas-ucl._tcp"
    /// VERITAS UNIVERSAL COMMUNICATION LAYER [Songlin_Ren]
    public static let `veritasUclUdp`: Self = "_veritas-ucl._udp"
    /// ACPTSYS [Michael_Lekias]
    public static let `acptsysTcp`: Self = "_acptsys._tcp"
    /// ACPTSYS [Michael_Lekias]
    public static let `acptsysUdp`: Self = "_acptsys._udp"
    /// DYNAMIC3D [Tobias_Wegner]
    public static let `dynamic3dTcp`: Self = "_dynamic3d._tcp"
    /// DYNAMIC3D [Tobias_Wegner]
    public static let `dynamic3dUdp`: Self = "_dynamic3d._udp"
    /// DOCENT [Hali_Lindbloom]
    public static let `docentTcp`: Self = "_docent._tcp"
    /// DOCENT [Hali_Lindbloom]
    public static let `docentUdp`: Self = "_docent._udp"
    /// GTP-User Plane (3GPP) [Alessio_Casati]
    public static let `gtpUserTcp`: Self = "_gtp-user._tcp"
    /// GTP-User Plane (3GPP) [Alessio_Casati]
    public static let `gtpUserUdp`: Self = "_gtp-user._udp"
    /// Control Protocol 
    public static let `ctlptcTcp`: Self = "_ctlptc._tcp"
    /// Control Protocol 
    public static let `ctlptcUdp`: Self = "_ctlptc._udp"
    /// Standard Protocol 
    public static let `stdptcTcp`: Self = "_stdptc._tcp"
    /// Standard Protocol 
    public static let `stdptcUdp`: Self = "_stdptc._udp"
    /// Bridge Protocol [Hideki_Hatta]
    public static let `brdptcTcp`: Self = "_brdptc._tcp"
    /// Bridge Protocol [Hideki_Hatta]
    public static let `brdptcUdp`: Self = "_brdptc._udp"
    /// Talari Reliable Protocol [John_E_Dickey]
    public static let `trpTcp`: Self = "_trp._tcp"
    /// Talari Reliable Protocol [John_E_Dickey]
    public static let `trpUdp`: Self = "_trp._udp"
    /// Xerox Network Document Scan Protocol [William_R_Lear]
    public static let `xndsTcp`: Self = "_xnds._tcp"
    /// Xerox Network Document Scan Protocol [William_R_Lear]
    public static let `xndsUdp`: Self = "_xnds._udp"
    /// TouchNetPlus Service [Brian_Toothill]
    public static let `touchnetplusTcp`: Self = "_touchnetplus._tcp"
    /// TouchNetPlus Service [Brian_Toothill]
    public static let `touchnetplusUdp`: Self = "_touchnetplus._udp"
    /// GDB Remote Debug Port [Nigel_Stephens]
    public static let `gdbremoteTcp`: Self = "_gdbremote._tcp"
    /// GDB Remote Debug Port [Nigel_Stephens]
    public static let `gdbremoteUdp`: Self = "_gdbremote._udp"
    /// APC 2160 [American_Power_Conve]
    public static let `apc2160Tcp`: Self = "_apc-2160._tcp"
    /// APC 2160 [American_Power_Conve]
    public static let `apc2160Udp`: Self = "_apc-2160._udp"
    /// APC 2161 [American_Power_Conve]
    public static let `apc2161Tcp`: Self = "_apc-2161._tcp"
    /// APC 2161 [American_Power_Conve]
    public static let `apc2161Udp`: Self = "_apc-2161._udp"
    /// Navisphere 
    public static let `navisphereTcp`: Self = "_navisphere._tcp"
    /// Navisphere 
    public static let `navisphereUdp`: Self = "_navisphere._udp"
    /// Navisphere Secure [Andreas_Bauer]
    public static let `navisphereSecTcp`: Self = "_navisphere-sec._tcp"
    /// Navisphere Secure [Andreas_Bauer]
    public static let `navisphereSecUdp`: Self = "_navisphere-sec._udp"
    /// Dynamic DNS Version 3 [Alan_Yates]
    public static let `ddnsV3Tcp`: Self = "_ddns-v3._tcp"
    /// Dynamic DNS Version 3 [Alan_Yates]
    public static let `ddnsV3Udp`: Self = "_ddns-v3._udp"
    /// X-Bone API [Joe_Touch]
    public static let `xBoneApiTcp`: Self = "_x-bone-api._tcp"
    /// X-Bone API [Joe_Touch]
    public static let `xBoneApiUdp`: Self = "_x-bone-api._udp"
    /// iwserver [Fred_Surr]
    public static let `iwserverTcp`: Self = "_iwserver._tcp"
    /// iwserver [Fred_Surr]
    public static let `iwserverUdp`: Self = "_iwserver._udp"
    /// Raw Async Serial Link [Benjamin_Green]
    public static let `rawSerialTcp`: Self = "_raw-serial._tcp"
    /// Raw Async Serial Link [Benjamin_Green]
    public static let `rawSerialUdp`: Self = "_raw-serial._udp"
    /// easy-soft Multiplexer [Norbert_Kintzler]
    public static let `easySoftMuxTcp`: Self = "_easy-soft-mux._tcp"
    /// easy-soft Multiplexer [Norbert_Kintzler]
    public static let `easySoftMuxUdp`: Self = "_easy-soft-mux._udp"
    /// Backbone for Academic Information Notification (BRAIN) [Archishmat_Gore]
    public static let `brainTcp`: Self = "_brain._tcp"
    /// Backbone for Academic Information Notification (BRAIN) [Archishmat_Gore]
    public static let `brainUdp`: Self = "_brain._udp"
    /// EyeTV Server Port [Elgato_Systems]
    public static let `eyetvTcp`: Self = "_eyetv._tcp"
    /// EyeTV Server Port [Elgato_Systems]
    public static let `eyetvUdp`: Self = "_eyetv._udp"
    /// MS Firewall Storage 
    public static let `msfwStorageTcp`: Self = "_msfw-storage._tcp"
    /// MS Firewall Storage 
    public static let `msfwStorageUdp`: Self = "_msfw-storage._udp"
    /// MS Firewall SecureStorage 
    public static let `msfwSStorageTcp`: Self = "_msfw-s-storage._tcp"
    /// MS Firewall SecureStorage 
    public static let `msfwSStorageUdp`: Self = "_msfw-s-storage._udp"
    /// MS Firewall Replication 
    public static let `msfwReplicaTcp`: Self = "_msfw-replica._tcp"
    /// MS Firewall Replication 
    public static let `msfwReplicaUdp`: Self = "_msfw-replica._udp"
    /// MS Firewall Intra Array [Itai_Greenberg]
    public static let `msfwArrayTcp`: Self = "_msfw-array._tcp"
    /// MS Firewall Intra Array [Itai_Greenberg]
    public static let `msfwArrayUdp`: Self = "_msfw-array._udp"
    /// Microsoft Desktop AirSync Protocol 
    public static let `airsyncTcp`: Self = "_airsync._tcp"
    /// Microsoft Desktop AirSync Protocol 
    public static let `airsyncUdp`: Self = "_airsync._udp"
    /// Microsoft ActiveSync Remote API [Jon_Xu]
    public static let `rapiTcp`: Self = "_rapi._tcp"
    /// Microsoft ActiveSync Remote API [Jon_Xu]
    public static let `rapiUdp`: Self = "_rapi._udp"
    /// qWAVE Bandwidth Estimate [Gabe_Frost]
    public static let `qwaveTcp`: Self = "_qwave._tcp"
    /// qWAVE Bandwidth Estimate [Gabe_Frost]
    public static let `qwaveUdp`: Self = "_qwave._udp"
    /// Peer Services for BITS [Jeff_Roberts]
    public static let `bitspeerTcp`: Self = "_bitspeer._tcp"
    /// Peer Services for BITS [Jeff_Roberts]
    public static let `bitspeerUdp`: Self = "_bitspeer._udp"
    /// Microsoft RDP for virtual machines [Brian_Henry]
    public static let `vmrdpTcp`: Self = "_vmrdp._tcp"
    /// Microsoft RDP for virtual machines [Brian_Henry]
    public static let `vmrdpUdp`: Self = "_vmrdp._udp"
    /// Millicent Vendor Gateway Server [Steve_Glassman]
    public static let `mcGtSrvTcp`: Self = "_mc-gt-srv._tcp"
    /// Millicent Vendor Gateway Server [Steve_Glassman]
    public static let `mcGtSrvUdp`: Self = "_mc-gt-srv._udp"
    /// eforward [Greg_Pringle]
    public static let `eforwardTcp`: Self = "_eforward._tcp"
    /// eforward [Greg_Pringle]
    public static let `eforwardUdp`: Self = "_eforward._udp"
    /// CGN status 
    public static let `cgnStatTcp`: Self = "_cgn-stat._tcp"
    /// CGN status 
    public static let `cgnStatUdp`: Self = "_cgn-stat._udp"
    /// Code Green configuration [Chris_Michaelson]
    public static let `cgnConfigTcp`: Self = "_cgn-config._tcp"
    /// Code Green configuration [Chris_Michaelson]
    public static let `cgnConfigUdp`: Self = "_cgn-config._udp"
    /// NVD User [Yves_Gattegno]
    public static let `nvdTcp`: Self = "_nvd._tcp"
    /// NVD User [Yves_Gattegno]
    public static let `nvdUdp`: Self = "_nvd._udp"
    /// OnBase Distributed Disk Services [Paul_Tam]
    public static let `onbaseDdsTcp`: Self = "_onbase-dds._tcp"
    /// OnBase Distributed Disk Services [Paul_Tam]
    public static let `onbaseDdsUdp`: Self = "_onbase-dds._udp"
    /// Guy-Tek Automated Update Applications [Daniel_Story]
    public static let `gtauaTcp`: Self = "_gtaua._tcp"
    /// Guy-Tek Automated Update Applications [Daniel_Story]
    public static let `gtauaUdp`: Self = "_gtaua._udp"
    /// Sepehr System Management Control 
    public static let `ssmcTcp`: Self = "_ssmc._tcp"
    /// Sepehr System Management Data [Shahriar_Pourazin]
    public static let `ssmdUdp`: Self = "_ssmd._udp"
    /// Radware Resource Pool Manager [Radware_LTD]
    public static let `radwareRpmTcp`: Self = "_radware-rpm._tcp"
    /// Secure Radware Resource Pool Manager [Radware_LTD]
    public static let `radwareRpmSTcp`: Self = "_radware-rpm-s._tcp"
    /// TiVoConnect Beacon [Jeffrey_J_Peters]
    public static let `tivoconnectTcp`: Self = "_tivoconnect._tcp"
    /// TiVoConnect Beacon [Jeffrey_J_Peters]
    public static let `tivoconnectUdp`: Self = "_tivoconnect._udp"
    /// TvBus Messaging [Brian_W_Beach]
    public static let `tvbusTcp`: Self = "_tvbus._tcp"
    /// TvBus Messaging [Brian_W_Beach]
    public static let `tvbusUdp`: Self = "_tvbus._udp"
    /// ASDIS software management [ASDIS_Support]
    public static let `asdisTcp`: Self = "_asdis._tcp"
    /// ASDIS software management [ASDIS_Support]
    public static let `asdisUdp`: Self = "_asdis._udp"
    /// Dr.Web Enterprise Management Service [Eugeny_Gladkih]
    public static let `drwcsTcp`: Self = "_drwcs._tcp"
    /// Dr.Web Enterprise Management Service [Eugeny_Gladkih]
    public static let `drwcsUdp`: Self = "_drwcs._udp"
    /// MNP data exchange [Peter_Pramberger]
    public static let `mnpExchangeTcp`: Self = "_mnp-exchange._tcp"
    /// MNP data exchange [Peter_Pramberger]
    public static let `mnpExchangeUdp`: Self = "_mnp-exchange._udp"
    /// OneHome Remote Access 
    public static let `onehomeRemoteTcp`: Self = "_onehome-remote._tcp"
    /// OneHome Remote Access 
    public static let `onehomeRemoteUdp`: Self = "_onehome-remote._udp"
    /// OneHome Service Port [Jim_Herman]
    public static let `onehomeHelpTcp`: Self = "_onehome-help._tcp"
    /// OneHome Service Port [Jim_Herman]
    public static let `onehomeHelpUdp`: Self = "_onehome-help._udp"
    /// Advanced Training System Program 
    public static let `atsTcp`: Self = "_ats._tcp"
    /// Advanced Training System Program 
    public static let `atsUdp`: Self = "_ats._udp"
    /// Int. Multimedia Teleconferencing Cosortium [Pat_Galvin]
    public static let `imtcMapTcp`: Self = "_imtc-map._tcp"
    /// Int. Multimedia Teleconferencing Cosortium [Pat_Galvin]
    public static let `imtcMapUdp`: Self = "_imtc-map._udp"
    /// b2 Runtime Protocol 
    public static let `b2RuntimeTcp`: Self = "_b2-runtime._tcp"
    /// b2 Runtime Protocol 
    public static let `b2RuntimeUdp`: Self = "_b2-runtime._udp"
    /// b2 License Server [Helge_Frank_Zimpel]
    public static let `b2LicenseTcp`: Self = "_b2-license._tcp"
    /// b2 License Server [Helge_Frank_Zimpel]
    public static let `b2LicenseUdp`: Self = "_b2-license._udp"
    /// Java Presentation Server [Leif_Jakob]
    public static let `jpsTcp`: Self = "_jps._tcp"
    /// Java Presentation Server [Leif_Jakob]
    public static let `jpsUdp`: Self = "_jps._udp"
    /// HP OpenCall bus [Jerome_Forissier]
    public static let `hpocbusTcp`: Self = "_hpocbus._tcp"
    /// HP OpenCall bus [Jerome_Forissier]
    public static let `hpocbusUdp`: Self = "_hpocbus._udp"
    /// HP Status and Services [Donald_Welch]
    public static let `hpssdTcp`: Self = "_hpssd._tcp"
    /// HP Status and Services [Donald_Welch]
    public static let `hpssdUdp`: Self = "_hpssd._udp"
    /// HP I/O Backend [David_Suffield]
    public static let `hpiodTcp`: Self = "_hpiod._tcp"
    /// HP I/O Backend [David_Suffield]
    public static let `hpiodUdp`: Self = "_hpiod._udp"
    /// HP RIM for Files Portal Service [Patty_Ho]
    public static let `rimfPsTcp`: Self = "_rimf-ps._tcp"
    /// HP RIM for Files Portal Service [Patty_Ho]
    public static let `rimfPsUdp`: Self = "_rimf-ps._udp"
    /// NOAAPORT Broadcast Network 
    public static let `noaaportTcp`: Self = "_noaaport._tcp"
    /// NOAAPORT Broadcast Network 
    public static let `noaaportUdp`: Self = "_noaaport._udp"
    /// EMWIN [Antonio_Querubin]
    public static let `emwinTcp`: Self = "_emwin._tcp"
    /// EMWIN [Antonio_Querubin]
    public static let `emwinUdp`: Self = "_emwin._udp"
    /// LeeCO POS Server Service [Patrick_Lee]
    public static let `leecoposserverTcp`: Self = "_leecoposserver._tcp"
    /// LeeCO POS Server Service [Patrick_Lee]
    public static let `leecoposserverUdp`: Self = "_leecoposserver._udp"
    /// Kali [Jay_Cotton]
    public static let `kaliTcp`: Self = "_kali._tcp"
    /// Kali [Jay_Cotton]
    public static let `kaliUdp`: Self = "_kali._udp"
    /// RDQ Protocol Interface [Les_Mather]
    public static let `rpiTcp`: Self = "_rpi._tcp"
    /// RDQ Protocol Interface [Les_Mather]
    public static let `rpiUdp`: Self = "_rpi._udp"
    /// IPCore.co.za GPRS [Administrator]
    public static let `ipcoreTcp`: Self = "_ipcore._tcp"
    /// IPCore.co.za GPRS [Administrator]
    public static let `ipcoreUdp`: Self = "_ipcore._udp"
    /// VTU data service [David_Barrass]
    public static let `vtuCommsTcp`: Self = "_vtu-comms._tcp"
    /// VTU data service [David_Barrass]
    public static let `vtuCommsUdp`: Self = "_vtu-comms._udp"
    /// GoToDevice Device Management [John_Lisek]
    public static let `gotodeviceTcp`: Self = "_gotodevice._tcp"
    /// GoToDevice Device Management [John_Lisek]
    public static let `gotodeviceUdp`: Self = "_gotodevice._udp"
    /// Bounzza IRC Proxy [Danko_Alexeyev]
    public static let `bounzzaTcp`: Self = "_bounzza._tcp"
    /// Bounzza IRC Proxy [Danko_Alexeyev]
    public static let `bounzzaUdp`: Self = "_bounzza._udp"
    /// NetIQ NCAP Protocol [Roger_Huebner]
    public static let `netiqNcapTcp`: Self = "_netiq-ncap._tcp"
    /// NetIQ NCAP Protocol [Roger_Huebner]
    public static let `netiqNcapUdp`: Self = "_netiq-ncap._udp"
    /// NetIQ End2End [Michael_Sharpe]
    public static let `netiqTcp`: Self = "_netiq._tcp"
    /// NetIQ End2End [Michael_Sharpe]
    public static let `netiqUdp`: Self = "_netiq._udp"
    /// EtherNet/IP over TLS [ODVA_Inc]
    public static let `ethernetIpSTcp`: Self = "_ethernet-ip-s._tcp"
    /// EtherNet/IP over DTLS [ODVA_Inc]
    public static let `ethernetIpSUdp`: Self = "_ethernet-ip-s._udp"
    /// EtherNet/IP I/O IANA assigned this well-formed service name as a replacement for "EtherNet/IP-1". [Brian_Batke_2]
    public static let `EtherNetIp1Tcp`: Self = "_EtherNet-IP-1._tcp"
    /// EtherNet/IP I/O IANA assigned this well-formed service name as a replacement for "EtherNet/IP-1". [Brian_Batke_2]
    public static let `EtherNetIp1Udp`: Self = "_EtherNet-IP-1._udp"
    /// Rockwell CSP2 [Brian_Batke]
    public static let `rockwellCsp2Tcp`: Self = "_rockwell-csp2._tcp"
    /// Rockwell CSP2 [Brian_Batke]
    public static let `rockwellCsp2Udp`: Self = "_rockwell-csp2._udp"
    /// Easy Flexible Internet/Multiplayer Games [Thomas_Efer]
    public static let `efiMgTcp`: Self = "_efi-mg._tcp"
    /// Easy Flexible Internet/Multiplayer Games [Thomas_Efer]
    public static let `efiMgUdp`: Self = "_efi-mg._udp"
    /// Resource Connection Initiation Protocol [ITU_TSB]
    public static let `rcipItuTcp`: Self = "_rcip-itu._tcp"
    /// Resource Connection Initiation Protocol [ITU_TSB]
    public static let `rcipItuSctp`: Self = "_rcip-itu._sctp"
    /// Digital Instinct DRM 
    public static let `diDrmTcp`: Self = "_di-drm._tcp"
    /// Digital Instinct DRM 
    public static let `diDrmUdp`: Self = "_di-drm._udp"
    /// DI Messaging Service [Sean_Ni]
    public static let `diMsgTcp`: Self = "_di-msg._tcp"
    /// DI Messaging Service [Sean_Ni]
    public static let `diMsgUdp`: Self = "_di-msg._udp"
    /// eHome Message Server [Peter_Gabriel]
    public static let `ehomeMsTcp`: Self = "_ehome-ms._tcp"
    /// eHome Message Server [Peter_Gabriel]
    public static let `ehomeMsUdp`: Self = "_ehome-ms._udp"
    /// DataLens Service [Christopher_Bidwell]
    public static let `datalensTcp`: Self = "_datalens._tcp"
    /// DataLens Service [Christopher_Bidwell]
    public static let `datalensUdp`: Self = "_datalens._udp"
    /// MetaSoft Job Queue Administration Service [Ilya_Melamed]
    public static let `queueadmTcp`: Self = "_queueadm._tcp"
    /// MetaSoft Job Queue Administration Service [Ilya_Melamed]
    public static let `queueadmUdp`: Self = "_queueadm._udp"
    /// WiMAX ASN Control Plane Protocol [Prakash_Iyer]
    public static let `wimaxasncpTcp`: Self = "_wimaxasncp._tcp"
    /// WiMAX ASN Control Plane Protocol [Prakash_Iyer]
    public static let `wimaxasncpUdp`: Self = "_wimaxasncp._udp"
    /// IVS Video default [Thierry_Turletti]
    public static let `ivsVideoTcp`: Self = "_ivs-video._tcp"
    /// IVS Video default [Thierry_Turletti]
    public static let `ivsVideoUdp`: Self = "_ivs-video._udp"
    /// INFOCRYPT [Erica_Liu]
    public static let `infocryptTcp`: Self = "_infocrypt._tcp"
    /// INFOCRYPT [Erica_Liu]
    public static let `infocryptUdp`: Self = "_infocrypt._udp"
    /// DirectPlay [Ajay_Jindal]
    public static let `directplayTcp`: Self = "_directplay._tcp"
    /// DirectPlay [Ajay_Jindal]
    public static let `directplayUdp`: Self = "_directplay._udp"
    /// Sercomm-WLink [Melinda_Tsao]
    public static let `sercommWlinkTcp`: Self = "_sercomm-wlink._tcp"
    /// Sercomm-WLink [Melinda_Tsao]
    public static let `sercommWlinkUdp`: Self = "_sercomm-wlink._udp"
    /// Nani [Steve_Benoit]
    public static let `naniTcp`: Self = "_nani._tcp"
    /// Nani [Steve_Benoit]
    public static let `naniUdp`: Self = "_nani._udp"
    /// Optech Port1 License Manager [Gerard_Cannie]
    public static let `optechPort1LmTcp`: Self = "_optech-port1-lm._tcp"
    /// Optech Port1 License Manager [Gerard_Cannie]
    public static let `optechPort1LmUdp`: Self = "_optech-port1-lm._udp"
    /// AVIVA SNA SERVER [Vick_Keshishian]
    public static let `avivaSnaTcp`: Self = "_aviva-sna._tcp"
    /// AVIVA SNA SERVER [Vick_Keshishian]
    public static let `avivaSnaUdp`: Self = "_aviva-sna._udp"
    /// Image Query [Charles_Jacobs]
    public static let `imagequeryTcp`: Self = "_imagequery._tcp"
    /// Image Query [Charles_Jacobs]
    public static let `imagequeryUdp`: Self = "_imagequery._udp"
    /// RECIPe [Charlie_Limoges]
    public static let `recipeTcp`: Self = "_recipe._tcp"
    /// RECIPe [Charlie_Limoges]
    public static let `recipeUdp`: Self = "_recipe._udp"
    /// IVS Daemon [Thierry_Turletti]
    public static let `ivsdTcp`: Self = "_ivsd._tcp"
    /// IVS Daemon [Thierry_Turletti]
    public static let `ivsdUdp`: Self = "_ivsd._udp"
    /// Folio Remote Server [Pat_Mcgowan]
    public static let `foliocorpTcp`: Self = "_foliocorp._tcp"
    /// Folio Remote Server [Pat_Mcgowan]
    public static let `foliocorpUdp`: Self = "_foliocorp._udp"
    /// Magicom Protocol [Yossi_Appleboum]
    public static let `magicomTcp`: Self = "_magicom._tcp"
    /// Magicom Protocol [Yossi_Appleboum]
    public static let `magicomUdp`: Self = "_magicom._udp"
    /// NMS Server [Dmitry_Krasnonosenki]
    public static let `nmsserverTcp`: Self = "_nmsserver._tcp"
    /// NMS Server [Dmitry_Krasnonosenki]
    public static let `nmsserverUdp`: Self = "_nmsserver._udp"
    /// HaO [Panic_Ride]
    public static let `haoTcp`: Self = "_hao._tcp"
    /// HaO [Panic_Ride]
    public static let `haoUdp`: Self = "_hao._udp"
    /// PacketCable MTA Addr Map [Dave_Maxwell]
    public static let `pcMtaAddrmapTcp`: Self = "_pc-mta-addrmap._tcp"
    /// PacketCable MTA Addr Map [Dave_Maxwell]
    public static let `pcMtaAddrmapUdp`: Self = "_pc-mta-addrmap._udp"
    /// Antidote Deployment Manager Service [Rod_Waltermann]
    public static let `antidotemgrsvrTcp`: Self = "_antidotemgrsvr._tcp"
    /// Antidote Deployment Manager Service [Rod_Waltermann]
    public static let `antidotemgrsvrUdp`: Self = "_antidotemgrsvr._udp"
    /// User Management Service [Andrew_Crockford]
    public static let `umsTcp`: Self = "_ums._tcp"
    /// User Management Service [Andrew_Crockford]
    public static let `umsUdp`: Self = "_ums._udp"
    /// RISO File Manager Protocol [Shinji_Yamanaka]
    public static let `rfmpTcp`: Self = "_rfmp._tcp"
    /// RISO File Manager Protocol [Shinji_Yamanaka]
    public static let `rfmpUdp`: Self = "_rfmp._udp"
    /// remote-collab [Richard_Walters]
    public static let `remoteCollabTcp`: Self = "_remote-collab._tcp"
    /// remote-collab [Richard_Walters]
    public static let `remoteCollabUdp`: Self = "_remote-collab._udp"
    /// Distributed Framework Port [Sebastien_Lambla]
    public static let `difPortTcp`: Self = "_dif-port._tcp"
    /// Distributed Framework Port [Sebastien_Lambla]
    public static let `difPortUdp`: Self = "_dif-port._udp"
    /// NJENET using SSL [Hans_U_Schmidt]
    public static let `njenetSslTcp`: Self = "_njenet-ssl._tcp"
    /// NJENET using SSL [Hans_U_Schmidt]
    public static let `njenetSslUdp`: Self = "_njenet-ssl._udp"
    /// DTV Channel Request [Richard_Hodges]
    public static let `dtvChanReqTcp`: Self = "_dtv-chan-req._tcp"
    /// DTV Channel Request [Richard_Hodges]
    public static let `dtvChanReqUdp`: Self = "_dtv-chan-req._udp"
    /// Seismic P.O.C. Port [Robert_Reimiller]
    public static let `seispocTcp`: Self = "_seispoc._tcp"
    /// Seismic P.O.C. Port [Robert_Reimiller]
    public static let `seispocUdp`: Self = "_seispoc._udp"
    /// VRTP - ViRtue Transfer Protocol [Max_Fudim]
    public static let `vrtpTcp`: Self = "_vrtp._tcp"
    /// VRTP - ViRtue Transfer Protocol [Max_Fudim]
    public static let `vrtpUdp`: Self = "_vrtp._udp"
    /// PCC MFP [Kunihiko_Morota]
    public static let `pccMfpTcp`: Self = "_pcc-mfp._tcp"
    /// PCC MFP [Kunihiko_Morota]
    public static let `pccMfpUdp`: Self = "_pcc-mfp._udp"
    /// simple text/file transfer [Daniel_Kilsdonk]
    public static let `simpleTxRxTcp`: Self = "_simple-tx-rx._tcp"
    /// simple text/file transfer [Daniel_Kilsdonk]
    public static let `simpleTxRxUdp`: Self = "_simple-tx-rx._udp"
    /// Rotorcraft Communications Test System [Terry_Eldridge]
    public static let `rctsTcp`: Self = "_rcts._tcp"
    /// Rotorcraft Communications Test System [Terry_Eldridge]
    public static let `rctsUdp`: Self = "_rcts._udp"
    /// BIF identifiers resolution service [Li_Zhiping]
    public static let `bidServTcp`: Self = "_bid-serv._tcp"
    /// BIF identifiers resolution service [Li_Zhiping]
    public static let `bidServUdp`: Self = "_bid-serv._udp"
    /// APC 2260 [American_Power_Conve]
    public static let `apc2260Tcp`: Self = "_apc-2260._tcp"
    /// APC 2260 [American_Power_Conve]
    public static let `apc2260Udp`: Self = "_apc-2260._udp"
    /// CoMotion Master Server 
    public static let `comotionmasterTcp`: Self = "_comotionmaster._tcp"
    /// CoMotion Master Server 
    public static let `comotionmasterUdp`: Self = "_comotionmaster._udp"
    /// CoMotion Backup Server [Friedman_Wagner_Dobl]
    public static let `comotionbackTcp`: Self = "_comotionback._tcp"
    /// CoMotion Backup Server [Friedman_Wagner_Dobl]
    public static let `comotionbackUdp`: Self = "_comotionback._udp"
    /// ECweb Configuration Service [Anders_Hjelm]
    public static let `ecwcfgTcp`: Self = "_ecwcfg._tcp"
    /// ECweb Configuration Service [Anders_Hjelm]
    public static let `ecwcfgUdp`: Self = "_ecwcfg._udp"
    /// Audio Precision Apx500 API Port 1 
    public static let `apx500api1Tcp`: Self = "_apx500api-1._tcp"
    /// Audio Precision Apx500 API Port 1 
    public static let `apx500api1Udp`: Self = "_apx500api-1._udp"
    /// Audio Precision Apx500 API Port 2 [Robert_Wright]
    public static let `apx500api2Tcp`: Self = "_apx500api-2._tcp"
    /// Audio Precision Apx500 API Port 2 [Robert_Wright]
    public static let `apx500api2Udp`: Self = "_apx500api-2._udp"
    /// M-Files Server [Samppa_Lahtinen]
    public static let `mfserverTcp`: Self = "_mfserver._tcp"
    /// M-files Server [Samppa_Lahtinen]
    public static let `mfserverUdp`: Self = "_mfserver._udp"
    /// OntoBroker [Dr_Michael_Erdmann]
    public static let `ontobrokerTcp`: Self = "_ontobroker._tcp"
    /// OntoBroker [Dr_Michael_Erdmann]
    public static let `ontobrokerUdp`: Self = "_ontobroker._udp"
    /// AMT [IESG]
    public static let `amtTcp`: Self = "_amt._tcp"
    /// AMT [IESG]
    public static let `amtUdp`: Self = "_amt._udp"
    /// MIKEY [Karl_Norrman]
    public static let `mikeyTcp`: Self = "_mikey._tcp"
    /// MIKEY [Karl_Norrman]
    public static let `mikeyUdp`: Self = "_mikey._udp"
    /// starSchool [Adam_Ernst]
    public static let `starschoolTcp`: Self = "_starschool._tcp"
    /// starSchool [Adam_Ernst]
    public static let `starschoolUdp`: Self = "_starschool._udp"
    /// Secure Meeting Maker Scheduling 
    public static let `mmcalsTcp`: Self = "_mmcals._tcp"
    /// Secure Meeting Maker Scheduling 
    public static let `mmcalsUdp`: Self = "_mmcals._udp"
    /// Meeting Maker Scheduling [Andrew_H_Derbyshire]
    public static let `mmcalTcp`: Self = "_mmcal._tcp"
    /// Meeting Maker Scheduling [Andrew_H_Derbyshire]
    public static let `mmcalUdp`: Self = "_mmcal._udp"
    /// MySQL Instance Manager [Petr_Chardin]
    public static let `mysqlImTcp`: Self = "_mysql-im._tcp"
    /// MySQL Instance Manager [Petr_Chardin]
    public static let `mysqlImUdp`: Self = "_mysql-im._udp"
    /// PCTTunneller [ProControl_Technolog]
    public static let `pcttunnellTcp`: Self = "_pcttunnell._tcp"
    /// PCTTunneller [ProControl_Technolog]
    public static let `pcttunnellUdp`: Self = "_pcttunnell._udp"
    /// iBridge Conferencing 
    public static let `ibridgeDataTcp`: Self = "_ibridge-data._tcp"
    /// iBridge Conferencing 
    public static let `ibridgeDataUdp`: Self = "_ibridge-data._udp"
    /// iBridge Management [Patrick_Fisher]
    public static let `ibridgeMgmtTcp`: Self = "_ibridge-mgmt._tcp"
    /// iBridge Management [Patrick_Fisher]
    public static let `ibridgeMgmtUdp`: Self = "_ibridge-mgmt._udp"
    /// Bt device control proxy [Mark_de_Rooi]
    public static let `bluectrlproxyTcp`: Self = "_bluectrlproxy._tcp"
    /// Bt device control proxy [Mark_de_Rooi]
    public static let `bluectrlproxyUdp`: Self = "_bluectrlproxy._udp"
    /// Simple Stacked Sequences Database [David_Brandon]
    public static let `s3dbTcp`: Self = "_s3db._tcp"
    /// Simple Stacked Sequences Database [David_Brandon]
    public static let `s3dbUdp`: Self = "_s3db._udp"
    /// xmquery [Niels_Christiansen]
    public static let `xmqueryTcp`: Self = "_xmquery._tcp"
    /// xmquery [Niels_Christiansen]
    public static let `xmqueryUdp`: Self = "_xmquery._udp"
    /// LNVPOLLER 
    public static let `lnvpollerTcp`: Self = "_lnvpoller._tcp"
    /// LNVPOLLER 
    public static let `lnvpollerUdp`: Self = "_lnvpoller._udp"
    /// LNVCONSOLE 
    public static let `lnvconsoleTcp`: Self = "_lnvconsole._tcp"
    /// LNVCONSOLE 
    public static let `lnvconsoleUdp`: Self = "_lnvconsole._udp"
    /// LNVALARM 
    public static let `lnvalarmTcp`: Self = "_lnvalarm._tcp"
    /// LNVALARM 
    public static let `lnvalarmUdp`: Self = "_lnvalarm._udp"
    /// LNVSTATUS 
    public static let `lnvstatusTcp`: Self = "_lnvstatus._tcp"
    /// LNVSTATUS 
    public static let `lnvstatusUdp`: Self = "_lnvstatus._udp"
    /// LNVMAPS 
    public static let `lnvmapsTcp`: Self = "_lnvmaps._tcp"
    /// LNVMAPS 
    public static let `lnvmapsUdp`: Self = "_lnvmaps._udp"
    /// LNVMAILMON [John_Payne]
    public static let `lnvmailmonTcp`: Self = "_lnvmailmon._tcp"
    /// LNVMAILMON [John_Payne]
    public static let `lnvmailmonUdp`: Self = "_lnvmailmon._udp"
    /// NAS-Metering [Steven_Sawkins]
    public static let `nasMeteringTcp`: Self = "_nas-metering._tcp"
    /// NAS-Metering [Steven_Sawkins]
    public static let `nasMeteringUdp`: Self = "_nas-metering._udp"
    /// DNA [Tung_Nguyen]
    public static let `dnaTcp`: Self = "_dna._tcp"
    /// DNA [Tung_Nguyen]
    public static let `dnaUdp`: Self = "_dna._udp"
    /// NETML [Jochen_Hansmeyer]
    public static let `netmlTcp`: Self = "_netml._tcp"
    /// NETML [Jochen_Hansmeyer]
    public static let `netmlUdp`: Self = "_netml._udp"
    /// Lookup dict server [William_Fernando_Mat]
    public static let `dictLookupTcp`: Self = "_dict-lookup._tcp"
    /// Lookup dict server [William_Fernando_Mat]
    public static let `dictLookupUdp`: Self = "_dict-lookup._udp"
    /// Sonus Logging Services [Adwait_Sathe]
    public static let `sonusLoggingTcp`: Self = "_sonus-logging._tcp"
    /// Sonus Logging Services [Adwait_Sathe]
    public static let `sonusLoggingUdp`: Self = "_sonus-logging._udp"
    /// EPSON Advanced Printer Share Protocol [SEIKO_EPSON]
    public static let `eapspTcp`: Self = "_eapsp._tcp"
    /// EPSON Advanced Printer Share Protocol [SEIKO_EPSON]
    public static let `eapspUdp`: Self = "_eapsp._udp"
    /// Sonus Element Management Services [Linda_Lin]
    public static let `mibStreamingTcp`: Self = "_mib-streaming._tcp"
    /// Sonus Element Management Services [Linda_Lin]
    public static let `mibStreamingUdp`: Self = "_mib-streaming._udp"
    /// Network Platform Debug Manager [Robert_Byrne]
    public static let `npdbgmngrTcp`: Self = "_npdbgmngr._tcp"
    /// Network Platform Debug Manager [Robert_Byrne]
    public static let `npdbgmngrUdp`: Self = "_npdbgmngr._udp"
    /// Konshus License Manager (FLEX) [Francois_Painchaud]
    public static let `konshusLmTcp`: Self = "_konshus-lm._tcp"
    /// Konshus License Manager (FLEX) [Francois_Painchaud]
    public static let `konshusLmUdp`: Self = "_konshus-lm._udp"
    /// Advant License Manager [Lars_Goran_Magnusson]
    public static let `advantLmTcp`: Self = "_advant-lm._tcp"
    /// Advant License Manager [Lars_Goran_Magnusson]
    public static let `advantLmUdp`: Self = "_advant-lm._udp"
    /// Theta License Manager (Rainbow) [David_Thompson]
    public static let `thetaLmTcp`: Self = "_theta-lm._tcp"
    /// Theta License Manager (Rainbow) [David_Thompson]
    public static let `thetaLmUdp`: Self = "_theta-lm._udp"
    /// D2K DataMover 1 
    public static let `d2kDatamover1Tcp`: Self = "_d2k-datamover1._tcp"
    /// D2K DataMover 1 
    public static let `d2kDatamover1Udp`: Self = "_d2k-datamover1._udp"
    /// D2K DataMover 2 [Eric_Lan]
    public static let `d2kDatamover2Tcp`: Self = "_d2k-datamover2._tcp"
    /// D2K DataMover 2 [Eric_Lan]
    public static let `d2kDatamover2Udp`: Self = "_d2k-datamover2._udp"
    /// PC Telecommute [John_Daniel_Bonamico]
    public static let `pcTelecommuteTcp`: Self = "_pc-telecommute._tcp"
    /// PC Telecommute [John_Daniel_Bonamico]
    public static let `pcTelecommuteUdp`: Self = "_pc-telecommute._udp"
    /// CVMMON [Roger_Kumpf]
    public static let `cvmmonTcp`: Self = "_cvmmon._tcp"
    /// CVMMON [Roger_Kumpf]
    public static let `cvmmonUdp`: Self = "_cvmmon._udp"
    /// Compaq HTTP [Scott_Shaffer]
    public static let `cpqWbemTcp`: Self = "_cpq-wbem._tcp"
    /// Compaq HTTP [Scott_Shaffer]
    public static let `cpqWbemUdp`: Self = "_cpq-wbem._udp"
    /// Bindery Support [Narasimha_Rao_N]
    public static let `binderysupportTcp`: Self = "_binderysupport._tcp"
    /// Bindery Support [Narasimha_Rao_N]
    public static let `binderysupportUdp`: Self = "_binderysupport._udp"
    /// Proxy Gateway [Paul_Funk]
    public static let `proxyGatewayTcp`: Self = "_proxy-gateway._tcp"
    /// Proxy Gateway [Paul_Funk]
    public static let `proxyGatewayUdp`: Self = "_proxy-gateway._udp"
    /// Attachmate UTS [George_Gianelos]
    public static let `attachmateUtsTcp`: Self = "_attachmate-uts._tcp"
    /// Attachmate UTS [George_Gianelos]
    public static let `attachmateUtsUdp`: Self = "_attachmate-uts._udp"
    /// MT ScaleServer [Paul_Glaubitz]
    public static let `mtScaleserverTcp`: Self = "_mt-scaleserver._tcp"
    /// MT ScaleServer [Paul_Glaubitz]
    public static let `mtScaleserverUdp`: Self = "_mt-scaleserver._udp"
    /// TAPPI BoxNet [Richard_Spartz]
    public static let `tappiBoxnetTcp`: Self = "_tappi-boxnet._tcp"
    /// TAPPI BoxNet [Richard_Spartz]
    public static let `tappiBoxnetUdp`: Self = "_tappi-boxnet._udp"
    /// pehelp [Jens_Kilian]
    public static let `pehelpTcp`: Self = "_pehelp._tcp"
    /// pehelp [Jens_Kilian]
    public static let `pehelpUdp`: Self = "_pehelp._udp"
    /// sdhelp [Annette_Klecha]
    public static let `sdhelpTcp`: Self = "_sdhelp._tcp"
    /// sdhelp [Annette_Klecha]
    public static let `sdhelpUdp`: Self = "_sdhelp._udp"
    /// SD Server 
    public static let `sdserverTcp`: Self = "_sdserver._tcp"
    /// SD Server 
    public static let `sdserverUdp`: Self = "_sdserver._udp"
    /// SD Client [Jeurgen_Broesamle]
    public static let `sdclientTcp`: Self = "_sdclient._tcp"
    /// SD Client [Jeurgen_Broesamle]
    public static let `sdclientUdp`: Self = "_sdclient._udp"
    /// Message Service 
    public static let `messageserviceTcp`: Self = "_messageservice._tcp"
    /// Message Service 
    public static let `messageserviceUdp`: Self = "_messageservice._udp"
    /// WANScaler Communication Service [Allen_Samuels]
    public static let `wanscalerTcp`: Self = "_wanscaler._tcp"
    /// WANScaler Communication Service [Allen_Samuels]
    public static let `wanscalerUdp`: Self = "_wanscaler._udp"
    /// IAPP (Inter Access Point Protocol) [Henri_Moelard]
    public static let `iappTcp`: Self = "_iapp._tcp"
    /// IAPP (Inter Access Point Protocol) [Henri_Moelard]
    public static let `iappUdp`: Self = "_iapp._udp"
    /// CR WebSystems [Robin_Giese]
    public static let `crWebsystemsTcp`: Self = "_cr-websystems._tcp"
    /// CR WebSystems [Robin_Giese]
    public static let `crWebsystemsUdp`: Self = "_cr-websystems._udp"
    /// Precise Sft. [Michael_Landwehr]
    public static let `preciseSftTcp`: Self = "_precise-sft._tcp"
    /// Precise Sft. [Michael_Landwehr]
    public static let `preciseSftUdp`: Self = "_precise-sft._udp"
    /// SENT License Manager [Pisharath_Krishnan]
    public static let `sentLmTcp`: Self = "_sent-lm._tcp"
    /// SENT License Manager [Pisharath_Krishnan]
    public static let `sentLmUdp`: Self = "_sent-lm._udp"
    /// Attachmate G32 [Bryce_Bhatnagar]
    public static let `attachmateG32Tcp`: Self = "_attachmate-g32._tcp"
    /// Attachmate G32 [Bryce_Bhatnagar]
    public static let `attachmateG32Udp`: Self = "_attachmate-g32._udp"
    /// Cadence Control [Buck_Caldwell]
    public static let `cadencecontrolTcp`: Self = "_cadencecontrol._tcp"
    /// Cadence Control [Buck_Caldwell]
    public static let `cadencecontrolUdp`: Self = "_cadencecontrol._udp"
    /// InfoLibria [Chris_Chiotasso]
    public static let `infolibriaTcp`: Self = "_infolibria._tcp"
    /// InfoLibria [Chris_Chiotasso]
    public static let `infolibriaUdp`: Self = "_infolibria._udp"
    /// Siebel NS [Gilberto_Arnaiz]
    public static let `siebelNsTcp`: Self = "_siebel-ns._tcp"
    /// Siebel NS [Gilberto_Arnaiz]
    public static let `siebelNsUdp`: Self = "_siebel-ns._udp"
    /// RDLAP [Robert_Wiebe]
    public static let `rdlapTcp`: Self = "_rdlap._tcp"
    /// RDLAP [Robert_Wiebe]
    public static let `rdlapUdp`: Self = "_rdlap._udp"
    /// ofsd 
    public static let `ofsdTcp`: Self = "_ofsd._tcp"
    /// ofsd 
    public static let `ofsdUdp`: Self = "_ofsd._udp"
    /// Cosmocall [Steve_Dellutri]
    public static let `cosmocallTcp`: Self = "_cosmocall._tcp"
    /// Cosmocall [Steve_Dellutri]
    public static let `cosmocallUdp`: Self = "_cosmocall._udp"
    /// ANSYS Licensing Interconnect [Suzanne_Lorrin]
    public static let `ansysliTcp`: Self = "_ansysli._tcp"
    /// ANSYS Licensing Interconnect [Suzanne_Lorrin]
    public static let `ansysliUdp`: Self = "_ansysli._udp"
    /// IDCP [Keisokugiken_Corp]
    public static let `idcpTcp`: Self = "_idcp._tcp"
    /// IDCP [Keisokugiken_Corp]
    public static let `idcpUdp`: Self = "_idcp._udp"
    /// xingcsm [Dave_Spencer]
    public static let `xingcsmTcp`: Self = "_xingcsm._tcp"
    /// xingcsm [Dave_Spencer]
    public static let `xingcsmUdp`: Self = "_xingcsm._udp"
    /// Netrix SFTM [Garrett_Herschleb]
    public static let `netrixSftmTcp`: Self = "_netrix-sftm._tcp"
    /// Netrix SFTM [Garrett_Herschleb]
    public static let `netrixSftmUdp`: Self = "_netrix-sftm._udp"
    /// TSCCHAT [Mike_Jackson]
    public static let `tscchatTcp`: Self = "_tscchat._tcp"
    /// TSCCHAT [Mike_Jackson]
    public static let `tscchatUdp`: Self = "_tscchat._udp"
    /// AGENTVIEW [Ram_Iyer]
    public static let `agentviewTcp`: Self = "_agentview._tcp"
    /// AGENTVIEW [Ram_Iyer]
    public static let `agentviewUdp`: Self = "_agentview._udp"
    /// RCC Host [Martin_Shoemaker]
    public static let `rccHostTcp`: Self = "_rcc-host._tcp"
    /// RCC Host [Martin_Shoemaker]
    public static let `rccHostUdp`: Self = "_rcc-host._udp"
    /// SNAPP [Dan_Burrows]
    public static let `snappTcp`: Self = "_snapp._tcp"
    /// SNAPP [Dan_Burrows]
    public static let `snappUdp`: Self = "_snapp._udp"
    /// ACE Client Auth 
    public static let `aceClientTcp`: Self = "_ace-client._tcp"
    /// ACE Client Auth 
    public static let `aceClientUdp`: Self = "_ace-client._udp"
    /// ACE Proxy [Riaz_Zolfonoon]
    public static let `aceProxyTcp`: Self = "_ace-proxy._tcp"
    /// ACE Proxy [Riaz_Zolfonoon]
    public static let `aceProxyUdp`: Self = "_ace-proxy._udp"
    /// Apple UG Control [Gene_Tyacke]
    public static let `appleugcontrolTcp`: Self = "_appleugcontrol._tcp"
    /// Apple UG Control [Gene_Tyacke]
    public static let `appleugcontrolUdp`: Self = "_appleugcontrol._udp"
    /// ideesrv [Marazzi]
    public static let `ideesrvTcp`: Self = "_ideesrv._tcp"
    /// ideesrv [Marazzi]
    public static let `ideesrvUdp`: Self = "_ideesrv._udp"
    /// Norton Lambert [Richard_de_Mornay]
    public static let `nortonLambertTcp`: Self = "_norton-lambert._tcp"
    /// Norton Lambert [Richard_de_Mornay]
    public static let `nortonLambertUdp`: Self = "_norton-lambert._udp"
    /// WRS Registry IANA assigned this well-formed service name as a replacement for "wrs_registry". [Christophe_Cleraux]
    public static let `wrsRegistryTcp`: Self = "_wrs-registry._tcp"
    /// WRS Registry [Christophe_Cleraux]
    public static let `wrs_registryTcp`: Self = "_wrs_registry._tcp"
    /// WRS Registry IANA assigned this well-formed service name as a replacement for "wrs_registry". [Christophe_Cleraux]
    public static let `wrsRegistryUdp`: Self = "_wrs-registry._udp"
    /// WRS Registry [Christophe_Cleraux]
    public static let `wrs_registryUdp`: Self = "_wrs_registry._udp"
    /// XIO Status [Randy_Maas]
    public static let `xiostatusTcp`: Self = "_xiostatus._tcp"
    /// XIO Status [Randy_Maas]
    public static let `xiostatusUdp`: Self = "_xiostatus._udp"
    /// Seagate Manage Exec [Jim_Flaherty]
    public static let `manageExecTcp`: Self = "_manage-exec._tcp"
    /// Seagate Manage Exec [Jim_Flaherty]
    public static let `manageExecUdp`: Self = "_manage-exec._udp"
    /// nati logos [James_Juhasz]
    public static let `natiLogosTcp`: Self = "_nati-logos._tcp"
    /// nati logos [James_Juhasz]
    public static let `natiLogosUdp`: Self = "_nati-logos._udp"
    /// fcmsys 
    public static let `fcmsysTcp`: Self = "_fcmsys._tcp"
    /// fcmsys 
    public static let `fcmsysUdp`: Self = "_fcmsys._udp"
    /// dbm [Dean_Robson]
    public static let `dbmTcp`: Self = "_dbm._tcp"
    /// dbm [Dean_Robson]
    public static let `dbmUdp`: Self = "_dbm._udp"
    /// Game Connection Port IANA assigned this well-formed service name as a replacement for "redstorm_join". 
    public static let `redstormJoinTcp`: Self = "_redstorm-join._tcp"
    /// Game Connection Port 
    public static let `redstorm_joinTcp`: Self = "_redstorm_join._tcp"
    /// Game Connection Port IANA assigned this well-formed service name as a replacement for "redstorm_join". 
    public static let `redstormJoinUdp`: Self = "_redstorm-join._udp"
    /// Game Connection Port 
    public static let `redstorm_joinUdp`: Self = "_redstorm_join._udp"
    /// Game Announcement and Location IANA assigned this well-formed service name as a replacement for "redstorm_find". 
    public static let `redstormFindTcp`: Self = "_redstorm-find._tcp"
    /// Game Announcement and Location 
    public static let `redstorm_findTcp`: Self = "_redstorm_find._tcp"
    /// Game Announcement and Location IANA assigned this well-formed service name as a replacement for "redstorm_find". 
    public static let `redstormFindUdp`: Self = "_redstorm-find._udp"
    /// Game Announcement and Location 
    public static let `redstorm_findUdp`: Self = "_redstorm_find._udp"
    /// Information to query for game status IANA assigned this well-formed service name as a replacement for "redstorm_info". 
    public static let `redstormInfoTcp`: Self = "_redstorm-info._tcp"
    /// Information to query for game status 
    public static let `redstorm_infoTcp`: Self = "_redstorm_info._tcp"
    /// Information to query for game status IANA assigned this well-formed service name as a replacement for "redstorm_info". 
    public static let `redstormInfoUdp`: Self = "_redstorm-info._udp"
    /// Information to query for game status 
    public static let `redstorm_infoUdp`: Self = "_redstorm_info._udp"
    /// Diagnostics Port IANA assigned this well-formed service name as a replacement for "redstorm_diag". [David_Weinstein]
    public static let `redstormDiagTcp`: Self = "_redstorm-diag._tcp"
    /// Diagnostics Port [David_Weinstein]
    public static let `redstorm_diagTcp`: Self = "_redstorm_diag._tcp"
    /// Diagnostics Port IANA assigned this well-formed service name as a replacement for "redstorm_diag". [David_Weinstein]
    public static let `redstormDiagUdp`: Self = "_redstorm-diag._udp"
    /// Diagnostics Port [David_Weinstein]
    public static let `redstorm_diagUdp`: Self = "_redstorm_diag._udp"
    /// Pharos Booking Server 
    public static let `psbserverTcp`: Self = "_psbserver._tcp"
    /// Pharos Booking Server 
    public static let `psbserverUdp`: Self = "_psbserver._udp"
    /// psrserver 
    public static let `psrserverTcp`: Self = "_psrserver._tcp"
    /// psrserver 
    public static let `psrserverUdp`: Self = "_psrserver._udp"
    /// pslserver 
    public static let `pslserverTcp`: Self = "_pslserver._tcp"
    /// pslserver 
    public static let `pslserverUdp`: Self = "_pslserver._udp"
    /// pspserver 
    public static let `pspserverTcp`: Self = "_pspserver._tcp"
    /// pspserver 
    public static let `pspserverUdp`: Self = "_pspserver._udp"
    /// psprserver 
    public static let `psprserverTcp`: Self = "_psprserver._tcp"
    /// psprserver 
    public static let `psprserverUdp`: Self = "_psprserver._udp"
    /// psdbserver [Paul_Reddy]
    public static let `psdbserverTcp`: Self = "_psdbserver._tcp"
    /// psdbserver [Paul_Reddy]
    public static let `psdbserverUdp`: Self = "_psdbserver._udp"
    /// GXT License Managemant [Robert_Hodgson]
    public static let `gxtelmdTcp`: Self = "_gxtelmd._tcp"
    /// GXT License Managemant [Robert_Hodgson]
    public static let `gxtelmdUdp`: Self = "_gxtelmd._udp"
    /// UniHub Server [Tim_Kenyon]
    public static let `unihubServerTcp`: Self = "_unihub-server._tcp"
    /// UniHub Server [Tim_Kenyon]
    public static let `unihubServerUdp`: Self = "_unihub-server._udp"
    /// Futrix [Peter_Frankenberg]
    public static let `futrixTcp`: Self = "_futrix._tcp"
    /// Futrix [Peter_Frankenberg]
    public static let `futrixUdp`: Self = "_futrix._udp"
    /// FlukeServer [Bill_Marbaker]
    public static let `flukeserverTcp`: Self = "_flukeserver._tcp"
    /// FlukeServer [Bill_Marbaker]
    public static let `flukeserverUdp`: Self = "_flukeserver._udp"
    /// NexstorIndLtd [NexStor_India_Limite]
    public static let `nexstorindltdTcp`: Self = "_nexstorindltd._tcp"
    /// NexstorIndLtd [NexStor_India_Limite]
    public static let `nexstorindltdUdp`: Self = "_nexstorindltd._udp"
    /// TL1 [Charles_Scott_Robers]
    public static let `tl1Tcp`: Self = "_tl1._tcp"
    /// TL1 [Charles_Scott_Robers]
    public static let `tl1Udp`: Self = "_tl1._udp"
    /// digiman [Aaron_S_Kurland]
    public static let `digimanTcp`: Self = "_digiman._tcp"
    /// digiman [Aaron_S_Kurland]
    public static let `digimanUdp`: Self = "_digiman._udp"
    /// Media Central NFSD [Shivakumar_S_Govind]
    public static let `mediacntrlnfsdTcp`: Self = "_mediacntrlnfsd._tcp"
    /// Media Central NFSD [Shivakumar_S_Govind]
    public static let `mediacntrlnfsdUdp`: Self = "_mediacntrlnfsd._udp"
    /// OI-2000 [Software_Horizons_In]
    public static let `oi2000Tcp`: Self = "_oi-2000._tcp"
    /// OI-2000 [Software_Horizons_In]
    public static let `oi2000Udp`: Self = "_oi-2000._udp"
    /// dbref [Yoshihiro_Yamazaki]
    public static let `dbrefTcp`: Self = "_dbref._tcp"
    /// dbref [Yoshihiro_Yamazaki]
    public static let `dbrefUdp`: Self = "_dbref._udp"
    /// qip-login [Mike_Morgan]
    public static let `qipLoginTcp`: Self = "_qip-login._tcp"
    /// qip-login [Mike_Morgan]
    public static let `qipLoginUdp`: Self = "_qip-login._udp"
    /// Service Control [Humberto_Sanchez]
    public static let `serviceCtrlTcp`: Self = "_service-ctrl._tcp"
    /// Service Control [Humberto_Sanchez]
    public static let `serviceCtrlUdp`: Self = "_service-ctrl._udp"
    /// OpenTable [Brett_Goldstein]
    public static let `opentableTcp`: Self = "_opentable._tcp"
    /// OpenTable [Brett_Goldstein]
    public static let `opentableUdp`: Self = "_opentable._udp"
    /// Blockchain Identifier InFrastructure P2P [Li_Zhiping]
    public static let `bifP2pTcp`: Self = "_bif-p2p._tcp"
    /// Blockchain Identifier InFrastructure P2P [Li_Zhiping]
    public static let `bifP2pUdp`: Self = "_bif-p2p._udp"
    /// L3-HBMon [Dolores_Scott]
    public static let `l3HbmonTcp`: Self = "_l3-hbmon._tcp"
    /// L3-HBMon [Dolores_Scott]
    public static let `l3HbmonUdp`: Self = "_l3-hbmon._udp"
    /// LanMessenger [Garrett_Padera]
    public static let `lanmessengerTcp`: Self = "_lanmessenger._tcp"
    /// LanMessenger [Garrett_Padera]
    public static let `lanmessengerUdp`: Self = "_lanmessenger._udp"
    /// Remograph License Manager [Per_Fahlberg]
    public static let `remographlmTcp`: Self = "_remographlm._tcp"
    /// Hydra RPC [Jacob_Feisley]
    public static let `hydraTcp`: Self = "_hydra._tcp"
    /// Docker REST API (plain text) [DOCKER]
    public static let `dockerTcp`: Self = "_docker._tcp"
    /// Docker REST API (ssl) [DOCKER]
    public static let `dockerSTcp`: Self = "_docker-s._tcp"
    /// RPC interface for Docker Swarm [Docker_Inc]
    public static let `swarmTcp`: Self = "_swarm._tcp"
    /// DALI lighting control [DALI_Alliance_DiiA]
    public static let `daliUdp`: Self = "_dali._udp"
    /// etcd client communication [CoreOS]
    public static let `etcdClientTcp`: Self = "_etcd-client._tcp"
    /// etcd server to server communication [CoreOS]
    public static let `etcdServerTcp`: Self = "_etcd-server._tcp"
    /// Compaq HTTPS [Scott_Shaffer]
    public static let `compaqHttpsTcp`: Self = "_compaq-https._tcp"
    /// Compaq HTTPS [Scott_Shaffer]
    public static let `compaqHttpsUdp`: Self = "_compaq-https._udp"
    /// Microsoft OLAP 
    public static let `msOlap3Tcp`: Self = "_ms-olap3._tcp"
    /// Microsoft OLAP 
    public static let `msOlap3Udp`: Self = "_ms-olap3._udp"
    /// Microsoft OLAP [Mosha_Pasumansky]
    public static let `msOlap4Tcp`: Self = "_ms-olap4._tcp"
    /// Microsoft OLAP [Mosha_Pasumansky]
    public static let `msOlap4Udp`: Self = "_ms-olap4._udp"
    /// SD-REQUEST 
    public static let `sdRequestTcp`: Self = "_sd-request._tcp"
    /// SD-CAPACITY [Jason_McManus_2]
    public static let `sdCapacityUdp`: Self = "_sd-capacity._udp"
    /// SD-DATA [Jason_McManus_2]
    public static let `sdDataTcp`: Self = "_sd-data._tcp"
    /// SD-DATA [Jason_McManus_2]
    public static let `sdDataUdp`: Self = "_sd-data._udp"
    /// Virtual Tape 
    public static let `virtualtapeTcp`: Self = "_virtualtape._tcp"
    /// Virtual Tape 
    public static let `virtualtapeUdp`: Self = "_virtualtape._udp"
    /// VSAM Redirector [Ingo_Franzki]
    public static let `vsamredirectorTcp`: Self = "_vsamredirector._tcp"
    /// VSAM Redirector [Ingo_Franzki]
    public static let `vsamredirectorUdp`: Self = "_vsamredirector._udp"
    /// MYNAH AutoStart [Thomas_J_Klehr]
    public static let `mynahautostartTcp`: Self = "_mynahautostart._tcp"
    /// MYNAH AutoStart [Thomas_J_Klehr]
    public static let `mynahautostartUdp`: Self = "_mynahautostart._udp"
    /// OpenView Session Mgr [Eric_Pulsipher]
    public static let `ovsessionmgrTcp`: Self = "_ovsessionmgr._tcp"
    /// OpenView Session Mgr [Eric_Pulsipher]
    public static let `ovsessionmgrUdp`: Self = "_ovsessionmgr._udp"
    /// RSMTP [Geoff_Collyer]
    public static let `rsmtpTcp`: Self = "_rsmtp._tcp"
    /// RSMTP [Geoff_Collyer]
    public static let `rsmtpUdp`: Self = "_rsmtp._udp"
    /// Tactical Auth [David_Yon]
    public static let `tacticalauthTcp`: Self = "_tacticalauth._tcp"
    /// Tactical Auth [David_Yon]
    public static let `tacticalauthUdp`: Self = "_tacticalauth._udp"
    /// MS OLAP 1 
    public static let `msOlap1Tcp`: Self = "_ms-olap1._tcp"
    /// MS OLAP 1 
    public static let `msOlap1Udp`: Self = "_ms-olap1._udp"
    /// MS OLAP 2 [Mosha_Pasumansky]
    public static let `msOlap2Tcp`: Self = "_ms-olap2._tcp"
    /// MS OLAP 2 [Mosha_Pasumansky]
    public static let `msOlap2Udp`: Self = "_ms-olap2._udp"
    /// LAN900 Remote IANA assigned this well-formed service name as a replacement for "lan900_remote". [Tom_Quinlan]
    public static let `lan900RemoteTcp`: Self = "_lan900-remote._tcp"
    /// LAN900 Remote [Tom_Quinlan]
    public static let `lan900_remoteTcp`: Self = "_lan900_remote._tcp"
    /// LAN900 Remote IANA assigned this well-formed service name as a replacement for "lan900_remote". [Tom_Quinlan]
    public static let `lan900RemoteUdp`: Self = "_lan900-remote._udp"
    /// LAN900 Remote [Tom_Quinlan]
    public static let `lan900_remoteUdp`: Self = "_lan900_remote._udp"
    /// Wusage [Thomas_Boutell]
    public static let `wusageTcp`: Self = "_wusage._tcp"
    /// Wusage [Thomas_Boutell]
    public static let `wusageUdp`: Self = "_wusage._udp"
    /// NCL [Robert_Wiebe]
    public static let `nclTcp`: Self = "_ncl._tcp"
    /// NCL [Robert_Wiebe]
    public static let `nclUdp`: Self = "_ncl._udp"
    /// Orbiter [David_Goldberg]
    public static let `orbiterTcp`: Self = "_orbiter._tcp"
    /// Orbiter [David_Goldberg]
    public static let `orbiterUdp`: Self = "_orbiter._udp"
    /// FileMaker, Inc. - Data Access Layer [Clay_Maeckal]
    public static let `fmproFdalTcp`: Self = "_fmpro-fdal._tcp"
    /// FileMaker, Inc. - Data Access Layer [Clay_Maeckal]
    public static let `fmproFdalUdp`: Self = "_fmpro-fdal._udp"
    /// OpEquus Server [Gavin_Hutchinson_2]
    public static let `opequusServerTcp`: Self = "_opequus-server._tcp"
    /// OpEquus Server [Gavin_Hutchinson_2]
    public static let `opequusServerUdp`: Self = "_opequus-server._udp"
    /// cvspserver [Jim_Kingdon]
    public static let `cvspserverTcp`: Self = "_cvspserver._tcp"
    /// cvspserver [Jim_Kingdon]
    public static let `cvspserverUdp`: Self = "_cvspserver._udp"
    /// TaskMaster 2000 Server 
    public static let `taskmaster2000Tcp`: Self = "_taskmaster2000._tcp"
    /// TaskMaster 2000 Server 
    public static let `taskmaster2000Udp`: Self = "_taskmaster2000._udp"
    /// IEC 60870-5-104 process control over IP [Walter_K_Eichelburg]
    public static let `iec104Tcp`: Self = "_iec-104._tcp"
    /// IEC 60870-5-104 process control over IP [Walter_K_Eichelburg]
    public static let `iec104Udp`: Self = "_iec-104._udp"
    /// TRC Netpoll [Bizhan_Ghavami]
    public static let `trcNetpollTcp`: Self = "_trc-netpoll._tcp"
    /// TRC Netpoll [Bizhan_Ghavami]
    public static let `trcNetpollUdp`: Self = "_trc-netpoll._udp"
    /// JediServer [Paul_McEntire]
    public static let `jediserverTcp`: Self = "_jediserver._tcp"
    /// JediServer [Paul_McEntire]
    public static let `jediserverUdp`: Self = "_jediserver._udp"
    /// Orion [Matthew_Horoschun]
    public static let `orionTcp`: Self = "_orion._tcp"
    /// Orion [Matthew_Horoschun]
    public static let `orionUdp`: Self = "_orion._udp"
    /// CloudFlare Railgun Web Acceleration Protocol [CloudFlare]
    public static let `railgunWebacclTcp`: Self = "_railgun-webaccl._tcp"
    /// SNS Protocol [Amir_Blich]
    public static let `snsProtocolTcp`: Self = "_sns-protocol._tcp"
    /// SNS Protocol [Amir_Blich]
    public static let `snsProtocolUdp`: Self = "_sns-protocol._udp"
    /// VRTS Registry [Pranay_Varma]
    public static let `vrtsRegistryTcp`: Self = "_vrts-registry._tcp"
    /// VRTS Registry [Pranay_Varma]
    public static let `vrtsRegistryUdp`: Self = "_vrts-registry._udp"
    /// Netwave AP Management [Johnny_Zweig]
    public static let `netwaveApMgmtTcp`: Self = "_netwave-ap-mgmt._tcp"
    /// Netwave AP Management [Johnny_Zweig]
    public static let `netwaveApMgmtUdp`: Self = "_netwave-ap-mgmt._udp"
    /// CDN [Alan_Noble]
    public static let `cdnTcp`: Self = "_cdn._tcp"
    /// CDN [Alan_Noble]
    public static let `cdnUdp`: Self = "_cdn._udp"
    /// orion-rmi-reg [J_S_Greenfield_2]
    public static let `orionRmiRegTcp`: Self = "_orion-rmi-reg._tcp"
    /// orion-rmi-reg [J_S_Greenfield_2]
    public static let `orionRmiRegUdp`: Self = "_orion-rmi-reg._udp"
    /// Beeyond [Bob_Deblier]
    public static let `beeyondTcp`: Self = "_beeyond._tcp"
    /// Beeyond [Bob_Deblier]
    public static let `beeyondUdp`: Self = "_beeyond._udp"
    /// Codima Remote Transaction Protocol [Sylvia_Ross]
    public static let `codimaRtpTcp`: Self = "_codima-rtp._tcp"
    /// Codima Remote Transaction Protocol [Sylvia_Ross]
    public static let `codimaRtpUdp`: Self = "_codima-rtp._udp"
    /// RMT Server [Yvon_Marineau]
    public static let `rmtserverTcp`: Self = "_rmtserver._tcp"
    /// RMT Server [Yvon_Marineau]
    public static let `rmtserverUdp`: Self = "_rmtserver._udp"
    /// Composit Server [Katsuaki_Naoi]
    public static let `compositServerTcp`: Self = "_composit-server._tcp"
    /// Composit Server [Katsuaki_Naoi]
    public static let `compositServerUdp`: Self = "_composit-server._udp"
    /// cas [Akiyoshi_Ochi]
    public static let `casTcp`: Self = "_cas._tcp"
    /// cas [Akiyoshi_Ochi]
    public static let `casUdp`: Self = "_cas._udp"
    /// Attachmate S2S [Chris_Rominski]
    public static let `attachmateS2sTcp`: Self = "_attachmate-s2s._tcp"
    /// Attachmate S2S [Chris_Rominski]
    public static let `attachmateS2sUdp`: Self = "_attachmate-s2s._udp"
    /// DSL Remote Management [Westell]
    public static let `dslremoteMgmtTcp`: Self = "_dslremote-mgmt._tcp"
    /// DSL Remote Management [Westell]
    public static let `dslremoteMgmtUdp`: Self = "_dslremote-mgmt._udp"
    /// G-Talk [Matt_Hammond]
    public static let `gTalkTcp`: Self = "_g-talk._tcp"
    /// G-Talk [Matt_Hammond]
    public static let `gTalkUdp`: Self = "_g-talk._udp"
    /// CRMSBITS [Rod_Ward]
    public static let `crmsbitsTcp`: Self = "_crmsbits._tcp"
    /// CRMSBITS [Rod_Ward]
    public static let `crmsbitsUdp`: Self = "_crmsbits._udp"
    /// RNRP [Per_Sahlqvist]
    public static let `rnrpTcp`: Self = "_rnrp._tcp"
    /// RNRP [Per_Sahlqvist]
    public static let `rnrpUdp`: Self = "_rnrp._udp"
    /// KOFAX-SVR [Steven_Kilby]
    public static let `kofaxSvrTcp`: Self = "_kofax-svr._tcp"
    /// KOFAX-SVR [Steven_Kilby]
    public static let `kofaxSvrUdp`: Self = "_kofax-svr._udp"
    /// Fujitsu App Manager [Hiroyuki_Kawabuchi]
    public static let `fjitsuappmgrTcp`: Self = "_fjitsuappmgr._tcp"
    /// Fujitsu App Manager [Hiroyuki_Kawabuchi]
    public static let `fjitsuappmgrUdp`: Self = "_fjitsuappmgr._udp"
    /// VeloCloud MultiPath Protocol [VeloCloud_Networks]
    public static let `vcmpTcp`: Self = "_vcmp._tcp"
    /// VeloCloud MultiPath Protocol [VeloCloud_Networks]
    public static let `vcmpUdp`: Self = "_vcmp._udp"
    /// Media Gateway Control Protocol Gateway [Christian_Huitema]
    public static let `mgcpGatewayTcp`: Self = "_mgcp-gateway._tcp"
    /// Media Gateway Control Protocol Gateway [Christian_Huitema]
    public static let `mgcpGatewayUdp`: Self = "_mgcp-gateway._udp"
    /// One Way Trip Time [Greg_Troxel]
    public static let `ottTcp`: Self = "_ott._tcp"
    /// One Way Trip Time [Greg_Troxel]
    public static let `ottUdp`: Self = "_ott._udp"
    /// FT-ROLE [Doug_Boone]
    public static let `ftRoleTcp`: Self = "_ft-role._tcp"
    /// FT-ROLE [Doug_Boone]
    public static let `ftRoleUdp`: Self = "_ft-role._udp"
    /// venus 
    public static let `venusTcp`: Self = "_venus._tcp"
    /// venus 
    public static let `venusUdp`: Self = "_venus._udp"
    /// venus-se 
    public static let `venusSeTcp`: Self = "_venus-se._tcp"
    /// venus-se 
    public static let `venusSeUdp`: Self = "_venus-se._udp"
    /// codasrv 
    public static let `codasrvTcp`: Self = "_codasrv._tcp"
    /// codasrv 
    public static let `codasrvUdp`: Self = "_codasrv._udp"
    /// codasrv-se [Robert_Watson]
    public static let `codasrvSeTcp`: Self = "_codasrv-se._tcp"
    /// codasrv-se [Robert_Watson]
    public static let `codasrvSeUdp`: Self = "_codasrv-se._udp"
    /// pxc-epmap [Jun_Nakamura]
    public static let `pxcEpmapTcp`: Self = "_pxc-epmap._tcp"
    /// pxc-epmap [Jun_Nakamura]
    public static let `pxcEpmapUdp`: Self = "_pxc-epmap._udp"
    /// OptiLogic [Clark_Williams]
    public static let `optilogicTcp`: Self = "_optilogic._tcp"
    /// OptiLogic [Clark_Williams]
    public static let `optilogicUdp`: Self = "_optilogic._udp"
    /// TOP/X [Dragos_Pop]
    public static let `topxTcp`: Self = "_topx._tcp"
    /// TOP/X [Dragos_Pop]
    public static let `topxUdp`: Self = "_topx._udp"
    /// UniControl [Ing_Markus_Huemer]
    public static let `unicontrolTcp`: Self = "_unicontrol._tcp"
    /// UniControl [Ing_Markus_Huemer]
    public static let `unicontrolUdp`: Self = "_unicontrol._udp"
    /// SybaseDBSynch [Dave_Neudoerffer]
    public static let `sybasedbsynchTcp`: Self = "_sybasedbsynch._tcp"
    /// SybaseDBSynch [Dave_Neudoerffer]
    public static let `sybasedbsynchUdp`: Self = "_sybasedbsynch._udp"
    /// Spearway Lockers [Pierre_Frisch]
    public static let `spearwayTcp`: Self = "_spearway._tcp"
    /// Spearway Lockers [Pierre_Frisch]
    public static let `spearwayUdp`: Self = "_spearway._udp"
    /// Pervasive I*net Data Server [Chuck_Talk]
    public static let `pvswInetTcp`: Self = "_pvsw-inet._tcp"
    /// Pervasive I*net Data Server [Chuck_Talk]
    public static let `pvswInetUdp`: Self = "_pvsw-inet._udp"
    /// Netangel [Ladislav_Baranyay]
    public static let `netangelTcp`: Self = "_netangel._tcp"
    /// Netangel [Ladislav_Baranyay]
    public static let `netangelUdp`: Self = "_netangel._udp"
    /// PowerClient Central Storage Facility [Brian_Klassen]
    public static let `powerclientcsfTcp`: Self = "_powerclientcsf._tcp"
    /// PowerClient Central Storage Facility [Brian_Klassen]
    public static let `powerclientcsfUdp`: Self = "_powerclientcsf._udp"
    /// BT PP2 Sectrans [Ian_Daniels]
    public static let `btpp2sectransTcp`: Self = "_btpp2sectrans._tcp"
    /// BT PP2 Sectrans [Ian_Daniels]
    public static let `btpp2sectransUdp`: Self = "_btpp2sectrans._udp"
    /// DTN1 [Bob_Gaddie]
    public static let `dtn1Tcp`: Self = "_dtn1._tcp"
    /// DTN1 [Bob_Gaddie]
    public static let `dtn1Udp`: Self = "_dtn1._udp"
    /// bues_service IANA assigned this well-formed service name as a replacement for "bues_service". [Leonhard_Diekmann]
    public static let `buesServiceTcp`: Self = "_bues-service._tcp"
    /// bues_service [Leonhard_Diekmann]
    public static let `bues_serviceTcp`: Self = "_bues_service._tcp"
    /// bues_service IANA assigned this well-formed service name as a replacement for "bues_service". [Leonhard_Diekmann]
    public static let `buesServiceUdp`: Self = "_bues-service._udp"
    /// bues_service [Leonhard_Diekmann]
    public static let `bues_serviceUdp`: Self = "_bues_service._udp"
    /// OpenView NNM daemon [Eric_Pulsipher_2]
    public static let `ovwdbTcp`: Self = "_ovwdb._tcp"
    /// OpenView NNM daemon [Eric_Pulsipher_2]
    public static let `ovwdbUdp`: Self = "_ovwdb._udp"
    /// hpppsvr [Bridgette_Landers]
    public static let `hpppssvrTcp`: Self = "_hpppssvr._tcp"
    /// hpppsvr [Bridgette_Landers]
    public static let `hpppssvrUdp`: Self = "_hpppssvr._udp"
    /// RATL [Paul_Greenfield]
    public static let `ratlTcp`: Self = "_ratl._tcp"
    /// RATL [Paul_Greenfield]
    public static let `ratlUdp`: Self = "_ratl._udp"
    /// netadmin 
    public static let `netadminTcp`: Self = "_netadmin._tcp"
    /// netadmin 
    public static let `netadminUdp`: Self = "_netadmin._udp"
    /// netchat [Julian_Mehnle]
    public static let `netchatTcp`: Self = "_netchat._tcp"
    /// netchat [Julian_Mehnle]
    public static let `netchatUdp`: Self = "_netchat._udp"
    /// SnifferClient [Amy_Weaver_2]
    public static let `snifferclientTcp`: Self = "_snifferclient._tcp"
    /// SnifferClient [Amy_Weaver_2]
    public static let `snifferclientUdp`: Self = "_snifferclient._udp"
    /// madge ltd [Mark_Lyall]
    public static let `madgeLtdTcp`: Self = "_madge-ltd._tcp"
    /// madge ltd [Mark_Lyall]
    public static let `madgeLtdUdp`: Self = "_madge-ltd._udp"
    /// IndX-DDS [Paul_Carmichael]
    public static let `indxDdsTcp`: Self = "_indx-dds._tcp"
    /// IndX-DDS [Paul_Carmichael]
    public static let `indxDdsUdp`: Self = "_indx-dds._udp"
    /// WAGO-IO-SYSTEM [Jorg_Hoffmann]
    public static let `wagoIoSystemTcp`: Self = "_wago-io-system._tcp"
    /// WAGO-IO-SYSTEM [Jorg_Hoffmann]
    public static let `wagoIoSystemUdp`: Self = "_wago-io-system._udp"
    /// altav-remmgt [Gary_M_Allen]
    public static let `altavRemmgtTcp`: Self = "_altav-remmgt._tcp"
    /// altav-remmgt [Gary_M_Allen]
    public static let `altavRemmgtUdp`: Self = "_altav-remmgt._udp"
    /// Rapido_IP [Man_Shuen_Cheung]
    public static let `rapidoIpTcp`: Self = "_rapido-ip._tcp"
    /// Rapido_IP [Man_Shuen_Cheung]
    public static let `rapidoIpUdp`: Self = "_rapido-ip._udp"
    /// griffin [Tom_Taylor]
    public static let `griffinTcp`: Self = "_griffin._tcp"
    /// griffin [Tom_Taylor]
    public static let `griffinUdp`: Self = "_griffin._udp"
    /// Community [David_Schwartz]
    public static let `xrplTcp`: Self = "_xrpl._tcp"
    /// Community [David_Schwartz]
    public static let `xrplUdp`: Self = "_xrpl._udp"
    /// ms-theater [Anton_Kucer]
    public static let `msTheaterTcp`: Self = "_ms-theater._tcp"
    /// ms-theater [Anton_Kucer]
    public static let `msTheaterUdp`: Self = "_ms-theater._udp"
    /// qadmifoper 
    public static let `qadmifoperTcp`: Self = "_qadmifoper._tcp"
    /// qadmifoper 
    public static let `qadmifoperUdp`: Self = "_qadmifoper._udp"
    /// qadmifevent [Pekka_Takaranta]
    public static let `qadmifeventTcp`: Self = "_qadmifevent._tcp"
    /// qadmifevent [Pekka_Takaranta]
    public static let `qadmifeventUdp`: Self = "_qadmifevent._udp"
    /// LSI RAID Management [NetApp]
    public static let `lsiRaidMgmtTcp`: Self = "_lsi-raid-mgmt._tcp"
    /// LSI RAID Management [NetApp]
    public static let `lsiRaidMgmtUdp`: Self = "_lsi-raid-mgmt._udp"
    /// DirecPC SI [Doug_Dillon]
    public static let `direcpcSiTcp`: Self = "_direcpc-si._tcp"
    /// DirecPC SI [Doug_Dillon]
    public static let `direcpcSiUdp`: Self = "_direcpc-si._udp"
    /// Load Balance Management 
    public static let `lbmTcp`: Self = "_lbm._tcp"
    /// Load Balance Management 
    public static let `lbmUdp`: Self = "_lbm._udp"
    /// Load Balance Forwarding [Kazuhiro_Koide]
    public static let `lbfTcp`: Self = "_lbf._tcp"
    /// Load Balance Forwarding [Kazuhiro_Koide]
    public static let `lbfUdp`: Self = "_lbf._udp"
    /// High Criteria [Konstantin_Iavid]
    public static let `highCriteriaTcp`: Self = "_high-criteria._tcp"
    /// High Criteria [Konstantin_Iavid]
    public static let `highCriteriaUdp`: Self = "_high-criteria._udp"
    /// qip_msgd [Mike_Morgan]
    public static let `qipMsgdTcp`: Self = "_qip-msgd._tcp"
    /// qip_msgd [Mike_Morgan]
    public static let `qipMsgdUdp`: Self = "_qip-msgd._udp"
    /// MTI-TCS-COMM [Mario_Bonin]
    public static let `mtiTcsCommTcp`: Self = "_mti-tcs-comm._tcp"
    /// MTI-TCS-COMM [Mario_Bonin]
    public static let `mtiTcsCommUdp`: Self = "_mti-tcs-comm._udp"
    /// taskman port [Boris_Panteleev]
    public static let `taskmanPortTcp`: Self = "_taskman-port._tcp"
    /// taskman port [Boris_Panteleev]
    public static let `taskmanPortUdp`: Self = "_taskman-port._udp"
    /// SeaODBC [Adrian_Hornby]
    public static let `seaodbcTcp`: Self = "_seaodbc._tcp"
    /// SeaODBC [Adrian_Hornby]
    public static let `seaodbcUdp`: Self = "_seaodbc._udp"
    /// C3 [Eckhard_Grieger]
    public static let `c3Tcp`: Self = "_c3._tcp"
    /// C3 [Eckhard_Grieger]
    public static let `c3Udp`: Self = "_c3._udp"
    /// Aker-cdp [Rodrigo_Ormonde]
    public static let `akerCdpTcp`: Self = "_aker-cdp._tcp"
    /// Aker-cdp [Rodrigo_Ormonde]
    public static let `akerCdpUdp`: Self = "_aker-cdp._udp"
    /// Vital Analysis [Srinivas_Reddy]
    public static let `vitalanalysisTcp`: Self = "_vitalanalysis._tcp"
    /// Vital Analysis [Srinivas_Reddy]
    public static let `vitalanalysisUdp`: Self = "_vitalanalysis._udp"
    /// ACE Server 
    public static let `aceServerTcp`: Self = "_ace-server._tcp"
    /// ACE Server 
    public static let `aceServerUdp`: Self = "_ace-server._udp"
    /// ACE Server Propagation 
    public static let `aceSvrPropTcp`: Self = "_ace-svr-prop._tcp"
    /// ACE Server Propagation 
    public static let `aceSvrPropUdp`: Self = "_ace-svr-prop._udp"
    /// SecurSight Certificate Valifation Service 
    public static let `ssmCvsTcp`: Self = "_ssm-cvs._tcp"
    /// SecurSight Certificate Valifation Service 
    public static let `ssmCvsUdp`: Self = "_ssm-cvs._udp"
    /// SecurSight Authentication Server (SSL) 
    public static let `ssmCsspsTcp`: Self = "_ssm-cssps._tcp"
    /// SecurSight Authentication Server (SSL) 
    public static let `ssmCsspsUdp`: Self = "_ssm-cssps._udp"
    /// SecurSight Event Logging Server (SSL) [John_Linn]
    public static let `ssmElsTcp`: Self = "_ssm-els._tcp"
    /// SecurSight Event Logging Server (SSL) [John_Linn]
    public static let `ssmElsUdp`: Self = "_ssm-els._udp"
    /// Informatica PowerExchange Listener [Informatica]
    public static let `powerexchangeTcp`: Self = "_powerexchange._tcp"
    /// Informatica PowerExchange Listener [Informatica]
    public static let `powerexchangeUdp`: Self = "_powerexchange._udp"
    /// Oracle GIOP 
    public static let `giopTcp`: Self = "_giop._tcp"
    /// Oracle GIOP 
    public static let `giopUdp`: Self = "_giop._udp"
    /// Oracle GIOP SSL 
    public static let `giopSslTcp`: Self = "_giop-ssl._tcp"
    /// Oracle GIOP SSL 
    public static let `giopSslUdp`: Self = "_giop-ssl._udp"
    /// Oracle TTC 
    public static let `ttcTcp`: Self = "_ttc._tcp"
    /// Oracle TTC 
    public static let `ttcUdp`: Self = "_ttc._udp"
    /// Oracle TTC SSL [Chandar_Venkataraman]
    public static let `ttcSslTcp`: Self = "_ttc-ssl._tcp"
    /// Oracle TTC SSL [Chandar_Venkataraman]
    public static let `ttcSslUdp`: Self = "_ttc-ssl._udp"
    /// Net Objects1 
    public static let `netobjects1Tcp`: Self = "_netobjects1._tcp"
    /// Net Objects1 
    public static let `netobjects1Udp`: Self = "_netobjects1._udp"
    /// Net Objects2 [Francois_Granade]
    public static let `netobjects2Tcp`: Self = "_netobjects2._tcp"
    /// Net Objects2 [Francois_Granade]
    public static let `netobjects2Udp`: Self = "_netobjects2._udp"
    /// Policy Notice Service [Akiyoshi_Ochi]
    public static let `pnsTcp`: Self = "_pns._tcp"
    /// Policy Notice Service [Akiyoshi_Ochi]
    public static let `pnsUdp`: Self = "_pns._udp"
    /// Moy Corporation [Gang_Gong_Moy]
    public static let `moyCorpTcp`: Self = "_moy-corp._tcp"
    /// Moy Corporation [Gang_Gong_Moy]
    public static let `moyCorpUdp`: Self = "_moy-corp._udp"
    /// TSILB [James_Irwin]
    public static let `tsilbTcp`: Self = "_tsilb._tcp"
    /// TSILB [James_Irwin]
    public static let `tsilbUdp`: Self = "_tsilb._udp"
    /// qip_qdhcp [Mike_Morgan]
    public static let `qipQdhcpTcp`: Self = "_qip-qdhcp._tcp"
    /// qip_qdhcp [Mike_Morgan]
    public static let `qipQdhcpUdp`: Self = "_qip-qdhcp._udp"
    /// Conclave CPP [Larry_Lipstone]
    public static let `conclaveCppTcp`: Self = "_conclave-cpp._tcp"
    /// Conclave CPP [Larry_Lipstone]
    public static let `conclaveCppUdp`: Self = "_conclave-cpp._udp"
    /// GROOVE [Ray_Ozzie]
    public static let `grooveTcp`: Self = "_groove._tcp"
    /// GROOVE [Ray_Ozzie]
    public static let `grooveUdp`: Self = "_groove._udp"
    /// Talarian MQS [Jim_Stabile]
    public static let `talarianMqsTcp`: Self = "_talarian-mqs._tcp"
    /// Talarian MQS [Jim_Stabile]
    public static let `talarianMqsUdp`: Self = "_talarian-mqs._udp"
    /// BMC AR [Portnoy_Boxman]
    public static let `bmcArTcp`: Self = "_bmc-ar._tcp"
    /// BMC AR [Portnoy_Boxman]
    public static let `bmcArUdp`: Self = "_bmc-ar._udp"
    /// Fast Remote Services [Scott_St_Clair]
    public static let `fastRemServTcp`: Self = "_fast-rem-serv._tcp"
    /// Fast Remote Services [Scott_St_Clair]
    public static let `fastRemServUdp`: Self = "_fast-rem-serv._udp"
    /// DIRGIS [Deutschland_Informat]
    public static let `dirgisTcp`: Self = "_dirgis._tcp"
    /// DIRGIS [Deutschland_Informat]
    public static let `dirgisUdp`: Self = "_dirgis._udp"
    /// Quad DB [Jeff_Rosenthal]
    public static let `quaddbTcp`: Self = "_quaddb._tcp"
    /// Quad DB [Jeff_Rosenthal]
    public static let `quaddbUdp`: Self = "_quaddb._udp"
    /// ODN-CasTraq [Richard_Hodges_2]
    public static let `odnCastraqTcp`: Self = "_odn-castraq._tcp"
    /// ODN-CasTraq [Richard_Hodges_2]
    public static let `odnCastraqUdp`: Self = "_odn-castraq._udp"
    /// Resource Tracking system server 
    public static let `rtsservTcp`: Self = "_rtsserv._tcp"
    /// Resource Tracking system server 
    public static let `rtsservUdp`: Self = "_rtsserv._udp"
    /// Resource Tracking system client [Aubrey_Turner]
    public static let `rtsclientTcp`: Self = "_rtsclient._tcp"
    /// Resource Tracking system client [Aubrey_Turner]
    public static let `rtsclientUdp`: Self = "_rtsclient._udp"
    /// Kentrox Protocol [Anil_Lakhwara]
    public static let `kentroxProtTcp`: Self = "_kentrox-prot._tcp"
    /// Kentrox Protocol [Anil_Lakhwara]
    public static let `kentroxProtUdp`: Self = "_kentrox-prot._udp"
    /// NMS-DPNSS [Jean_Christophe_Desi]
    public static let `nmsDpnssTcp`: Self = "_nms-dpnss._tcp"
    /// NMS-DPNSS [Jean_Christophe_Desi]
    public static let `nmsDpnssUdp`: Self = "_nms-dpnss._udp"
    /// WLBS [William_Bain]
    public static let `wlbsTcp`: Self = "_wlbs._tcp"
    /// WLBS [William_Bain]
    public static let `wlbsUdp`: Self = "_wlbs._udp"
    /// PowerPlay Control [Max_Magliaro]
    public static let `ppcontrolTcp`: Self = "_ppcontrol._tcp"
    /// PowerPlay Control [Max_Magliaro]
    public static let `ppcontrolUdp`: Self = "_ppcontrol._udp"
    /// jbroker [Rohit_Garg_2]
    public static let `jbrokerTcp`: Self = "_jbroker._tcp"
    /// jbroker [Rohit_Garg_2]
    public static let `jbrokerUdp`: Self = "_jbroker._udp"
    /// spock [Jon_A_Christopher]
    public static let `spockTcp`: Self = "_spock._tcp"
    /// spock [Jon_A_Christopher]
    public static let `spockUdp`: Self = "_spock._udp"
    /// JDataStore [Tod_Landis]
    public static let `jdatastoreTcp`: Self = "_jdatastore._tcp"
    /// JDataStore [Tod_Landis]
    public static let `jdatastoreUdp`: Self = "_jdatastore._udp"
    /// fjmpss [Makoto_Watanabe]
    public static let `fjmpssTcp`: Self = "_fjmpss._tcp"
    /// fjmpss [Makoto_Watanabe]
    public static let `fjmpssUdp`: Self = "_fjmpss._udp"
    /// fjappmgrbulk [Hiroyuki_Kawabuchi]
    public static let `fjappmgrbulkTcp`: Self = "_fjappmgrbulk._tcp"
    /// fjappmgrbulk [Hiroyuki_Kawabuchi]
    public static let `fjappmgrbulkUdp`: Self = "_fjappmgrbulk._udp"
    /// Metastorm [Eric_Isom]
    public static let `metastormTcp`: Self = "_metastorm._tcp"
    /// Metastorm [Eric_Isom]
    public static let `metastormUdp`: Self = "_metastorm._udp"
    /// Citrix IMA 
    public static let `citriximaTcp`: Self = "_citrixima._tcp"
    /// Citrix IMA 
    public static let `citriximaUdp`: Self = "_citrixima._udp"
    /// Citrix ADMIN [Myk_Willis]
    public static let `citrixadminTcp`: Self = "_citrixadmin._tcp"
    /// Citrix ADMIN [Myk_Willis]
    public static let `citrixadminUdp`: Self = "_citrixadmin._udp"
    /// Facsys NTP 
    public static let `facsysNtpTcp`: Self = "_facsys-ntp._tcp"
    /// Facsys NTP 
    public static let `facsysNtpUdp`: Self = "_facsys-ntp._udp"
    /// Facsys Router [Jeff_Hoffman]
    public static let `facsysRouterTcp`: Self = "_facsys-router._tcp"
    /// Facsys Router [Jeff_Hoffman]
    public static let `facsysRouterUdp`: Self = "_facsys-router._udp"
    /// Main Control [Nathan_Sadia]
    public static let `maincontrolTcp`: Self = "_maincontrol._tcp"
    /// Main Control [Nathan_Sadia]
    public static let `maincontrolUdp`: Self = "_maincontrol._udp"
    /// H.323 Annex E Call Control Signalling Transport [ITU-T]
    public static let `callSigTransTcp`: Self = "_call-sig-trans._tcp"
    /// H.323 Annex E Call Control Signalling Transport [ITU-T]
    public static let `callSigTransUdp`: Self = "_call-sig-trans._udp"
    /// Willy [Carl_Johan_Wik]
    public static let `willyTcp`: Self = "_willy._tcp"
    /// Willy [Carl_Johan_Wik]
    public static let `willyUdp`: Self = "_willy._udp"
    /// globmsgsvc [David_Wiltz]
    public static let `globmsgsvcTcp`: Self = "_globmsgsvc._tcp"
    /// globmsgsvc [David_Wiltz]
    public static let `globmsgsvcUdp`: Self = "_globmsgsvc._udp"
    /// Pervasive Listener [Chuck_Talk]
    public static let `pvswTcp`: Self = "_pvsw._tcp"
    /// Pervasive Listener [Chuck_Talk]
    public static let `pvswUdp`: Self = "_pvsw._udp"
    /// Adaptec Manager [Mark_Parenti]
    public static let `adaptecmgrTcp`: Self = "_adaptecmgr._tcp"
    /// Adaptec Manager [Mark_Parenti]
    public static let `adaptecmgrUdp`: Self = "_adaptecmgr._udp"
    /// WinDb [Larry_Traylor]
    public static let `windbTcp`: Self = "_windb._tcp"
    /// WinDb [Larry_Traylor]
    public static let `windbUdp`: Self = "_windb._udp"
    /// Qke LLC V.3 [Joerg_Niehoff]
    public static let `qkeLlcV3Tcp`: Self = "_qke-llc-v3._tcp"
    /// Qke LLC V.3 [Joerg_Niehoff]
    public static let `qkeLlcV3Udp`: Self = "_qke-llc-v3._udp"
    /// Optiwave License Management [Slawomir_Krzesinski]
    public static let `optiwaveLmTcp`: Self = "_optiwave-lm._tcp"
    /// Optiwave License Management [Slawomir_Krzesinski]
    public static let `optiwaveLmUdp`: Self = "_optiwave-lm._udp"
    /// MS V-Worlds [Pete_Wong]
    public static let `msVWorldsTcp`: Self = "_ms-v-worlds._tcp"
    /// MS V-Worlds [Pete_Wong]
    public static let `msVWorldsUdp`: Self = "_ms-v-worlds._udp"
    /// EMA License Manager [Thaddeus_Perala]
    public static let `emaSentLmTcp`: Self = "_ema-sent-lm._tcp"
    /// EMA License Manager [Thaddeus_Perala]
    public static let `emaSentLmUdp`: Self = "_ema-sent-lm._udp"
    /// IQ Server [Nick_Straguzzi]
    public static let `iqserverTcp`: Self = "_iqserver._tcp"
    /// IQ Server [Nick_Straguzzi]
    public static let `iqserverUdp`: Self = "_iqserver._udp"
    /// NCR CCL IANA assigned this well-formed service name as a replacement for "ncr_ccl". [Amitava_Dutta]
    public static let `ncrCclTcp`: Self = "_ncr-ccl._tcp"
    /// NCR CCL [Amitava_Dutta]
    public static let `ncr_cclTcp`: Self = "_ncr_ccl._tcp"
    /// NCR CCL IANA assigned this well-formed service name as a replacement for "ncr_ccl". [Amitava_Dutta]
    public static let `ncrCclUdp`: Self = "_ncr-ccl._udp"
    /// NCR CCL [Amitava_Dutta]
    public static let `ncr_cclUdp`: Self = "_ncr_ccl._udp"
    /// UTS FTP [David_Moore]
    public static let `utsftpTcp`: Self = "_utsftp._tcp"
    /// UTS FTP [David_Moore]
    public static let `utsftpUdp`: Self = "_utsftp._udp"
    /// VR Commerce [Yosi_Mass]
    public static let `vrcommerceTcp`: Self = "_vrcommerce._tcp"
    /// VR Commerce [Yosi_Mass]
    public static let `vrcommerceUdp`: Self = "_vrcommerce._udp"
    /// ITO-E GUI [Michael_Haeuptle]
    public static let `itoEGuiTcp`: Self = "_ito-e-gui._tcp"
    /// ITO-E GUI [Michael_Haeuptle]
    public static let `itoEGuiUdp`: Self = "_ito-e-gui._udp"
    /// OVTOPMD [Eric_Pulsipher]
    public static let `ovtopmdTcp`: Self = "_ovtopmd._tcp"
    /// OVTOPMD [Eric_Pulsipher]
    public static let `ovtopmdUdp`: Self = "_ovtopmd._udp"
    /// SnifferServer [Amy_Weaver_3]
    public static let `snifferserverTcp`: Self = "_snifferserver._tcp"
    /// SnifferServer [Amy_Weaver_3]
    public static let `snifferserverUdp`: Self = "_snifferserver._udp"
    /// Combox Web Access [Yochai_Cohen]
    public static let `comboxWebAccTcp`: Self = "_combox-web-acc._tcp"
    /// Combox Web Access [Yochai_Cohen]
    public static let `comboxWebAccUdp`: Self = "_combox-web-acc._udp"
    /// MADCAP [Stephen_Hanna_2]
    public static let `madcapTcp`: Self = "_madcap._tcp"
    /// MADCAP [Stephen_Hanna_2]
    public static let `madcapUdp`: Self = "_madcap._udp"
    /// btpp2audctr1 [Ian_Daniels]
    public static let `btpp2audctr1Tcp`: Self = "_btpp2audctr1._tcp"
    /// btpp2audctr1 [Ian_Daniels]
    public static let `btpp2audctr1Udp`: Self = "_btpp2audctr1._udp"
    /// Upgrade Protocol [Breck_Auten]
    public static let `upgradeTcp`: Self = "_upgrade._tcp"
    /// Upgrade Protocol [Breck_Auten]
    public static let `upgradeUdp`: Self = "_upgrade._udp"
    /// vnwk-prapi [John_Hasselkus]
    public static let `vnwkPrapiTcp`: Self = "_vnwk-prapi._tcp"
    /// vnwk-prapi [John_Hasselkus]
    public static let `vnwkPrapiUdp`: Self = "_vnwk-prapi._udp"
    /// VSI Admin [Rob_Juergens]
    public static let `vsiadminTcp`: Self = "_vsiadmin._tcp"
    /// VSI Admin [Rob_Juergens]
    public static let `vsiadminUdp`: Self = "_vsiadmin._udp"
    /// LonWorks 
    public static let `lonworksTcp`: Self = "_lonworks._tcp"
    /// LonWorks 
    public static let `lonworksUdp`: Self = "_lonworks._udp"
    /// LonWorks2 [Gary_Bartlett]
    public static let `lonworks2Tcp`: Self = "_lonworks2._tcp"
    /// LonWorks2 [Gary_Bartlett]
    public static let `lonworks2Udp`: Self = "_lonworks2._udp"
    /// uDraw(Graph) [Bremen]
    public static let `udrawgraphTcp`: Self = "_udrawgraph._tcp"
    /// uDraw(Graph) [Bremen]
    public static let `udrawgraphUdp`: Self = "_udrawgraph._udp"
    /// REFTEK [Phil_Davidson]
    public static let `reftekTcp`: Self = "_reftek._tcp"
    /// REFTEK [Phil_Davidson]
    public static let `reftekUdp`: Self = "_reftek._udp"
    /// Management Daemon Refresh [Ty_Ellis]
    public static let `novellZenTcp`: Self = "_novell-zen._tcp"
    /// Management Daemon Refresh [Ty_Ellis]
    public static let `novellZenUdp`: Self = "_novell-zen._udp"
    /// sis-emt [Bill_Crawford]
    public static let `sisEmtTcp`: Self = "_sis-emt._tcp"
    /// sis-emt [Bill_Crawford]
    public static let `sisEmtUdp`: Self = "_sis-emt._udp"
    /// vytalvaultbrtp 
    public static let `vytalvaultbrtpTcp`: Self = "_vytalvaultbrtp._tcp"
    /// vytalvaultbrtp 
    public static let `vytalvaultbrtpUdp`: Self = "_vytalvaultbrtp._udp"
    /// vytalvaultvsmp 
    public static let `vytalvaultvsmpTcp`: Self = "_vytalvaultvsmp._tcp"
    /// vytalvaultvsmp 
    public static let `vytalvaultvsmpUdp`: Self = "_vytalvaultvsmp._udp"
    /// vytalvaultpipe [Tim_Boldt]
    public static let `vytalvaultpipeTcp`: Self = "_vytalvaultpipe._tcp"
    /// vytalvaultpipe [Tim_Boldt]
    public static let `vytalvaultpipeUdp`: Self = "_vytalvaultpipe._udp"
    /// IPASS [Michael_Fischer]
    public static let `ipassTcp`: Self = "_ipass._tcp"
    /// IPASS [Michael_Fischer]
    public static let `ipassUdp`: Self = "_ipass._udp"
    /// ADS [Michael_O_Connor]
    public static let `adsTcp`: Self = "_ads._tcp"
    /// ADS [Michael_O_Connor]
    public static let `adsUdp`: Self = "_ads._udp"
    /// ISG UDA Server [Dror_Harari]
    public static let `isgUdaServerTcp`: Self = "_isg-uda-server._tcp"
    /// ISG UDA Server [Dror_Harari]
    public static let `isgUdaServerUdp`: Self = "_isg-uda-server._udp"
    /// Call Logging [Dean_Webb]
    public static let `callLoggingTcp`: Self = "_call-logging._tcp"
    /// Call Logging [Dean_Webb]
    public static let `callLoggingUdp`: Self = "_call-logging._udp"
    /// efidiningport [Lynn_Carter]
    public static let `efidiningportTcp`: Self = "_efidiningport._tcp"
    /// efidiningport [Lynn_Carter]
    public static let `efidiningportUdp`: Self = "_efidiningport._udp"
    /// VCnet-Link v10 [Csaba_Mate]
    public static let `vcnetLinkV10Tcp`: Self = "_vcnet-link-v10._tcp"
    /// VCnet-Link v10 [Csaba_Mate]
    public static let `vcnetLinkV10Udp`: Self = "_vcnet-link-v10._udp"
    /// Compaq WCP [Ferruccio_Barletta]
    public static let `compaqWcpTcp`: Self = "_compaq-wcp._tcp"
    /// Compaq WCP [Ferruccio_Barletta]
    public static let `compaqWcpUdp`: Self = "_compaq-wcp._udp"
    /// nicetec-nmsvc 
    public static let `nicetecNmsvcTcp`: Self = "_nicetec-nmsvc._tcp"
    /// nicetec-nmsvc 
    public static let `nicetecNmsvcUdp`: Self = "_nicetec-nmsvc._udp"
    /// nicetec-mgmt [Joerg_Paulus]
    public static let `nicetecMgmtTcp`: Self = "_nicetec-mgmt._tcp"
    /// nicetec-mgmt [Joerg_Paulus]
    public static let `nicetecMgmtUdp`: Self = "_nicetec-mgmt._udp"
    /// PCLE Multi Media [Jacob_Gsoedl]
    public static let `pclemultimediaTcp`: Self = "_pclemultimedia._tcp"
    /// PCLE Multi Media [Jacob_Gsoedl]
    public static let `pclemultimediaUdp`: Self = "_pclemultimedia._udp"
    /// LSTP [Waiki_Wright]
    public static let `lstpTcp`: Self = "_lstp._tcp"
    /// LSTP [Waiki_Wright]
    public static let `lstpUdp`: Self = "_lstp._udp"
    /// labrat [John_Harvey]
    public static let `labratTcp`: Self = "_labrat._tcp"
    /// labrat [John_Harvey]
    public static let `labratUdp`: Self = "_labrat._udp"
    /// MosaixCC [Steven_Frare]
    public static let `mosaixccTcp`: Self = "_mosaixcc._tcp"
    /// MosaixCC [Steven_Frare]
    public static let `mosaixccUdp`: Self = "_mosaixcc._udp"
    /// Delibo [NovaWiz_LTD]
    public static let `deliboTcp`: Self = "_delibo._tcp"
    /// Delibo [NovaWiz_LTD]
    public static let `deliboUdp`: Self = "_delibo._udp"
    /// CTI Redwood [Songwon_Chi]
    public static let `ctiRedwoodTcp`: Self = "_cti-redwood._tcp"
    /// CTI Redwood [Songwon_Chi]
    public static let `ctiRedwoodUdp`: Self = "_cti-redwood._udp"
    /// HP 3000 NS/VT block mode telnet 
    public static let `hp3000TelnetTcp`: Self = "_hp-3000-telnet._tcp"
    /// HP 3000 NS/VT block mode telnet 
    public static let `hp3000TelnetUdp`: Self = "_hp-3000-telnet._udp"
    /// Coordinator Server [Richard_Steiger]
    public static let `coordSvrTcp`: Self = "_coord-svr._tcp"
    /// Coordinator Server [Richard_Steiger]
    public static let `coordSvrUdp`: Self = "_coord-svr._udp"
    /// pcs-pcw [W_Jordan_Fitzhugh]
    public static let `pcsPcwTcp`: Self = "_pcs-pcw._tcp"
    /// pcs-pcw [W_Jordan_Fitzhugh]
    public static let `pcsPcwUdp`: Self = "_pcs-pcw._udp"
    /// Cisco Line Protocol [Susan_Hinrichs]
    public static let `clpTcp`: Self = "_clp._tcp"
    /// Cisco Line Protocol [Susan_Hinrichs]
    public static let `clpUdp`: Self = "_clp._udp"
    /// SPAM TRAP [Charles_Bennett]
    public static let `spamtrapTcp`: Self = "_spamtrap._tcp"
    /// SPAM TRAP [Charles_Bennett]
    public static let `spamtrapUdp`: Self = "_spamtrap._udp"
    /// Sonus Call Signal [Mark_Garti]
    public static let `sonuscallsigTcp`: Self = "_sonuscallsig._tcp"
    /// Sonus Call Signal [Mark_Garti]
    public static let `sonuscallsigUdp`: Self = "_sonuscallsig._udp"
    /// HS Port [Uri_Doron]
    public static let `hsPortTcp`: Self = "_hs-port._tcp"
    /// HS Port [Uri_Doron]
    public static let `hsPortUdp`: Self = "_hs-port._udp"
    /// CECSVC [Roger_Pao]
    public static let `cecsvcTcp`: Self = "_cecsvc._tcp"
    /// CECSVC [Roger_Pao]
    public static let `cecsvcUdp`: Self = "_cecsvc._udp"
    /// IBP [Jonathan_Downes]
    public static let `ibpTcp`: Self = "_ibp._tcp"
    /// IBP [Jonathan_Downes]
    public static let `ibpUdp`: Self = "_ibp._udp"
    /// Trust Establish [Yosi_Mass]
    public static let `trustestablishTcp`: Self = "_trustestablish._tcp"
    /// Trust Establish [Yosi_Mass]
    public static let `trustestablishUdp`: Self = "_trustestablish._udp"
    /// Blockade BPSP [Blockade]
    public static let `blockadeBpspTcp`: Self = "_blockade-bpsp._tcp"
    /// Blockade BPSP [Blockade]
    public static let `blockadeBpspUdp`: Self = "_blockade-bpsp._udp"
    /// HL7 [Tim_Jacobs]
    public static let `hl7Tcp`: Self = "_hl7._tcp"
    /// HL7 [Tim_Jacobs]
    public static let `hl7Udp`: Self = "_hl7._udp"
    /// TCL Pro Debugger 
    public static let `tclprodebuggerTcp`: Self = "_tclprodebugger._tcp"
    /// TCL Pro Debugger 
    public static let `tclprodebuggerUdp`: Self = "_tclprodebugger._udp"
    /// Scriptics Lsrvr [Brent_Welch]
    public static let `scipticslsrvrTcp`: Self = "_scipticslsrvr._tcp"
    /// Scriptics Lsrvr [Brent_Welch]
    public static let `scipticslsrvrUdp`: Self = "_scipticslsrvr._udp"
    /// RVS ISDN DCP [Michael_Zirpel]
    public static let `rvsIsdnDcpTcp`: Self = "_rvs-isdn-dcp._tcp"
    /// RVS ISDN DCP [Michael_Zirpel]
    public static let `rvsIsdnDcpUdp`: Self = "_rvs-isdn-dcp._udp"
    /// mpfoncl [Itaru_Kimura]
    public static let `mpfonclTcp`: Self = "_mpfoncl._tcp"
    /// mpfoncl [Itaru_Kimura]
    public static let `mpfonclUdp`: Self = "_mpfoncl._udp"
    /// Tributary [Louis_Lu]
    public static let `tributaryTcp`: Self = "_tributary._tcp"
    /// Tributary [Louis_Lu]
    public static let `tributaryUdp`: Self = "_tributary._udp"
    /// ARGIS TE 
    public static let `argisTeTcp`: Self = "_argis-te._tcp"
    /// ARGIS TE 
    public static let `argisTeUdp`: Self = "_argis-te._udp"
    /// ARGIS DS [John_Legh_Page]
    public static let `argisDsTcp`: Self = "_argis-ds._tcp"
    /// ARGIS DS [John_Legh_Page]
    public static let `argisDsUdp`: Self = "_argis-ds._udp"
    /// MON [Jim_Trocki]
    public static let `monTcp`: Self = "_mon._tcp"
    /// MON [Jim_Trocki]
    public static let `monUdp`: Self = "_mon._udp"
    /// cyaserv [Morgan_Jones]
    public static let `cyaservTcp`: Self = "_cyaserv._tcp"
    /// cyaserv [Morgan_Jones]
    public static let `cyaservUdp`: Self = "_cyaserv._udp"
    /// NETX Server 
    public static let `netxServerTcp`: Self = "_netx-server._tcp"
    /// NETX Server 
    public static let `netxServerUdp`: Self = "_netx-server._udp"
    /// NETX Agent [Brett_Dolecheck]
    public static let `netxAgentTcp`: Self = "_netx-agent._tcp"
    /// NETX Agent [Brett_Dolecheck]
    public static let `netxAgentUdp`: Self = "_netx-agent._udp"
    /// MASC [Pavlin_Ivanov_Radosl]
    public static let `mascTcp`: Self = "_masc._tcp"
    /// MASC [Pavlin_Ivanov_Radosl]
    public static let `mascUdp`: Self = "_masc._udp"
    /// Privilege [Gil_Hecht]
    public static let `privilegeTcp`: Self = "_privilege._tcp"
    /// Privilege [Gil_Hecht]
    public static let `privilegeUdp`: Self = "_privilege._udp"
    /// quartus tcl [Subroto_Datta]
    public static let `quartusTclTcp`: Self = "_quartus-tcl._tcp"
    /// quartus tcl [Subroto_Datta]
    public static let `quartusTclUdp`: Self = "_quartus-tcl._udp"
    /// idotdist [Jason_Hunter]
    public static let `idotdistTcp`: Self = "_idotdist._tcp"
    /// idotdist [Jason_Hunter]
    public static let `idotdistUdp`: Self = "_idotdist._udp"
    /// Maytag Shuffle [Ken_Ksiazek]
    public static let `maytagshuffleTcp`: Self = "_maytagshuffle._tcp"
    /// Maytag Shuffle [Ken_Ksiazek]
    public static let `maytagshuffleUdp`: Self = "_maytagshuffle._udp"
    /// netrek [Al_Guetzlaff]
    public static let `netrekTcp`: Self = "_netrek._tcp"
    /// netrek [Al_Guetzlaff]
    public static let `netrekUdp`: Self = "_netrek._udp"
    /// MNS Mail Notice Service [Rumiko_Kikuta]
    public static let `mnsMailTcp`: Self = "_mns-mail._tcp"
    /// MNS Mail Notice Service [Rumiko_Kikuta]
    public static let `mnsMailUdp`: Self = "_mns-mail._udp"
    /// Data Base Server [Andreas_Roene]
    public static let `dtsTcp`: Self = "_dts._tcp"
    /// Data Base Server [Andreas_Roene]
    public static let `dtsUdp`: Self = "_dts._udp"
    /// World Fusion 1 
    public static let `worldfusion1Tcp`: Self = "_worldfusion1._tcp"
    /// World Fusion 1 
    public static let `worldfusion1Udp`: Self = "_worldfusion1._udp"
    /// World Fusion 2 [World_Fusion]
    public static let `worldfusion2Tcp`: Self = "_worldfusion2._tcp"
    /// World Fusion 2 [World_Fusion]
    public static let `worldfusion2Udp`: Self = "_worldfusion2._udp"
    /// Homestead Glory [John_Tokash]
    public static let `homesteadgloryTcp`: Self = "_homesteadglory._tcp"
    /// Homestead Glory [John_Tokash]
    public static let `homesteadgloryUdp`: Self = "_homesteadglory._udp"
    /// Citrix MA Client [Myk_Willis]
    public static let `citriximaclientTcp`: Self = "_citriximaclient._tcp"
    /// Citrix MA Client [Myk_Willis]
    public static let `citriximaclientUdp`: Self = "_citriximaclient._udp"
    /// Snap Discovery [Kevin_Osborn]
    public static let `snapdTcp`: Self = "_snapd._tcp"
    /// Snap Discovery [Kevin_Osborn]
    public static let `snapdUdp`: Self = "_snapd._udp"
    /// HPSTGMGR [Kevin_Collins]
    public static let `hpstgmgrTcp`: Self = "_hpstgmgr._tcp"
    /// HPSTGMGR [Kevin_Collins]
    public static let `hpstgmgrUdp`: Self = "_hpstgmgr._udp"
    /// discp client 
    public static let `discpClientTcp`: Self = "_discp-client._tcp"
    /// discp client 
    public static let `discpClientUdp`: Self = "_discp-client._udp"
    /// discp server [Peter_White]
    public static let `discpServerTcp`: Self = "_discp-server._tcp"
    /// discp server [Peter_White]
    public static let `discpServerUdp`: Self = "_discp-server._udp"
    /// Service Meter [Duncan_Hare]
    public static let `servicemeterTcp`: Self = "_servicemeter._tcp"
    /// Service Meter [Duncan_Hare]
    public static let `servicemeterUdp`: Self = "_servicemeter._udp"
    /// NSC CCS 
    public static let `nscCcsTcp`: Self = "_nsc-ccs._tcp"
    /// NSC CCS 
    public static let `nscCcsUdp`: Self = "_nsc-ccs._udp"
    /// NSC POSA [Tom_Findley]
    public static let `nscPosaTcp`: Self = "_nsc-posa._tcp"
    /// NSC POSA [Tom_Findley]
    public static let `nscPosaUdp`: Self = "_nsc-posa._udp"
    /// Dell Netmon 
    public static let `netmonTcp`: Self = "_netmon._tcp"
    /// Dell Netmon 
    public static let `netmonUdp`: Self = "_netmon._udp"
    /// Dell Connection [Sudhir_Shetty]
    public static let `connectionTcp`: Self = "_connection._tcp"
    /// Dell Connection [Sudhir_Shetty]
    public static let `connectionUdp`: Self = "_connection._udp"
    /// Wag Service [Gilles_Bourquard]
    public static let `wagServiceTcp`: Self = "_wag-service._tcp"
    /// Wag Service [Gilles_Bourquard]
    public static let `wagServiceUdp`: Self = "_wag-service._udp"
    /// System Monitor [Greg_Robson_Garth]
    public static let `systemMonitorTcp`: Self = "_system-monitor._tcp"
    /// System Monitor [Greg_Robson_Garth]
    public static let `systemMonitorUdp`: Self = "_system-monitor._udp"
    /// VersaTek [James_Kou]
    public static let `versaTekTcp`: Self = "_versa-tek._tcp"
    /// VersaTek [James_Kou]
    public static let `versaTekUdp`: Self = "_versa-tek._udp"
    /// LIONHEAD [Tim_Rance]
    public static let `lionheadTcp`: Self = "_lionhead._tcp"
    /// LIONHEAD [Tim_Rance]
    public static let `lionheadUdp`: Self = "_lionhead._udp"
    /// Qpasa Agent [Craig_Ching]
    public static let `qpasaAgentTcp`: Self = "_qpasa-agent._tcp"
    /// Qpasa Agent [Craig_Ching]
    public static let `qpasaAgentUdp`: Self = "_qpasa-agent._udp"
    /// SMNTUBootstrap [Matt_Cecile]
    public static let `smntubootstrapTcp`: Self = "_smntubootstrap._tcp"
    /// SMNTUBootstrap [Matt_Cecile]
    public static let `smntubootstrapUdp`: Self = "_smntubootstrap._udp"
    /// Never Offline [Dustin_Brand]
    public static let `neverofflineTcp`: Self = "_neveroffline._tcp"
    /// Never Offline [Dustin_Brand]
    public static let `neverofflineUdp`: Self = "_neveroffline._udp"
    /// firepower [Jason_Volk]
    public static let `firepowerTcp`: Self = "_firepower._tcp"
    /// firepower [Jason_Volk]
    public static let `firepowerUdp`: Self = "_firepower._udp"
    /// appswitch-emp [Ted_Ross]
    public static let `appswitchEmpTcp`: Self = "_appswitch-emp._tcp"
    /// appswitch-emp [Ted_Ross]
    public static let `appswitchEmpUdp`: Self = "_appswitch-emp._udp"
    /// Clinical Context Managers [Mark_Morwood]
    public static let `cmadminTcp`: Self = "_cmadmin._tcp"
    /// Clinical Context Managers [Mark_Morwood]
    public static let `cmadminUdp`: Self = "_cmadmin._udp"
    /// Priority E-Com [Marcelo_Einhorn_2]
    public static let `priorityEComTcp`: Self = "_priority-e-com._tcp"
    /// Priority E-Com [Marcelo_Einhorn_2]
    public static let `priorityEComUdp`: Self = "_priority-e-com._udp"
    /// bruce [Alec_Muffett]
    public static let `bruceTcp`: Self = "_bruce._tcp"
    /// bruce [Alec_Muffett]
    public static let `bruceUdp`: Self = "_bruce._udp"
    /// LPSRecommender [Pritham_Shetty_2]
    public static let `lpsrecommenderTcp`: Self = "_lpsrecommender._tcp"
    /// LPSRecommender [Pritham_Shetty_2]
    public static let `lpsrecommenderUdp`: Self = "_lpsrecommender._udp"
    /// Miles Apart Jukebox Server [Michael_Rathmann]
    public static let `milesApartTcp`: Self = "_miles-apart._tcp"
    /// Miles Apart Jukebox Server [Michael_Rathmann]
    public static let `milesApartUdp`: Self = "_miles-apart._udp"
    /// MetricaDBC [Russ_Olivant]
    public static let `metricadbcTcp`: Self = "_metricadbc._tcp"
    /// MetricaDBC [Russ_Olivant]
    public static let `metricadbcUdp`: Self = "_metricadbc._udp"
    /// LMDP [Ken_Bailey]
    public static let `lmdpTcp`: Self = "_lmdp._tcp"
    /// LMDP [Ken_Bailey]
    public static let `lmdpUdp`: Self = "_lmdp._udp"
    /// Aria [Logan_Bruns]
    public static let `ariaTcp`: Self = "_aria._tcp"
    /// Aria [Logan_Bruns]
    public static let `ariaUdp`: Self = "_aria._udp"
    /// Blwnkl Port [Weng_Chin_Yung]
    public static let `blwnklPortTcp`: Self = "_blwnkl-port._tcp"
    /// Blwnkl Port [Weng_Chin_Yung]
    public static let `blwnklPortUdp`: Self = "_blwnkl-port._udp"
    /// gbjd816 [George_Balesta]
    public static let `gbjd816Tcp`: Self = "_gbjd816._tcp"
    /// gbjd816 [George_Balesta]
    public static let `gbjd816Udp`: Self = "_gbjd816._udp"
    /// Moshe Beeri [Moshe_Beeri]
    public static let `moshebeeriTcp`: Self = "_moshebeeri._tcp"
    /// Moshe Beeri [Moshe_Beeri]
    public static let `moshebeeriUdp`: Self = "_moshebeeri._udp"
    /// DICT [Rik_Faith]
    public static let `dictTcp`: Self = "_dict._tcp"
    /// DICT [Rik_Faith]
    public static let `dictUdp`: Self = "_dict._udp"
    /// Sitara Server 
    public static let `sitaraserverTcp`: Self = "_sitaraserver._tcp"
    /// Sitara Server 
    public static let `sitaraserverUdp`: Self = "_sitaraserver._udp"
    /// Sitara Management 
    public static let `sitaramgmtTcp`: Self = "_sitaramgmt._tcp"
    /// Sitara Management 
    public static let `sitaramgmtUdp`: Self = "_sitaramgmt._udp"
    /// Sitara Dir [Manickam_R_Sridhar]
    public static let `sitaradirTcp`: Self = "_sitaradir._tcp"
    /// Sitara Dir [Manickam_R_Sridhar]
    public static let `sitaradirUdp`: Self = "_sitaradir._udp"
    /// IRdg Post [IRdg]
    public static let `irdgPostTcp`: Self = "_irdg-post._tcp"
    /// IRdg Post [IRdg]
    public static let `irdgPostUdp`: Self = "_irdg-post._udp"
    /// InterIntelli [Mike_Gagle]
    public static let `interintelliTcp`: Self = "_interintelli._tcp"
    /// InterIntelli [Mike_Gagle]
    public static let `interintelliUdp`: Self = "_interintelli._udp"
    /// PK Electronics [Seb_Ibis]
    public static let `pkElectronicsTcp`: Self = "_pk-electronics._tcp"
    /// PK Electronics [Seb_Ibis]
    public static let `pkElectronicsUdp`: Self = "_pk-electronics._udp"
    /// Back Burner [Kevin_Teiskoetter]
    public static let `backburnerTcp`: Self = "_backburner._tcp"
    /// Back Burner [Kevin_Teiskoetter]
    public static let `backburnerUdp`: Self = "_backburner._udp"
    /// Solve [Peter_Morrison]
    public static let `solveTcp`: Self = "_solve._tcp"
    /// Solve [Peter_Morrison]
    public static let `solveUdp`: Self = "_solve._udp"
    /// Import Document Service [Zia_Bhatti]
    public static let `imdocsvcTcp`: Self = "_imdocsvc._tcp"
    /// Import Document Service [Zia_Bhatti]
    public static let `imdocsvcUdp`: Self = "_imdocsvc._udp"
    /// Sybase Anywhere [SAP]
    public static let `sybaseanywhereTcp`: Self = "_sybaseanywhere._tcp"
    /// Sybase Anywhere [SAP]
    public static let `sybaseanywhereUdp`: Self = "_sybaseanywhere._udp"
    /// AMInet [Alcorn_McBride_Inc]
    public static let `aminetTcp`: Self = "_aminet._tcp"
    /// AMInet [Alcorn_McBride_Inc]
    public static let `aminetUdp`: Self = "_aminet._udp"
    /// Alcorn McBride Inc protocol used for device control [Alcorn_McBride_Inc]
    public static let `amiControlTcp`: Self = "_ami-control._tcp"
    /// Alcorn McBride Inc protocol used for device control [Alcorn_McBride_Inc]
    public static let `amiControlUdp`: Self = "_ami-control._udp"
    /// HDL Server [David_Ely]
    public static let `hdlSrvTcp`: Self = "_hdl-srv._tcp"
    /// HDL Server [David_Ely]
    public static let `hdlSrvUdp`: Self = "_hdl-srv._udp"
    /// Tragic [Stu_Mark]
    public static let `tragicTcp`: Self = "_tragic._tcp"
    /// Tragic [Stu_Mark]
    public static let `tragicUdp`: Self = "_tragic._udp"
    /// GTE-SAMP [Asher_Altman]
    public static let `gteSampTcp`: Self = "_gte-samp._tcp"
    /// GTE-SAMP [Asher_Altman]
    public static let `gteSampUdp`: Self = "_gte-samp._udp"
    /// Travsoft IPX Tunnel [Jack_Wilson]
    public static let `travsoftIpxTTcp`: Self = "_travsoft-ipx-t._tcp"
    /// Travsoft IPX Tunnel [Jack_Wilson]
    public static let `travsoftIpxTUdp`: Self = "_travsoft-ipx-t._udp"
    /// Novell IPX CMD [Juan_Carlos_Luciani]
    public static let `novellIpxCmdTcp`: Self = "_novell-ipx-cmd._tcp"
    /// Novell IPX CMD [Juan_Carlos_Luciani]
    public static let `novellIpxCmdUdp`: Self = "_novell-ipx-cmd._udp"
    /// AND License Manager [Dick_van_der_Sijs]
    public static let `andLmTcp`: Self = "_and-lm._tcp"
    /// AND License Manager [Dick_van_der_Sijs]
    public static let `andLmUdp`: Self = "_and-lm._udp"
    /// SyncServer [Shawn_Casey]
    public static let `syncserverTcp`: Self = "_syncserver._tcp"
    /// SyncServer [Shawn_Casey]
    public static let `syncserverUdp`: Self = "_syncserver._udp"
    /// Upsnotifyprot [Mario_Leboute]
    public static let `upsnotifyprotTcp`: Self = "_upsnotifyprot._tcp"
    /// Upsnotifyprot [Mario_Leboute]
    public static let `upsnotifyprotUdp`: Self = "_upsnotifyprot._udp"
    /// VPSIPPORT [Joon_Radley]
    public static let `vpsipportTcp`: Self = "_vpsipport._tcp"
    /// VPSIPPORT [Joon_Radley]
    public static let `vpsipportUdp`: Self = "_vpsipport._udp"
    /// eristwoguns [Jason_Lockett][Melanie_Kacerek]
    public static let `eristwogunsTcp`: Self = "_eristwoguns._tcp"
    /// eristwoguns [Jason_Lockett][Melanie_Kacerek]
    public static let `eristwogunsUdp`: Self = "_eristwoguns._udp"
    /// EBInSite [Lefteris_Kalamaras]
    public static let `ebinsiteTcp`: Self = "_ebinsite._tcp"
    /// EBInSite [Lefteris_Kalamaras]
    public static let `ebinsiteUdp`: Self = "_ebinsite._udp"
    /// InterPathPanel [Stephen_Misel]
    public static let `interpathpanelTcp`: Self = "_interpathpanel._tcp"
    /// InterPathPanel [Stephen_Misel]
    public static let `interpathpanelUdp`: Self = "_interpathpanel._udp"
    /// Sonus [Mark_Garti]
    public static let `sonusTcp`: Self = "_sonus._tcp"
    /// Sonus [Mark_Garti]
    public static let `sonusUdp`: Self = "_sonus._udp"
    /// Corel VNC Admin IANA assigned this well-formed service name as a replacement for "corel_vncadmin". [Oleg_Noskov]
    public static let `corelVncadminTcp`: Self = "_corel-vncadmin._tcp"
    /// Corel VNC Admin [Oleg_Noskov]
    public static let `corel_vncadminTcp`: Self = "_corel_vncadmin._tcp"
    /// Corel VNC Admin IANA assigned this well-formed service name as a replacement for "corel_vncadmin". [Oleg_Noskov]
    public static let `corelVncadminUdp`: Self = "_corel-vncadmin._udp"
    /// Corel VNC Admin [Oleg_Noskov]
    public static let `corel_vncadminUdp`: Self = "_corel_vncadmin._udp"
    /// UNIX Nt Glue [Peter_Santoro]
    public static let `unglueTcp`: Self = "_unglue._tcp"
    /// UNIX Nt Glue [Peter_Santoro]
    public static let `unglueUdp`: Self = "_unglue._udp"
    /// Kana [Colin_Goldstein]
    public static let `kanaTcp`: Self = "_kana._tcp"
    /// Kana [Colin_Goldstein]
    public static let `kanaUdp`: Self = "_kana._udp"
    /// SNS Dispatcher 
    public static let `snsDispatcherTcp`: Self = "_sns-dispatcher._tcp"
    /// SNS Dispatcher 
    public static let `snsDispatcherUdp`: Self = "_sns-dispatcher._udp"
    /// SNS Admin 
    public static let `snsAdminTcp`: Self = "_sns-admin._tcp"
    /// SNS Admin 
    public static let `snsAdminUdp`: Self = "_sns-admin._udp"
    /// SNS Query [Mary_Holstege]
    public static let `snsQueryTcp`: Self = "_sns-query._tcp"
    /// SNS Query [Mary_Holstege]
    public static let `snsQueryUdp`: Self = "_sns-query._udp"
    /// GC Monitor [Gustavo_Rodriguez_Ri]
    public static let `gcmonitorTcp`: Self = "_gcmonitor._tcp"
    /// GC Monitor [Gustavo_Rodriguez_Ri]
    public static let `gcmonitorUdp`: Self = "_gcmonitor._udp"
    /// OLHOST [Robert_Ripberger]
    public static let `olhostTcp`: Self = "_olhost._tcp"
    /// OLHOST [Robert_Ripberger]
    public static let `olhostUdp`: Self = "_olhost._udp"
    /// BinTec-CAPI 
    public static let `bintecCapiTcp`: Self = "_bintec-capi._tcp"
    /// BinTec-CAPI 
    public static let `bintecCapiUdp`: Self = "_bintec-capi._udp"
    /// BinTec-TAPI 
    public static let `bintecTapiTcp`: Self = "_bintec-tapi._tcp"
    /// BinTec-TAPI 
    public static let `bintecTapiUdp`: Self = "_bintec-tapi._udp"
    /// Patrol for MQ GM 
    public static let `patrolMqGmTcp`: Self = "_patrol-mq-gm._tcp"
    /// Patrol for MQ GM 
    public static let `patrolMqGmUdp`: Self = "_patrol-mq-gm._udp"
    /// Patrol for MQ NM [Portnoy_Boxman]
    public static let `patrolMqNmTcp`: Self = "_patrol-mq-nm._tcp"
    /// Patrol for MQ NM [Portnoy_Boxman]
    public static let `patrolMqNmUdp`: Self = "_patrol-mq-nm._udp"
    /// extensis [Milton_Sagen]
    public static let `extensisTcp`: Self = "_extensis._tcp"
    /// extensis [Milton_Sagen]
    public static let `extensisUdp`: Self = "_extensis._udp"
    /// Alarm Clock Server 
    public static let `alarmClockSTcp`: Self = "_alarm-clock-s._tcp"
    /// Alarm Clock Server 
    public static let `alarmClockSUdp`: Self = "_alarm-clock-s._udp"
    /// Alarm Clock Client 
    public static let `alarmClockCTcp`: Self = "_alarm-clock-c._tcp"
    /// Alarm Clock Client 
    public static let `alarmClockCUdp`: Self = "_alarm-clock-c._udp"
    /// TOAD [Michael_Marking]
    public static let `toadTcp`: Self = "_toad._tcp"
    /// TOAD [Michael_Marking]
    public static let `toadUdp`: Self = "_toad._udp"
    /// TVE Announce [Dean_Blackketter]
    public static let `tveAnnounceTcp`: Self = "_tve-announce._tcp"
    /// TVE Announce [Dean_Blackketter]
    public static let `tveAnnounceUdp`: Self = "_tve-announce._udp"
    /// newlixreg [Jean_Serge_Gagnon_2]
    public static let `newlixregTcp`: Self = "_newlixreg._tcp"
    /// newlixreg [Jean_Serge_Gagnon_2]
    public static let `newlixregUdp`: Self = "_newlixreg._udp"
    /// nhserver [Adrian_Hornby]
    public static let `nhserverTcp`: Self = "_nhserver._tcp"
    /// nhserver [Adrian_Hornby]
    public static let `nhserverUdp`: Self = "_nhserver._udp"
    /// First Call 42 [Luke_Bowen]
    public static let `firstcall42Tcp`: Self = "_firstcall42._tcp"
    /// First Call 42 [Luke_Bowen]
    public static let `firstcall42Udp`: Self = "_firstcall42._udp"
    /// ewnn [Yasunari_Yamashita]
    public static let `ewnnTcp`: Self = "_ewnn._tcp"
    /// ewnn [Yasunari_Yamashita]
    public static let `ewnnUdp`: Self = "_ewnn._udp"
    /// TTC ETAP [Daniel_Becker]
    public static let `ttcEtapTcp`: Self = "_ttc-etap._tcp"
    /// TTC ETAP [Daniel_Becker]
    public static let `ttcEtapUdp`: Self = "_ttc-etap._udp"
    /// SIMSLink [Steve_Ryckman]
    public static let `simslinkTcp`: Self = "_simslink._tcp"
    /// SIMSLink [Steve_Ryckman]
    public static let `simslinkUdp`: Self = "_simslink._udp"
    /// Gadget Gate 1 Way 
    public static let `gadgetgate1wayTcp`: Self = "_gadgetgate1way._tcp"
    /// Gadget Gate 1 Way 
    public static let `gadgetgate1wayUdp`: Self = "_gadgetgate1way._udp"
    /// Gadget Gate 2 Way [Matt_Rollins]
    public static let `gadgetgate2wayTcp`: Self = "_gadgetgate2way._tcp"
    /// Gadget Gate 2 Way [Matt_Rollins]
    public static let `gadgetgate2wayUdp`: Self = "_gadgetgate2way._udp"
    /// Sync Server SSL [Shawn_Casey]
    public static let `syncserversslTcp`: Self = "_syncserverssl._tcp"
    /// Sync Server SSL [Shawn_Casey]
    public static let `syncserversslUdp`: Self = "_syncserverssl._udp"
    /// pxc-sapxom [Hideki_Kiriyama]
    public static let `pxcSapxomTcp`: Self = "_pxc-sapxom._tcp"
    /// pxc-sapxom [Hideki_Kiriyama]
    public static let `pxcSapxomUdp`: Self = "_pxc-sapxom._udp"
    /// mpnjsomb [Takenori_Miyahara]
    public static let `mpnjsombTcp`: Self = "_mpnjsomb._tcp"
    /// mpnjsomb [Takenori_Miyahara]
    public static let `mpnjsombUdp`: Self = "_mpnjsomb._udp"
    /// NCDLoadBalance [Tim_Stevenson]
    public static let `ncdloadbalanceTcp`: Self = "_ncdloadbalance._tcp"
    /// NCDLoadBalance [Tim_Stevenson]
    public static let `ncdloadbalanceUdp`: Self = "_ncdloadbalance._udp"
    /// mpnjsosv 
    public static let `mpnjsosvTcp`: Self = "_mpnjsosv._tcp"
    /// mpnjsosv 
    public static let `mpnjsosvUdp`: Self = "_mpnjsosv._udp"
    /// mpnjsocl 
    public static let `mpnjsoclTcp`: Self = "_mpnjsocl._tcp"
    /// mpnjsocl 
    public static let `mpnjsoclUdp`: Self = "_mpnjsocl._udp"
    /// mpnjsomg [Takenori_Miyahara]
    public static let `mpnjsomgTcp`: Self = "_mpnjsomg._tcp"
    /// mpnjsomg [Takenori_Miyahara]
    public static let `mpnjsomgUdp`: Self = "_mpnjsomg._udp"
    /// pq-lic-mgmt [Bob_Sledge]
    public static let `pqLicMgmtTcp`: Self = "_pq-lic-mgmt._tcp"
    /// pq-lic-mgmt [Bob_Sledge]
    public static let `pqLicMgmtUdp`: Self = "_pq-lic-mgmt._udp"
    /// md-cf-http [Lyndon_Nerenberg]
    public static let `mdCgHttpTcp`: Self = "_md-cg-http._tcp"
    /// md-cf-http [Lyndon_Nerenberg]
    public static let `mdCgHttpUdp`: Self = "_md-cg-http._udp"
    /// FastLynx [Dave_Sewell]
    public static let `fastlynxTcp`: Self = "_fastlynx._tcp"
    /// FastLynx [Dave_Sewell]
    public static let `fastlynxUdp`: Self = "_fastlynx._udp"
    /// HP NNM Embedded Database [Chris_Das]
    public static let `hpNnmDataTcp`: Self = "_hp-nnm-data._tcp"
    /// HP NNM Embedded Database [Chris_Das]
    public static let `hpNnmDataUdp`: Self = "_hp-nnm-data._udp"
    /// ITInternet ISM Server [Ron_Ehli]
    public static let `itinternetTcp`: Self = "_itinternet._tcp"
    /// ITInternet ISM Server [Ron_Ehli]
    public static let `itinternetUdp`: Self = "_itinternet._udp"
    /// Admins LMS [Dagfinn_Saether]
    public static let `adminsLmsTcp`: Self = "_admins-lms._tcp"
    /// Admins LMS [Dagfinn_Saether]
    public static let `adminsLmsUdp`: Self = "_admins-lms._udp"
    /// pwrsevent [Yoshinobu_Nakamura]
    public static let `pwrseventTcp`: Self = "_pwrsevent._tcp"
    /// pwrsevent [Yoshinobu_Nakamura]
    public static let `pwrseventUdp`: Self = "_pwrsevent._udp"
    /// VSPREAD [Sumitake_kobayashi]
    public static let `vspreadTcp`: Self = "_vspread._tcp"
    /// VSPREAD [Sumitake_kobayashi]
    public static let `vspreadUdp`: Self = "_vspread._udp"
    /// Unify Admin [Daegis_Inc]
    public static let `unifyadminTcp`: Self = "_unifyadmin._tcp"
    /// Unify Admin [Daegis_Inc]
    public static let `unifyadminUdp`: Self = "_unifyadmin._udp"
    /// Oce SNMP Trap Port [Peter_Teeuwen]
    public static let `oceSnmpTrapTcp`: Self = "_oce-snmp-trap._tcp"
    /// Oce SNMP Trap Port [Peter_Teeuwen]
    public static let `oceSnmpTrapUdp`: Self = "_oce-snmp-trap._udp"
    /// MCK-IVPIP [Robert_Vincent]
    public static let `mckIvpipTcp`: Self = "_mck-ivpip._tcp"
    /// MCK-IVPIP [Robert_Vincent]
    public static let `mckIvpipUdp`: Self = "_mck-ivpip._udp"
    /// Csoft Plus Client [Nedelcho_Stanev]
    public static let `csoftPlusclntTcp`: Self = "_csoft-plusclnt._tcp"
    /// Csoft Plus Client [Nedelcho_Stanev]
    public static let `csoftPlusclntUdp`: Self = "_csoft-plusclnt._udp"
    /// tqdata [Al_Guetzlaff]
    public static let `tqdataTcp`: Self = "_tqdata._tcp"
    /// tqdata [Al_Guetzlaff]
    public static let `tqdataUdp`: Self = "_tqdata._udp"
    /// SMS RCINFO 
    public static let `smsRcinfoTcp`: Self = "_sms-rcinfo._tcp"
    /// SMS RCINFO 
    public static let `smsRcinfoUdp`: Self = "_sms-rcinfo._udp"
    /// SMS XFER 
    public static let `smsXferTcp`: Self = "_sms-xfer._tcp"
    /// SMS XFER 
    public static let `smsXferUdp`: Self = "_sms-xfer._udp"
    /// SMS CHAT 
    public static let `smsChatTcp`: Self = "_sms-chat._tcp"
    /// SMS CHAT 
    public static let `smsChatUdp`: Self = "_sms-chat._udp"
    /// SMS REMCTRL [Tom_Friend]
    public static let `smsRemctrlTcp`: Self = "_sms-remctrl._tcp"
    /// SMS REMCTRL [Tom_Friend]
    public static let `smsRemctrlUdp`: Self = "_sms-remctrl._udp"
    /// SDS Admin [Don_Traub]
    public static let `sdsAdminTcp`: Self = "_sds-admin._tcp"
    /// SDS Admin [Don_Traub]
    public static let `sdsAdminUdp`: Self = "_sds-admin._udp"
    /// NCD Mirroring [Tim_Stevenson]
    public static let `ncdmirroringTcp`: Self = "_ncdmirroring._tcp"
    /// NCD Mirroring [Tim_Stevenson]
    public static let `ncdmirroringUdp`: Self = "_ncdmirroring._udp"
    /// EMCSYMAPIPORT [Bruce_Ferjulian]
    public static let `emcsymapiportTcp`: Self = "_emcsymapiport._tcp"
    /// EMCSYMAPIPORT [Bruce_Ferjulian]
    public static let `emcsymapiportUdp`: Self = "_emcsymapiport._udp"
    /// Banyan-Net [R_Thirumurthy]
    public static let `banyanNetTcp`: Self = "_banyan-net._tcp"
    /// Banyan-Net [R_Thirumurthy]
    public static let `banyanNetUdp`: Self = "_banyan-net._udp"
    /// Supermon [Ron_Minnich]
    public static let `supermonTcp`: Self = "_supermon._tcp"
    /// Supermon [Ron_Minnich]
    public static let `supermonUdp`: Self = "_supermon._udp"
    /// SSO Service 
    public static let `ssoServiceTcp`: Self = "_sso-service._tcp"
    /// SSO Service 
    public static let `ssoServiceUdp`: Self = "_sso-service._udp"
    /// SSO Control [Axel_Kern]
    public static let `ssoControlTcp`: Self = "_sso-control._tcp"
    /// SSO Control [Axel_Kern]
    public static let `ssoControlUdp`: Self = "_sso-control._udp"
    /// Axapta Object Communication Protocol [Jakob_Steen_Hansen]
    public static let `aocpTcp`: Self = "_aocp._tcp"
    /// Axapta Object Communication Protocol [Jakob_Steen_Hansen]
    public static let `aocpUdp`: Self = "_aocp._udp"
    /// Raven Trinity Broker Service 
    public static let `raventbsTcp`: Self = "_raventbs._tcp"
    /// Raven Trinity Broker Service 
    public static let `raventbsUdp`: Self = "_raventbs._udp"
    /// Raven Trinity Data Mover [Daniel_Sorlov]
    public static let `raventdmTcp`: Self = "_raventdm._tcp"
    /// Raven Trinity Data Mover [Daniel_Sorlov]
    public static let `raventdmUdp`: Self = "_raventdm._udp"
    /// HPSTGMGR2 [Kevin_Collins_2]
    public static let `hpstgmgr2Tcp`: Self = "_hpstgmgr2._tcp"
    /// HPSTGMGR2 [Kevin_Collins_2]
    public static let `hpstgmgr2Udp`: Self = "_hpstgmgr2._udp"
    /// Inova IP Disco [Chris_Koeritz]
    public static let `inovaIpDiscoTcp`: Self = "_inova-ip-disco._tcp"
    /// Inova IP Disco [Chris_Koeritz]
    public static let `inovaIpDiscoUdp`: Self = "_inova-ip-disco._udp"
    /// PN REQUESTER 
    public static let `pnRequesterTcp`: Self = "_pn-requester._tcp"
    /// PN REQUESTER 
    public static let `pnRequesterUdp`: Self = "_pn-requester._udp"
    /// PN REQUESTER 2 [Portnoy_Boxman]
    public static let `pnRequester2Tcp`: Self = "_pn-requester2._tcp"
    /// PN REQUESTER 2 [Portnoy_Boxman]
    public static let `pnRequester2Udp`: Self = "_pn-requester2._udp"
    /// Scan & Change [Alexander_Raji]
    public static let `scanChangeTcp`: Self = "_scan-change._tcp"
    /// Scan & Change [Alexander_Raji]
    public static let `scanChangeUdp`: Self = "_scan-change._udp"
    /// wkars [Barry_Shelton]
    public static let `wkarsTcp`: Self = "_wkars._tcp"
    /// wkars [Barry_Shelton]
    public static let `wkarsUdp`: Self = "_wkars._udp"
    /// Smart Diagnose [Geoffry_Meek]
    public static let `smartDiagnoseTcp`: Self = "_smart-diagnose._tcp"
    /// Smart Diagnose [Geoffry_Meek]
    public static let `smartDiagnoseUdp`: Self = "_smart-diagnose._udp"
    /// Proactive Server [Dalit_Naor]
    public static let `proactivesrvrTcp`: Self = "_proactivesrvr._tcp"
    /// Proactive Server [Dalit_Naor]
    public static let `proactivesrvrUdp`: Self = "_proactivesrvr._udp"
    /// WatchDog NT Protocol [Loftware]
    public static let `watchdogNtTcp`: Self = "_watchdog-nt._tcp"
    /// WatchDog NT Protocol [Loftware]
    public static let `watchdogNtUdp`: Self = "_watchdog-nt._udp"
    /// qotps [Piotr_Parlewicz]
    public static let `qotpsTcp`: Self = "_qotps._tcp"
    /// qotps [Piotr_Parlewicz]
    public static let `qotpsUdp`: Self = "_qotps._udp"
    /// MSOLAP PTP2 [Cristian_Petculescu]
    public static let `msolapPtp2Tcp`: Self = "_msolap-ptp2._tcp"
    /// MSOLAP PTP2 [Cristian_Petculescu]
    public static let `msolapPtp2Udp`: Self = "_msolap-ptp2._udp"
    /// TAMS [David_Leinbach]
    public static let `tamsTcp`: Self = "_tams._tcp"
    /// TAMS [David_Leinbach]
    public static let `tamsUdp`: Self = "_tams._udp"
    /// Media Gateway Control Protocol Call Agent [Christian_Huitema]
    public static let `mgcpCallagentTcp`: Self = "_mgcp-callagent._tcp"
    /// Media Gateway Control Protocol Call Agent [Christian_Huitema]
    public static let `mgcpCallagentUdp`: Self = "_mgcp-callagent._udp"
    /// SQDR [Matthew_Orzen]
    public static let `sqdrTcp`: Self = "_sqdr._tcp"
    /// SQDR [Matthew_Orzen]
    public static let `sqdrUdp`: Self = "_sqdr._udp"
    /// TCIM Control [Dean_Skelton]
    public static let `tcimControlTcp`: Self = "_tcim-control._tcp"
    /// TCIM Control [Dean_Skelton]
    public static let `tcimControlUdp`: Self = "_tcim-control._udp"
    /// NEC RaidPlus [Yusuke_Asai]
    public static let `necRaidplusTcp`: Self = "_nec-raidplus._tcp"
    /// NEC RaidPlus [Yusuke_Asai]
    public static let `necRaidplusUdp`: Self = "_nec-raidplus._udp"
    /// Fyre Messanger [Robert_Waters]
    public static let `fyreMessangerTcp`: Self = "_fyre-messanger._tcp"
    /// Fyre Messanger [Robert_Waters]
    public static let `fyreMessangerUdp`: Self = "_fyre-messanger._udp"
    /// G5M [Graham_Klyne]
    public static let `g5mTcp`: Self = "_g5m._tcp"
    /// G5M [Graham_Klyne]
    public static let `g5mUdp`: Self = "_g5m._udp"
    /// Signet CTF [Greg_Broiles]
    public static let `signetCtfTcp`: Self = "_signet-ctf._tcp"
    /// Signet CTF [Greg_Broiles]
    public static let `signetCtfUdp`: Self = "_signet-ctf._udp"
    /// CCS Software [Bertus_Jacobs]
    public static let `ccsSoftwareTcp`: Self = "_ccs-software._tcp"
    /// CCS Software [Bertus_Jacobs]
    public static let `ccsSoftwareUdp`: Self = "_ccs-software._udp"
    /// NetIQ Monitor Console [Scott_Southard]
    public static let `netiqMcTcp`: Self = "_netiq-mc._tcp"
    /// NetIQ Monitor Console [Scott_Southard]
    public static let `netiqMcUdp`: Self = "_netiq-mc._udp"
    /// RADWIZ NMS SRV [Israel_Shainert]
    public static let `radwizNmsSrvTcp`: Self = "_radwiz-nms-srv._tcp"
    /// RADWIZ NMS SRV [Israel_Shainert]
    public static let `radwizNmsSrvUdp`: Self = "_radwiz-nms-srv._udp"
    /// SRP Feedback [Werner_Almesberger]
    public static let `srpFeedbackTcp`: Self = "_srp-feedback._tcp"
    /// SRP Feedback [Werner_Almesberger]
    public static let `srpFeedbackUdp`: Self = "_srp-feedback._udp"
    /// NDL TCP-OSI Gateway [Martin_Norman]
    public static let `ndlTcpOisGwTcp`: Self = "_ndl-tcp-ois-gw._tcp"
    /// NDL TCP-OSI Gateway [Martin_Norman]
    public static let `ndlTcpOisGwUdp`: Self = "_ndl-tcp-ois-gw._udp"
    /// TN Timing [Paul_Roberts]
    public static let `tnTimingTcp`: Self = "_tn-timing._tcp"
    /// TN Timing [Paul_Roberts]
    public static let `tnTimingUdp`: Self = "_tn-timing._udp"
    /// Alarm [Uriy_Makasjuk]
    public static let `alarmTcp`: Self = "_alarm._tcp"
    /// Alarm [Uriy_Makasjuk]
    public static let `alarmUdp`: Self = "_alarm._udp"
    /// TSB 
    public static let `tsbTcp`: Self = "_tsb._tcp"
    /// TSB 
    public static let `tsbUdp`: Self = "_tsb._udp"
    /// TSB2 [Ashish_Chatterjee]
    public static let `tsb2Tcp`: Self = "_tsb2._tcp"
    /// TSB2 [Ashish_Chatterjee]
    public static let `tsb2Udp`: Self = "_tsb2._udp"
    /// murx [Thomas_Kuiper]
    public static let `murxTcp`: Self = "_murx._tcp"
    /// murx [Thomas_Kuiper]
    public static let `murxUdp`: Self = "_murx._udp"
    /// honyaku [Yasunari_Yamashita]
    public static let `honyakuTcp`: Self = "_honyaku._tcp"
    /// honyaku [Yasunari_Yamashita]
    public static let `honyakuUdp`: Self = "_honyaku._udp"
    /// URBISNET [Urbis_Net_Ltd]
    public static let `urbisnetTcp`: Self = "_urbisnet._tcp"
    /// URBISNET [Urbis_Net_Ltd]
    public static let `urbisnetUdp`: Self = "_urbisnet._udp"
    /// CPUDPENCAP [Tamir_Zegman]
    public static let `cpudpencapTcp`: Self = "_cpudpencap._tcp"
    /// CPUDPENCAP [Tamir_Zegman]
    public static let `cpudpencapUdp`: Self = "_cpudpencap._udp"
    ///  
    public static let `fjippolSwrlyTcp`: Self = "_fjippol-swrly._tcp"
    ///  
    public static let `fjippolSwrlyUdp`: Self = "_fjippol-swrly._udp"
    ///  
    public static let `fjippolPolsvrTcp`: Self = "_fjippol-polsvr._tcp"
    ///  
    public static let `fjippolPolsvrUdp`: Self = "_fjippol-polsvr._udp"
    ///  
    public static let `fjippolCnslTcp`: Self = "_fjippol-cnsl._tcp"
    ///  
    public static let `fjippolCnslUdp`: Self = "_fjippol-cnsl._udp"
    ///  
    public static let `fjippolPort1Tcp`: Self = "_fjippol-port1._tcp"
    ///  
    public static let `fjippolPort1Udp`: Self = "_fjippol-port1._udp"
    ///  [Shoichi_Tachibana]
    public static let `fjippolPort2Tcp`: Self = "_fjippol-port2._tcp"
    ///  [Shoichi_Tachibana]
    public static let `fjippolPort2Udp`: Self = "_fjippol-port2._udp"
    /// RSISYS ACCESS [Christophe_Besant]
    public static let `rsisysaccessTcp`: Self = "_rsisysaccess._tcp"
    /// RSISYS ACCESS [Christophe_Besant]
    public static let `rsisysaccessUdp`: Self = "_rsisysaccess._udp"
    /// de-spot [Sanjay_Parekh]
    public static let `deSpotTcp`: Self = "_de-spot._tcp"
    /// de-spot [Sanjay_Parekh]
    public static let `deSpotUdp`: Self = "_de-spot._udp"
    /// APOLLO CC [Brand_Communications]
    public static let `apolloCcTcp`: Self = "_apollo-cc._tcp"
    /// APOLLO CC [Brand_Communications]
    public static let `apolloCcUdp`: Self = "_apollo-cc._udp"
    /// Express Pay [Ben_Higgins]
    public static let `expresspayTcp`: Self = "_expresspay._tcp"
    /// Express Pay [Ben_Higgins]
    public static let `expresspayUdp`: Self = "_expresspay._udp"
    /// simplement-tie [Tzvika_Chumash]
    public static let `simplementTieTcp`: Self = "_simplement-tie._tcp"
    /// simplement-tie [Tzvika_Chumash]
    public static let `simplementTieUdp`: Self = "_simplement-tie._udp"
    /// CNRP [Jacob_Ulmert]
    public static let `cnrpTcp`: Self = "_cnrp._tcp"
    /// CNRP [Jacob_Ulmert]
    public static let `cnrpUdp`: Self = "_cnrp._udp"
    /// APOLLO Status 
    public static let `apolloStatusTcp`: Self = "_apollo-status._tcp"
    /// APOLLO Status 
    public static let `apolloStatusUdp`: Self = "_apollo-status._udp"
    /// APOLLO GMS [Simon_Hovell]
    public static let `apolloGmsTcp`: Self = "_apollo-gms._tcp"
    /// APOLLO GMS [Simon_Hovell]
    public static let `apolloGmsUdp`: Self = "_apollo-gms._udp"
    /// Saba MS [Davoud_Maha]
    public static let `sabamsTcp`: Self = "_sabams._tcp"
    /// Saba MS [Davoud_Maha]
    public static let `sabamsUdp`: Self = "_sabams._udp"
    /// DICOM ISCL 
    public static let `dicomIsclTcp`: Self = "_dicom-iscl._tcp"
    /// DICOM ISCL 
    public static let `dicomIsclUdp`: Self = "_dicom-iscl._udp"
    /// DICOM TLS [Lawrence_Tarbox]
    public static let `dicomTlsTcp`: Self = "_dicom-tls._tcp"
    /// DICOM TLS [Lawrence_Tarbox]
    public static let `dicomTlsUdp`: Self = "_dicom-tls._udp"
    /// Desktop DNA [Jon_Walker]
    public static let `desktopDnaTcp`: Self = "_desktop-dna._tcp"
    /// Desktop DNA [Jon_Walker]
    public static let `desktopDnaUdp`: Self = "_desktop-dna._udp"
    /// Data Insurance [Brent_Irwin]
    public static let `dataInsuranceTcp`: Self = "_data-insurance._tcp"
    /// Data Insurance [Brent_Irwin]
    public static let `dataInsuranceUdp`: Self = "_data-insurance._udp"
    /// qip-audup [Mike_Morgan]
    public static let `qipAudupTcp`: Self = "_qip-audup._tcp"
    /// qip-audup [Mike_Morgan]
    public static let `qipAudupUdp`: Self = "_qip-audup._udp"
    /// Compaq SCP [Ferruccio_Barletta]
    public static let `compaqScpTcp`: Self = "_compaq-scp._tcp"
    /// Compaq SCP [Ferruccio_Barletta]
    public static let `compaqScpUdp`: Self = "_compaq-scp._udp"
    /// UADTC 
    public static let `uadtcTcp`: Self = "_uadtc._tcp"
    /// UADTC 
    public static let `uadtcUdp`: Self = "_uadtc._udp"
    /// UACS [Vishwas_Lele]
    public static let `uacsTcp`: Self = "_uacs._tcp"
    /// UACS [Vishwas_Lele]
    public static let `uacsUdp`: Self = "_uacs._udp"
    /// eXcE [Norm_Freedman]
    public static let `exceTcp`: Self = "_exce._tcp"
    /// eXcE [Norm_Freedman]
    public static let `exceUdp`: Self = "_exce._udp"
    /// Veronica [Jonas_Oberg]
    public static let `veronicaTcp`: Self = "_veronica._tcp"
    /// Veronica [Jonas_Oberg]
    public static let `veronicaUdp`: Self = "_veronica._udp"
    /// Vergence CM [Mark_Morwood]
    public static let `vergencecmTcp`: Self = "_vergencecm._tcp"
    /// Vergence CM [Mark_Morwood]
    public static let `vergencecmUdp`: Self = "_vergencecm._udp"
    /// auris [Francisco_Saez_Aranc]
    public static let `aurisTcp`: Self = "_auris._tcp"
    /// auris [Francisco_Saez_Aranc]
    public static let `aurisUdp`: Self = "_auris._udp"
    /// RBackup Remote Backup 
    public static let `rbakcup1Tcp`: Self = "_rbakcup1._tcp"
    /// RBackup Remote Backup 
    public static let `rbakcup1Udp`: Self = "_rbakcup1._udp"
    /// RBackup Remote Backup [Rob_Cosgrove]
    public static let `rbakcup2Tcp`: Self = "_rbakcup2._tcp"
    /// RBackup Remote Backup [Rob_Cosgrove]
    public static let `rbakcup2Udp`: Self = "_rbakcup2._udp"
    /// SMPP [Owen_Sullivan]
    public static let `smppTcp`: Self = "_smpp._tcp"
    /// SMPP [Owen_Sullivan]
    public static let `smppUdp`: Self = "_smpp._udp"
    /// Ridgeway Systems & Software 
    public static let `ridgeway1Tcp`: Self = "_ridgeway1._tcp"
    /// Ridgeway Systems & Software 
    public static let `ridgeway1Udp`: Self = "_ridgeway1._udp"
    /// Ridgeway Systems & Software [Steve_Read]
    public static let `ridgeway2Tcp`: Self = "_ridgeway2._tcp"
    /// Ridgeway Systems & Software [Steve_Read]
    public static let `ridgeway2Udp`: Self = "_ridgeway2._udp"
    /// Gwen-Sonya [Mark_Hurst]
    public static let `gwenSonyaTcp`: Self = "_gwen-sonya._tcp"
    /// Gwen-Sonya [Mark_Hurst]
    public static let `gwenSonyaUdp`: Self = "_gwen-sonya._udp"
    /// LBC Sync 
    public static let `lbcSyncTcp`: Self = "_lbc-sync._tcp"
    /// LBC Sync 
    public static let `lbcSyncUdp`: Self = "_lbc-sync._udp"
    /// LBC Control [Keiji_Michine]
    public static let `lbcControlTcp`: Self = "_lbc-control._tcp"
    /// LBC Control [Keiji_Michine]
    public static let `lbcControlUdp`: Self = "_lbc-control._udp"
    /// whosells [William_Randolph_Roy]
    public static let `whosellsTcp`: Self = "_whosells._tcp"
    /// whosells [William_Randolph_Roy]
    public static let `whosellsUdp`: Self = "_whosells._udp"
    /// everydayrc [Ahti_Heinla]
    public static let `everydayrcTcp`: Self = "_everydayrc._tcp"
    /// everydayrc [Ahti_Heinla]
    public static let `everydayrcUdp`: Self = "_everydayrc._udp"
    /// AISES [Daniel_Grazioli]
    public static let `aisesTcp`: Self = "_aises._tcp"
    /// AISES [Daniel_Grazioli]
    public static let `aisesUdp`: Self = "_aises._udp"
    /// world wide web - development 
    public static let `wwwDevTcp`: Self = "_www-dev._tcp"
    /// world wide web - development 
    public static let `wwwDevUdp`: Self = "_www-dev._udp"
    /// aic-np [Brad_Parker]
    public static let `aicNpTcp`: Self = "_aic-np._tcp"
    /// aic-np [Brad_Parker]
    public static let `aicNpUdp`: Self = "_aic-np._udp"
    /// aic-oncrpc - Destiny MCD database [Brad_Parker]
    public static let `aicOncrpcTcp`: Self = "_aic-oncrpc._tcp"
    /// aic-oncrpc - Destiny MCD database [Brad_Parker]
    public static let `aicOncrpcUdp`: Self = "_aic-oncrpc._udp"
    /// piccolo - Cornerstone Software [Dave_Bellivea]
    public static let `piccoloTcp`: Self = "_piccolo._tcp"
    /// piccolo - Cornerstone Software [Dave_Bellivea]
    public static let `piccoloUdp`: Self = "_piccolo._udp"
    /// NetWare Loadable Module - Seagate Software [Joseph_LoPilato]
    public static let `fryeservTcp`: Self = "_fryeserv._tcp"
    /// NetWare Loadable Module - Seagate Software [Joseph_LoPilato]
    public static let `fryeservUdp`: Self = "_fryeserv._udp"
    /// Media Agent [Nitzan_Daube]
    public static let `mediaAgentTcp`: Self = "_media-agent._tcp"
    /// Media Agent [Nitzan_Daube]
    public static let `mediaAgentUdp`: Self = "_media-agent._udp"
    /// PLG Proxy [Charlie_Hava]
    public static let `plgproxyTcp`: Self = "_plgproxy._tcp"
    /// PLG Proxy [Charlie_Hava]
    public static let `plgproxyUdp`: Self = "_plgproxy._udp"
    /// MT Port Registrator [Maxim_Tseitlin]
    public static let `mtportRegistTcp`: Self = "_mtport-regist._tcp"
    /// MT Port Registrator [Maxim_Tseitlin]
    public static let `mtportRegistUdp`: Self = "_mtport-regist._udp"
    /// f5-globalsite [Christian_Saether_2]
    public static let `f5GlobalsiteTcp`: Self = "_f5-globalsite._tcp"
    /// f5-globalsite [Christian_Saether_2]
    public static let `f5GlobalsiteUdp`: Self = "_f5-globalsite._udp"
    /// initlsmsad [Kelly_Green]
    public static let `initlsmsadTcp`: Self = "_initlsmsad._tcp"
    /// initlsmsad [Kelly_Green]
    public static let `initlsmsadUdp`: Self = "_initlsmsad._udp"
    /// LiveStats [Chris_Greene]
    public static let `livestatsTcp`: Self = "_livestats._tcp"
    /// LiveStats [Chris_Greene]
    public static let `livestatsUdp`: Self = "_livestats._udp"
    /// ac-tech [Chiming_Huang]
    public static let `acTechTcp`: Self = "_ac-tech._tcp"
    /// ac-tech [Chiming_Huang]
    public static let `acTechUdp`: Self = "_ac-tech._udp"
    /// esp-encap [Jorn_Sierwald]
    public static let `espEncapTcp`: Self = "_esp-encap._tcp"
    /// esp-encap [Jorn_Sierwald]
    public static let `espEncapUdp`: Self = "_esp-encap._udp"
    /// TMESIS-UPShot [Brian_Schenkenberger]
    public static let `tmesisUpshotTcp`: Self = "_tmesis-upshot._tcp"
    /// TMESIS-UPShot [Brian_Schenkenberger]
    public static let `tmesisUpshotUdp`: Self = "_tmesis-upshot._udp"
    /// ICON Discover [Alexander_Falk]
    public static let `iconDiscoverTcp`: Self = "_icon-discover._tcp"
    /// ICON Discover [Alexander_Falk]
    public static let `iconDiscoverUdp`: Self = "_icon-discover._udp"
    /// ACC RAID [Scott_St_Clair]
    public static let `accRaidTcp`: Self = "_acc-raid._tcp"
    /// ACC RAID [Scott_St_Clair]
    public static let `accRaidUdp`: Self = "_acc-raid._udp"
    /// IGCP [David_Hampson]
    public static let `igcpTcp`: Self = "_igcp._tcp"
    /// IGCP [David_Hampson]
    public static let `igcpUdp`: Self = "_igcp._udp"
    /// Veritas TCP1 
    public static let `veritasTcp1Tcp`: Self = "_veritas-tcp1._tcp"
    /// Veritas UDP1 [Russ_Thrasher]
    public static let `veritasUdp1Udp`: Self = "_veritas-udp1._udp"
    /// btprjctrl [Huw_Thomas]
    public static let `btprjctrlTcp`: Self = "_btprjctrl._tcp"
    /// btprjctrl [Huw_Thomas]
    public static let `btprjctrlUdp`: Self = "_btprjctrl._udp"
    /// March Networks Digital Video Recorders and Enterprise Service Manager products [Paul_Streatch]
    public static let `dvrEsmTcp`: Self = "_dvr-esm._tcp"
    /// March Networks Digital Video Recorders and Enterprise Service Manager products [Paul_Streatch]
    public static let `dvrEsmUdp`: Self = "_dvr-esm._udp"
    /// WTA WSP-S [Sebastien_Bury]
    public static let `wtaWspSTcp`: Self = "_wta-wsp-s._tcp"
    /// WTA WSP-S [Sebastien_Bury]
    public static let `wtaWspSUdp`: Self = "_wta-wsp-s._udp"
    /// cspuni 
    public static let `cspuniTcp`: Self = "_cspuni._tcp"
    /// cspuni 
    public static let `cspuniUdp`: Self = "_cspuni._udp"
    /// cspmulti [Terumasa_Yoneda]
    public static let `cspmultiTcp`: Self = "_cspmulti._tcp"
    /// cspmulti [Terumasa_Yoneda]
    public static let `cspmultiUdp`: Self = "_cspmulti._udp"
    /// J-LAN-P [Takeshi_Sahara]
    public static let `jLanPTcp`: Self = "_j-lan-p._tcp"
    /// J-LAN-P [Takeshi_Sahara]
    public static let `jLanPUdp`: Self = "_j-lan-p._udp"
    /// CORBA LOC [Ted_McFadden]
    public static let `corbalocTcp`: Self = "_corbaloc._tcp"
    /// CORBA LOC [Ted_McFadden]
    public static let `corbalocUdp`: Self = "_corbaloc._udp"
    /// Active Net Steward [Keith_Morley]
    public static let `netstewardTcp`: Self = "_netsteward._tcp"
    /// Active Net Steward [Keith_Morley]
    public static let `netstewardUdp`: Self = "_netsteward._udp"
    /// GSI FTP [Von_Welch]
    public static let `gsiftpTcp`: Self = "_gsiftp._tcp"
    /// GSI FTP [Von_Welch]
    public static let `gsiftpUdp`: Self = "_gsiftp._udp"
    /// atmtcp [Werner_Almesberger]
    public static let `atmtcpTcp`: Self = "_atmtcp._tcp"
    /// atmtcp [Werner_Almesberger]
    public static let `atmtcpUdp`: Self = "_atmtcp._udp"
    /// llm-pass [Loftware]
    public static let `llmPassTcp`: Self = "_llm-pass._tcp"
    /// llm-pass [Loftware]
    public static let `llmPassUdp`: Self = "_llm-pass._udp"
    /// llm-csv [Loftware]
    public static let `llmCsvTcp`: Self = "_llm-csv._tcp"
    /// llm-csv [Loftware]
    public static let `llmCsvUdp`: Self = "_llm-csv._udp"
    /// LBC Measurement 
    public static let `lbcMeasureTcp`: Self = "_lbc-measure._tcp"
    /// LBC Measurement 
    public static let `lbcMeasureUdp`: Self = "_lbc-measure._udp"
    /// LBC Watchdog [Akiyoshi_Ochi]
    public static let `lbcWatchdogTcp`: Self = "_lbc-watchdog._tcp"
    /// LBC Watchdog [Akiyoshi_Ochi]
    public static let `lbcWatchdogUdp`: Self = "_lbc-watchdog._udp"
    /// NMSig Port [Peter_Egli_2]
    public static let `nmsigportTcp`: Self = "_nmsigport._tcp"
    /// NMSig Port [Peter_Egli_2]
    public static let `nmsigportUdp`: Self = "_nmsigport._udp"
    /// rmlnk 
    public static let `rmlnkTcp`: Self = "_rmlnk._tcp"
    /// rmlnk 
    public static let `rmlnkUdp`: Self = "_rmlnk._udp"
    /// FC Fault Notification [Dave_Watkins]
    public static let `fcFaultnotifyTcp`: Self = "_fc-faultnotify._tcp"
    /// FC Fault Notification [Dave_Watkins]
    public static let `fcFaultnotifyUdp`: Self = "_fc-faultnotify._udp"
    /// UniVision [Keith_Ansell]
    public static let `univisionTcp`: Self = "_univision._tcp"
    /// UniVision [Keith_Ansell]
    public static let `univisionUdp`: Self = "_univision._udp"
    /// VERITAS Authentication Service [Stefan_Winkel]
    public static let `vrtsAtPortTcp`: Self = "_vrts-at-port._tcp"
    /// VERITAS Authentication Service [Stefan_Winkel]
    public static let `vrtsAtPortUdp`: Self = "_vrts-at-port._udp"
    /// ka0wuc [Kit_Haskins]
    public static let `ka0wucTcp`: Self = "_ka0wuc._tcp"
    /// ka0wuc [Kit_Haskins]
    public static let `ka0wucUdp`: Self = "_ka0wuc._udp"
    /// CQG Net/LAN 
    public static let `cqgNetlanTcp`: Self = "_cqg-netlan._tcp"
    /// CQG Net/LAN 
    public static let `cqgNetlanUdp`: Self = "_cqg-netlan._udp"
    /// CQG Net/LAN 1 [Jeff_Wood]
    public static let `cqgNetlan1Tcp`: Self = "_cqg-netlan-1._tcp"
    /// CQG Net/Lan 1 [Jeff_Wood]
    public static let `cqgNetlan1Udp`: Self = "_cqg-netlan-1._udp"
    /// slc systemlog 
    public static let `slcSystemlogTcp`: Self = "_slc-systemlog._tcp"
    /// slc systemlog 
    public static let `slcSystemlogUdp`: Self = "_slc-systemlog._udp"
    /// slc ctrlrloops [Erwin_Hogeweg]
    public static let `slcCtrlrloopsTcp`: Self = "_slc-ctrlrloops._tcp"
    /// slc ctrlrloops [Erwin_Hogeweg]
    public static let `slcCtrlrloopsUdp`: Self = "_slc-ctrlrloops._udp"
    /// ITM License Manager [Portnoy_Boxman]
    public static let `itmLmTcp`: Self = "_itm-lm._tcp"
    /// ITM License Manager [Portnoy_Boxman]
    public static let `itmLmUdp`: Self = "_itm-lm._udp"
    /// silkp1 
    public static let `silkp1Tcp`: Self = "_silkp1._tcp"
    /// silkp1 
    public static let `silkp1Udp`: Self = "_silkp1._udp"
    /// silkp2 
    public static let `silkp2Tcp`: Self = "_silkp2._tcp"
    /// silkp2 
    public static let `silkp2Udp`: Self = "_silkp2._udp"
    /// silkp3 
    public static let `silkp3Tcp`: Self = "_silkp3._tcp"
    /// silkp3 
    public static let `silkp3Udp`: Self = "_silkp3._udp"
    /// silkp4 [Erik_Skyten]
    public static let `silkp4Tcp`: Self = "_silkp4._tcp"
    /// silkp4 [Erik_Skyten]
    public static let `silkp4Udp`: Self = "_silkp4._udp"
    /// glishd [Darrell_Schiebel]
    public static let `glishdTcp`: Self = "_glishd._tcp"
    /// glishd [Darrell_Schiebel]
    public static let `glishdUdp`: Self = "_glishd._udp"
    /// EVTP 
    public static let `evtpTcp`: Self = "_evtp._tcp"
    /// EVTP 
    public static let `evtpUdp`: Self = "_evtp._udp"
    /// EVTP-DATA [Eric_Bruno]
    public static let `evtpDataTcp`: Self = "_evtp-data._tcp"
    /// EVTP-DATA [Eric_Bruno]
    public static let `evtpDataUdp`: Self = "_evtp-data._udp"
    /// catalyst [Garret_Tollkuhn]
    public static let `catalystTcp`: Self = "_catalyst._tcp"
    /// catalyst [Garret_Tollkuhn]
    public static let `catalystUdp`: Self = "_catalyst._udp"
    /// Repliweb [William_Orme]
    public static let `repliwebTcp`: Self = "_repliweb._tcp"
    /// Repliweb [William_Orme]
    public static let `repliwebUdp`: Self = "_repliweb._udp"
    /// Starbot [Markus_Sabadello_2]
    public static let `starbotTcp`: Self = "_starbot._tcp"
    /// Starbot [Markus_Sabadello_2]
    public static let `starbotUdp`: Self = "_starbot._udp"
    /// l3-exprt 
    public static let `l3ExprtTcp`: Self = "_l3-exprt._tcp"
    /// l3-exprt 
    public static let `l3ExprtUdp`: Self = "_l3-exprt._udp"
    /// l3-ranger 
    public static let `l3RangerTcp`: Self = "_l3-ranger._tcp"
    /// l3-ranger 
    public static let `l3RangerUdp`: Self = "_l3-ranger._udp"
    /// l3-hawk [Dolores_Scott_2]
    public static let `l3HawkTcp`: Self = "_l3-hawk._tcp"
    /// l3-hawk [Dolores_Scott_2]
    public static let `l3HawkUdp`: Self = "_l3-hawk._udp"
    /// PDnet [Torsten_Scheffler]
    public static let `pdnetTcp`: Self = "_pdnet._tcp"
    /// PDnet [Torsten_Scheffler]
    public static let `pdnetUdp`: Self = "_pdnet._udp"
    /// BPCP POLL 
    public static let `bpcpPollTcp`: Self = "_bpcp-poll._tcp"
    /// BPCP POLL 
    public static let `bpcpPollUdp`: Self = "_bpcp-poll._udp"
    /// BPCP TRAP [Steve_Van_Duser]
    public static let `bpcpTrapTcp`: Self = "_bpcp-trap._tcp"
    /// BPCP TRAP [Steve_Van_Duser]
    public static let `bpcpTrapUdp`: Self = "_bpcp-trap._udp"
    /// AIMPP Hello 
    public static let `aimppHelloTcp`: Self = "_aimpp-hello._tcp"
    /// AIMPP Hello 
    public static let `aimppHelloUdp`: Self = "_aimpp-hello._udp"
    /// AIMPP Port Req [Brian_Martinicky]
    public static let `aimppPortReqTcp`: Self = "_aimpp-port-req._tcp"
    /// AIMPP Port Req [Brian_Martinicky]
    public static let `aimppPortReqUdp`: Self = "_aimpp-port-req._udp"
    /// AMT-BLC-PORT [Sandra_Frulloni]
    public static let `amtBlcPortTcp`: Self = "_amt-blc-port._tcp"
    /// AMT-BLC-PORT [Sandra_Frulloni]
    public static let `amtBlcPortUdp`: Self = "_amt-blc-port._udp"
    /// MetaConsole [Rakesh_Mahajan]
    public static let `metaconsoleTcp`: Self = "_metaconsole._tcp"
    /// MetaConsole [Rakesh_Mahajan]
    public static let `metaconsoleUdp`: Self = "_metaconsole._udp"
    /// webemshttp [Stephen_Tsun]
    public static let `webemshttpTcp`: Self = "_webemshttp._tcp"
    /// webemshttp [Stephen_Tsun]
    public static let `webemshttpUdp`: Self = "_webemshttp._udp"
    /// bears-01 [Bruce_McKinnon]
    public static let `bears01Tcp`: Self = "_bears-01._tcp"
    /// bears-01 [Bruce_McKinnon]
    public static let `bears01Udp`: Self = "_bears-01._udp"
    /// ISPipes [Rajesh_Nandyalam]
    public static let `ispipesTcp`: Self = "_ispipes._tcp"
    /// ISPipes [Rajesh_Nandyalam]
    public static let `ispipesUdp`: Self = "_ispipes._udp"
    /// InfoMover [Carla_Caputo]
    public static let `infomoverTcp`: Self = "_infomover._tcp"
    /// InfoMover [Carla_Caputo]
    public static let `infomoverUdp`: Self = "_infomover._udp"
    /// MSRP over TCP 
    public static let `msrpTcp`: Self = "_msrp._tcp"
    /// cesdinv [Yoshiaki_Tokumoto]
    public static let `cesdinvTcp`: Self = "_cesdinv._tcp"
    /// cesdinv [Yoshiaki_Tokumoto]
    public static let `cesdinvUdp`: Self = "_cesdinv._udp"
    /// SimCtIP [Christian_Zietz]
    public static let `simctlpTcp`: Self = "_simctlp._tcp"
    /// SimCtIP [Christian_Zietz]
    public static let `simctlpUdp`: Self = "_simctlp._udp"
    /// ECNP [Robert_Reimiller]
    public static let `ecnpTcp`: Self = "_ecnp._tcp"
    /// ECNP [Robert_Reimiller]
    public static let `ecnpUdp`: Self = "_ecnp._udp"
    /// Active Memory [Joe_Graham]
    public static let `activememoryTcp`: Self = "_activememory._tcp"
    /// Active Memory [Joe_Graham]
    public static let `activememoryUdp`: Self = "_activememory._udp"
    /// Dialpad Voice 1 
    public static let `dialpadVoice1Tcp`: Self = "_dialpad-voice1._tcp"
    /// Dialpad Voice 1 
    public static let `dialpadVoice1Udp`: Self = "_dialpad-voice1._udp"
    /// Dialpad Voice 2 [Wongyu_Cho]
    public static let `dialpadVoice2Tcp`: Self = "_dialpad-voice2._tcp"
    /// Dialpad Voice 2 [Wongyu_Cho]
    public static let `dialpadVoice2Udp`: Self = "_dialpad-voice2._udp"
    /// TTG Protocol [Mark_Boler]
    public static let `ttgProtocolTcp`: Self = "_ttg-protocol._tcp"
    /// TTG Protocol [Mark_Boler]
    public static let `ttgProtocolUdp`: Self = "_ttg-protocol._udp"
    /// Sonar Data [Ian_Higginbottom]
    public static let `sonardataTcp`: Self = "_sonardata._tcp"
    /// Sonar Data [Ian_Higginbottom]
    public static let `sonardataUdp`: Self = "_sonardata._udp"
    /// main 5001 cmd [AstroNova_Inc]
    public static let `astronovaMainTcp`: Self = "_astronova-main._tcp"
    /// main 5001 cmd [AstroNova_Inc]
    public static let `astronovaMainUdp`: Self = "_astronova-main._udp"
    /// pit-vpn [Norbert_Sendetzky]
    public static let `pitVpnTcp`: Self = "_pit-vpn._tcp"
    /// pit-vpn [Norbert_Sendetzky]
    public static let `pitVpnUdp`: Self = "_pit-vpn._udp"
    /// iwlistener [Fred_Surr]
    public static let `iwlistenerTcp`: Self = "_iwlistener._tcp"
    /// iwlistener [Fred_Surr]
    public static let `iwlistenerUdp`: Self = "_iwlistener._udp"
    /// esps-portal [Nicholas_Stowfis]
    public static let `espsPortalTcp`: Self = "_esps-portal._tcp"
    /// esps-portal [Nicholas_Stowfis]
    public static let `espsPortalUdp`: Self = "_esps-portal._udp"
    /// Norman Proprietaqry Events Protocol [AVG_Technologies_Norway_AS]
    public static let `npepMessagingTcp`: Self = "_npep-messaging._tcp"
    /// Norman Proprietaqry Events Protocol [AVG_Technologies_Norway_AS]
    public static let `npepMessagingUdp`: Self = "_npep-messaging._udp"
    /// ICSLAP [Richard_Lamb]
    public static let `icslapTcp`: Self = "_icslap._tcp"
    /// ICSLAP [Richard_Lamb]
    public static let `icslapUdp`: Self = "_icslap._udp"
    /// daishi [Patrick_Chipman]
    public static let `daishiTcp`: Self = "_daishi._tcp"
    /// daishi [Patrick_Chipman]
    public static let `daishiUdp`: Self = "_daishi._udp"
    /// MSI Select Play [Paul_Fonte]
    public static let `msiSelectplayTcp`: Self = "_msi-selectplay._tcp"
    /// MSI Select Play [Paul_Fonte]
    public static let `msiSelectplayUdp`: Self = "_msi-selectplay._udp"
    /// RADIX [Stein_Roger_Skaflott]
    public static let `radixTcp`: Self = "_radix._tcp"
    /// RADIX [Stein_Roger_Skaflott]
    public static let `radixUdp`: Self = "_radix._udp"
    /// PubSub Realtime Telemetry Protocol [Altertech]
    public static let `psrtTcp`: Self = "_psrt._tcp"
    /// PubSub Realtime Telemetry Protocol [Altertech]
    public static let `psrtUdp`: Self = "_psrt._udp"
    /// DX Message Base Transport Protocol 
    public static let `dxmessagebase1Tcp`: Self = "_dxmessagebase1._tcp"
    /// DX Message Base Transport Protocol 
    public static let `dxmessagebase1Udp`: Self = "_dxmessagebase1._udp"
    /// DX Message Base Transport Protocol [G_E_Ozz_Nixon_Jr]
    public static let `dxmessagebase2Tcp`: Self = "_dxmessagebase2._tcp"
    /// DX Message Base Transport Protocol [G_E_Ozz_Nixon_Jr]
    public static let `dxmessagebase2Udp`: Self = "_dxmessagebase2._udp"
    /// SPS Tunnel [Bill_McIntosh]
    public static let `spsTunnelTcp`: Self = "_sps-tunnel._tcp"
    /// SPS Tunnel [Bill_McIntosh]
    public static let `spsTunnelUdp`: Self = "_sps-tunnel._udp"
    /// BLUELANCE [Michael_Padrezas]
    public static let `bluelanceTcp`: Self = "_bluelance._tcp"
    /// BLUELANCE [Michael_Padrezas]
    public static let `bluelanceUdp`: Self = "_bluelance._udp"
    /// AAP [Stephen_Hanna_2]
    public static let `aapTcp`: Self = "_aap._tcp"
    /// AAP [Stephen_Hanna_2]
    public static let `aapUdp`: Self = "_aap._udp"
    /// ucentric-ds [Alex_Vasilevsky]
    public static let `ucentricDsTcp`: Self = "_ucentric-ds._tcp"
    /// ucentric-ds [Alex_Vasilevsky]
    public static let `ucentricDsUdp`: Self = "_ucentric-ds._udp"
    /// Synapse Transport [Ali_Fracyon]
    public static let `synapseTcp`: Self = "_synapse._tcp"
    /// Synapse Transport [Ali_Fracyon]
    public static let `synapseUdp`: Self = "_synapse._udp"
    /// NDSP 
    public static let `ndspTcp`: Self = "_ndsp._tcp"
    /// NDSP 
    public static let `ndspUdp`: Self = "_ndsp._udp"
    /// NDTP 
    public static let `ndtpTcp`: Self = "_ndtp._tcp"
    /// NDTP 
    public static let `ndtpUdp`: Self = "_ndtp._udp"
    /// NDNP [Khelben_Blackstaff]
    public static let `ndnpTcp`: Self = "_ndnp._tcp"
    /// NDNP [Khelben_Blackstaff]
    public static let `ndnpUdp`: Self = "_ndnp._udp"
    /// Flash Msg [Jeffrey_Zinkerman]
    public static let `flashmsgTcp`: Self = "_flashmsg._tcp"
    /// Flash Msg [Jeffrey_Zinkerman]
    public static let `flashmsgUdp`: Self = "_flashmsg._udp"
    /// TopFlow [Ted_Ross]
    public static let `topflowTcp`: Self = "_topflow._tcp"
    /// TopFlow [Ted_Ross]
    public static let `topflowUdp`: Self = "_topflow._udp"
    /// RESPONSELOGIC [Bruce_Casey]
    public static let `responselogicTcp`: Self = "_responselogic._tcp"
    /// RESPONSELOGIC [Bruce_Casey]
    public static let `responselogicUdp`: Self = "_responselogic._udp"
    /// aironet [Victor_Griswold]
    public static let `aironetddpTcp`: Self = "_aironetddp._tcp"
    /// aironet [Victor_Griswold]
    public static let `aironetddpUdp`: Self = "_aironetddp._udp"
    /// SPCSDLOBBY [Matthew_Williams]
    public static let `spcsdlobbyTcp`: Self = "_spcsdlobby._tcp"
    /// SPCSDLOBBY [Matthew_Williams]
    public static let `spcsdlobbyUdp`: Self = "_spcsdlobby._udp"
    /// RSOM [Justine_Higgins]
    public static let `rsomTcp`: Self = "_rsom._tcp"
    /// RSOM [Justine_Higgins]
    public static let `rsomUdp`: Self = "_rsom._udp"
    /// CSPCLMULTI [Yoneda_Terumasa]
    public static let `cspclmultiTcp`: Self = "_cspclmulti._tcp"
    /// CSPCLMULTI [Yoneda_Terumasa]
    public static let `cspclmultiUdp`: Self = "_cspclmulti._udp"
    /// CINEGRFX-ELMD License Manager [Greg_Ercolano_2]
    public static let `cinegrfxElmdTcp`: Self = "_cinegrfx-elmd._tcp"
    /// CINEGRFX-ELMD License Manager [Greg_Ercolano_2]
    public static let `cinegrfxElmdUdp`: Self = "_cinegrfx-elmd._udp"
    /// SNIFFERDATA [Jeff_Mangasarian]
    public static let `snifferdataTcp`: Self = "_snifferdata._tcp"
    /// SNIFFERDATA [Jeff_Mangasarian]
    public static let `snifferdataUdp`: Self = "_snifferdata._udp"
    /// VSECONNECTOR [Ingo_Franzki]
    public static let `vseconnectorTcp`: Self = "_vseconnector._tcp"
    /// VSECONNECTOR [Ingo_Franzki]
    public static let `vseconnectorUdp`: Self = "_vseconnector._udp"
    /// ABACUS-REMOTE [Mike_Bello]
    public static let `abacusRemoteTcp`: Self = "_abacus-remote._tcp"
    /// ABACUS-REMOTE [Mike_Bello]
    public static let `abacusRemoteUdp`: Self = "_abacus-remote._udp"
    /// NATUS LINK [Jonathan_Mergy]
    public static let `natuslinkTcp`: Self = "_natuslink._tcp"
    /// NATUS LINK [Jonathan_Mergy]
    public static let `natuslinkUdp`: Self = "_natuslink._udp"
    /// ECOVISIONG6-1 [Henrik_Holst]
    public static let `ecovisiong61Tcp`: Self = "_ecovisiong6-1._tcp"
    /// ECOVISIONG6-1 [Henrik_Holst]
    public static let `ecovisiong61Udp`: Self = "_ecovisiong6-1._udp"
    /// Citrix RTMP [Myk_Willis]
    public static let `citrixRtmpTcp`: Self = "_citrix-rtmp._tcp"
    /// Citrix RTMP [Myk_Willis]
    public static let `citrixRtmpUdp`: Self = "_citrix-rtmp._udp"
    /// APPLIANCE-CFG [Gary_A_James]
    public static let `applianceCfgTcp`: Self = "_appliance-cfg._tcp"
    /// APPLIANCE-CFG [Gary_A_James]
    public static let `applianceCfgUdp`: Self = "_appliance-cfg._udp"
    /// POWERGEMPLUS [Koich_Nakamura]
    public static let `powergemplusTcp`: Self = "_powergemplus._tcp"
    /// POWERGEMPLUS [Koich_Nakamura]
    public static let `powergemplusUdp`: Self = "_powergemplus._udp"
    /// QUICKSUITE [William_Egge]
    public static let `quicksuiteTcp`: Self = "_quicksuite._tcp"
    /// QUICKSUITE [William_Egge]
    public static let `quicksuiteUdp`: Self = "_quicksuite._udp"
    /// ALLSTORCNS [Steve_Dobson]
    public static let `allstorcnsTcp`: Self = "_allstorcns._tcp"
    /// ALLSTORCNS [Steve_Dobson]
    public static let `allstorcnsUdp`: Self = "_allstorcns._udp"
    /// NET ASPI [Johnson_Luo]
    public static let `netaspiTcp`: Self = "_netaspi._tcp"
    /// NET ASPI [Johnson_Luo]
    public static let `netaspiUdp`: Self = "_netaspi._udp"
    /// SUITCASE [Milton_E_Sagen]
    public static let `suitcaseTcp`: Self = "_suitcase._tcp"
    /// SUITCASE [Milton_E_Sagen]
    public static let `suitcaseUdp`: Self = "_suitcase._udp"
    /// M2UA [Lyndon_Ong]
    public static let `m2uaTcp`: Self = "_m2ua._tcp"
    /// M2UA [Lyndon_Ong]
    public static let `m2uaUdp`: Self = "_m2ua._udp"
    /// M2UA [Lyndon_Ong]
    public static let `m2uaSctp`: Self = "_m2ua._sctp"
    /// M3UA [Lyndon_Ong]
    public static let `m3uaTcp`: Self = "_m3ua._tcp"
    /// M3UA [Lyndon_Ong]
    public static let `m3uaSctp`: Self = "_m3ua._sctp"
    /// CALLER9 [Shams_Naqi]
    public static let `caller9Tcp`: Self = "_caller9._tcp"
    /// CALLER9 [Shams_Naqi]
    public static let `caller9Udp`: Self = "_caller9._udp"
    /// WEBMETHODS B2B [Joseph_Hines]
    public static let `webmethodsB2bTcp`: Self = "_webmethods-b2b._tcp"
    /// WEBMETHODS B2B [Joseph_Hines]
    public static let `webmethodsB2bUdp`: Self = "_webmethods-b2b._udp"
    /// mao [Marc_Baudoin]
    public static let `maoTcp`: Self = "_mao._tcp"
    /// mao [Marc_Baudoin]
    public static let `maoUdp`: Self = "_mao._udp"
    /// Funk Dialout [Cimarron_Boozer]
    public static let `funkDialoutTcp`: Self = "_funk-dialout._tcp"
    /// Funk Dialout [Cimarron_Boozer]
    public static let `funkDialoutUdp`: Self = "_funk-dialout._udp"
    /// TDAccess [Tom_Haapanen]
    public static let `tdaccessTcp`: Self = "_tdaccess._tcp"
    /// TDAccess [Tom_Haapanen]
    public static let `tdaccessUdp`: Self = "_tdaccess._udp"
    /// Blockade [Blockade]
    public static let `blockadeTcp`: Self = "_blockade._tcp"
    /// Blockade [Blockade]
    public static let `blockadeUdp`: Self = "_blockade._udp"
    /// Epicon [Michael_Khalandovsky]
    public static let `epiconTcp`: Self = "_epicon._tcp"
    /// Epicon [Michael_Khalandovsky]
    public static let `epiconUdp`: Self = "_epicon._udp"
    /// Booster Ware [Ido_Ben_David]
    public static let `boosterwareTcp`: Self = "_boosterware._tcp"
    /// Booster Ware [Ido_Ben_David]
    public static let `boosterwareUdp`: Self = "_boosterware._udp"
    /// Game Lobby [Paul_Ford_Hutchinson]
    public static let `gamelobbyTcp`: Self = "_gamelobby._tcp"
    /// Game Lobby [Paul_Ford_Hutchinson]
    public static let `gamelobbyUdp`: Self = "_gamelobby._udp"
    /// TK Socket [Dino_Ciano]
    public static let `tksocketTcp`: Self = "_tksocket._tcp"
    /// TK Socket [Dino_Ciano]
    public static let `tksocketUdp`: Self = "_tksocket._udp"
    /// Elvin Server IANA assigned this well-formed service name as a replacement for "elvin_server". 
    public static let `elvinServerTcp`: Self = "_elvin-server._tcp"
    /// Elvin Server 
    public static let `elvin_serverTcp`: Self = "_elvin_server._tcp"
    /// Elvin Server IANA assigned this well-formed service name as a replacement for "elvin_server". 
    public static let `elvinServerUdp`: Self = "_elvin-server._udp"
    /// Elvin Server 
    public static let `elvin_serverUdp`: Self = "_elvin_server._udp"
    /// Elvin Client IANA assigned this well-formed service name as a replacement for "elvin_client". [David_Arnold]
    public static let `elvinClientTcp`: Self = "_elvin-client._tcp"
    /// Elvin Client [David_Arnold]
    public static let `elvin_clientTcp`: Self = "_elvin_client._tcp"
    /// Elvin Client IANA assigned this well-formed service name as a replacement for "elvin_client". [David_Arnold]
    public static let `elvinClientUdp`: Self = "_elvin-client._udp"
    /// Elvin Client [David_Arnold]
    public static let `elvin_clientUdp`: Self = "_elvin_client._udp"
    /// Kasten Chase Pad [Marc_Gauthier]
    public static let `kastenchasepadTcp`: Self = "_kastenchasepad._tcp"
    /// Kasten Chase Pad [Marc_Gauthier]
    public static let `kastenchasepadUdp`: Self = "_kastenchasepad._udp"
    /// roboER [Paul_Snook]
    public static let `roboerTcp`: Self = "_roboer._tcp"
    /// roboER [Paul_Snook]
    public static let `roboerUdp`: Self = "_roboer._udp"
    /// roboEDA [Paul_Snook]
    public static let `roboedaTcp`: Self = "_roboeda._tcp"
    /// roboEDA [Paul_Snook]
    public static let `roboedaUdp`: Self = "_roboeda._udp"
    /// CESD Contents Delivery Management [Shinya_Abe]
    public static let `cesdcdmanTcp`: Self = "_cesdcdman._tcp"
    /// CESD Contents Delivery Management [Shinya_Abe]
    public static let `cesdcdmanUdp`: Self = "_cesdcdman._udp"
    /// CESD Contents Delivery Data Transfer [Shinya_Abe]
    public static let `cesdcdtrnTcp`: Self = "_cesdcdtrn._tcp"
    /// CESD Contents Delivery Data Transfer [Shinya_Abe]
    public static let `cesdcdtrnUdp`: Self = "_cesdcdtrn._udp"
    /// WTA-WSP-WTP-S [Sebastien_Bury]
    public static let `wtaWspWtpSTcp`: Self = "_wta-wsp-wtp-s._tcp"
    /// WTA-WSP-WTP-S [Sebastien_Bury]
    public static let `wtaWspWtpSUdp`: Self = "_wta-wsp-wtp-s._udp"
    /// PRECISE-VIP [Michael_Landwehr]
    public static let `preciseVipTcp`: Self = "_precise-vip._tcp"
    /// PRECISE-VIP [Michael_Landwehr]
    public static let `preciseVipUdp`: Self = "_precise-vip._udp"
    /// MOBILE-FILE-DL [Mitsuji_Toda]
    public static let `mobileFileDlTcp`: Self = "_mobile-file-dl._tcp"
    /// MOBILE-FILE-DL [Mitsuji_Toda]
    public static let `mobileFileDlUdp`: Self = "_mobile-file-dl._udp"
    /// UNIMOBILECTRL [Vikas]
    public static let `unimobilectrlTcp`: Self = "_unimobilectrl._tcp"
    /// UNIMOBILECTRL [Vikas]
    public static let `unimobilectrlUdp`: Self = "_unimobilectrl._udp"
    /// REDSTONE-CPSS [Jeff_Looman]
    public static let `redstoneCpssTcp`: Self = "_redstone-cpss._tcp"
    /// REDSTONE-CPSS [Jeff_Looman]
    public static let `redstoneCpssUdp`: Self = "_redstone-cpss._udp"
    /// AMX-WEBADMIN [Mike_Morris]
    public static let `amxWebadminTcp`: Self = "_amx-webadmin._tcp"
    /// AMX-WEBADMIN [Mike_Morris]
    public static let `amxWebadminUdp`: Self = "_amx-webadmin._udp"
    /// AMX-WEBLINX [Mike_Morris]
    public static let `amxWeblinxTcp`: Self = "_amx-weblinx._tcp"
    /// AMX-WEBLINX [Mike_Morris]
    public static let `amxWeblinxUdp`: Self = "_amx-weblinx._udp"
    /// Circle-X [Norm_Freedman_2]
    public static let `circleXTcp`: Self = "_circle-x._tcp"
    /// Circle-X [Norm_Freedman_2]
    public static let `circleXUdp`: Self = "_circle-x._udp"
    /// INCP [Keith_Paulsen]
    public static let `incpTcp`: Self = "_incp._tcp"
    /// INCP [Keith_Paulsen]
    public static let `incpUdp`: Self = "_incp._udp"
    /// QTP [Cameron_Young]
    public static let `qtpTcp`: Self = "_qtp._tcp"
    /// QTP [Cameron_Young]
    public static let `qtpUdp`: Self = "_qtp._udp"
    /// OTPatch [Brett_Goldstein]
    public static let `otpatchTcp`: Self = "_otpatch._tcp"
    /// OTPatch [Brett_Goldstein]
    public static let `otpatchUdp`: Self = "_otpatch._udp"
    /// PNACONSULT-LM [Theo_Nijssen]
    public static let `pnaconsultLmTcp`: Self = "_pnaconsult-lm._tcp"
    /// PNACONSULT-LM [Theo_Nijssen]
    public static let `pnaconsultLmUdp`: Self = "_pnaconsult-lm._udp"
    /// SM-PAS-1 
    public static let `smPas1Tcp`: Self = "_sm-pas-1._tcp"
    /// SM-PAS-1 
    public static let `smPas1Udp`: Self = "_sm-pas-1._udp"
    /// SM-PAS-2 
    public static let `smPas2Tcp`: Self = "_sm-pas-2._tcp"
    /// SM-PAS-2 
    public static let `smPas2Udp`: Self = "_sm-pas-2._udp"
    /// SM-PAS-3 
    public static let `smPas3Tcp`: Self = "_sm-pas-3._tcp"
    /// SM-PAS-3 
    public static let `smPas3Udp`: Self = "_sm-pas-3._udp"
    /// SM-PAS-4 
    public static let `smPas4Tcp`: Self = "_sm-pas-4._tcp"
    /// SM-PAS-4 
    public static let `smPas4Udp`: Self = "_sm-pas-4._udp"
    /// SM-PAS-5 [Tom_Haapanen]
    public static let `smPas5Tcp`: Self = "_sm-pas-5._tcp"
    /// SM-PAS-5 [Tom_Haapanen]
    public static let `smPas5Udp`: Self = "_sm-pas-5._udp"
    /// TTNRepository [Robert_Orr]
    public static let `ttnrepositoryTcp`: Self = "_ttnrepository._tcp"
    /// TTNRepository [Robert_Orr]
    public static let `ttnrepositoryUdp`: Self = "_ttnrepository._udp"
    /// Megaco H-248 [Tom_Taylor_2]
    public static let `megacoH248Tcp`: Self = "_megaco-h248._tcp"
    /// Megaco H-248 [Tom_Taylor_2]
    public static let `megacoH248Udp`: Self = "_megaco-h248._udp"
    /// Megaco-H.248 text [Tom_Taylor_3]
    public static let `megacoH248Sctp`: Self = "_megaco-h248._sctp"
    /// H248 Binary [Tom_Taylor_2]
    public static let `h248BinaryTcp`: Self = "_h248-binary._tcp"
    /// H248 Binary [Tom_Taylor_2]
    public static let `h248BinaryUdp`: Self = "_h248-binary._udp"
    /// Megaco/H.248 binary [Tom_Taylor_3]
    public static let `h248BinarySctp`: Self = "_h248-binary._sctp"
    /// FJSVmpor [Naoki_Hayashi]
    public static let `fjsvmporTcp`: Self = "_fjsvmpor._tcp"
    /// FJSVmpor [Naoki_Hayashi]
    public static let `fjsvmporUdp`: Self = "_fjsvmpor._udp"
    /// GPS Daemon request/response protocol [Eric_S_Raymond]
    public static let `gpsdTcp`: Self = "_gpsd._tcp"
    /// GPS Daemon request/response protocol [Eric_S_Raymond]
    public static let `gpsdUdp`: Self = "_gpsd._udp"
    /// WAP PUSH 
    public static let `wapPushTcp`: Self = "_wap-push._tcp"
    /// WAP PUSH 
    public static let `wapPushUdp`: Self = "_wap-push._udp"
    /// WAP PUSH SECURE [WAP_Forum]
    public static let `wapPushsecureTcp`: Self = "_wap-pushsecure._tcp"
    /// WAP PUSH SECURE [WAP_Forum]
    public static let `wapPushsecureUdp`: Self = "_wap-pushsecure._udp"
    /// ESIP [David_Stephenson]
    public static let `esipTcp`: Self = "_esip._tcp"
    /// ESIP [David_Stephenson]
    public static let `esipUdp`: Self = "_esip._udp"
    /// OTTP [Brent_Foster]
    public static let `ottpTcp`: Self = "_ottp._tcp"
    /// OTTP [Brent_Foster]
    public static let `ottpUdp`: Self = "_ottp._udp"
    /// MPFWSAS [Toru_Murai]
    public static let `mpfwsasTcp`: Self = "_mpfwsas._tcp"
    /// MPFWSAS [Toru_Murai]
    public static let `mpfwsasUdp`: Self = "_mpfwsas._udp"
    /// OVALARMSRV 
    public static let `ovalarmsrvTcp`: Self = "_ovalarmsrv._tcp"
    /// OVALARMSRV 
    public static let `ovalarmsrvUdp`: Self = "_ovalarmsrv._udp"
    /// OVALARMSRV-CMD [Eric_Pulsipher]
    public static let `ovalarmsrvCmdTcp`: Self = "_ovalarmsrv-cmd._tcp"
    /// OVALARMSRV-CMD [Eric_Pulsipher]
    public static let `ovalarmsrvCmdUdp`: Self = "_ovalarmsrv-cmd._udp"
    /// CSNOTIFY [Israel_Beniaminy]
    public static let `csnotifyTcp`: Self = "_csnotify._tcp"
    /// CSNOTIFY [Israel_Beniaminy]
    public static let `csnotifyUdp`: Self = "_csnotify._udp"
    /// OVRIMOSDBMAN [Dimitrios_Souflis]
    public static let `ovrimosdbmanTcp`: Self = "_ovrimosdbman._tcp"
    /// OVRIMOSDBMAN [Dimitrios_Souflis]
    public static let `ovrimosdbmanUdp`: Self = "_ovrimosdbman._udp"
    /// JAMCT5 
    public static let `jmact5Tcp`: Self = "_jmact5._tcp"
    /// JAMCT5 
    public static let `jmact5Udp`: Self = "_jmact5._udp"
    /// JAMCT6 
    public static let `jmact6Tcp`: Self = "_jmact6._tcp"
    /// JAMCT6 
    public static let `jmact6Udp`: Self = "_jmact6._udp"
    /// RMOPAGT [Shuji_Okubo]
    public static let `rmopagtTcp`: Self = "_rmopagt._tcp"
    /// RMOPAGT [Shuji_Okubo]
    public static let `rmopagtUdp`: Self = "_rmopagt._udp"
    /// DFOXSERVER [David_Holden]
    public static let `dfoxserverTcp`: Self = "_dfoxserver._tcp"
    /// DFOXSERVER [David_Holden]
    public static let `dfoxserverUdp`: Self = "_dfoxserver._udp"
    /// BOLDSOFT-LM [Fredrik_Haglund]
    public static let `boldsoftLmTcp`: Self = "_boldsoft-lm._tcp"
    /// BOLDSOFT-LM [Fredrik_Haglund]
    public static let `boldsoftLmUdp`: Self = "_boldsoft-lm._udp"
    /// IPH-POLICY-CLI 
    public static let `iphPolicyCliTcp`: Self = "_iph-policy-cli._tcp"
    /// IPH-POLICY-CLI 
    public static let `iphPolicyCliUdp`: Self = "_iph-policy-cli._udp"
    /// IPH-POLICY-ADM [Shai_Herzog]
    public static let `iphPolicyAdmTcp`: Self = "_iph-policy-adm._tcp"
    /// IPH-POLICY-ADM [Shai_Herzog]
    public static let `iphPolicyAdmUdp`: Self = "_iph-policy-adm._udp"
    /// BULLANT SRAP 
    public static let `bullantSrapTcp`: Self = "_bullant-srap._tcp"
    /// BULLANT SRAP 
    public static let `bullantSrapUdp`: Self = "_bullant-srap._udp"
    /// BULLANT RAP [Michael_Cahill]
    public static let `bullantRapTcp`: Self = "_bullant-rap._tcp"
    /// BULLANT RAP [Michael_Cahill]
    public static let `bullantRapUdp`: Self = "_bullant-rap._udp"
    /// IDP-INFOTRIEVE [Kevin_Bruckert]
    public static let `idpInfotrieveTcp`: Self = "_idp-infotrieve._tcp"
    /// IDP-INFOTRIEVE [Kevin_Bruckert]
    public static let `idpInfotrieveUdp`: Self = "_idp-infotrieve._udp"
    /// SSC-AGENT [George_Dzieciol]
    public static let `sscAgentTcp`: Self = "_ssc-agent._tcp"
    /// SSC-AGENT [George_Dzieciol]
    public static let `sscAgentUdp`: Self = "_ssc-agent._udp"
    /// ENPP [Kazuhito_Gassho]
    public static let `enppTcp`: Self = "_enpp._tcp"
    /// ENPP [Kazuhito_Gassho]
    public static let `enppUdp`: Self = "_enpp._udp"
    /// ESSP [Hitoshi_Ishida]
    public static let `esspTcp`: Self = "_essp._tcp"
    /// ESSP [Hitoshi_Ishida]
    public static let `esspUdp`: Self = "_essp._udp"
    /// INDEX-NET [Chris_J_Wren]
    public static let `indexNetTcp`: Self = "_index-net._tcp"
    /// INDEX-NET [Chris_J_Wren]
    public static let `indexNetUdp`: Self = "_index-net._udp"
    /// NetClip clipboard daemon [Rudi_Chiarito]
    public static let `netclipTcp`: Self = "_netclip._tcp"
    /// NetClip clipboard daemon [Rudi_Chiarito]
    public static let `netclipUdp`: Self = "_netclip._udp"
    /// PMSM Webrctl [Markus_Michels]
    public static let `pmsmWebrctlTcp`: Self = "_pmsm-webrctl._tcp"
    /// PMSM Webrctl [Markus_Michels]
    public static let `pmsmWebrctlUdp`: Self = "_pmsm-webrctl._udp"
    /// SV Networks [Sylvia_Siu_2]
    public static let `svnetworksTcp`: Self = "_svnetworks._tcp"
    /// SV Networks [Sylvia_Siu_2]
    public static let `svnetworksUdp`: Self = "_svnetworks._udp"
    /// Signal [Wyatt_Williams]
    public static let `signalTcp`: Self = "_signal._tcp"
    /// Signal [Wyatt_Williams]
    public static let `signalUdp`: Self = "_signal._udp"
    /// Fujitsu Configuration Management Service [Hiroki_Kawano]
    public static let `fjmpcmTcp`: Self = "_fjmpcm._tcp"
    /// Fujitsu Configuration Management Service [Hiroki_Kawano]
    public static let `fjmpcmUdp`: Self = "_fjmpcm._udp"
    /// CNS Server Port [Ram_Golla]
    public static let `cnsSrvPortTcp`: Self = "_cns-srv-port._tcp"
    /// CNS Server Port [Ram_Golla]
    public static let `cnsSrvPortUdp`: Self = "_cns-srv-port._udp"
    /// TTCs Enterprise Test Access Protocol - NS 
    public static let `ttcEtapNsTcp`: Self = "_ttc-etap-ns._tcp"
    /// TTCs Enterprise Test Access Protocol - NS 
    public static let `ttcEtapNsUdp`: Self = "_ttc-etap-ns._udp"
    /// TTCs Enterprise Test Access Protocol - DS [Daniel_Becker_2]
    public static let `ttcEtapDsTcp`: Self = "_ttc-etap-ds._tcp"
    /// TTCs Enterprise Test Access Protocol - DS [Daniel_Becker_2]
    public static let `ttcEtapDsUdp`: Self = "_ttc-etap-ds._udp"
    /// H.263 Video Streaming [Jauvane_C_de_Olivei]
    public static let `h263VideoTcp`: Self = "_h263-video._tcp"
    /// H.263 Video Streaming [Jauvane_C_de_Olivei]
    public static let `h263VideoUdp`: Self = "_h263-video._udp"
    /// Instant Messaging Service [Kevin_Birch]
    public static let `wimdTcp`: Self = "_wimd._tcp"
    /// Instant Messaging Service [Kevin_Birch]
    public static let `wimdUdp`: Self = "_wimd._udp"
    /// MYLXAMPORT [Wei_Gao]
    public static let `mylxamportTcp`: Self = "_mylxamport._tcp"
    /// MYLXAMPORT [Wei_Gao]
    public static let `mylxamportUdp`: Self = "_mylxamport._udp"
    /// IWB-WHITEBOARD [David_W_Radcliffe]
    public static let `iwbWhiteboardTcp`: Self = "_iwb-whiteboard._tcp"
    /// IWB-WHITEBOARD [David_W_Radcliffe]
    public static let `iwbWhiteboardUdp`: Self = "_iwb-whiteboard._udp"
    /// NETPLAN [Thomas_Driemeyer]
    public static let `netplanTcp`: Self = "_netplan._tcp"
    /// NETPLAN [Thomas_Driemeyer]
    public static let `netplanUdp`: Self = "_netplan._udp"
    /// HPIDSADMIN 
    public static let `hpidsadminTcp`: Self = "_hpidsadmin._tcp"
    /// HPIDSADMIN 
    public static let `hpidsadminUdp`: Self = "_hpidsadmin._udp"
    /// HPIDSAGENT [John_Trudeau]
    public static let `hpidsagentTcp`: Self = "_hpidsagent._tcp"
    /// HPIDSAGENT [John_Trudeau]
    public static let `hpidsagentUdp`: Self = "_hpidsagent._udp"
    /// STONEFALLS [Scott_Grau]
    public static let `stonefallsTcp`: Self = "_stonefalls._tcp"
    /// STONEFALLS [Scott_Grau]
    public static let `stonefallsUdp`: Self = "_stonefalls._udp"
    /// identify 
    public static let `identifyTcp`: Self = "_identify._tcp"
    /// identify 
    public static let `identifyUdp`: Self = "_identify._udp"
    /// HIPPA Reporting Protocol [William_Randolph_Roy]
    public static let `hippadTcp`: Self = "_hippad._tcp"
    /// HIPPA Reporting Protocol [William_Randolph_Roy]
    public static let `hippadUdp`: Self = "_hippad._udp"
    /// ZARKOV Intelligent Agent Communication [Robin_Felix]
    public static let `zarkovTcp`: Self = "_zarkov._tcp"
    /// ZARKOV Intelligent Agent Communication [Robin_Felix]
    public static let `zarkovUdp`: Self = "_zarkov._udp"
    /// BOSCAP [Dirk_Hillbrecht]
    public static let `boscapTcp`: Self = "_boscap._tcp"
    /// BOSCAP [Dirk_Hillbrecht]
    public static let `boscapUdp`: Self = "_boscap._udp"
    /// WKSTN-MON [William_David]
    public static let `wkstnMonTcp`: Self = "_wkstn-mon._tcp"
    /// WKSTN-MON [William_David]
    public static let `wkstnMonUdp`: Self = "_wkstn-mon._udp"
    /// Avenyo Server [Bodo_Rueskamp]
    public static let `avenyoTcp`: Self = "_avenyo._tcp"
    /// Avenyo Server [Bodo_Rueskamp]
    public static let `avenyoUdp`: Self = "_avenyo._udp"
    /// VERITAS VIS1 
    public static let `veritasVis1Tcp`: Self = "_veritas-vis1._tcp"
    /// VERITAS VIS1 
    public static let `veritasVis1Udp`: Self = "_veritas-vis1._udp"
    /// VERITAS VIS2 [Dinkar_Chivaluri]
    public static let `veritasVis2Tcp`: Self = "_veritas-vis2._tcp"
    /// VERITAS VIS2 [Dinkar_Chivaluri]
    public static let `veritasVis2Udp`: Self = "_veritas-vis2._udp"
    /// IDRS [Jeff_Eaton]
    public static let `idrsTcp`: Self = "_idrs._tcp"
    /// IDRS [Jeff_Eaton]
    public static let `idrsUdp`: Self = "_idrs._udp"
    /// vsixml [Rob_Juergens]
    public static let `vsixmlTcp`: Self = "_vsixml._tcp"
    /// vsixml [Rob_Juergens]
    public static let `vsixmlUdp`: Self = "_vsixml._udp"
    /// REBOL [Holger_Kruse]
    public static let `rebolTcp`: Self = "_rebol._tcp"
    /// REBOL [Holger_Kruse]
    public static let `rebolUdp`: Self = "_rebol._udp"
    /// Real Secure [Wes_Wilson]
    public static let `realsecureTcp`: Self = "_realsecure._tcp"
    /// Real Secure [Wes_Wilson]
    public static let `realsecureUdp`: Self = "_realsecure._udp"
    /// RemoteWare Unassigned [Tim_Farley]
    public static let `remotewareUnTcp`: Self = "_remoteware-un._tcp"
    /// RemoteWare Unassigned [Tim_Farley]
    public static let `remotewareUnUdp`: Self = "_remoteware-un._udp"
    /// HBCI [Kurt_Haubner]
    public static let `hbciTcp`: Self = "_hbci._tcp"
    /// HBCI [Kurt_Haubner]
    public static let `hbciUdp`: Self = "_hbci._udp"
    /// RemoteWare Client [Tim_Farley]
    public static let `remotewareClTcp`: Self = "_remoteware-cl._tcp"
    /// RemoteWare Client [Tim_Farley]
    public static let `remotewareClUdp`: Self = "_remoteware-cl._udp"
    /// OrigoDB Server Native Interface [Devrex_Labs]
    public static let `origoNativeTcp`: Self = "_origo-native._tcp"
    /// EXLM Agent [Randy_Martin]
    public static let `exlmAgentTcp`: Self = "_exlm-agent._tcp"
    /// EXLM Agent [Randy_Martin]
    public static let `exlmAgentUdp`: Self = "_exlm-agent._udp"
    /// RemoteWare Server [Tim_Farley]
    public static let `remotewareSrvTcp`: Self = "_remoteware-srv._tcp"
    /// RemoteWare Server [Tim_Farley]
    public static let `remotewareSrvUdp`: Self = "_remoteware-srv._udp"
    /// CGMS [Corey_Clinton]
    public static let `cgmsTcp`: Self = "_cgms._tcp"
    /// CGMS [Corey_Clinton]
    public static let `cgmsUdp`: Self = "_cgms._udp"
    /// Csoft Agent [Nedelcho_Stanev_2]
    public static let `csoftragentTcp`: Self = "_csoftragent._tcp"
    /// Csoft Agent [Nedelcho_Stanev_2]
    public static let `csoftragentUdp`: Self = "_csoftragent._udp"
    /// Genius License Manager [Jakob_Spies]
    public static let `geniuslmTcp`: Self = "_geniuslm._tcp"
    /// Genius License Manager [Jakob_Spies]
    public static let `geniuslmUdp`: Self = "_geniuslm._udp"
    /// Instant Internet Admin [PerfTech_Inc]
    public static let `iiAdminTcp`: Self = "_ii-admin._tcp"
    /// Instant Internet Admin [PerfTech_Inc]
    public static let `iiAdminUdp`: Self = "_ii-admin._udp"
    /// Lotus Mail Tracking Agent Protocol [Ken_Lin]
    public static let `lotusmtapTcp`: Self = "_lotusmtap._tcp"
    /// Lotus Mail Tracking Agent Protocol [Ken_Lin]
    public static let `lotusmtapUdp`: Self = "_lotusmtap._udp"
    /// Midnight Technologies [Kyle_Unice]
    public static let `midnightTechTcp`: Self = "_midnight-tech._tcp"
    /// Midnight Technologies [Kyle_Unice]
    public static let `midnightTechUdp`: Self = "_midnight-tech._udp"
    /// PXC-NTFY [Takeshi_Nishizawa]
    public static let `pxcNtfyTcp`: Self = "_pxc-ntfy._tcp"
    /// PXC-NTFY [Takeshi_Nishizawa]
    public static let `pxcNtfyUdp`: Self = "_pxc-ntfy._udp"
    /// Telerate Workstation 
    public static let `gwTcp`: Self = "_gw._tcp"
    /// Telerate Workstation [Timo_Sivonen]
    public static let `pingPongUdp`: Self = "_ping-pong._udp"
    /// Trusted Web 
    public static let `trustedWebTcp`: Self = "_trusted-web._tcp"
    /// Trusted Web 
    public static let `trustedWebUdp`: Self = "_trusted-web._udp"
    /// Trusted Web Client [Alex_Duncan]
    public static let `twsdssTcp`: Self = "_twsdss._tcp"
    /// Trusted Web Client [Alex_Duncan]
    public static let `twsdssUdp`: Self = "_twsdss._udp"
    /// Gilat Sky Surfer [Yossi_Gal]
    public static let `gilatskysurferTcp`: Self = "_gilatskysurfer._tcp"
    /// Gilat Sky Surfer [Yossi_Gal]
    public static let `gilatskysurferUdp`: Self = "_gilatskysurfer._udp"
    /// Broker Service IANA assigned this well-formed service name as a replacement for "broker_service". [Dale_Bethers]
    public static let `brokerServiceTcp`: Self = "_broker-service._tcp"
    /// Broker Service [Dale_Bethers]
    public static let `broker_serviceTcp`: Self = "_broker_service._tcp"
    /// Broker Service IANA assigned this well-formed service name as a replacement for "broker_service". [Dale_Bethers]
    public static let `brokerServiceUdp`: Self = "_broker-service._udp"
    /// Broker Service [Dale_Bethers]
    public static let `broker_serviceUdp`: Self = "_broker_service._udp"
    /// NATI DSTP [Paul_Austin]
    public static let `natiDstpTcp`: Self = "_nati-dstp._tcp"
    /// NATI DSTP [Paul_Austin]
    public static let `natiDstpUdp`: Self = "_nati-dstp._udp"
    /// Notify Server IANA assigned this well-formed service name as a replacement for "notify_srvr". [Hugo_Parra]
    public static let `notifySrvrTcp`: Self = "_notify-srvr._tcp"
    /// Notify Server [Hugo_Parra]
    public static let `notify_srvrTcp`: Self = "_notify_srvr._tcp"
    /// Notify Server IANA assigned this well-formed service name as a replacement for "notify_srvr". [Hugo_Parra]
    public static let `notifySrvrUdp`: Self = "_notify-srvr._udp"
    /// Notify Server [Hugo_Parra]
    public static let `notify_srvrUdp`: Self = "_notify_srvr._udp"
    /// Event Listener IANA assigned this well-formed service name as a replacement for "event_listener". [Ted_Tronson]
    public static let `eventListenerTcp`: Self = "_event-listener._tcp"
    /// Event Listener [Ted_Tronson]
    public static let `event_listenerTcp`: Self = "_event_listener._tcp"
    /// Event Listener IANA assigned this well-formed service name as a replacement for "event_listener". [Ted_Tronson]
    public static let `eventListenerUdp`: Self = "_event-listener._udp"
    /// Event Listener [Ted_Tronson]
    public static let `event_listenerUdp`: Self = "_event_listener._udp"
    /// Service Registry IANA assigned this well-formed service name as a replacement for "srvc_registry". [Mark_Killgore]
    public static let `srvcRegistryTcp`: Self = "_srvc-registry._tcp"
    /// Service Registry [Mark_Killgore]
    public static let `srvc_registryTcp`: Self = "_srvc_registry._tcp"
    /// Service Registry IANA assigned this well-formed service name as a replacement for "srvc_registry". [Mark_Killgore]
    public static let `srvcRegistryUdp`: Self = "_srvc-registry._udp"
    /// Service Registry [Mark_Killgore]
    public static let `srvc_registryUdp`: Self = "_srvc_registry._udp"
    /// Resource Manager IANA assigned this well-formed service name as a replacement for "resource_mgr". [Gary_Glover]
    public static let `resourceMgrTcp`: Self = "_resource-mgr._tcp"
    /// Resource Manager [Gary_Glover]
    public static let `resource_mgrTcp`: Self = "_resource_mgr._tcp"
    /// Resource Manager IANA assigned this well-formed service name as a replacement for "resource_mgr". [Gary_Glover]
    public static let `resourceMgrUdp`: Self = "_resource-mgr._udp"
    /// Resource Manager [Gary_Glover]
    public static let `resource_mgrUdp`: Self = "_resource_mgr._udp"
    /// CIFS [Paul_Leach]
    public static let `cifsTcp`: Self = "_cifs._tcp"
    /// CIFS [Paul_Leach]
    public static let `cifsUdp`: Self = "_cifs._udp"
    /// AGRI Server [Frank_Neulichedl]
    public static let `agriserverTcp`: Self = "_agriserver._tcp"
    /// AGRI Server [Frank_Neulichedl]
    public static let `agriserverUdp`: Self = "_agriserver._udp"
    /// CSREGAGENT [Nedelcho_Stanev]
    public static let `csregagentTcp`: Self = "_csregagent._tcp"
    /// CSREGAGENT [Nedelcho_Stanev]
    public static let `csregagentUdp`: Self = "_csregagent._udp"
    /// magicnotes [Karl_Edwall]
    public static let `magicnotesTcp`: Self = "_magicnotes._tcp"
    /// magicnotes [Karl_Edwall]
    public static let `magicnotesUdp`: Self = "_magicnotes._udp"
    /// NDS_SSO IANA assigned this well-formed service name as a replacement for "nds_sso". [Mel_Oyler]
    public static let `ndsSsoTcp`: Self = "_nds-sso._tcp"
    /// NDS_SSO [Mel_Oyler]
    public static let `nds_ssoTcp`: Self = "_nds_sso._tcp"
    /// NDS_SSO IANA assigned this well-formed service name as a replacement for "nds_sso". [Mel_Oyler]
    public static let `ndsSsoUdp`: Self = "_nds-sso._udp"
    /// NDS_SSO [Mel_Oyler]
    public static let `nds_ssoUdp`: Self = "_nds_sso._udp"
    /// Arepa Raft [Stuart_Schaefer]
    public static let `arepaRaftTcp`: Self = "_arepa-raft._tcp"
    /// Arepa Raft [Stuart_Schaefer]
    public static let `arepaRaftUdp`: Self = "_arepa-raft._udp"
    /// AGRI Gateway [Agri_Datalog]
    public static let `agriGatewayTcp`: Self = "_agri-gateway._tcp"
    /// AGRI Gateway [Agri_Datalog]
    public static let `agriGatewayUdp`: Self = "_agri-gateway._udp"
    /// LiebDevMgmt_C IANA assigned this well-formed service name as a replacement for "LiebDevMgmt_C". 
    public static let `LiebDevMgmtCTcp`: Self = "_LiebDevMgmt-C._tcp"
    /// LiebDevMgmt_C 
    public static let `LiebDevMgmt_CTcp`: Self = "_LiebDevMgmt_C._tcp"
    /// LiebDevMgmt_C IANA assigned this well-formed service name as a replacement for "LiebDevMgmt_C". 
    public static let `LiebDevMgmtCUdp`: Self = "_LiebDevMgmt-C._udp"
    /// LiebDevMgmt_C 
    public static let `LiebDevMgmt_CUdp`: Self = "_LiebDevMgmt_C._udp"
    /// LiebDevMgmt_DM IANA assigned this well-formed service name as a replacement for "LiebDevMgmt_DM". 
    public static let `LiebDevMgmtDmTcp`: Self = "_LiebDevMgmt-DM._tcp"
    /// LiebDevMgmt_DM 
    public static let `LiebDevMgmt_DMTcp`: Self = "_LiebDevMgmt_DM._tcp"
    /// LiebDevMgmt_DM IANA assigned this well-formed service name as a replacement for "LiebDevMgmt_DM". 
    public static let `LiebDevMgmtDmUdp`: Self = "_LiebDevMgmt-DM._udp"
    /// LiebDevMgmt_DM 
    public static let `LiebDevMgmt_DMUdp`: Self = "_LiebDevMgmt_DM._udp"
    /// LiebDevMgmt_A IANA assigned this well-formed service name as a replacement for "LiebDevMgmt_A". [Mike_Velten]
    public static let `LiebDevMgmtATcp`: Self = "_LiebDevMgmt-A._tcp"
    /// LiebDevMgmt_A [Mike_Velten]
    public static let `LiebDevMgmt_ATcp`: Self = "_LiebDevMgmt_A._tcp"
    /// LiebDevMgmt_A IANA assigned this well-formed service name as a replacement for "LiebDevMgmt_A". [Mike_Velten]
    public static let `LiebDevMgmtAUdp`: Self = "_LiebDevMgmt-A._udp"
    /// LiebDevMgmt_A [Mike_Velten]
    public static let `LiebDevMgmt_AUdp`: Self = "_LiebDevMgmt_A._udp"
    /// Arepa Cas [Stuart_Schaefer]
    public static let `arepaCasTcp`: Self = "_arepa-cas._tcp"
    /// Arepa Cas [Stuart_Schaefer]
    public static let `arepaCasUdp`: Self = "_arepa-cas._udp"
    /// Remote AppleEvents/PPC Toolbox [Steve_Zellers]
    public static let `eppcTcp`: Self = "_eppc._tcp"
    /// Remote AppleEvents/PPC Toolbox [Steve_Zellers]
    public static let `eppcUdp`: Self = "_eppc._udp"
    /// Redwood Chat [Songwon_Chi]
    public static let `redwoodChatTcp`: Self = "_redwood-chat._tcp"
    /// Redwood Chat [Songwon_Chi]
    public static let `redwoodChatUdp`: Self = "_redwood-chat._udp"
    /// PDB [Don_Bowman]
    public static let `pdbTcp`: Self = "_pdb._tcp"
    /// PDB [Don_Bowman]
    public static let `pdbUdp`: Self = "_pdb._udp"
    /// Osmosis / Helix (R) AEEA Port [Larry_Atkin]
    public static let `osmosisAeeaTcp`: Self = "_osmosis-aeea._tcp"
    /// Osmosis / Helix (R) AEEA Port [Larry_Atkin]
    public static let `osmosisAeeaUdp`: Self = "_osmosis-aeea._udp"
    /// FJSV gssagt [Tomoji_Koike]
    public static let `fjsvGssagtTcp`: Self = "_fjsv-gssagt._tcp"
    /// FJSV gssagt [Tomoji_Koike]
    public static let `fjsvGssagtUdp`: Self = "_fjsv-gssagt._udp"
    /// Hagel DUMP [Haim_Gelfenbeyn]
    public static let `hagelDumpTcp`: Self = "_hagel-dump._tcp"
    /// Hagel DUMP [Haim_Gelfenbeyn]
    public static let `hagelDumpUdp`: Self = "_hagel-dump._udp"
    /// HP SAN Mgmt [Steve_Britt]
    public static let `hpSanMgmtTcp`: Self = "_hp-san-mgmt._tcp"
    /// HP SAN Mgmt [Steve_Britt]
    public static let `hpSanMgmtUdp`: Self = "_hp-san-mgmt._udp"
    /// Santak UPS [Tom_Liu]
    public static let `santakUpsTcp`: Self = "_santak-ups._tcp"
    /// Santak UPS [Tom_Liu]
    public static let `santakUpsUdp`: Self = "_santak-ups._udp"
    /// Cogitate, Inc. [Jim_Harlan]
    public static let `cogitateTcp`: Self = "_cogitate._tcp"
    /// Cogitate, Inc. [Jim_Harlan]
    public static let `cogitateUdp`: Self = "_cogitate._udp"
    /// Tomato Springs [Jack_Waller_III]
    public static let `tomatoSpringsTcp`: Self = "_tomato-springs._tcp"
    /// Tomato Springs [Jack_Waller_III]
    public static let `tomatoSpringsUdp`: Self = "_tomato-springs._udp"
    /// di-traceware [Carlos_Hung]
    public static let `diTracewareTcp`: Self = "_di-traceware._tcp"
    /// di-traceware [Carlos_Hung]
    public static let `diTracewareUdp`: Self = "_di-traceware._udp"
    /// journee [Kevin_Calman]
    public static let `journeeTcp`: Self = "_journee._tcp"
    /// journee [Kevin_Calman]
    public static let `journeeUdp`: Self = "_journee._udp"
    /// Broadcast Routing Protocol [John_Border]
    public static let `brpTcp`: Self = "_brp._tcp"
    /// Broadcast Routing Protocol [John_Border]
    public static let `brpUdp`: Self = "_brp._udp"
    /// ResponseNet [Chul_Yoon]
    public static let `responsenetTcp`: Self = "_responsenet._tcp"
    /// ResponseNet [Chul_Yoon]
    public static let `responsenetUdp`: Self = "_responsenet._udp"
    /// di-ase [Carlos_Hung]
    public static let `diAseTcp`: Self = "_di-ase._tcp"
    /// di-ase [Carlos_Hung]
    public static let `diAseUdp`: Self = "_di-ase._udp"
    /// Fast Security HL Server [Safenet_Inc.]
    public static let `hlserverTcp`: Self = "_hlserver._tcp"
    /// Fast Security HL Server [Safenet_Inc.]
    public static let `hlserverUdp`: Self = "_hlserver._udp"
    /// Sierra Net PC Trader [Chris_Hahn]
    public static let `pctraderTcp`: Self = "_pctrader._tcp"
    /// Sierra Net PC Trader [Chris_Hahn]
    public static let `pctraderUdp`: Self = "_pctrader._udp"
    /// NSWS [Ray_Gwinn]
    public static let `nswsTcp`: Self = "_nsws._tcp"
    /// NSWS [Ray_Gwinn]
    public static let `nswsUdp`: Self = "_nsws._udp"
    /// gds_db IANA assigned this well-formed service name as a replacement for "gds_db". [Madhukar_N_Thakur]
    public static let `gdsDbTcp`: Self = "_gds-db._tcp"
    /// gds_db [Madhukar_N_Thakur]
    public static let `gds_dbTcp`: Self = "_gds_db._tcp"
    /// gds_db IANA assigned this well-formed service name as a replacement for "gds_db". [Madhukar_N_Thakur]
    public static let `gdsDbUdp`: Self = "_gds-db._udp"
    /// gds_db [Madhukar_N_Thakur]
    public static let `gds_dbUdp`: Self = "_gds_db._udp"
    /// Galaxy Server [Michael_Andre]
    public static let `galaxyServerTcp`: Self = "_galaxy-server._tcp"
    /// Galaxy Server [Michael_Andre]
    public static let `galaxyServerUdp`: Self = "_galaxy-server._udp"
    /// APC 3052 [American_Power_Conve]
    public static let `apc3052Tcp`: Self = "_apc-3052._tcp"
    /// APC 3052 [American_Power_Conve]
    public static let `apc3052Udp`: Self = "_apc-3052._udp"
    /// dsom-server [Daniel_Sisk]
    public static let `dsomServerTcp`: Self = "_dsom-server._tcp"
    /// dsom-server [Daniel_Sisk]
    public static let `dsomServerUdp`: Self = "_dsom-server._udp"
    /// AMT CNF PROT [Marco_Marcucci]
    public static let `amtCnfProtTcp`: Self = "_amt-cnf-prot._tcp"
    /// AMT CNF PROT [Marco_Marcucci]
    public static let `amtCnfProtUdp`: Self = "_amt-cnf-prot._udp"
    /// Policy Server [Mark_Garti]
    public static let `policyserverTcp`: Self = "_policyserver._tcp"
    /// Policy Server [Mark_Garti]
    public static let `policyserverUdp`: Self = "_policyserver._udp"
    /// CDL Server [Paul_Roberts]
    public static let `cdlServerTcp`: Self = "_cdl-server._tcp"
    /// CDL Server [Paul_Roberts]
    public static let `cdlServerUdp`: Self = "_cdl-server._udp"
    /// GoAhead FldUp [Alan_Pickrell]
    public static let `goaheadFldupTcp`: Self = "_goahead-fldup._tcp"
    /// GoAhead FldUp [Alan_Pickrell]
    public static let `goaheadFldupUdp`: Self = "_goahead-fldup._udp"
    /// videobeans [Hiroyuki_Takahashi]
    public static let `videobeansTcp`: Self = "_videobeans._tcp"
    /// videobeans [Hiroyuki_Takahashi]
    public static let `videobeansUdp`: Self = "_videobeans._udp"
    /// qsoft [James_Kunz]
    public static let `qsoftTcp`: Self = "_qsoft._tcp"
    /// qsoft [James_Kunz]
    public static let `qsoftUdp`: Self = "_qsoft._udp"
    /// interserver [Madhukar_N_Thakur]
    public static let `interserverTcp`: Self = "_interserver._tcp"
    /// interserver [Madhukar_N_Thakur]
    public static let `interserverUdp`: Self = "_interserver._udp"
    /// cautcpd 
    public static let `cautcpdTcp`: Self = "_cautcpd._tcp"
    /// cautcpd 
    public static let `cautcpdUdp`: Self = "_cautcpd._udp"
    /// ncacn-ip-tcp 
    public static let `ncacnIpTcpTcp`: Self = "_ncacn-ip-tcp._tcp"
    /// ncacn-ip-tcp 
    public static let `ncacnIpTcpUdp`: Self = "_ncacn-ip-tcp._udp"
    /// ncadg-ip-udp [Gabi_Kalmar]
    public static let `ncadgIpUdpTcp`: Self = "_ncadg-ip-udp._tcp"
    /// ncadg-ip-udp [Gabi_Kalmar]
    public static let `ncadgIpUdpUdp`: Self = "_ncadg-ip-udp._udp"
    /// Remote Port Redirector [Robin_Johnston]
    public static let `rprtTcp`: Self = "_rprt._tcp"
    /// Remote Port Redirector [Robin_Johnston]
    public static let `rprtUdp`: Self = "_rprt._udp"
    /// slinterbase [Bie_Tie]
    public static let `slinterbaseTcp`: Self = "_slinterbase._tcp"
    /// slinterbase [Bie_Tie]
    public static let `slinterbaseUdp`: Self = "_slinterbase._udp"
    /// NETATTACHSDMP [Mike_Young]
    public static let `netattachsdmpTcp`: Self = "_netattachsdmp._tcp"
    /// NETATTACHSDMP [Mike_Young]
    public static let `netattachsdmpUdp`: Self = "_netattachsdmp._udp"
    /// FJHPJP [Ryozo_Furutani]
    public static let `fjhpjpTcp`: Self = "_fjhpjp._tcp"
    /// FJHPJP [Ryozo_Furutani]
    public static let `fjhpjpUdp`: Self = "_fjhpjp._udp"
    /// ls3 Broadcast 
    public static let `ls3bcastTcp`: Self = "_ls3bcast._tcp"
    /// ls3 Broadcast 
    public static let `ls3bcastUdp`: Self = "_ls3bcast._udp"
    /// ls3 [Jim_Thompson]
    public static let `ls3Tcp`: Self = "_ls3._tcp"
    /// ls3 [Jim_Thompson]
    public static let `ls3Udp`: Self = "_ls3._udp"
    /// MGXSWITCH [George_Walter]
    public static let `mgxswitchTcp`: Self = "_mgxswitch._tcp"
    /// MGXSWITCH [George_Walter]
    public static let `mgxswitchUdp`: Self = "_mgxswitch._udp"
    /// Crossplatform replication protocol [NetApp_3]
    public static let `xplatReplicateTcp`: Self = "_xplat-replicate._tcp"
    /// ContinuStor Monitor Port [NetApp]
    public static let `csdMonitorTcp`: Self = "_csd-monitor._tcp"
    /// ContinuStor Monitor Port [NetApp]
    public static let `csdMonitorUdp`: Self = "_csd-monitor._udp"
    /// Very simple chatroom prot [Andreas_Wurf]
    public static let `vcrpTcp`: Self = "_vcrp._tcp"
    /// Very simple chatroom prot [Andreas_Wurf]
    public static let `vcrpUdp`: Self = "_vcrp._udp"
    /// Xbox game port [Damon_Danieli]
    public static let `xboxTcp`: Self = "_xbox._tcp"
    /// Xbox game port [Damon_Danieli]
    public static let `xboxUdp`: Self = "_xbox._udp"
    /// Orbix 2000 Locator 
    public static let `orbixLocatorTcp`: Self = "_orbix-locator._tcp"
    /// Orbix 2000 Locator 
    public static let `orbixLocatorUdp`: Self = "_orbix-locator._udp"
    /// Orbix 2000 Config 
    public static let `orbixConfigTcp`: Self = "_orbix-config._tcp"
    /// Orbix 2000 Config 
    public static let `orbixConfigUdp`: Self = "_orbix-config._udp"
    /// Orbix 2000 Locator SSL 
    public static let `orbixLocSslTcp`: Self = "_orbix-loc-ssl._tcp"
    /// Orbix 2000 Locator SSL 
    public static let `orbixLocSslUdp`: Self = "_orbix-loc-ssl._udp"
    /// Orbix 2000 Locator SSL [Eric_Newcomer]
    public static let `orbixCfgSslTcp`: Self = "_orbix-cfg-ssl._tcp"
    /// Orbix 2000 Locator SSL [Eric_Newcomer]
    public static let `orbixCfgSslUdp`: Self = "_orbix-cfg-ssl._udp"
    /// LV Front Panel [Darshan_Shah]
    public static let `lvFrontpanelTcp`: Self = "_lv-frontpanel._tcp"
    /// LV Front Panel [Darshan_Shah]
    public static let `lvFrontpanelUdp`: Self = "_lv-frontpanel._udp"
    /// stm_pproc IANA assigned this well-formed service name as a replacement for "stm_pproc". [Paul_McGinnis]
    public static let `stmPprocTcp`: Self = "_stm-pproc._tcp"
    /// stm_pproc [Paul_McGinnis]
    public static let `stm_pprocTcp`: Self = "_stm_pproc._tcp"
    /// stm_pproc IANA assigned this well-formed service name as a replacement for "stm_pproc". [Paul_McGinnis]
    public static let `stmPprocUdp`: Self = "_stm-pproc._udp"
    /// stm_pproc [Paul_McGinnis]
    public static let `stm_pprocUdp`: Self = "_stm_pproc._udp"
    /// TL1-LV 
    public static let `tl1LvTcp`: Self = "_tl1-lv._tcp"
    /// TL1-LV 
    public static let `tl1LvUdp`: Self = "_tl1-lv._udp"
    /// TL1-RAW 
    public static let `tl1RawTcp`: Self = "_tl1-raw._tcp"
    /// TL1-RAW 
    public static let `tl1RawUdp`: Self = "_tl1-raw._udp"
    /// TL1-TELNET [SONET_Internetworkin]
    public static let `tl1TelnetTcp`: Self = "_tl1-telnet._tcp"
    /// TL1-TELNET [SONET_Internetworkin]
    public static let `tl1TelnetUdp`: Self = "_tl1-telnet._udp"
    /// ITM-MCCS [Portnoy_Boxman]
    public static let `itmMccsTcp`: Self = "_itm-mccs._tcp"
    /// ITM-MCCS [Portnoy_Boxman]
    public static let `itmMccsUdp`: Self = "_itm-mccs._udp"
    /// PCIHReq [Paul_Sanders]
    public static let `pcihreqTcp`: Self = "_pcihreq._tcp"
    /// PCIHReq [Paul_Sanders]
    public static let `pcihreqUdp`: Self = "_pcihreq._udp"
    /// JDL-DBKitchen [Hideo_Wakabayashi]
    public static let `jdlDbkitchenTcp`: Self = "_jdl-dbkitchen._tcp"
    /// JDL-DBKitchen [Hideo_Wakabayashi]
    public static let `jdlDbkitchenUdp`: Self = "_jdl-dbkitchen._udp"
    /// Asoki SMA [Andrew_Mossberg]
    public static let `asokiSmaTcp`: Self = "_asoki-sma._tcp"
    /// Asoki SMA [Andrew_Mossberg]
    public static let `asokiSmaUdp`: Self = "_asoki-sma._udp"
    /// eXtensible Data Transfer Protocol [Michael_Shearson]
    public static let `xdtpTcp`: Self = "_xdtp._tcp"
    /// eXtensible Data Transfer Protocol [Michael_Shearson]
    public static let `xdtpUdp`: Self = "_xdtp._udp"
    /// ParaTek Agent Linking [Robert_Hodgson_2]
    public static let `ptkAlinkTcp`: Self = "_ptk-alink._tcp"
    /// ParaTek Agent Linking [Robert_Hodgson_2]
    public static let `ptkAlinkUdp`: Self = "_ptk-alink._udp"
    /// Senforce Session Services [Peter_Boucher]
    public static let `stssTcp`: Self = "_stss._tcp"
    /// Senforce Session Services [Peter_Boucher]
    public static let `stssUdp`: Self = "_stss._udp"
    /// Jiiva RapidMQ Center 
    public static let `rapidmqCenterTcp`: Self = "_rapidmq-center._tcp"
    /// Jiiva RapidMQ Center 
    public static let `rapidmqCenterUdp`: Self = "_rapidmq-center._udp"
    /// Jiiva RapidMQ Registry [Mark_Ericksen]
    public static let `rapidmqRegTcp`: Self = "_rapidmq-reg._tcp"
    /// Jiiva RapidMQ Registry [Mark_Ericksen]
    public static let `rapidmqRegUdp`: Self = "_rapidmq-reg._udp"
    /// Panasas rendezvous port [Patrick_Keane]
    public static let `panasasTcp`: Self = "_panasas._tcp"
    /// Panasas rendezvous port [Patrick_Keane]
    public static let `panasasUdp`: Self = "_panasas._udp"
    /// Active Print Server Port [Martin_Norman]
    public static let `ndlApsTcp`: Self = "_ndl-aps._tcp"
    /// Active Print Server Port [Martin_Norman]
    public static let `ndlApsUdp`: Self = "_ndl-aps._udp"
    /// ITU-T Q.1902.1/Q.2150.3 [Greg_Sidebottom]
    public static let `ituBiccStcSctp`: Self = "_itu-bicc-stc._sctp"
    /// Universal Message Manager [Phil_Braham]
    public static let `ummPortTcp`: Self = "_umm-port._tcp"
    /// Universal Message Manager [Phil_Braham]
    public static let `ummPortUdp`: Self = "_umm-port._udp"
    /// CHIPSY Machine Daemon [Trond_Borsting]
    public static let `chmdTcp`: Self = "_chmd._tcp"
    /// CHIPSY Machine Daemon [Trond_Borsting]
    public static let `chmdUdp`: Self = "_chmd._udp"
    /// OpCon/xps [David_Bourland]
    public static let `opconXpsTcp`: Self = "_opcon-xps._tcp"
    /// OpCon/xps [David_Bourland]
    public static let `opconXpsUdp`: Self = "_opcon-xps._udp"
    /// HP PolicyXpert PIB Server [Brian_O_Keefe]
    public static let `hpPxpibTcp`: Self = "_hp-pxpib._tcp"
    /// HP PolicyXpert PIB Server [Brian_O_Keefe]
    public static let `hpPxpibUdp`: Self = "_hp-pxpib._udp"
    /// SoftlinK Slave Mon Port [Moshe_Livne]
    public static let `slslavemonTcp`: Self = "_slslavemon._tcp"
    /// SoftlinK Slave Mon Port [Moshe_Livne]
    public static let `slslavemonUdp`: Self = "_slslavemon._udp"
    /// Autocue SMI Protocol 
    public static let `autocuesmiTcp`: Self = "_autocuesmi._tcp"
    /// Autocue SMI Protocol 
    public static let `autocuesmiUdp`: Self = "_autocuesmi._udp"
    /// Autocue Logger Protocol 
    public static let `autocuelogTcp`: Self = "_autocuelog._tcp"
    /// Autocue Time Service [Geoff_Back]
    public static let `autocuetimeUdp`: Self = "_autocuetime._udp"
    /// Cardbox 
    public static let `cardboxTcp`: Self = "_cardbox._tcp"
    /// Cardbox 
    public static let `cardboxUdp`: Self = "_cardbox._udp"
    /// Cardbox HTTP [Martin_Kochanski]
    public static let `cardboxHttpTcp`: Self = "_cardbox-http._tcp"
    /// Cardbox HTTP [Martin_Kochanski]
    public static let `cardboxHttpUdp`: Self = "_cardbox-http._udp"
    /// Business protocol 
    public static let `businessTcp`: Self = "_business._tcp"
    /// Business protocol 
    public static let `businessUdp`: Self = "_business._udp"
    /// Geolocate protocol 
    public static let `geolocateTcp`: Self = "_geolocate._tcp"
    /// Geolocate protocol 
    public static let `geolocateUdp`: Self = "_geolocate._udp"
    /// Personnel protocol [William_Randolph_Roy]
    public static let `personnelTcp`: Self = "_personnel._tcp"
    /// Personnel protocol [William_Randolph_Roy]
    public static let `personnelUdp`: Self = "_personnel._udp"
    /// simulator control port [Ian_Bell]
    public static let `simControlTcp`: Self = "_sim-control._tcp"
    /// simulator control port [Ian_Bell]
    public static let `simControlUdp`: Self = "_sim-control._udp"
    /// Web Synchronous Services [Valery_Fremaux]
    public static let `wsynchTcp`: Self = "_wsynch._tcp"
    /// Web Synchronous Services [Valery_Fremaux]
    public static let `wsynchUdp`: Self = "_wsynch._udp"
    /// KDE System Guard [Chris_Schlaeger]
    public static let `ksysguardTcp`: Self = "_ksysguard._tcp"
    /// KDE System Guard [Chris_Schlaeger]
    public static let `ksysguardUdp`: Self = "_ksysguard._udp"
    /// CS-Authenticate Svr Port [Cliff_Diamond][Andy_Georgiou]
    public static let `csAuthSvrTcp`: Self = "_cs-auth-svr._tcp"
    /// CS-Authenticate Svr Port [Cliff_Diamond][Andy_Georgiou]
    public static let `csAuthSvrUdp`: Self = "_cs-auth-svr._udp"
    /// CCM AutoDiscover [Ram_Sudama]
    public static let `ccmadTcp`: Self = "_ccmad._tcp"
    /// CCM AutoDiscover [Ram_Sudama]
    public static let `ccmadUdp`: Self = "_ccmad._udp"
    /// MCTET Master 
    public static let `mctetMasterTcp`: Self = "_mctet-master._tcp"
    /// MCTET Master 
    public static let `mctetMasterUdp`: Self = "_mctet-master._udp"
    /// MCTET Gateway 
    public static let `mctetGatewayTcp`: Self = "_mctet-gateway._tcp"
    /// MCTET Gateway 
    public static let `mctetGatewayUdp`: Self = "_mctet-gateway._udp"
    /// MCTET Jserv [Portnoy_Boxman]
    public static let `mctetJservTcp`: Self = "_mctet-jserv._tcp"
    /// MCTET Jserv [Portnoy_Boxman]
    public static let `mctetJservUdp`: Self = "_mctet-jserv._udp"
    /// PKAgent [Michael_Douglass]
    public static let `pkagentTcp`: Self = "_pkagent._tcp"
    /// PKAgent [Michael_Douglass]
    public static let `pkagentUdp`: Self = "_pkagent._udp"
    /// D2000 Kernel Port 
    public static let `d2000kernelTcp`: Self = "_d2000kernel._tcp"
    /// D2000 Kernel Port 
    public static let `d2000kernelUdp`: Self = "_d2000kernel._udp"
    /// D2000 Webserver Port [Tomas_Rajcan]
    public static let `d2000webserverTcp`: Self = "_d2000webserver._tcp"
    /// D2000 Webserver Port [Tomas_Rajcan]
    public static let `d2000webserverUdp`: Self = "_d2000webserver._udp"
    /// The pacemaker remote (pcmk-remote) service extends high availability functionality outside of the Linux cluster into remote nodes. [David_Vossel]
    public static let `pcmkRemoteTcp`: Self = "_pcmk-remote._tcp"
    /// MTI VTR Emulator port [John_Mertus]
    public static let `vtrEmulatorTcp`: Self = "_vtr-emulator._tcp"
    /// MTI VTR Emulator port [John_Mertus]
    public static let `vtrEmulatorUdp`: Self = "_vtr-emulator._udp"
    /// EDI Translation Protocol [William_Randolph_Roy]
    public static let `edixTcp`: Self = "_edix._tcp"
    /// EDI Translation Protocol [William_Randolph_Roy]
    public static let `edixUdp`: Self = "_edix._udp"
    /// Beacon Port [James_Paul_Duncan]
    public static let `beaconPortTcp`: Self = "_beacon-port._tcp"
    /// Beacon Port [James_Paul_Duncan]
    public static let `beaconPortUdp`: Self = "_beacon-port._udp"
    /// A13-AN Interface [Douglas_Knisely]
    public static let `a13AnTcp`: Self = "_a13-an._tcp"
    /// A13-AN Interface [Douglas_Knisely]
    public static let `a13AnUdp`: Self = "_a13-an._udp"
    /// CTX Bridge Port [Alexander_Dubrovsky]
    public static let `ctxBridgeTcp`: Self = "_ctx-bridge._tcp"
    /// CTX Bridge Port [Alexander_Dubrovsky]
    public static let `ctxBridgeUdp`: Self = "_ctx-bridge._udp"
    /// Active API Server Port [Martin_Norman]
    public static let `ndlAasTcp`: Self = "_ndl-aas._tcp"
    /// Active API Server Port [Martin_Norman]
    public static let `ndlAasUdp`: Self = "_ndl-aas._udp"
    /// NetPort Discovery Port [P_T_K_Farrar]
    public static let `netportIdTcp`: Self = "_netport-id._tcp"
    /// NetPort Discovery Port [P_T_K_Farrar]
    public static let `netportIdUdp`: Self = "_netport-id._udp"
    /// ICPv2 [Duane_Wessels]
    public static let `icpv2Tcp`: Self = "_icpv2._tcp"
    /// ICPv2 [Duane_Wessels]
    public static let `icpv2Udp`: Self = "_icpv2._udp"
    /// Net Book Mark [Yiftach_Ravid]
    public static let `netbookmarkTcp`: Self = "_netbookmark._tcp"
    /// Net Book Mark [Yiftach_Ravid]
    public static let `netbookmarkUdp`: Self = "_netbookmark._udp"
    /// Microsoft Business Rule Engine Update Service [Anush_Kumar]
    public static let `msRuleEngineTcp`: Self = "_ms-rule-engine._tcp"
    /// Microsoft Business Rule Engine Update Service [Anush_Kumar]
    public static let `msRuleEngineUdp`: Self = "_ms-rule-engine._udp"
    /// Prism Deploy User Port [Joan_Linck]
    public static let `prismDeployTcp`: Self = "_prism-deploy._tcp"
    /// Prism Deploy User Port [Joan_Linck]
    public static let `prismDeployUdp`: Self = "_prism-deploy._udp"
    /// Extensible Code Protocol [Jim_Trek][Mark_Bocko]
    public static let `ecpTcp`: Self = "_ecp._tcp"
    /// Extensible Code Protocol [Jim_Trek][Mark_Bocko]
    public static let `ecpUdp`: Self = "_ecp._udp"
    /// PeerBook Port [John_Flowers]
    public static let `peerbookPortTcp`: Self = "_peerbook-port._tcp"
    /// PeerBook Port [John_Flowers]
    public static let `peerbookPortUdp`: Self = "_peerbook-port._udp"
    /// Grub Server Port [Kord_Campbell]
    public static let `grubdTcp`: Self = "_grubd._tcp"
    /// Grub Server Port [Kord_Campbell]
    public static let `grubdUdp`: Self = "_grubd._udp"
    /// rtnt-1 data packets 
    public static let `rtnt1Tcp`: Self = "_rtnt-1._tcp"
    /// rtnt-1 data packets 
    public static let `rtnt1Udp`: Self = "_rtnt-1._udp"
    /// rtnt-2 data packets [Ron_Muellerschoen]
    public static let `rtnt2Tcp`: Self = "_rtnt-2._tcp"
    /// rtnt-2 data packets [Ron_Muellerschoen]
    public static let `rtnt2Udp`: Self = "_rtnt-2._udp"
    /// Incognito Rendez-Vous [Stephane_Bourque]
    public static let `incognitorvTcp`: Self = "_incognitorv._tcp"
    /// Incognito Rendez-Vous [Stephane_Bourque]
    public static let `incognitorvUdp`: Self = "_incognitorv._udp"
    /// Arilia Multiplexor [Stephane_Bourque_2]
    public static let `ariliamultiTcp`: Self = "_ariliamulti._tcp"
    /// Arilia Multiplexor [Stephane_Bourque_2]
    public static let `ariliamultiUdp`: Self = "_ariliamulti._udp"
    /// VMODEM [Ray_Gwinn]
    public static let `vmodemTcp`: Self = "_vmodem._tcp"
    /// VMODEM [Ray_Gwinn]
    public static let `vmodemUdp`: Self = "_vmodem._udp"
    /// RDC WH EOS [Udi_Nir]
    public static let `rdcWhEosTcp`: Self = "_rdc-wh-eos._tcp"
    /// RDC WH EOS [Udi_Nir]
    public static let `rdcWhEosUdp`: Self = "_rdc-wh-eos._udp"
    /// Sea View [Jim_Flaherty_2]
    public static let `seaviewTcp`: Self = "_seaview._tcp"
    /// Sea View [Jim_Flaherty_2]
    public static let `seaviewUdp`: Self = "_seaview._udp"
    /// Tarantella [Roger_Binns]
    public static let `tarantellaTcp`: Self = "_tarantella._tcp"
    /// Tarantella [Roger_Binns]
    public static let `tarantellaUdp`: Self = "_tarantella._udp"
    /// CSI-LFAP [Paul_Amsden]
    public static let `csiLfapTcp`: Self = "_csi-lfap._tcp"
    /// CSI-LFAP [Paul_Amsden]
    public static let `csiLfapUdp`: Self = "_csi-lfap._udp"
    /// bears-02 [Bruce_McKinnon_2]
    public static let `bears02Tcp`: Self = "_bears-02._tcp"
    /// bears-02 [Bruce_McKinnon_2]
    public static let `bears02Udp`: Self = "_bears-02._udp"
    /// RFIO [Frederic_Hemmer]
    public static let `rfioTcp`: Self = "_rfio._tcp"
    /// RFIO [Frederic_Hemmer]
    public static let `rfioUdp`: Self = "_rfio._udp"
    /// NetMike Game Administrator 
    public static let `nmGameAdminTcp`: Self = "_nm-game-admin._tcp"
    /// NetMike Game Administrator 
    public static let `nmGameAdminUdp`: Self = "_nm-game-admin._udp"
    /// NetMike Game Server 
    public static let `nmGameServerTcp`: Self = "_nm-game-server._tcp"
    /// NetMike Game Server 
    public static let `nmGameServerUdp`: Self = "_nm-game-server._udp"
    /// NetMike Assessor Administrator 
    public static let `nmAssesAdminTcp`: Self = "_nm-asses-admin._tcp"
    /// NetMike Assessor Administrator 
    public static let `nmAssesAdminUdp`: Self = "_nm-asses-admin._udp"
    /// NetMike Assessor [Andrew_Sharpe]
    public static let `nmAssessorTcp`: Self = "_nm-assessor._tcp"
    /// NetMike Assessor [Andrew_Sharpe]
    public static let `nmAssessorUdp`: Self = "_nm-assessor._udp"
    /// FeiTian Port [Huang_Yu]
    public static let `feitianrockeyTcp`: Self = "_feitianrockey._tcp"
    /// FeiTian Port [Huang_Yu]
    public static let `feitianrockeyUdp`: Self = "_feitianrockey._udp"
    /// S8Cargo Client Port [Jon_S_Kyle]
    public static let `s8ClientPortTcp`: Self = "_s8-client-port._tcp"
    /// S8Cargo Client Port [Jon_S_Kyle]
    public static let `s8ClientPortUdp`: Self = "_s8-client-port._udp"
    /// ON RMI Registry [Ram_Sudama]
    public static let `ccmrmiTcp`: Self = "_ccmrmi._tcp"
    /// ON RMI Registry [Ram_Sudama]
    public static let `ccmrmiUdp`: Self = "_ccmrmi._udp"
    /// JpegMpeg Port [Richard_Bassous]
    public static let `jpegmpegTcp`: Self = "_jpegmpeg._tcp"
    /// JpegMpeg Port [Richard_Bassous]
    public static let `jpegmpegUdp`: Self = "_jpegmpeg._udp"
    /// Indura Collector [Bruce_Kosbab]
    public static let `induraTcp`: Self = "_indura._tcp"
    /// Indura Collector [Bruce_Kosbab]
    public static let `induraUdp`: Self = "_indura._udp"
    /// CCC Listener Port [Brian_Carnell]
    public static let `e3consultantsTcp`: Self = "_e3consultants._tcp"
    /// CCC Listener Port [Brian_Carnell]
    public static let `e3consultantsUdp`: Self = "_e3consultants._udp"
    /// SmashTV Protocol [Christian_Wolff]
    public static let `stvpTcp`: Self = "_stvp._tcp"
    /// SmashTV Protocol [Christian_Wolff]
    public static let `stvpUdp`: Self = "_stvp._udp"
    /// NavegaWeb Tarification [Miguel_Angel_Fernand]
    public static let `navegawebPortTcp`: Self = "_navegaweb-port._tcp"
    /// NavegaWeb Tarification [Miguel_Angel_Fernand]
    public static let `navegawebPortUdp`: Self = "_navegaweb-port._udp"
    /// TIP Application Server [Olivier_Mascia]
    public static let `tipAppServerTcp`: Self = "_tip-app-server._tcp"
    /// TIP Application Server [Olivier_Mascia]
    public static let `tipAppServerUdp`: Self = "_tip-app-server._udp"
    /// DOC1 License Manager [Greg_Goodson]
    public static let `doc1lmTcp`: Self = "_doc1lm._tcp"
    /// DOC1 License Manager [Greg_Goodson]
    public static let `doc1lmUdp`: Self = "_doc1lm._udp"
    /// SFLM [System_Administrator]
    public static let `sflmTcp`: Self = "_sflm._tcp"
    /// SFLM [System_Administrator]
    public static let `sflmUdp`: Self = "_sflm._udp"
    /// RES-SAP [Bob_Janssen]
    public static let `resSapTcp`: Self = "_res-sap._tcp"
    /// RES-SAP [Bob_Janssen]
    public static let `resSapUdp`: Self = "_res-sap._udp"
    /// IMPRS [Lars_Bohn]
    public static let `imprsTcp`: Self = "_imprs._tcp"
    /// IMPRS [Lars_Bohn]
    public static let `imprsUdp`: Self = "_imprs._udp"
    /// Newgenpay Engine Service [Ilan_Zisser]
    public static let `newgenpayTcp`: Self = "_newgenpay._tcp"
    /// Newgenpay Engine Service [Ilan_Zisser]
    public static let `newgenpayUdp`: Self = "_newgenpay._udp"
    /// Quest Spotlight Out-Of-Process Collector [Greg_Cottman]
    public static let `sossecollectorTcp`: Self = "_sossecollector._tcp"
    /// Quest Spotlight Out-Of-Process Collector [Greg_Cottman]
    public static let `sossecollectorUdp`: Self = "_sossecollector._udp"
    /// Now Contact Public Server 
    public static let `nowcontactTcp`: Self = "_nowcontact._tcp"
    /// Now Contact Public Server 
    public static let `nowcontactUdp`: Self = "_nowcontact._udp"
    /// Now Up-to-Date Public Server [John_Wallace]
    public static let `poweronnudTcp`: Self = "_poweronnud._tcp"
    /// Now Up-to-Date Public Server [John_Wallace]
    public static let `poweronnudUdp`: Self = "_poweronnud._udp"
    /// SERVERVIEW-AS 
    public static let `serverviewAsTcp`: Self = "_serverview-as._tcp"
    /// SERVERVIEW-AS 
    public static let `serverviewAsUdp`: Self = "_serverview-as._udp"
    /// SERVERVIEW-ASN 
    public static let `serverviewAsnTcp`: Self = "_serverview-asn._tcp"
    /// SERVERVIEW-ASN 
    public static let `serverviewAsnUdp`: Self = "_serverview-asn._udp"
    /// SERVERVIEW-GF 
    public static let `serverviewGfTcp`: Self = "_serverview-gf._tcp"
    /// SERVERVIEW-GF 
    public static let `serverviewGfUdp`: Self = "_serverview-gf._udp"
    /// SERVERVIEW-RM 
    public static let `serverviewRmTcp`: Self = "_serverview-rm._tcp"
    /// SERVERVIEW-RM 
    public static let `serverviewRmUdp`: Self = "_serverview-rm._udp"
    /// SERVERVIEW-ICC [Detlef_Rothe]
    public static let `serverviewIccTcp`: Self = "_serverview-icc._tcp"
    /// SERVERVIEW-ICC [Detlef_Rothe]
    public static let `serverviewIccUdp`: Self = "_serverview-icc._udp"
    /// ARMI Server [Bobby_Martin]
    public static let `armiServerTcp`: Self = "_armi-server._tcp"
    /// ARMI Server [Bobby_Martin]
    public static let `armiServerUdp`: Self = "_armi-server._udp"
    /// T1_E1_Over_IP [Mark_Doyle]
    public static let `t1E1OverIpTcp`: Self = "_t1-e1-over-ip._tcp"
    /// T1_E1_Over_IP [Mark_Doyle]
    public static let `t1E1OverIpUdp`: Self = "_t1-e1-over-ip._udp"
    /// ARS Master [Portnoy_Boxman]
    public static let `arsMasterTcp`: Self = "_ars-master._tcp"
    /// ARS Master [Portnoy_Boxman]
    public static let `arsMasterUdp`: Self = "_ars-master._udp"
    /// Phonex Protocol [Doug_Grover]
    public static let `phonexPortTcp`: Self = "_phonex-port._tcp"
    /// Phonex Protocol [Doug_Grover]
    public static let `phonexPortUdp`: Self = "_phonex-port._udp"
    /// Radiance UltraEdge Port [Sri_Subramaniam]
    public static let `radclientportTcp`: Self = "_radclientport._tcp"
    /// Radiance UltraEdge Port [Sri_Subramaniam]
    public static let `radclientportUdp`: Self = "_radclientport._udp"
    /// H2GF W.2m Handover prot. [Arne_Norefors]
    public static let `h2gfW2mTcp`: Self = "_h2gf-w-2m._tcp"
    /// H2GF W.2m Handover prot. [Arne_Norefors]
    public static let `h2gfW2mUdp`: Self = "_h2gf-w-2m._udp"
    /// Millicent Broker Server [Steve_Glassman]
    public static let `mcBrkSrvTcp`: Self = "_mc-brk-srv._tcp"
    /// Millicent Broker Server [Steve_Glassman]
    public static let `mcBrkSrvUdp`: Self = "_mc-brk-srv._udp"
    /// BMC Patrol Agent 
    public static let `bmcpatrolagentTcp`: Self = "_bmcpatrolagent._tcp"
    /// BMC Patrol Agent 
    public static let `bmcpatrolagentUdp`: Self = "_bmcpatrolagent._udp"
    /// BMC Patrol Rendezvous [Portnoy_Boxman]
    public static let `bmcpatrolrnvuTcp`: Self = "_bmcpatrolrnvu._tcp"
    /// BMC Patrol Rendezvous [Portnoy_Boxman]
    public static let `bmcpatrolrnvuUdp`: Self = "_bmcpatrolrnvu._udp"
    /// COPS/TLS [Mark_Stevens]
    public static let `copsTlsTcp`: Self = "_cops-tls._tcp"
    /// COPS/TLS [Mark_Stevens]
    public static let `copsTlsUdp`: Self = "_cops-tls._udp"
    /// ApogeeX Port [Tom_Nys]
    public static let `apogeexPortTcp`: Self = "_apogeex-port._tcp"
    /// ApogeeX Port [Tom_Nys]
    public static let `apogeexPortUdp`: Self = "_apogeex-port._udp"
    /// SuSE Meta PPPD [Arvin_Schnell]
    public static let `smpppdTcp`: Self = "_smpppd._tcp"
    /// SuSE Meta PPPD [Arvin_Schnell]
    public static let `smpppdUdp`: Self = "_smpppd._udp"
    /// IIW Monitor User Port [Corey_Burnett]
    public static let `iiwPortTcp`: Self = "_iiw-port._tcp"
    /// IIW Monitor User Port [Corey_Burnett]
    public static let `iiwPortUdp`: Self = "_iiw-port._udp"
    /// Open Design Listen Port [Phivos_Aristides]
    public static let `odiPortTcp`: Self = "_odi-port._tcp"
    /// Open Design Listen Port [Phivos_Aristides]
    public static let `odiPortUdp`: Self = "_odi-port._udp"
    /// Broadcom Port [Thomas_L_Johnson]
    public static let `brcmCommPortTcp`: Self = "_brcm-comm-port._tcp"
    /// Broadcom Port [Thomas_L_Johnson]
    public static let `brcmCommPortUdp`: Self = "_brcm-comm-port._udp"
    /// Pinnacle Sys InfEx Port [Anthon_van_der_Neut]
    public static let `pcleInfexTcp`: Self = "_pcle-infex._tcp"
    /// Pinnacle Sys InfEx Port [Anthon_van_der_Neut]
    public static let `pcleInfexUdp`: Self = "_pcle-infex._udp"
    /// ConServR Proxy 
    public static let `csvrProxyTcp`: Self = "_csvr-proxy._tcp"
    /// ConServR Proxy 
    public static let `csvrProxyUdp`: Self = "_csvr-proxy._udp"
    /// ConServR SSL Proxy [Mikhail_Kruk]
    public static let `csvrSslproxyTcp`: Self = "_csvr-sslproxy._tcp"
    /// ConServR SSL Proxy [Mikhail_Kruk]
    public static let `csvrSslproxyUdp`: Self = "_csvr-sslproxy._udp"
    /// FireMon Revision Control [Michael_Bishop]
    public static let `firemonrccTcp`: Self = "_firemonrcc._tcp"
    /// FireMon Revision Control [Michael_Bishop]
    public static let `firemonrccUdp`: Self = "_firemonrcc._udp"
    /// SpanDataPort [Jesse_McKay]
    public static let `spandataportTcp`: Self = "_spandataport._tcp"
    /// SpanDataPort [Jesse_McKay]
    public static let `spandataportUdp`: Self = "_spandataport._udp"
    /// Rockstorm MAG protocol [Jens_Nilsson]
    public static let `magbindTcp`: Self = "_magbind._tcp"
    /// Rockstorm MAG protocol [Jens_Nilsson]
    public static let `magbindUdp`: Self = "_magbind._udp"
    /// Network Control Unit 
    public static let `ncu1Tcp`: Self = "_ncu-1._tcp"
    /// Network Control Unit 
    public static let `ncu1Udp`: Self = "_ncu-1._udp"
    /// Network Control Unit [Charlie_Hundre]
    public static let `ncu2Tcp`: Self = "_ncu-2._tcp"
    /// Network Control Unit [Charlie_Hundre]
    public static let `ncu2Udp`: Self = "_ncu-2._udp"
    /// Embrace Device Protocol Server 
    public static let `embraceDpSTcp`: Self = "_embrace-dp-s._tcp"
    /// Embrace Device Protocol Server 
    public static let `embraceDpSUdp`: Self = "_embrace-dp-s._udp"
    /// Embrace Device Protocol Client [Elliot_Schwartz]
    public static let `embraceDpCTcp`: Self = "_embrace-dp-c._tcp"
    /// Embrace Device Protocol Client [Elliot_Schwartz]
    public static let `embraceDpCUdp`: Self = "_embrace-dp-c._udp"
    /// DMOD WorkSpace [Nick_Plante]
    public static let `dmodWorkspaceTcp`: Self = "_dmod-workspace._tcp"
    /// DMOD WorkSpace [Nick_Plante]
    public static let `dmodWorkspaceUdp`: Self = "_dmod-workspace._udp"
    /// Press-sense Tick Port [Boris_Svetlitsky]
    public static let `tickPortTcp`: Self = "_tick-port._tcp"
    /// Press-sense Tick Port [Boris_Svetlitsky]
    public static let `tickPortUdp`: Self = "_tick-port._udp"
    /// CPQ-TaskSmart [Jackie_Lau]
    public static let `cpqTasksmartTcp`: Self = "_cpq-tasksmart._tcp"
    /// CPQ-TaskSmart [Jackie_Lau]
    public static let `cpqTasksmartUdp`: Self = "_cpq-tasksmart._udp"
    /// IntraIntra [Matthew_Asham]
    public static let `intraintraTcp`: Self = "_intraintra._tcp"
    /// IntraIntra [Matthew_Asham]
    public static let `intraintraUdp`: Self = "_intraintra._udp"
    /// Network Watcher Monitor 
    public static let `netwatcherMonTcp`: Self = "_netwatcher-mon._tcp"
    /// Network Watcher Monitor 
    public static let `netwatcherMonUdp`: Self = "_netwatcher-mon._udp"
    /// Network Watcher DB Access [Hirokazu_Fujisawa]
    public static let `netwatcherDbTcp`: Self = "_netwatcher-db._tcp"
    /// Network Watcher DB Access [Hirokazu_Fujisawa]
    public static let `netwatcherDbUdp`: Self = "_netwatcher-db._udp"
    /// iSNS Server Port 
    public static let `isnsTcp`: Self = "_isns._tcp"
    /// iSNS Server Port 
    public static let `isnsUdp`: Self = "_isns._udp"
    /// IronMail POP Proxy [Mike_Hudack]
    public static let `ironmailTcp`: Self = "_ironmail._tcp"
    /// IronMail POP Proxy [Mike_Hudack]
    public static let `ironmailUdp`: Self = "_ironmail._udp"
    /// Veritas Authentication Port [Senthil_Ponnuswamy]
    public static let `vxAuthPortTcp`: Self = "_vx-auth-port._tcp"
    /// Veritas Authentication Port [Senthil_Ponnuswamy]
    public static let `vxAuthPortUdp`: Self = "_vx-auth-port._udp"
    /// PFU PR Callback [Tetsuharu_Hanada]
    public static let `pfuPrcallbackTcp`: Self = "_pfu-prcallback._tcp"
    /// PFU PR Callback [Tetsuharu_Hanada]
    public static let `pfuPrcallbackUdp`: Self = "_pfu-prcallback._udp"
    /// HP OpenView Network Path Engine Server [Anthony_Walker]
    public static let `netwkpathengineTcp`: Self = "_netwkpathengine._tcp"
    /// HP OpenView Network Path Engine Server [Anthony_Walker]
    public static let `netwkpathengineUdp`: Self = "_netwkpathengine._udp"
    /// Flamenco Networks Proxy [Corey_Corrick]
    public static let `flamencoProxyTcp`: Self = "_flamenco-proxy._tcp"
    /// Flamenco Networks Proxy [Corey_Corrick]
    public static let `flamencoProxyUdp`: Self = "_flamenco-proxy._udp"
    /// Avocent Secure Management [Brian_S_Stewart]
    public static let `avsecuremgmtTcp`: Self = "_avsecuremgmt._tcp"
    /// Avocent Secure Management [Brian_S_Stewart]
    public static let `avsecuremgmtUdp`: Self = "_avsecuremgmt._udp"
    /// Survey Instrument [Al_Amet]
    public static let `surveyinstTcp`: Self = "_surveyinst._tcp"
    /// Survey Instrument [Al_Amet]
    public static let `surveyinstUdp`: Self = "_surveyinst._udp"
    /// NEON 24X7 Mission Control [Tony_Lubrano]
    public static let `neon24x7Tcp`: Self = "_neon24x7._tcp"
    /// NEON 24X7 Mission Control [Tony_Lubrano]
    public static let `neon24x7Udp`: Self = "_neon24x7._udp"
    /// JMQ Daemon Port 1 
    public static let `jmqDaemon1Tcp`: Self = "_jmq-daemon-1._tcp"
    /// JMQ Daemon Port 1 
    public static let `jmqDaemon1Udp`: Self = "_jmq-daemon-1._udp"
    /// JMQ Daemon Port 2 [Martin_West]
    public static let `jmqDaemon2Tcp`: Self = "_jmq-daemon-2._tcp"
    /// JMQ Daemon Port 2 [Martin_West]
    public static let `jmqDaemon2Udp`: Self = "_jmq-daemon-2._udp"
    /// Ferrari electronic FOAM [Johann_Deutinger]
    public static let `ferrariFoamTcp`: Self = "_ferrari-foam._tcp"
    /// Ferrari electronic FOAM [Johann_Deutinger]
    public static let `ferrariFoamUdp`: Self = "_ferrari-foam._udp"
    /// Unified IP & Telecom Environment [Christer_Gunnarsson]
    public static let `uniteTcp`: Self = "_unite._tcp"
    /// Unified IP & Telecom Environment [Christer_Gunnarsson]
    public static let `uniteUdp`: Self = "_unite._udp"
    /// EMC SmartPackets [Steve_Spataro]
    public static let `smartpacketsTcp`: Self = "_smartpackets._tcp"
    /// EMC SmartPackets [Steve_Spataro]
    public static let `smartpacketsUdp`: Self = "_smartpackets._udp"
    /// WMS Messenger [WM_Software_Inc.]
    public static let `wmsMessengerTcp`: Self = "_wms-messenger._tcp"
    /// WMS Messenger [WM_Software_Inc.]
    public static let `wmsMessengerUdp`: Self = "_wms-messenger._udp"
    /// XML NM over SSL 
    public static let `xnmSslTcp`: Self = "_xnm-ssl._tcp"
    /// XML NM over SSL 
    public static let `xnmSslUdp`: Self = "_xnm-ssl._udp"
    /// XML NM over TCP [Mark_Trostler]
    public static let `xnmClearTextTcp`: Self = "_xnm-clear-text._tcp"
    /// XML NM over TCP [Mark_Trostler]
    public static let `xnmClearTextUdp`: Self = "_xnm-clear-text._udp"
    /// Gateway Load Balancing Pr [Douglas_McLaggan]
    public static let `glbpTcp`: Self = "_glbp._tcp"
    /// Gateway Load Balancing Pr [Douglas_McLaggan]
    public static let `glbpUdp`: Self = "_glbp._udp"
    /// DIGIVOTE (R) Vote-Server [Christian_Treczoks]
    public static let `digivoteTcp`: Self = "_digivote._tcp"
    /// DIGIVOTE (R) Vote-Server [Christian_Treczoks]
    public static let `digivoteUdp`: Self = "_digivote._udp"
    /// AES Discovery Port [Ken_Richard]
    public static let `aesDiscoveryTcp`: Self = "_aes-discovery._tcp"
    /// AES Discovery Port [Ken_Richard]
    public static let `aesDiscoveryUdp`: Self = "_aes-discovery._udp"
    /// FCIP 
    public static let `fcipPortTcp`: Self = "_fcip-port._tcp"
    /// FCIP 
    public static let `fcipPortUdp`: Self = "_fcip-port._udp"
    /// ISI Industry Software IRP [Peter_Sandstrom]
    public static let `isiIrpTcp`: Self = "_isi-irp._tcp"
    /// ISI Industry Software IRP [Peter_Sandstrom]
    public static let `isiIrpUdp`: Self = "_isi-irp._udp"
    /// DiamondWave NMS Server 
    public static let `dwnmshttpTcp`: Self = "_dwnmshttp._tcp"
    /// DiamondWave NMS Server 
    public static let `dwnmshttpUdp`: Self = "_dwnmshttp._udp"
    /// DiamondWave MSG Server [Varma_Bhupatiraju]
    public static let `dwmsgserverTcp`: Self = "_dwmsgserver._tcp"
    /// DiamondWave MSG Server [Varma_Bhupatiraju]
    public static let `dwmsgserverUdp`: Self = "_dwmsgserver._udp"
    /// Global CD Port [Vitaly_Revsin_2]
    public static let `globalCdPortTcp`: Self = "_global-cd-port._tcp"
    /// Global CD Port [Vitaly_Revsin_2]
    public static let `globalCdPortUdp`: Self = "_global-cd-port._udp"
    /// Software Distributor Port [Andrea_Lanza]
    public static let `sftdstPortTcp`: Self = "_sftdst-port._tcp"
    /// Software Distributor Port [Andrea_Lanza]
    public static let `sftdstPortUdp`: Self = "_sftdst-port._udp"
    /// VidiGo communication (previous was: Delta Solutions Direct) [Peter_Ijkhout]
    public static let `vidigoTcp`: Self = "_vidigo._tcp"
    /// VidiGo communication (previous was: Delta Solutions Direct) [Peter_Ijkhout]
    public static let `vidigoUdp`: Self = "_vidigo._udp"
    /// MDT port 
    public static let `mdtpTcp`: Self = "_mdtp._tcp"
    /// MDT port 
    public static let `mdtpUdp`: Self = "_mdtp._udp"
    /// WhiskerControl main port [Rudolf_Cardinal]
    public static let `whiskerTcp`: Self = "_whisker._tcp"
    /// WhiskerControl main port [Rudolf_Cardinal]
    public static let `whiskerUdp`: Self = "_whisker._udp"
    /// Alchemy Server [Mikhail_Belov]
    public static let `alchemyTcp`: Self = "_alchemy._tcp"
    /// Alchemy Server [Mikhail_Belov]
    public static let `alchemyUdp`: Self = "_alchemy._udp"
    /// MDAP port [Johan_Deleu]
    public static let `mdapPortTcp`: Self = "_mdap-port._tcp"
    /// MDAP Port [Johan_Deleu]
    public static let `mdapPortUdp`: Self = "_mdap-port._udp"
    /// appareNet Test Server 
    public static let `apparenetTsTcp`: Self = "_apparenet-ts._tcp"
    /// appareNet Test Server 
    public static let `apparenetTsUdp`: Self = "_apparenet-ts._udp"
    /// appareNet Test Packet Sequencer 
    public static let `apparenetTpsTcp`: Self = "_apparenet-tps._tcp"
    /// appareNet Test Packet Sequencer 
    public static let `apparenetTpsUdp`: Self = "_apparenet-tps._udp"
    /// appareNet Analysis Server 
    public static let `apparenetAsTcp`: Self = "_apparenet-as._tcp"
    /// appareNet Analysis Server 
    public static let `apparenetAsUdp`: Self = "_apparenet-as._udp"
    /// appareNet User Interface [Fred_Klassen]
    public static let `apparenetUiTcp`: Self = "_apparenet-ui._tcp"
    /// appareNet User Interface [Fred_Klassen]
    public static let `apparenetUiUdp`: Self = "_apparenet-ui._udp"
    /// Trio Motion Control Port [Tony_Matthews]
    public static let `triomotionTcp`: Self = "_triomotion._tcp"
    /// Trio Motion Control Port [Tony_Matthews]
    public static let `triomotionUdp`: Self = "_triomotion._udp"
    /// SysOrb Monitoring Server [Jakob_Oestergaard]
    public static let `sysorbTcp`: Self = "_sysorb._tcp"
    /// SysOrb Monitoring Server [Jakob_Oestergaard]
    public static let `sysorbUdp`: Self = "_sysorb._udp"
    /// Session Description ID [Greg_Rose_2]
    public static let `sdpIdPortTcp`: Self = "_sdp-id-port._tcp"
    /// Session Description ID [Greg_Rose_2]
    public static let `sdpIdPortUdp`: Self = "_sdp-id-port._udp"
    /// Timelot Port [David_Ferguson]
    public static let `timelotTcp`: Self = "_timelot._tcp"
    /// Timelot Port [David_Ferguson]
    public static let `timelotUdp`: Self = "_timelot._udp"
    /// OneSAF [Gene_McCulley]
    public static let `onesafTcp`: Self = "_onesaf._tcp"
    /// OneSAF [Gene_McCulley]
    public static let `onesafUdp`: Self = "_onesaf._udp"
    /// VIEO Fabric Executive [James_Cox]
    public static let `vieoFeTcp`: Self = "_vieo-fe._tcp"
    /// VIEO Fabric Executive [James_Cox]
    public static let `vieoFeUdp`: Self = "_vieo-fe._udp"
    /// DVT SYSTEM PORT 
    public static let `dvtSystemTcp`: Self = "_dvt-system._tcp"
    /// DVT SYSTEM PORT 
    public static let `dvtSystemUdp`: Self = "_dvt-system._udp"
    /// DVT DATA LINK [Phillip_Heil]
    public static let `dvtDataTcp`: Self = "_dvt-data._tcp"
    /// DVT DATA LINK [Phillip_Heil]
    public static let `dvtDataUdp`: Self = "_dvt-data._udp"
    /// PROCOS LM [Torsten_Rendelmann]
    public static let `procosLmTcp`: Self = "_procos-lm._tcp"
    /// PROCOS LM [Torsten_Rendelmann]
    public static let `procosLmUdp`: Self = "_procos-lm._udp"
    /// State Sync Protocol [Stephane_Beaulieu]
    public static let `sspTcp`: Self = "_ssp._tcp"
    /// State Sync Protocol [Stephane_Beaulieu]
    public static let `sspUdp`: Self = "_ssp._udp"
    /// HMS hicp port [Joel_Palsson]
    public static let `hicpTcp`: Self = "_hicp._tcp"
    /// HMS hicp port [Joel_Palsson]
    public static let `hicpUdp`: Self = "_hicp._udp"
    /// Sys Scanner [Dick_Georges]
    public static let `sysscannerTcp`: Self = "_sysscanner._tcp"
    /// Sys Scanner [Dick_Georges]
    public static let `sysscannerUdp`: Self = "_sysscanner._udp"
    /// DHE port [Fabrizio_Massimo_Fer]
    public static let `dheTcp`: Self = "_dhe._tcp"
    /// DHE port [Fabrizio_Massimo_Fer]
    public static let `dheUdp`: Self = "_dhe._udp"
    /// PDA Data 
    public static let `pdaDataTcp`: Self = "_pda-data._tcp"
    /// PDA Data 
    public static let `pdaDataUdp`: Self = "_pda-data._udp"
    /// PDA System [Jian_Fan]
    public static let `pdaSysTcp`: Self = "_pda-sys._tcp"
    /// PDA System [Jian_Fan]
    public static let `pdaSysUdp`: Self = "_pda-sys._udp"
    /// Semaphore Connection Port [Jay_Eckles]
    public static let `semaphoreTcp`: Self = "_semaphore._tcp"
    /// Semaphore Connection Port [Jay_Eckles]
    public static let `semaphoreUdp`: Self = "_semaphore._udp"
    /// Compaq RPM Agent Port 
    public static let `cpqrpmAgentTcp`: Self = "_cpqrpm-agent._tcp"
    /// Compaq RPM Agent Port 
    public static let `cpqrpmAgentUdp`: Self = "_cpqrpm-agent._udp"
    /// Compaq RPM Server Port [Royal_King]
    public static let `cpqrpmServerTcp`: Self = "_cpqrpm-server._tcp"
    /// Compaq RPM Server Port [Royal_King]
    public static let `cpqrpmServerUdp`: Self = "_cpqrpm-server._udp"
    /// Ivecon Server Port [Serguei_Tevs]
    public static let `iveconPortTcp`: Self = "_ivecon-port._tcp"
    /// Ivecon Server Port [Serguei_Tevs]
    public static let `iveconPortUdp`: Self = "_ivecon-port._udp"
    /// Epson Network Common Devi [Oishi_Toshiaki]
    public static let `epncdp2Tcp`: Self = "_epncdp2._tcp"
    /// Epson Network Common Devi [Oishi_Toshiaki]
    public static let `epncdp2Udp`: Self = "_epncdp2._udp"
    /// iSCSI port [IESG]
    public static let `iscsiTargetTcp`: Self = "_iscsi-target._tcp"
    /// iSCSI port [IESG]
    public static let `iscsiTargetUdp`: Self = "_iscsi-target._udp"
    /// winShadow [Colin_Barry]
    public static let `winshadowTcp`: Self = "_winshadow._tcp"
    /// winShadow [Colin_Barry]
    public static let `winshadowUdp`: Self = "_winshadow._udp"
    /// NECP [Alberto_Cerpa]
    public static let `necpTcp`: Self = "_necp._tcp"
    /// NECP [Alberto_Cerpa]
    public static let `necpUdp`: Self = "_necp._udp"
    /// E-Color Enterprise Imager [Tamara_Baker]
    public static let `ecolorImagerTcp`: Self = "_ecolor-imager._tcp"
    /// E-Color Enterprise Imager [Tamara_Baker]
    public static let `ecolorImagerUdp`: Self = "_ecolor-imager._udp"
    /// cc:mail/lotus [brockman]
    public static let `ccmailTcp`: Self = "_ccmail._tcp"
    /// cc:mail/lotus [brockman]
    public static let `ccmailUdp`: Self = "_ccmail._udp"
    /// Altav Tunnel [Gary_M_Allen]
    public static let `altavTunnelTcp`: Self = "_altav-tunnel._tcp"
    /// Altav Tunnel [Gary_M_Allen]
    public static let `altavTunnelUdp`: Self = "_altav-tunnel._udp"
    /// NS CFG Server [Aivi_Lie]
    public static let `nsCfgServerTcp`: Self = "_ns-cfg-server._tcp"
    /// NS CFG Server [Aivi_Lie]
    public static let `nsCfgServerUdp`: Self = "_ns-cfg-server._udp"
    /// IBM Dial Out [Skip_Booth]
    public static let `ibmDialOutTcp`: Self = "_ibm-dial-out._tcp"
    /// IBM Dial Out [Skip_Booth]
    public static let `ibmDialOutUdp`: Self = "_ibm-dial-out._udp"
    /// Microsoft Global Catalog 
    public static let `msftGcTcp`: Self = "_msft-gc._tcp"
    /// Microsoft Global Catalog 
    public static let `msftGcUdp`: Self = "_msft-gc._udp"
    /// Microsoft Global Catalog with LDAP/SSL [Asaf_Kashi]
    public static let `msftGcSslTcp`: Self = "_msft-gc-ssl._tcp"
    /// Microsoft Global Catalog with LDAP/SSL [Asaf_Kashi]
    public static let `msftGcSslUdp`: Self = "_msft-gc-ssl._udp"
    /// Verismart [Jay_Weber]
    public static let `verismartTcp`: Self = "_verismart._tcp"
    /// Verismart [Jay_Weber]
    public static let `verismartUdp`: Self = "_verismart._udp"
    /// CSoft Prev Port [Nedelcho_Stanev_3]
    public static let `csoftPrevTcp`: Self = "_csoft-prev._tcp"
    /// CSoft Prev Port [Nedelcho_Stanev_3]
    public static let `csoftPrevUdp`: Self = "_csoft-prev._udp"
    /// Fujitsu User Manager [Yukihiko_Sakurai]
    public static let `userManagerTcp`: Self = "_user-manager._tcp"
    /// Fujitsu User Manager [Yukihiko_Sakurai]
    public static let `userManagerUdp`: Self = "_user-manager._udp"
    /// Simple Extensible Multiplexed Protocol [admin]
    public static let `sxmpTcp`: Self = "_sxmp._tcp"
    /// Simple Extensible Multiplexed Protocol [admin]
    public static let `sxmpUdp`: Self = "_sxmp._udp"
    /// Ordinox Server [Denis_Ducharme]
    public static let `ordinoxServerTcp`: Self = "_ordinox-server._tcp"
    /// Ordinox Server [Denis_Ducharme]
    public static let `ordinoxServerUdp`: Self = "_ordinox-server._udp"
    /// SAMD [Edgar_Circenis]
    public static let `samdTcp`: Self = "_samd._tcp"
    /// SAMD [Edgar_Circenis]
    public static let `samdUdp`: Self = "_samd._udp"
    /// Maxim ASICs [Dave_Inman]
    public static let `maximAsicsTcp`: Self = "_maxim-asics._tcp"
    /// Maxim ASICs [Dave_Inman]
    public static let `maximAsicsUdp`: Self = "_maxim-asics._udp"
    /// AWG Proxy [Alex_McDonald]
    public static let `awgProxyTcp`: Self = "_awg-proxy._tcp"
    /// AWG Proxy [Alex_McDonald]
    public static let `awgProxyUdp`: Self = "_awg-proxy._udp"
    /// LKCM Server [Javier_Jimenez]
    public static let `lkcmserverTcp`: Self = "_lkcmserver._tcp"
    /// LKCM Server [Javier_Jimenez]
    public static let `lkcmserverUdp`: Self = "_lkcmserver._udp"
    /// admind [Jeff_Haynes]
    public static let `admindTcp`: Self = "_admind._tcp"
    /// admind [Jeff_Haynes]
    public static let `admindUdp`: Self = "_admind._udp"
    /// VS Server [Scott_Godlew]
    public static let `vsServerTcp`: Self = "_vs-server._tcp"
    /// VS Server [Scott_Godlew]
    public static let `vsServerUdp`: Self = "_vs-server._udp"
    /// SYSOPT [Tony_Hoffman]
    public static let `sysoptTcp`: Self = "_sysopt._tcp"
    /// SYSOPT [Tony_Hoffman]
    public static let `sysoptUdp`: Self = "_sysopt._udp"
    /// Datusorb [Thomas_Martin]
    public static let `datusorbTcp`: Self = "_datusorb._tcp"
    /// Datusorb [Thomas_Martin]
    public static let `datusorbUdp`: Self = "_datusorb._udp"
    /// Plato [Jim_Battin]
    public static let `platoTcp`: Self = "_plato._tcp"
    /// Plato [Jim_Battin]
    public static let `platoUdp`: Self = "_plato._udp"
    /// E-Net [Steven_Grigsby]
    public static let `eNetTcp`: Self = "_e-net._tcp"
    /// E-Net [Steven_Grigsby]
    public static let `eNetUdp`: Self = "_e-net._udp"
    /// DIRECTVDATA [Michael_Friedman]
    public static let `directvdataTcp`: Self = "_directvdata._tcp"
    /// DIRECTVDATA [Michael_Friedman]
    public static let `directvdataUdp`: Self = "_directvdata._udp"
    /// COPS [Shai_Herzog]
    public static let `copsTcp`: Self = "_cops._tcp"
    /// COPS [Shai_Herzog]
    public static let `copsUdp`: Self = "_cops._udp"
    /// ENPC [SEIKO_EPSON_2]
    public static let `enpcTcp`: Self = "_enpc._tcp"
    /// ENPC [SEIKO_EPSON_2]
    public static let `enpcUdp`: Self = "_enpc._udp"
    /// CAPS LOGISTICS TOOLKIT - LM [Joseph_Krebs]
    public static let `capsLmTcp`: Self = "_caps-lm._tcp"
    /// CAPS LOGISTICS TOOLKIT - LM [Joseph_Krebs]
    public static let `capsLmUdp`: Self = "_caps-lm._udp"
    /// S A Holditch & Associates - LM [Randy_Hudgens]
    public static let `sahLmTcp`: Self = "_sah-lm._tcp"
    /// S A Holditch & Associates - LM [Randy_Hudgens]
    public static let `sahLmUdp`: Self = "_sah-lm._udp"
    /// Cart O Rama [Phillip_Dillinger]
    public static let `cartORamaTcp`: Self = "_cart-o-rama._tcp"
    /// Cart O Rama [Phillip_Dillinger]
    public static let `cartORamaUdp`: Self = "_cart-o-rama._udp"
    /// fg-fps 
    public static let `fgFpsTcp`: Self = "_fg-fps._tcp"
    /// fg-fps 
    public static let `fgFpsUdp`: Self = "_fg-fps._udp"
    /// fg-gip [Jean_Marc_Frailong]
    public static let `fgGipTcp`: Self = "_fg-gip._tcp"
    /// fg-gip [Jean_Marc_Frailong]
    public static let `fgGipUdp`: Self = "_fg-gip._udp"
    /// Dynamic IP Lookup [Eugene_Osovetsky]
    public static let `dyniplookupTcp`: Self = "_dyniplookup._tcp"
    /// Dynamic IP Lookup [Eugene_Osovetsky]
    public static let `dyniplookupUdp`: Self = "_dyniplookup._udp"
    /// Rib License Manager [Kristean_Heisler]
    public static let `ribSlmTcp`: Self = "_rib-slm._tcp"
    /// Rib License Manager [Kristean_Heisler]
    public static let `ribSlmUdp`: Self = "_rib-slm._udp"
    /// Cytel License Manager [Yogesh_P_Gajjar]
    public static let `cytelLmTcp`: Self = "_cytel-lm._tcp"
    /// Cytel License Manager [Yogesh_P_Gajjar]
    public static let `cytelLmUdp`: Self = "_cytel-lm._udp"
    /// DeskView [Manfred_Randelzofer]
    public static let `deskviewTcp`: Self = "_deskview._tcp"
    /// DeskView [Manfred_Randelzofer]
    public static let `deskviewUdp`: Self = "_deskview._udp"
    /// pdrncs [Paul_Wissenbach]
    public static let `pdrncsTcp`: Self = "_pdrncs._tcp"
    /// pdrncs [Paul_Wissenbach]
    public static let `pdrncsUdp`: Self = "_pdrncs._udp"
    /// Ceph monitor [Sage_Weil]
    public static let `cephTcp`: Self = "_ceph._tcp"
    /// Tarantool in-memory computing platform [Tarantool]
    public static let `tarantoolTcp`: Self = "_tarantool._tcp"
    /// Tarantool in-memory computing platform [Tarantool]
    public static let `tarantoolUdp`: Self = "_tarantool._udp"
    /// MCS Fastmail [Patti_Jo_Newsom]
    public static let `mcsFastmailTcp`: Self = "_mcs-fastmail._tcp"
    /// MCS Fastmail [Patti_Jo_Newsom]
    public static let `mcsFastmailUdp`: Self = "_mcs-fastmail._udp"
    /// OP Session Client 
    public static let `opsessionClntTcp`: Self = "_opsession-clnt._tcp"
    /// OP Session Client 
    public static let `opsessionClntUdp`: Self = "_opsession-clnt._udp"
    /// OP Session Server [Amir_Blich]
    public static let `opsessionSrvrTcp`: Self = "_opsession-srvr._tcp"
    /// OP Session Server [Amir_Blich]
    public static let `opsessionSrvrUdp`: Self = "_opsession-srvr._udp"
    /// ODETTE-FTP [David_Nash]
    public static let `odetteFtpTcp`: Self = "_odette-ftp._tcp"
    /// ODETTE-FTP [David_Nash]
    public static let `odetteFtpUdp`: Self = "_odette-ftp._udp"
    /// MySQL [Monty]
    public static let `mysqlTcp`: Self = "_mysql._tcp"
    /// MySQL [Monty]
    public static let `mysqlUdp`: Self = "_mysql._udp"
    /// OP Session Proxy [Amir_Blich]
    public static let `opsessionPrxyTcp`: Self = "_opsession-prxy._tcp"
    /// OP Session Proxy [Amir_Blich]
    public static let `opsessionPrxyUdp`: Self = "_opsession-prxy._udp"
    /// TNS Server 
    public static let `tnsServerTcp`: Self = "_tns-server._tcp"
    /// TNS Server 
    public static let `tnsServerUdp`: Self = "_tns-server._udp"
    /// TNS ADV [Jerome_Albin]
    public static let `tnsAdvTcp`: Self = "_tns-adv._tcp"
    /// TNS ADV [Jerome_Albin]
    public static let `tnsAdvUdp`: Self = "_tns-adv._udp"
    /// Dyna Access [Dave_Belliveau]
    public static let `dynaAccessTcp`: Self = "_dyna-access._tcp"
    /// Dyna Access [Dave_Belliveau]
    public static let `dynaAccessUdp`: Self = "_dyna-access._udp"
    /// MCNS Tel Ret [Randall_Atkinson]
    public static let `mcnsTelRetTcp`: Self = "_mcns-tel-ret._tcp"
    /// MCNS Tel Ret [Randall_Atkinson]
    public static let `mcnsTelRetUdp`: Self = "_mcns-tel-ret._udp"
    /// Application Management Server 
    public static let `appmanServerTcp`: Self = "_appman-server._tcp"
    /// Application Management Server 
    public static let `appmanServerUdp`: Self = "_appman-server._udp"
    /// Unify Object Broker [Daegis_Inc]
    public static let `uorbTcp`: Self = "_uorb._tcp"
    /// Unify Object Broker [Daegis_Inc]
    public static let `uorbUdp`: Self = "_uorb._udp"
    /// Unify Object Host [Daegis_Inc]
    public static let `uohostTcp`: Self = "_uohost._tcp"
    /// Unify Object Host [Daegis_Inc]
    public static let `uohostUdp`: Self = "_uohost._udp"
    /// CDID [Andrew_Borisov]
    public static let `cdidTcp`: Self = "_cdid._tcp"
    /// CDID [Andrew_Borisov]
    public static let `cdidUdp`: Self = "_cdid._udp"
    /// AICC/CMI [William_McDonald]
    public static let `aiccCmiTcp`: Self = "_aicc-cmi._tcp"
    /// AICC/CMI [William_McDonald]
    public static let `aiccCmiUdp`: Self = "_aicc-cmi._udp"
    /// VSAI PORT [Rieko_Asai]
    public static let `vsaiportTcp`: Self = "_vsaiport._tcp"
    /// VSAI PORT [Rieko_Asai]
    public static let `vsaiportUdp`: Self = "_vsaiport._udp"
    /// Swith to Swith Routing Information Protocol [Baba_Hidekazu]
    public static let `ssripTcp`: Self = "_ssrip._tcp"
    /// Swith to Swith Routing Information Protocol [Baba_Hidekazu]
    public static let `ssripUdp`: Self = "_ssrip._udp"
    /// SDT License Manager [Salvo_Nassisi]
    public static let `sdtLmdTcp`: Self = "_sdt-lmd._tcp"
    /// SDT License Manager [Salvo_Nassisi]
    public static let `sdtLmdUdp`: Self = "_sdt-lmd._udp"
    /// Office Link 2000 [Mike_Balch]
    public static let `officelink2000Tcp`: Self = "_officelink2000._tcp"
    /// Office Link 2000 [Mike_Balch]
    public static let `officelink2000Udp`: Self = "_officelink2000._udp"
    /// VNSSTR [Takeshi_Ohmura]
    public static let `vnsstrTcp`: Self = "_vnsstr._tcp"
    /// VNSSTR [Takeshi_Ohmura]
    public static let `vnsstrUdp`: Self = "_vnsstr._udp"
    /// SFTU [Eduardo_Rosenberg_de]
    public static let `sftuTcp`: Self = "_sftu._tcp"
    /// SFTU [Eduardo_Rosenberg_de]
    public static let `sftuUdp`: Self = "_sftu._udp"
    /// BBARS [Lou_Harris]
    public static let `bbarsTcp`: Self = "_bbars._tcp"
    /// BBARS [Lou_Harris]
    public static let `bbarsUdp`: Self = "_bbars._udp"
    /// Eaglepoint License Manager [Dave_Benton]
    public static let `egptlmTcp`: Self = "_egptlm._tcp"
    /// Eaglepoint License Manager [Dave_Benton]
    public static let `egptlmUdp`: Self = "_egptlm._udp"
    /// HP Device Disc [Shivaun_Albright]
    public static let `hpDeviceDiscTcp`: Self = "_hp-device-disc._tcp"
    /// HP Device Disc [Shivaun_Albright]
    public static let `hpDeviceDiscUdp`: Self = "_hp-device-disc._udp"
    /// MCS Calypso ICF 
    public static let `mcsCalypsoicfTcp`: Self = "_mcs-calypsoicf._tcp"
    /// MCS Calypso ICF 
    public static let `mcsCalypsoicfUdp`: Self = "_mcs-calypsoicf._udp"
    /// MCS Messaging 
    public static let `mcsMessagingTcp`: Self = "_mcs-messaging._tcp"
    /// MCS Messaging 
    public static let `mcsMessagingUdp`: Self = "_mcs-messaging._udp"
    /// MCS Mail Server [Patti_Jo_Newsom]
    public static let `mcsMailsvrTcp`: Self = "_mcs-mailsvr._tcp"
    /// MCS Mail Server [Patti_Jo_Newsom]
    public static let `mcsMailsvrUdp`: Self = "_mcs-mailsvr._udp"
    /// DEC Notes [Kim_Moraros]
    public static let `decNotesTcp`: Self = "_dec-notes._tcp"
    /// DEC Notes [Kim_Moraros]
    public static let `decNotesUdp`: Self = "_dec-notes._udp"
    /// Direct TV Webcasting 
    public static let `directvWebTcp`: Self = "_directv-web._tcp"
    /// Direct TV Webcasting 
    public static let `directvWebUdp`: Self = "_directv-web._udp"
    /// Direct TV Software Updates 
    public static let `directvSoftTcp`: Self = "_directv-soft._tcp"
    /// Direct TV Software Updates 
    public static let `directvSoftUdp`: Self = "_directv-soft._udp"
    /// Direct TV Tickers 
    public static let `directvTickTcp`: Self = "_directv-tick._tcp"
    /// Direct TV Tickers 
    public static let `directvTickUdp`: Self = "_directv-tick._udp"
    /// Direct TV Data Catalog [Michael_Friedman]
    public static let `directvCatlgTcp`: Self = "_directv-catlg._tcp"
    /// Direct TV Data Catalog [Michael_Friedman]
    public static let `directvCatlgUdp`: Self = "_directv-catlg._udp"
    /// OMF data b 
    public static let `anetBTcp`: Self = "_anet-b._tcp"
    /// OMF data b 
    public static let `anetBUdp`: Self = "_anet-b._udp"
    /// OMF data l 
    public static let `anetLTcp`: Self = "_anet-l._tcp"
    /// OMF data l 
    public static let `anetLUdp`: Self = "_anet-l._udp"
    /// OMF data m 
    public static let `anetMTcp`: Self = "_anet-m._tcp"
    /// OMF data m 
    public static let `anetMUdp`: Self = "_anet-m._udp"
    /// OMF data h [Per_Sahlqvist]
    public static let `anetHTcp`: Self = "_anet-h._tcp"
    /// OMF data h [Per_Sahlqvist]
    public static let `anetHUdp`: Self = "_anet-h._udp"
    /// WebTIE [Kevin_Frender]
    public static let `webtieTcp`: Self = "_webtie._tcp"
    /// WebTIE [Kevin_Frender]
    public static let `webtieUdp`: Self = "_webtie._udp"
    /// MS Cluster Net [David_Dion]
    public static let `msClusterNetTcp`: Self = "_ms-cluster-net._tcp"
    /// MS Cluster Net [David_Dion]
    public static let `msClusterNetUdp`: Self = "_ms-cluster-net._udp"
    /// BNT Manager [Engineering_Dept]
    public static let `bntManagerTcp`: Self = "_bnt-manager._tcp"
    /// BNT Manager [Engineering_Dept]
    public static let `bntManagerUdp`: Self = "_bnt-manager._udp"
    /// Influence [Russ_Ferriday]
    public static let `influenceTcp`: Self = "_influence._tcp"
    /// Influence [Russ_Ferriday]
    public static let `influenceUdp`: Self = "_influence._udp"
    /// Trnsprnt Proxy [Grant_Kirby]
    public static let `trnsprntproxyTcp`: Self = "_trnsprntproxy._tcp"
    /// Trnsprnt Proxy [Grant_Kirby]
    public static let `trnsprntproxyUdp`: Self = "_trnsprntproxy._udp"
    /// Phoenix RPC [Ian_Anderson]
    public static let `phoenixRpcTcp`: Self = "_phoenix-rpc._tcp"
    /// Phoenix RPC [Ian_Anderson]
    public static let `phoenixRpcUdp`: Self = "_phoenix-rpc._udp"
    /// Pangolin Laser [William_Benner]
    public static let `pangolinLaserTcp`: Self = "_pangolin-laser._tcp"
    /// Pangolin Laser [William_Benner]
    public static let `pangolinLaserUdp`: Self = "_pangolin-laser._udp"
    /// Chevin Services [Gus_McNaughton]
    public static let `chevinservicesTcp`: Self = "_chevinservices._tcp"
    /// Chevin Services [Gus_McNaughton]
    public static let `chevinservicesUdp`: Self = "_chevinservices._udp"
    /// FINDVIATV [Oran_Davis]
    public static let `findviatvTcp`: Self = "_findviatv._tcp"
    /// FINDVIATV [Oran_Davis]
    public static let `findviatvUdp`: Self = "_findviatv._udp"
    /// Btrieve port 
    public static let `btrieveTcp`: Self = "_btrieve._tcp"
    /// Btrieve port 
    public static let `btrieveUdp`: Self = "_btrieve._udp"
    /// Scalable SQL [Chuck_Talk]
    public static let `ssqlTcp`: Self = "_ssql._tcp"
    /// Scalable SQL [Chuck_Talk]
    public static let `ssqlUdp`: Self = "_ssql._udp"
    /// FATPIPE [Sanchaita_Datta]
    public static let `fatpipeTcp`: Self = "_fatpipe._tcp"
    /// FATPIPE [Sanchaita_Datta]
    public static let `fatpipeUdp`: Self = "_fatpipe._udp"
    /// SUITJD [Todd_Moyer]
    public static let `suitjdTcp`: Self = "_suitjd._tcp"
    /// SUITJD [Todd_Moyer]
    public static let `suitjdUdp`: Self = "_suitjd._udp"
    /// Ordinox Dbase [Denis_Ducharme]
    public static let `ordinoxDbaseTcp`: Self = "_ordinox-dbase._tcp"
    /// Ordinox Dbase [Denis_Ducharme]
    public static let `ordinoxDbaseUdp`: Self = "_ordinox-dbase._udp"
    /// UPNOTIFYPS [Mark_Fox]
    public static let `upnotifypsTcp`: Self = "_upnotifyps._tcp"
    /// UPNOTIFYPS [Mark_Fox]
    public static let `upnotifypsUdp`: Self = "_upnotifyps._udp"
    /// Adtech Test IP [Robin_Uyeshiro]
    public static let `adtechTestTcp`: Self = "_adtech-test._tcp"
    /// Adtech Test IP [Robin_Uyeshiro]
    public static let `adtechTestUdp`: Self = "_adtech-test._udp"
    /// Mp Sys Rmsvr [Hiroyuki_Kawabuchi]
    public static let `mpsysrmsvrTcp`: Self = "_mpsysrmsvr._tcp"
    /// Mp Sys Rmsvr [Hiroyuki_Kawabuchi]
    public static let `mpsysrmsvrUdp`: Self = "_mpsysrmsvr._udp"
    /// WG NetForce [Lee_Wheat]
    public static let `wgNetforceTcp`: Self = "_wg-netforce._tcp"
    /// WG NetForce [Lee_Wheat]
    public static let `wgNetforceUdp`: Self = "_wg-netforce._udp"
    /// KV Server 
    public static let `kvServerTcp`: Self = "_kv-server._tcp"
    /// KV Server 
    public static let `kvServerUdp`: Self = "_kv-server._udp"
    /// KV Agent [Thomas_Soranno]
    public static let `kvAgentTcp`: Self = "_kv-agent._tcp"
    /// KV Agent [Thomas_Soranno]
    public static let `kvAgentUdp`: Self = "_kv-agent._udp"
    /// DJ ILM [Don_Tyson]
    public static let `djIlmTcp`: Self = "_dj-ilm._tcp"
    /// DJ ILM [Don_Tyson]
    public static let `djIlmUdp`: Self = "_dj-ilm._udp"
    /// NATI Vi Server [National_Instruments_2]
    public static let `natiViServerTcp`: Self = "_nati-vi-server._tcp"
    /// NATI Vi Server [National_Instruments_2]
    public static let `natiViServerUdp`: Self = "_nati-vi-server._udp"
    /// TIP 2 [Keith_Evans]
    public static let `tip2Tcp`: Self = "_tip2._tcp"
    /// TIP 2 [Keith_Evans]
    public static let `tip2Udp`: Self = "_tip2._udp"
    /// Lavenir License Manager [Marius_Matioc]
    public static let `lavenirLmTcp`: Self = "_lavenir-lm._tcp"
    /// Lavenir License Manager [Marius_Matioc]
    public static let `lavenirLmUdp`: Self = "_lavenir-lm._udp"
    /// Cluster Disc [Jeff_Hughes]
    public static let `clusterDiscTcp`: Self = "_cluster-disc._tcp"
    /// Cluster Disc [Jeff_Hughes]
    public static let `clusterDiscUdp`: Self = "_cluster-disc._udp"
    /// VSNM Agent [Venkat_Rangan]
    public static let `vsnmAgentTcp`: Self = "_vsnm-agent._tcp"
    /// VSNM Agent [Venkat_Rangan]
    public static let `vsnmAgentUdp`: Self = "_vsnm-agent._udp"
    /// CD Broker [Moon_Ho_Chung]
    public static let `cdbrokerTcp`: Self = "_cdbroker._tcp"
    /// CD Broker [Moon_Ho_Chung]
    public static let `cdbrokerUdp`: Self = "_cdbroker._udp"
    /// Cogsys Network License Manager [Simon_Chinnick]
    public static let `cogsysLmTcp`: Self = "_cogsys-lm._tcp"
    /// Cogsys Network License Manager [Simon_Chinnick]
    public static let `cogsysLmUdp`: Self = "_cogsys-lm._udp"
    /// WSICOPY [James_Overby]
    public static let `wsicopyTcp`: Self = "_wsicopy._tcp"
    /// WSICOPY [James_Overby]
    public static let `wsicopyUdp`: Self = "_wsicopy._udp"
    /// SOCORFS [Hugo_Charbonneau]
    public static let `socorfsTcp`: Self = "_socorfs._tcp"
    /// SOCORFS [Hugo_Charbonneau]
    public static let `socorfsUdp`: Self = "_socorfs._udp"
    /// SNS Channels [Shekar_Pasumarthi]
    public static let `snsChannelsTcp`: Self = "_sns-channels._tcp"
    /// SNS Channels [Shekar_Pasumarthi]
    public static let `snsChannelsUdp`: Self = "_sns-channels._udp"
    /// Geneous [Nick_de_Smith]
    public static let `geneousTcp`: Self = "_geneous._tcp"
    /// Geneous [Nick_de_Smith]
    public static let `geneousUdp`: Self = "_geneous._udp"
    /// Fujitsu Network Enhanced Antitheft function [Markku_Viima]
    public static let `fujitsuNeatTcp`: Self = "_fujitsu-neat._tcp"
    /// Fujitsu Network Enhanced Antitheft function [Markku_Viima]
    public static let `fujitsuNeatUdp`: Self = "_fujitsu-neat._udp"
    /// Enterprise Software Products License Manager [George_Rudy]
    public static let `espLmTcp`: Self = "_esp-lm._tcp"
    /// Enterprise Software Products License Manager [George_Rudy]
    public static let `espLmUdp`: Self = "_esp-lm._udp"
    /// Cluster Management Services [Rajesh_Srinivasaragh]
    public static let `hpClicTcp`: Self = "_hp-clic._tcp"
    /// Hardware Management [Rajesh_Srinivasaragh]
    public static let `hpClicUdp`: Self = "_hp-clic._udp"
    /// qnxnetman [Michael_Hunter]
    public static let `qnxnetmanTcp`: Self = "_qnxnetman._tcp"
    /// qnxnetman [Michael_Hunter]
    public static let `qnxnetmanUdp`: Self = "_qnxnetman._udp"
    /// GPRS Data 
    public static let `gprsDataTcp`: Self = "_gprs-data._tcp"
    /// GPRS SIG [Ansgar_Bergmann]
    public static let `gprsSigUdp`: Self = "_gprs-sig._udp"
    /// Back Room Net [Clayton_Wilkinson]
    public static let `backroomnetTcp`: Self = "_backroomnet._tcp"
    /// Back Room Net [Clayton_Wilkinson]
    public static let `backroomnetUdp`: Self = "_backroomnet._udp"
    /// CB Server [Allen_Wei]
    public static let `cbserverTcp`: Self = "_cbserver._tcp"
    /// CB Server [Allen_Wei]
    public static let `cbserverUdp`: Self = "_cbserver._udp"
    /// MS WBT Server [Jordan_Marchese]
    public static let `msWbtServerTcp`: Self = "_ms-wbt-server._tcp"
    /// MS WBT Server [Jordan_Marchese]
    public static let `msWbtServerUdp`: Self = "_ms-wbt-server._udp"
    /// Distributed Service Coordinator [Charles_Honton]
    public static let `dscTcp`: Self = "_dsc._tcp"
    /// Distributed Service Coordinator [Charles_Honton]
    public static let `dscUdp`: Self = "_dsc._udp"
    /// SAVANT [Andy_Bruce]
    public static let `savantTcp`: Self = "_savant._tcp"
    /// SAVANT [Andy_Bruce]
    public static let `savantUdp`: Self = "_savant._udp"
    /// EFI License Management [Ross_E_Greinke]
    public static let `efiLmTcp`: Self = "_efi-lm._tcp"
    /// EFI License Management [Ross_E_Greinke]
    public static let `efiLmUdp`: Self = "_efi-lm._udp"
    /// D2K Tapestry Client to Server 
    public static let `d2kTapestry1Tcp`: Self = "_d2k-tapestry1._tcp"
    /// D2K Tapestry Client to Server 
    public static let `d2kTapestry1Udp`: Self = "_d2k-tapestry1._udp"
    /// D2K Tapestry Server to Server [Eric_Lan]
    public static let `d2kTapestry2Tcp`: Self = "_d2k-tapestry2._tcp"
    /// D2K Tapestry Server to Server [Eric_Lan]
    public static let `d2kTapestry2Udp`: Self = "_d2k-tapestry2._udp"
    /// Dyna License Manager (Elam) [Anjana_Iyer]
    public static let `dynaLmTcp`: Self = "_dyna-lm._tcp"
    /// Dyna License Manager (Elam) [Anjana_Iyer]
    public static let `dynaLmUdp`: Self = "_dyna-lm._udp"
    /// Printer Agent IANA assigned this well-formed service name as a replacement for "printer_agent". [Devon_Taylor]
    public static let `printerAgentTcp`: Self = "_printer-agent._tcp"
    /// Printer Agent [Devon_Taylor]
    public static let `printer_agentTcp`: Self = "_printer_agent._tcp"
    /// Printer Agent IANA assigned this well-formed service name as a replacement for "printer_agent". [Devon_Taylor]
    public static let `printerAgentUdp`: Self = "_printer-agent._udp"
    /// Printer Agent [Devon_Taylor]
    public static let `printer_agentUdp`: Self = "_printer_agent._udp"
    /// Cloanto License Manager [Takeo_Sato]
    public static let `cloantoLmTcp`: Self = "_cloanto-lm._tcp"
    /// Cloanto License Manager [Takeo_Sato]
    public static let `cloantoLmUdp`: Self = "_cloanto-lm._udp"
    /// Mercantile [Erik_Kragh_Jensen]
    public static let `mercantileTcp`: Self = "_mercantile._tcp"
    /// Mercantile [Erik_Kragh_Jensen]
    public static let `mercantileUdp`: Self = "_mercantile._udp"
    /// CSMS 
    public static let `csmsTcp`: Self = "_csms._tcp"
    /// CSMS 
    public static let `csmsUdp`: Self = "_csms._udp"
    /// CSMS2 [Markus_Michels_2]
    public static let `csms2Tcp`: Self = "_csms2._tcp"
    /// CSMS2 [Markus_Michels_2]
    public static let `csms2Udp`: Self = "_csms2._udp"
    /// filecast [Eden_Sherry]
    public static let `filecastTcp`: Self = "_filecast._tcp"
    /// filecast [Eden_Sherry]
    public static let `filecastUdp`: Self = "_filecast._udp"
    /// FXa Engine Network Port [Lucas_Alonso]
    public static let `fxaengineNetTcp`: Self = "_fxaengine-net._tcp"
    /// FXa Engine Network Port [Lucas_Alonso]
    public static let `fxaengineNetUdp`: Self = "_fxaengine-net._udp"
    /// Nokia Announcement ch 1 
    public static let `nokiaAnnCh1Tcp`: Self = "_nokia-ann-ch1._tcp"
    /// Nokia Announcement ch 1 
    public static let `nokiaAnnCh1Udp`: Self = "_nokia-ann-ch1._udp"
    /// Nokia Announcement ch 2 [Morteza_Kalhour]
    public static let `nokiaAnnCh2Tcp`: Self = "_nokia-ann-ch2._tcp"
    /// Nokia Announcement ch 2 [Morteza_Kalhour]
    public static let `nokiaAnnCh2Udp`: Self = "_nokia-ann-ch2._udp"
    /// LDAP admin server port [Stephen_Tsun_2]
    public static let `ldapAdminTcp`: Self = "_ldap-admin._tcp"
    /// LDAP admin server port [Stephen_Tsun_2]
    public static let `ldapAdminUdp`: Self = "_ldap-admin._udp"
    /// BES Api Port [Colin_Griffiths]
    public static let `BESApiTcp`: Self = "_BESApi._tcp"
    /// BES Api Port [Colin_Griffiths]
    public static let `BESApiUdp`: Self = "_BESApi._udp"
    /// NetworkLens Event Port 
    public static let `networklensTcp`: Self = "_networklens._tcp"
    /// NetworkLens Event Port 
    public static let `networklensUdp`: Self = "_networklens._udp"
    /// NetworkLens SSL Event [Greg_Bailey]
    public static let `networklenssTcp`: Self = "_networklenss._tcp"
    /// NetworkLens SSL Event [Greg_Bailey]
    public static let `networklenssUdp`: Self = "_networklenss._udp"
    /// BioLink Authenteon server [BioLink_Support]
    public static let `biolinkAuthTcp`: Self = "_biolink-auth._tcp"
    /// BioLink Authenteon server [BioLink_Support]
    public static let `biolinkAuthUdp`: Self = "_biolink-auth._udp"
    /// xmlBlaster [Marcel_Ruff]
    public static let `xmlblasterTcp`: Self = "_xmlblaster._tcp"
    /// xmlBlaster [Marcel_Ruff]
    public static let `xmlblasterUdp`: Self = "_xmlblaster._udp"
    /// SpecView Networking [Richard_Dickins]
    public static let `svnetTcp`: Self = "_svnet._tcp"
    /// SpecView Networking [Richard_Dickins]
    public static let `svnetUdp`: Self = "_svnet._udp"
    /// BroadCloud WIP Port 
    public static let `wipPortTcp`: Self = "_wip-port._tcp"
    /// BroadCloud WIP Port 
    public static let `wipPortUdp`: Self = "_wip-port._udp"
    /// BCI Name Service [Dennis_Parker]
    public static let `bcinameserviceTcp`: Self = "_bcinameservice._tcp"
    /// BCI Name Service [Dennis_Parker]
    public static let `bcinameserviceUdp`: Self = "_bcinameservice._udp"
    /// AirMobile IS Command Port [Mike_Klein]
    public static let `commandportTcp`: Self = "_commandport._tcp"
    /// AirMobile IS Command Port [Mike_Klein]
    public static let `commandportUdp`: Self = "_commandport._udp"
    /// ConServR file translation [Albert_Leung]
    public static let `csvrTcp`: Self = "_csvr._tcp"
    /// ConServR file translation [Albert_Leung]
    public static let `csvrUdp`: Self = "_csvr._udp"
    /// Remote nmap [Tuomo_Makinen]
    public static let `rnmapTcp`: Self = "_rnmap._tcp"
    /// Remote nmap [Tuomo_Makinen]
    public static let `rnmapUdp`: Self = "_rnmap._udp"
    /// Isogon SoftAudit [Per_Hellberg]
    public static let `softauditTcp`: Self = "_softaudit._tcp"
    /// ISogon SoftAudit [Per_Hellberg]
    public static let `softauditUdp`: Self = "_softaudit._udp"
    /// iFCP User Port 
    public static let `ifcpPortTcp`: Self = "_ifcp-port._tcp"
    /// iFCP User Port 
    public static let `ifcpPortUdp`: Self = "_ifcp-port._udp"
    /// Bull Apprise portmapper [Jeremy_Gilbert]
    public static let `bmapTcp`: Self = "_bmap._tcp"
    /// Bull Apprise portmapper [Jeremy_Gilbert]
    public static let `bmapUdp`: Self = "_bmap._udp"
    /// Remote USB System Port [Steven_Klein]
    public static let `rusbSysPortTcp`: Self = "_rusb-sys-port._tcp"
    /// Remote USB System Port [Steven_Klein]
    public static let `rusbSysPortUdp`: Self = "_rusb-sys-port._udp"
    /// xTrade Reliable Messaging 
    public static let `xtrmTcp`: Self = "_xtrm._tcp"
    /// xTrade Reliable Messaging 
    public static let `xtrmUdp`: Self = "_xtrm._udp"
    /// xTrade over TLS/SSL [Mats_Nilsson]
    public static let `xtrmsTcp`: Self = "_xtrms._tcp"
    /// xTrade over TLS/SSL [Mats_Nilsson]
    public static let `xtrmsUdp`: Self = "_xtrms._udp"
    /// AGPS Access Port [Kristoffer_Nilsson]
    public static let `agpsPortTcp`: Self = "_agps-port._tcp"
    /// AGPS Access Port [Kristoffer_Nilsson]
    public static let `agpsPortUdp`: Self = "_agps-port._udp"
    /// Arkivio Storage Protocol [Bruce_Greenblatt]
    public static let `arkivioTcp`: Self = "_arkivio._tcp"
    /// Arkivio Storage Protocol [Bruce_Greenblatt]
    public static let `arkivioUdp`: Self = "_arkivio._udp"
    /// WebSphere SNMP [Richard_Mills]
    public static let `websphereSnmpTcp`: Self = "_websphere-snmp._tcp"
    /// WebSphere SNMP [Richard_Mills]
    public static let `websphereSnmpUdp`: Self = "_websphere-snmp._udp"
    /// 2Wire CSS [Wire_IANA_Contact]
    public static let `twcssTcp`: Self = "_twcss._tcp"
    /// 2Wire CSS [Wire_IANA_Contact]
    public static let `twcssUdp`: Self = "_twcss._udp"
    /// GCSP user port [Anirban_Majumder]
    public static let `gcspTcp`: Self = "_gcsp._tcp"
    /// GCSP user port [Anirban_Majumder]
    public static let `gcspUdp`: Self = "_gcsp._udp"
    /// Scott Studios Dispatch [Michael_Settles]
    public static let `ssdispatchTcp`: Self = "_ssdispatch._tcp"
    /// Scott Studios Dispatch [Michael_Settles]
    public static let `ssdispatchUdp`: Self = "_ssdispatch._udp"
    /// Active License Server Port [Quentin_Brown]
    public static let `ndlAlsTcp`: Self = "_ndl-als._tcp"
    /// Active License Server Port [Quentin_Brown]
    public static let `ndlAlsUdp`: Self = "_ndl-als._udp"
    /// Secure Device Protocol [Peter_Fernandez]
    public static let `osdcpTcp`: Self = "_osdcp._tcp"
    /// Secure Device Protocol [Peter_Fernandez]
    public static let `osdcpUdp`: Self = "_osdcp._udp"
    /// OPNET Service Management Platform [OPNET_Technologies_Inc]
    public static let `opnetSmpTcp`: Self = "_opnet-smp._tcp"
    /// OPNET Service Management Platform [OPNET_Technologies_Inc]
    public static let `opnetSmpUdp`: Self = "_opnet-smp._udp"
    /// OpenCM Server [Jonathan_S_Shapiro]
    public static let `opencmTcp`: Self = "_opencm._tcp"
    /// OpenCM Server [Jonathan_S_Shapiro]
    public static let `opencmUdp`: Self = "_opencm._udp"
    /// Pacom Security User Port [Steve_Barton]
    public static let `pacomTcp`: Self = "_pacom._tcp"
    /// Pacom Security User Port [Steve_Barton]
    public static let `pacomUdp`: Self = "_pacom._udp"
    /// GuardControl Exchange Protocol [Andreas_Schwarz]
    public static let `gcConfigTcp`: Self = "_gc-config._tcp"
    /// GuardControl Exchange Protocol [Andreas_Schwarz]
    public static let `gcConfigUdp`: Self = "_gc-config._udp"
    /// Autocue Directory Service [Geoff_Back]
    public static let `autocuedsTcp`: Self = "_autocueds._tcp"
    /// Autocue Directory Service [Geoff_Back]
    public static let `autocuedsUdp`: Self = "_autocueds._udp"
    /// Spiralcraft Admin [Michael_Toth]
    public static let `spiralAdminTcp`: Self = "_spiral-admin._tcp"
    /// Spiralcraft Admin [Michael_Toth]
    public static let `spiralAdminUdp`: Self = "_spiral-admin._udp"
    /// HRI Interface Port [John_Fayos]
    public static let `hriPortTcp`: Self = "_hri-port._tcp"
    /// HRI Interface Port [John_Fayos]
    public static let `hriPortUdp`: Self = "_hri-port._udp"
    /// Net Steward Mgmt Console [John_Richmond]
    public static let `ansConsoleTcp`: Self = "_ans-console._tcp"
    /// Net Steward Mgmt Console [John_Richmond]
    public static let `ansConsoleUdp`: Self = "_ans-console._udp"
    /// OC Connect Client 
    public static let `connectClientTcp`: Self = "_connect-client._tcp"
    /// OC Connect Client 
    public static let `connectClientUdp`: Self = "_connect-client._udp"
    /// OC Connect Server [Mike_Velten_2]
    public static let `connectServerTcp`: Self = "_connect-server._tcp"
    /// OC Connect Server [Mike_Velten_2]
    public static let `connectServerUdp`: Self = "_connect-server._udp"
    /// OpenView Network Node Manager WEB Server [Anthony_Walker]
    public static let `ovNnmWebsrvTcp`: Self = "_ov-nnm-websrv._tcp"
    /// OpenView Network Node Manager WEB Server [Anthony_Walker]
    public static let `ovNnmWebsrvUdp`: Self = "_ov-nnm-websrv._udp"
    /// Denali Server [Joe_Devlin]
    public static let `denaliServerTcp`: Self = "_denali-server._tcp"
    /// Denali Server [Joe_Devlin]
    public static let `denaliServerUdp`: Self = "_denali-server._udp"
    /// Media Object Network Protocol [Aethercloud]
    public static let `monpTcp`: Self = "_monp._tcp"
    /// Media Object Network Protocol [Aethercloud]
    public static let `monpUdp`: Self = "_monp._udp"
    /// DirectNet IM System [Gregory_Richards]
    public static let `directnetTcp`: Self = "_directnet._tcp"
    /// DirectNet IM System [Gregory_Richards]
    public static let `directnetUdp`: Self = "_directnet._udp"
    /// Discovery and Net Config [Chi_Chen]
    public static let `dncPortTcp`: Self = "_dnc-port._tcp"
    /// Discovery and Net Config [Chi_Chen]
    public static let `dncPortUdp`: Self = "_dnc-port._udp"
    /// HotU Chat [Tim_Burgess]
    public static let `hotuChatTcp`: Self = "_hotu-chat._tcp"
    /// HotU Chat [Tim_Burgess]
    public static let `hotuChatUdp`: Self = "_hotu-chat._udp"
    /// CAStorProxy [Raymond_J_Young]
    public static let `castorproxyTcp`: Self = "_castorproxy._tcp"
    /// CAStorProxy [Raymond_J_Young]
    public static let `castorproxyUdp`: Self = "_castorproxy._udp"
    /// ASAM Services [Mike_Gossett]
    public static let `asamTcp`: Self = "_asam._tcp"
    /// ASAM Services [Mike_Gossett]
    public static let `asamUdp`: Self = "_asam._udp"
    /// SABP-Signalling Protocol [Brendan_McWilliams]
    public static let `sabpSignalTcp`: Self = "_sabp-signal._tcp"
    /// SABP-Signalling Protocol [Brendan_McWilliams]
    public static let `sabpSignalUdp`: Self = "_sabp-signal._udp"
    /// PSC Update [Datalogic_ADC_Inc]
    public static let `pscupdTcp`: Self = "_pscupd._tcp"
    /// PSC Update [Datalogic_ADC_Inc]
    public static let `pscupdUdp`: Self = "_pscupd._udp"
    /// Apple Remote Access Protocol [Mike_Alexander]
    public static let `miraTcp`: Self = "_mira._tcp"
    /// Apple Remote Access Protocol [Mike_Alexander]
    public static let `miraUdp`: Self = "_mira._udp"
    /// RSVP Port [Bob_Braden]
    public static let `prsvpTcp`: Self = "_prsvp._tcp"
    /// RSVP Port [Bob_Braden]
    public static let `prsvpUdp`: Self = "_prsvp._udp"
    /// VAT default data [Van_Jacobson]
    public static let `vatTcp`: Self = "_vat._tcp"
    /// VAT default data [Van_Jacobson]
    public static let `vatUdp`: Self = "_vat._udp"
    /// VAT default control [Van_Jacobson]
    public static let `vatControlTcp`: Self = "_vat-control._tcp"
    /// VAT default control [Van_Jacobson]
    public static let `vatControlUdp`: Self = "_vat-control._udp"
    /// D3WinOSFI [Brad_Hamilton]
    public static let `d3winosfiTcp`: Self = "_d3winosfi._tcp"
    /// D3WinOSFI [Brad_Hamilton]
    public static let `d3winosfiUdp`: Self = "_d3winosfi._udp"
    /// TIP Integral [Olivier_Mascia]
    public static let `integralTcp`: Self = "_integral._tcp"
    /// TIP Integral [Olivier_Mascia]
    public static let `integralUdp`: Self = "_integral._udp"
    /// EDM Manger 
    public static let `edmManagerTcp`: Self = "_edm-manager._tcp"
    /// EDM Manger 
    public static let `edmManagerUdp`: Self = "_edm-manager._udp"
    /// EDM Stager 
    public static let `edmStagerTcp`: Self = "_edm-stager._tcp"
    /// EDM Stager 
    public static let `edmStagerUdp`: Self = "_edm-stager._udp"
    /// EDM STD Notify 
    public static let `edmStdNotifyTcp`: Self = "_edm-std-notify._tcp"
    /// EDM STD Notify 
    public static let `edmStdNotifyUdp`: Self = "_edm-std-notify._udp"
    /// EDM ADM Notify 
    public static let `edmAdmNotifyTcp`: Self = "_edm-adm-notify._tcp"
    /// EDM ADM Notify 
    public static let `edmAdmNotifyUdp`: Self = "_edm-adm-notify._udp"
    /// EDM MGR Sync 
    public static let `edmMgrSyncTcp`: Self = "_edm-mgr-sync._tcp"
    /// EDM MGR Sync 
    public static let `edmMgrSyncUdp`: Self = "_edm-mgr-sync._udp"
    /// EDM MGR Cntrl [Tom_Hennessy]
    public static let `edmMgrCntrlTcp`: Self = "_edm-mgr-cntrl._tcp"
    /// EDM MGR Cntrl [Tom_Hennessy]
    public static let `edmMgrCntrlUdp`: Self = "_edm-mgr-cntrl._udp"
    /// WORKFLOW [Robert_Hufsky]
    public static let `workflowTcp`: Self = "_workflow._tcp"
    /// WORKFLOW [Robert_Hufsky]
    public static let `workflowUdp`: Self = "_workflow._udp"
    /// RCST [Kit_Sturgeon]
    public static let `rcstTcp`: Self = "_rcst._tcp"
    /// RCST [Kit_Sturgeon]
    public static let `rcstUdp`: Self = "_rcst._udp"
    /// TTCM Remote Controll [Yossi_Cohen_Shahar]
    public static let `ttcmremotectrlTcp`: Self = "_ttcmremotectrl._tcp"
    /// TTCM Remote Controll [Yossi_Cohen_Shahar]
    public static let `ttcmremotectrlUdp`: Self = "_ttcmremotectrl._udp"
    /// Pluribus [Mark_Miller]
    public static let `pluribusTcp`: Self = "_pluribus._tcp"
    /// Pluribus [Mark_Miller]
    public static let `pluribusUdp`: Self = "_pluribus._udp"
    /// jt400 
    public static let `jt400Tcp`: Self = "_jt400._tcp"
    /// jt400 
    public static let `jt400Udp`: Self = "_jt400._udp"
    /// jt400-ssl [Clifton_Nock]
    public static let `jt400SslTcp`: Self = "_jt400-ssl._tcp"
    /// jt400-ssl [Clifton_Nock]
    public static let `jt400SslUdp`: Self = "_jt400-ssl._udp"
    /// JAUGS N-G Remotec 1 
    public static let `jaugsremotec1Tcp`: Self = "_jaugsremotec-1._tcp"
    /// JAUGS N-G Remotec 1 
    public static let `jaugsremotec1Udp`: Self = "_jaugsremotec-1._udp"
    /// JAUGS N-G Remotec 2 [Steven_B_Cliff]
    public static let `jaugsremotec2Tcp`: Self = "_jaugsremotec-2._tcp"
    /// JAUGS N-G Remotec 2 [Steven_B_Cliff]
    public static let `jaugsremotec2Udp`: Self = "_jaugsremotec-2._udp"
    /// TSP Automation [Arnie_Koster]
    public static let `ttntspautoTcp`: Self = "_ttntspauto._tcp"
    /// TSP Automation [Arnie_Koster]
    public static let `ttntspautoUdp`: Self = "_ttntspauto._udp"
    /// Genisar Comm Port [Candace_Niccolson]
    public static let `genisarPortTcp`: Self = "_genisar-port._tcp"
    /// Genisar Comm Port [Candace_Niccolson]
    public static let `genisarPortUdp`: Self = "_genisar-port._udp"
    /// NVIDIA Mgmt Protocol [Gilbert_Yeung]
    public static let `nppmpTcp`: Self = "_nppmp._tcp"
    /// NVIDIA Mgmt Protocol [Gilbert_Yeung]
    public static let `nppmpUdp`: Self = "_nppmp._udp"
    /// eComm link port [Thomas_Soerensen]
    public static let `ecommTcp`: Self = "_ecomm._tcp"
    /// eComm link port [Thomas_Soerensen]
    public static let `ecommUdp`: Self = "_ecomm._udp"
    /// Session Traversal Utilities for NAT (STUN) port [IESG]
    public static let `stunTcp`: Self = "_stun._tcp"
    /// Session Traversal Utilities for NAT (STUN) port [IESG]
    public static let `stunUdp`: Self = "_stun._udp"
    /// TURN over TCP 
    public static let `turnTcp`: Self = "_turn._tcp"
    /// TURN over UDP 
    public static let `turnUdp`: Self = "_turn._udp"
    /// STUN Behavior Discovery over TCP 
    public static let `stunBehaviorTcp`: Self = "_stun-behavior._tcp"
    /// STUN Behavior Discovery over UDP 
    public static let `stunBehaviorUdp`: Self = "_stun-behavior._udp"
    /// 2Wire RPC [Wire_IANA_Contact]
    public static let `twrpcTcp`: Self = "_twrpc._tcp"
    /// 2Wire RPC [Wire_IANA_Contact]
    public static let `twrpcUdp`: Self = "_twrpc._udp"
    /// Secure Virtual Workspace [Tim_Simms]
    public static let `plethoraTcp`: Self = "_plethora._tcp"
    /// Secure Virtual Workspace [Tim_Simms]
    public static let `plethoraUdp`: Self = "_plethora._udp"
    /// CleanerLive remote ctrl [David_Mojdehi]
    public static let `cleanerlivercTcp`: Self = "_cleanerliverc._tcp"
    /// CleanerLive remote ctrl [David_Mojdehi]
    public static let `cleanerlivercUdp`: Self = "_cleanerliverc._udp"
    /// Vulture Monitoring System [Jason_Santos]
    public static let `vultureTcp`: Self = "_vulture._tcp"
    /// Vulture Monitoring System [Jason_Santos]
    public static let `vultureUdp`: Self = "_vulture._udp"
    /// Slim Devices Protocol [Sean_Adams]
    public static let `slimDevicesTcp`: Self = "_slim-devices._tcp"
    /// Slim Devices Protocol [Sean_Adams]
    public static let `slimDevicesUdp`: Self = "_slim-devices._udp"
    /// GBS SnapTalk Protocol [Eric_Harris_Braun]
    public static let `gbsStpTcp`: Self = "_gbs-stp._tcp"
    /// GBS SnapTalk Protocol [Eric_Harris_Braun]
    public static let `gbsStpUdp`: Self = "_gbs-stp._udp"
    /// CelaTalk [Carl_Blundell]
    public static let `celatalkTcp`: Self = "_celatalk._tcp"
    /// CelaTalk [Carl_Blundell]
    public static let `celatalkUdp`: Self = "_celatalk._udp"
    /// IFSF Heartbeat Port [IFSF_Secretary]
    public static let `ifsfHbPortTcp`: Self = "_ifsf-hb-port._tcp"
    /// IFSF Heartbeat Port [IFSF_Secretary]
    public static let `ifsfHbPortUdp`: Self = "_ifsf-hb-port._udp"
    /// LISA TCP Transfer Channel 
    public static let `ltctcpTcp`: Self = "_ltctcp._tcp"
    /// LISA UDP Transfer Channel [Pit_Vetterick]
    public static let `ltcudpUdp`: Self = "_ltcudp._udp"
    /// FS Remote Host Server [Brian_Nickles]
    public static let `fsRhSrvTcp`: Self = "_fs-rh-srv._tcp"
    /// FS Remote Host Server [Brian_Nickles]
    public static let `fsRhSrvUdp`: Self = "_fs-rh-srv._udp"
    /// DTP/DIA [Alexei_V_Soloviev]
    public static let `dtpDiaTcp`: Self = "_dtp-dia._tcp"
    /// DTP/DIA [Alexei_V_Soloviev]
    public static let `dtpDiaUdp`: Self = "_dtp-dia._udp"
    /// Colubris Management Port [Gilbert_Moineau]
    public static let `colubrisTcp`: Self = "_colubris._tcp"
    /// Colubris Management Port [Gilbert_Moineau]
    public static let `colubrisUdp`: Self = "_colubris._udp"
    /// SWR Port [Ian_Manning]
    public static let `swrPortTcp`: Self = "_swr-port._tcp"
    /// SWR Port [Ian_Manning]
    public static let `swrPortUdp`: Self = "_swr-port._udp"
    /// TVDUM Tray Port [Peter_Boers]
    public static let `tvdumtrayPortTcp`: Self = "_tvdumtray-port._tcp"
    /// TVDUM Tray Port [Peter_Boers]
    public static let `tvdumtrayPortUdp`: Self = "_tvdumtray-port._udp"
    /// Network UPS Tools [Network_UPS_Tools_Project]
    public static let `nutTcp`: Self = "_nut._tcp"
    /// Network UPS Tools [Network_UPS_Tools_Project]
    public static let `nutUdp`: Self = "_nut._udp"
    /// IBM 3494 [Jeffrey_Pilch]
    public static let `ibm3494Tcp`: Self = "_ibm3494._tcp"
    /// IBM 3494 [Jeffrey_Pilch]
    public static let `ibm3494Udp`: Self = "_ibm3494._udp"
    /// securitylayer over tcp 
    public static let `seclayerTcpTcp`: Self = "_seclayer-tcp._tcp"
    /// securitylayer over tcp 
    public static let `seclayerTcpUdp`: Self = "_seclayer-tcp._udp"
    /// securitylayer over tls [Arno_Hollosi]
    public static let `seclayerTlsTcp`: Self = "_seclayer-tls._tcp"
    /// securitylayer over tls [Arno_Hollosi]
    public static let `seclayerTlsUdp`: Self = "_seclayer-tls._udp"
    /// ipEther232Port [Marcus_Leufgen]
    public static let `ipether232portTcp`: Self = "_ipether232port._tcp"
    /// ipEther232Port [Marcus_Leufgen]
    public static let `ipether232portUdp`: Self = "_ipether232port._udp"
    /// DASHPAS user port [Albrecht_Mayer]
    public static let `dashpasPortTcp`: Self = "_dashpas-port._tcp"
    /// DASHPAS user port [Albrecht_Mayer]
    public static let `dashpasPortUdp`: Self = "_dashpas-port._udp"
    /// SccIP Media [David_Yon_2]
    public static let `sccipMediaTcp`: Self = "_sccip-media._tcp"
    /// SccIP Media [David_Yon_2]
    public static let `sccipMediaUdp`: Self = "_sccip-media._udp"
    /// RTMP Port [Miriam_Wohlgelernter]
    public static let `rtmpPortTcp`: Self = "_rtmp-port._tcp"
    /// RTMP Port [Miriam_Wohlgelernter]
    public static let `rtmpPortUdp`: Self = "_rtmp-port._udp"
    /// iSoft-P2P [David_Walling_2]
    public static let `isoftP2pTcp`: Self = "_isoft-p2p._tcp"
    /// iSoft-P2P [David_Walling_2]
    public static let `isoftP2pUdp`: Self = "_isoft-p2p._udp"
    /// Avocent Install Discovery [Brian_S_Stewart_2]
    public static let `avinstalldiscTcp`: Self = "_avinstalldisc._tcp"
    /// Avocent Install Discovery [Brian_S_Stewart_2]
    public static let `avinstalldiscUdp`: Self = "_avinstalldisc._udp"
    /// MPLS LSP-echo Port 
    public static let `lspPingTcp`: Self = "_lsp-ping._tcp"
    /// MPLS LSP-echo Port 
    public static let `lspPingUdp`: Self = "_lsp-ping._udp"
    /// IronStorm game server [Arnaud_Clermonte]
    public static let `ironstormTcp`: Self = "_ironstorm._tcp"
    /// IronStorm game server [Arnaud_Clermonte]
    public static let `ironstormUdp`: Self = "_ironstorm._udp"
    /// CCM communications port [Tom_Bougan]
    public static let `ccmcommTcp`: Self = "_ccmcomm._tcp"
    /// CCM communications port [Tom_Bougan]
    public static let `ccmcommUdp`: Self = "_ccmcomm._udp"
    /// APC 3506 [American_Power_Conve]
    public static let `apc3506Tcp`: Self = "_apc-3506._tcp"
    /// APC 3506 [American_Power_Conve]
    public static let `apc3506Udp`: Self = "_apc-3506._udp"
    /// Nesh Broker Port [Jeremy_Maiden]
    public static let `neshBrokerTcp`: Self = "_nesh-broker._tcp"
    /// Nesh Broker Port [Jeremy_Maiden]
    public static let `neshBrokerUdp`: Self = "_nesh-broker._udp"
    /// Interaction Web [Mike_Gagle_2]
    public static let `interactionwebTcp`: Self = "_interactionweb._tcp"
    /// Interaction Web [Mike_Gagle_2]
    public static let `interactionwebUdp`: Self = "_interactionweb._udp"
    /// Virtual Token SSL Port [Libor_Sykora]
    public static let `vtSslTcp`: Self = "_vt-ssl._tcp"
    /// Virtual Token SSL Port [Libor_Sykora]
    public static let `vtSslUdp`: Self = "_vt-ssl._udp"
    /// XSS Port [Joe_Purcell]
    public static let `xssPortTcp`: Self = "_xss-port._tcp"
    /// XSS Port [Joe_Purcell]
    public static let `xssPortUdp`: Self = "_xss-port._udp"
    /// WebMail/2 [Dimitris_Michelinaki]
    public static let `webmail2Tcp`: Self = "_webmail-2._tcp"
    /// WebMail/2 [Dimitris_Michelinaki]
    public static let `webmail2Udp`: Self = "_webmail-2._udp"
    /// Aztec Distribution Port [Alan_Francis]
    public static let `aztecTcp`: Self = "_aztec._tcp"
    /// Aztec Distribution Port [Alan_Francis]
    public static let `aztecUdp`: Self = "_aztec._udp"
    /// Adaptec Remote Protocol [Hardy_Doelfel]
    public static let `arcpdTcp`: Self = "_arcpd._tcp"
    /// Adaptec Remote Protocol [Hardy_Doelfel]
    public static let `arcpdUdp`: Self = "_arcpd._udp"
    /// MUST Peer to Peer 
    public static let `mustP2pTcp`: Self = "_must-p2p._tcp"
    /// MUST Peer to Peer 
    public static let `mustP2pUdp`: Self = "_must-p2p._udp"
    /// MUST Backplane [Rick_Stefanik]
    public static let `mustBackplaneTcp`: Self = "_must-backplane._tcp"
    /// MUST Backplane [Rick_Stefanik]
    public static let `mustBackplaneUdp`: Self = "_must-backplane._udp"
    /// Smartcard Port [Scott_Guthery]
    public static let `smartcardPortTcp`: Self = "_smartcard-port._tcp"
    /// Smartcard Port [Scott_Guthery]
    public static let `smartcardPortUdp`: Self = "_smartcard-port._udp"
    /// Artifact Message Server [Ron_Capwell]
    public static let `artifactMsgTcp`: Self = "_artifact-msg._tcp"
    /// Artifact Message Server [Ron_Capwell]
    public static let `artifactMsgUdp`: Self = "_artifact-msg._udp"
    /// Netvion Messenger Port 
    public static let `nvmsgdTcp`: Self = "_nvmsgd._tcp"
    /// Netvion Galileo Port 
    public static let `galileoUdp`: Self = "_galileo._udp"
    /// Netvion Galileo Log Port [Ray_Caruso]
    public static let `galileologTcp`: Self = "_galileolog._tcp"
    /// Netvion Galileo Log Port [Ray_Caruso]
    public static let `galileologUdp`: Self = "_galileolog._udp"
    /// Telequip Labs MC3SS [Michael_Sparks]
    public static let `mc3ssTcp`: Self = "_mc3ss._tcp"
    /// Telequip Labs MC3SS [Michael_Sparks]
    public static let `mc3ssUdp`: Self = "_mc3ss._udp"
    /// DO over NSSocketPort [Douglas_Davidson]
    public static let `nssocketportTcp`: Self = "_nssocketport._tcp"
    /// DO over NSSocketPort [Douglas_Davidson]
    public static let `nssocketportUdp`: Self = "_nssocketport._udp"
    /// Odeum Serverlink [Mads_Peter_Back]
    public static let `odeumservlinkTcp`: Self = "_odeumservlink._tcp"
    /// Odeum Serverlink [Mads_Peter_Back]
    public static let `odeumservlinkUdp`: Self = "_odeumservlink._udp"
    /// ECM Server port 
    public static let `ecmportTcp`: Self = "_ecmport._tcp"
    /// ECM Server port 
    public static let `ecmportUdp`: Self = "_ecmport._udp"
    /// EIS Server port [Paul_Kraus]
    public static let `eisportTcp`: Self = "_eisport._tcp"
    /// EIS Server port [Paul_Kraus]
    public static let `eisportUdp`: Self = "_eisport._udp"
    /// starQuiz Port [Adam_Ernst_2]
    public static let `starquizPortTcp`: Self = "_starquiz-port._tcp"
    /// starQuiz Port [Adam_Ernst_2]
    public static let `starquizPortUdp`: Self = "_starquiz-port._udp"
    /// VERITAS Backup Exec Server [Katherine_Wattwood]
    public static let `beserverMsgQTcp`: Self = "_beserver-msg-q._tcp"
    /// VERITAS Backup Exec Server [Katherine_Wattwood]
    public static let `beserverMsgQUdp`: Self = "_beserver-msg-q._udp"
    /// JBoss IIOP 
    public static let `jbossIiopTcp`: Self = "_jboss-iiop._tcp"
    /// JBoss IIOP 
    public static let `jbossIiopUdp`: Self = "_jboss-iiop._udp"
    /// JBoss IIOP/SSL [Francisco_Reverbel]
    public static let `jbossIiopSslTcp`: Self = "_jboss-iiop-ssl._tcp"
    /// JBoss IIOP/SSL [Francisco_Reverbel]
    public static let `jbossIiopSslUdp`: Self = "_jboss-iiop-ssl._udp"
    /// Grid Friendly [Daivd_P_Chassin]
    public static let `gfTcp`: Self = "_gf._tcp"
    /// Grid Friendly [Daivd_P_Chassin]
    public static let `gfUdp`: Self = "_gf._udp"
    /// Joltid [Ahti_Heinla]
    public static let `joltidTcp`: Self = "_joltid._tcp"
    /// Joltid [Ahti_Heinla]
    public static let `joltidUdp`: Self = "_joltid._udp"
    /// Raven Remote Management Control 
    public static let `ravenRmpTcp`: Self = "_raven-rmp._tcp"
    /// Raven Remote Management Control 
    public static let `ravenRmpUdp`: Self = "_raven-rmp._udp"
    /// Raven Remote Management Data [Daniel_Sorlov_2]
    public static let `ravenRdpTcp`: Self = "_raven-rdp._tcp"
    /// Raven Remote Management Data [Daniel_Sorlov_2]
    public static let `ravenRdpUdp`: Self = "_raven-rdp._udp"
    /// URL Daemon Port [Jim_Binkley]
    public static let `urldPortTcp`: Self = "_urld-port._tcp"
    /// URL Daemon Port [Jim_Binkley]
    public static let `urldPortUdp`: Self = "_urld-port._udp"
    /// MS-LA [Eric_Ledoux]
    public static let `msLaTcp`: Self = "_ms-la._tcp"
    /// MS-LA [Eric_Ledoux]
    public static let `msLaUdp`: Self = "_ms-la._udp"
    /// SNAC [Tatsuya_Igarashi]
    public static let `snacTcp`: Self = "_snac._tcp"
    /// SNAC [Tatsuya_Igarashi]
    public static let `snacUdp`: Self = "_snac._udp"
    /// Remote NI-VISA port [Sinnadurai_Dharshan]
    public static let `niVisaRemoteTcp`: Self = "_ni-visa-remote._tcp"
    /// Remote NI-VISA port [Sinnadurai_Dharshan]
    public static let `niVisaRemoteUdp`: Self = "_ni-visa-remote._udp"
    /// IBM Directory Server 
    public static let `ibmDiradmTcp`: Self = "_ibm-diradm._tcp"
    /// IBM Directory Server 
    public static let `ibmDiradmUdp`: Self = "_ibm-diradm._udp"
    /// IBM Directory Server SSL [Mark_Cavage]
    public static let `ibmDiradmSslTcp`: Self = "_ibm-diradm-ssl._tcp"
    /// IBM Directory Server SSL [Mark_Cavage]
    public static let `ibmDiradmSslUdp`: Self = "_ibm-diradm-ssl._udp"
    /// PNRP User Port [Igor_Kostic]
    public static let `pnrpPortTcp`: Self = "_pnrp-port._tcp"
    /// PNRP User Port [Igor_Kostic]
    public static let `pnrpPortUdp`: Self = "_pnrp-port._udp"
    /// VoiSpeed Port [Virgilio_Lattanzi]
    public static let `voispeedPortTcp`: Self = "_voispeed-port._tcp"
    /// VoiSpeed Port [Virgilio_Lattanzi]
    public static let `voispeedPortUdp`: Self = "_voispeed-port._udp"
    /// HA cluster monitor [Jason_Ko]
    public static let `haclMonitorTcp`: Self = "_hacl-monitor._tcp"
    /// HA cluster monitor [Jason_Ko]
    public static let `haclMonitorUdp`: Self = "_hacl-monitor._udp"
    /// qftest Lookup Port [Gregor_Schmid]
    public static let `qftestLookupTcp`: Self = "_qftest-lookup._tcp"
    /// qftest Lookup Port [Gregor_Schmid]
    public static let `qftestLookupUdp`: Self = "_qftest-lookup._udp"
    /// Teredo Port 
    public static let `teredoTcp`: Self = "_teredo._tcp"
    /// Teredo Port 
    public static let `teredoUdp`: Self = "_teredo._udp"
    /// CAMAC equipment [Eugene_Zhiganov]
    public static let `camacTcp`: Self = "_camac._tcp"
    /// CAMAC equipment [Eugene_Zhiganov]
    public static let `camacUdp`: Self = "_camac._udp"
    /// Symantec SIM [George_Dzieciol]
    public static let `symantecSimTcp`: Self = "_symantec-sim._tcp"
    /// Symantec SIM [George_Dzieciol]
    public static let `symantecSimUdp`: Self = "_symantec-sim._udp"
    /// Interworld [John_Stephen]
    public static let `interworldTcp`: Self = "_interworld._tcp"
    /// Interworld [John_Stephen]
    public static let `interworldUdp`: Self = "_interworld._udp"
    /// Tellumat MDR NMS [Hennie_van_der_Merwe]
    public static let `tellumatNmsTcp`: Self = "_tellumat-nms._tcp"
    /// Tellumat MDR NMS [Hennie_van_der_Merwe]
    public static let `tellumatNmsUdp`: Self = "_tellumat-nms._udp"
    /// Secure SMPP [Cormac_Long]
    public static let `ssmppTcp`: Self = "_ssmpp._tcp"
    /// Secure SMPP [Cormac_Long]
    public static let `ssmppUdp`: Self = "_ssmpp._udp"
    /// Apcupsd Information Port [Riccardo_Facchetti]
    public static let `apcupsdTcp`: Self = "_apcupsd._tcp"
    /// Apcupsd Information Port [Riccardo_Facchetti]
    public static let `apcupsdUdp`: Self = "_apcupsd._udp"
    /// TeamAgenda Server Port [Dany_Ayotte]
    public static let `taserverTcp`: Self = "_taserver._tcp"
    /// TeamAgenda Server Port [Dany_Ayotte]
    public static let `taserverUdp`: Self = "_taserver._udp"
    /// Red Box Recorder ADP [Simon_Jolly]
    public static let `rbrDiscoveryTcp`: Self = "_rbr-discovery._tcp"
    /// Red Box Recorder ADP [Simon_Jolly]
    public static let `rbrDiscoveryUdp`: Self = "_rbr-discovery._udp"
    /// Quest Notification Server [Rob_Griffin]
    public static let `questnotifyTcp`: Self = "_questnotify._tcp"
    /// Quest Notification Server [Rob_Griffin]
    public static let `questnotifyUdp`: Self = "_questnotify._udp"
    /// Vipul's Razor [Vipul_Ved_Prakash]
    public static let `razorTcp`: Self = "_razor._tcp"
    /// Vipul's Razor [Vipul_Ved_Prakash]
    public static let `razorUdp`: Self = "_razor._udp"
    /// Sky Transport Protocol [Michael_Paddon]
    public static let `skyTransportTcp`: Self = "_sky-transport._tcp"
    /// Sky Transport Protocol [Michael_Paddon]
    public static let `skyTransportUdp`: Self = "_sky-transport._udp"
    /// PersonalOS Comm Port [Shane_Roberts]
    public static let `personalos001Tcp`: Self = "_personalos-001._tcp"
    /// PersonalOS Comm Port [Shane_Roberts]
    public static let `personalos001Udp`: Self = "_personalos-001._udp"
    /// MCP user port [Professor_Paul_S_Wa]
    public static let `mcpPortTcp`: Self = "_mcp-port._tcp"
    /// MCP user port [Professor_Paul_S_Wa]
    public static let `mcpPortUdp`: Self = "_mcp-port._udp"
    /// CCTV control port [John_Skidmore]
    public static let `cctvPortTcp`: Self = "_cctv-port._tcp"
    /// CCTV control port [John_Skidmore]
    public static let `cctvPortUdp`: Self = "_cctv-port._udp"
    /// INIServe port [Peter_Moylan]
    public static let `iniservePortTcp`: Self = "_iniserve-port._tcp"
    /// INIServe port [Peter_Moylan]
    public static let `iniservePortUdp`: Self = "_iniserve-port._udp"
    /// BMC-OneKey [Portnoy_Boxman]
    public static let `bmcOnekeyTcp`: Self = "_bmc-onekey._tcp"
    /// BMC-OneKey [Portnoy_Boxman]
    public static let `bmcOnekeyUdp`: Self = "_bmc-onekey._udp"
    /// SDBProxy [Eric_Grange]
    public static let `sdbproxyTcp`: Self = "_sdbproxy._tcp"
    /// SDBProxy [Eric_Grange]
    public static let `sdbproxyUdp`: Self = "_sdbproxy._udp"
    /// Watcom Debug [Dave_Neudoerffer]
    public static let `watcomdebugTcp`: Self = "_watcomdebug._tcp"
    /// Watcom Debug [Dave_Neudoerffer]
    public static let `watcomdebugUdp`: Self = "_watcomdebug._udp"
    /// Electromed SIM port [Francois_Marchand]
    public static let `esimportTcp`: Self = "_esimport._tcp"
    /// Electromed SIM port [Francois_Marchand]
    public static let `esimportUdp`: Self = "_esimport._udp"
    /// M2PA 
    public static let `m2paTcp`: Self = "_m2pa._tcp"
    /// M2PA 
    public static let `m2paSctp`: Self = "_m2pa._sctp"
    /// Quest Data Hub [Greg_Cottman_2]
    public static let `questDataHubTcp`: Self = "_quest-data-hub._tcp"
    /// DOF Protocol Stack [OpenDOF]
    public static let `dofEpsTcp`: Self = "_dof-eps._tcp"
    /// DOF Protocol Stack [OpenDOF]
    public static let `dofEpsUdp`: Self = "_dof-eps._udp"
    /// DOF Secure Tunnel [OpenDOF]
    public static let `dofTunnelSecTcp`: Self = "_dof-tunnel-sec._tcp"
    /// DOF Secure Tunnel [OpenDOF]
    public static let `dofTunnelSecUdp`: Self = "_dof-tunnel-sec._udp"
    /// Meinberg Control Service [Meinberg_Funkuhren_GmbH_Co_KG]
    public static let `mbgCtrlTcp`: Self = "_mbg-ctrl._tcp"
    /// Meinberg Control Service [Meinberg_Funkuhren_GmbH_Co_KG]
    public static let `mbgCtrlUdp`: Self = "_mbg-ctrl._udp"
    /// MCC Web Server Port 
    public static let `mccwebsvrPortTcp`: Self = "_mccwebsvr-port._tcp"
    /// MCC Web Server Port 
    public static let `mccwebsvrPortUdp`: Self = "_mccwebsvr-port._udp"
    /// MegaRAID Server Port 
    public static let `megardsvrPortTcp`: Self = "_megardsvr-port._tcp"
    /// MegaRAID Server Port 
    public static let `megardsvrPortUdp`: Self = "_megardsvr-port._udp"
    /// Registration Server Port [Sreenivas_Bagalkote]
    public static let `megaregsvrportTcp`: Self = "_megaregsvrport._tcp"
    /// Registration Server Port [Sreenivas_Bagalkote]
    public static let `megaregsvrportUdp`: Self = "_megaregsvrport._udp"
    /// Advantage Group UPS Suite [James_Goddard]
    public static let `tagUps1Tcp`: Self = "_tag-ups-1._tcp"
    /// Advantage Group UPS Suite [James_Goddard]
    public static let `tagUps1Udp`: Self = "_tag-ups-1._udp"
    /// DMAF Server 
    public static let `dmafServerTcp`: Self = "_dmaf-server._tcp"
    /// DMAF Caster [Ramakrishna_Nadendla]
    public static let `dmafCasterUdp`: Self = "_dmaf-caster._udp"
    /// Coalsere CCM Port 
    public static let `ccmPortTcp`: Self = "_ccm-port._tcp"
    /// Coalsere CCM Port 
    public static let `ccmPortUdp`: Self = "_ccm-port._udp"
    /// Coalsere CMC Port [Chris_Hawkinson]
    public static let `cmcPortTcp`: Self = "_cmc-port._tcp"
    /// Coalsere CMC Port [Chris_Hawkinson]
    public static let `cmcPortUdp`: Self = "_cmc-port._udp"
    /// Configuration Port 
    public static let `configPortTcp`: Self = "_config-port._tcp"
    /// Configuration Port 
    public static let `configPortUdp`: Self = "_config-port._udp"
    /// Data Port [Anupam_Bharali]
    public static let `dataPortTcp`: Self = "_data-port._tcp"
    /// Data Port [Anupam_Bharali]
    public static let `dataPortUdp`: Self = "_data-port._udp"
    /// Tarantella Load Balancing [Jim_Musgrave]
    public static let `ttat3lbTcp`: Self = "_ttat3lb._tcp"
    /// Tarantella Load Balancing [Jim_Musgrave]
    public static let `ttat3lbUdp`: Self = "_ttat3lb._udp"
    /// NATI-ServiceLocator [Jason_Case]
    public static let `natiSvrlocTcp`: Self = "_nati-svrloc._tcp"
    /// NATI-ServiceLocator [Jason_Case]
    public static let `natiSvrlocUdp`: Self = "_nati-svrloc._udp"
    /// Ascent Capture Licensing [Brad_Hamilton_2]
    public static let `kfxaclicensingTcp`: Self = "_kfxaclicensing._tcp"
    /// Ascent Capture Licensing [Brad_Hamilton_2]
    public static let `kfxaclicensingUdp`: Self = "_kfxaclicensing._udp"
    /// PEG PRESS Server [Jim_DeLisle]
    public static let `pressTcp`: Self = "_press._tcp"
    /// PEG PRESS Server [Jim_DeLisle]
    public static let `pressUdp`: Self = "_press._udp"
    /// CANEX Watch System [Peter_Kollath]
    public static let `canexWatchTcp`: Self = "_canex-watch._tcp"
    /// CANEX Watch System [Peter_Kollath]
    public static let `canexWatchUdp`: Self = "_canex-watch._udp"
    /// U-DBase Access Protocol [Bodo_Rueskamp]
    public static let `uDbapTcp`: Self = "_u-dbap._tcp"
    /// U-DBase Access Protocol [Bodo_Rueskamp]
    public static let `uDbapUdp`: Self = "_u-dbap._udp"
    /// Emprise License Server 
    public static let `empriseLlsTcp`: Self = "_emprise-lls._tcp"
    /// Emprise License Server 
    public static let `empriseLlsUdp`: Self = "_emprise-lls._udp"
    /// License Server Console [James_J_Diaz]
    public static let `empriseLscTcp`: Self = "_emprise-lsc._tcp"
    /// License Server Console [James_J_Diaz]
    public static let `empriseLscUdp`: Self = "_emprise-lsc._udp"
    /// Peer to Peer Grouping [Igor_Kostic]
    public static let `p2pgroupTcp`: Self = "_p2pgroup._tcp"
    /// Peer to Peer Grouping [Igor_Kostic]
    public static let `p2pgroupUdp`: Self = "_p2pgroup._udp"
    /// Sentinel Server [Ian_Gordon]
    public static let `sentinelTcp`: Self = "_sentinel._tcp"
    /// Sentinel Server [Ian_Gordon]
    public static let `sentinelUdp`: Self = "_sentinel._udp"
    /// isomair [Richard_Fleming]
    public static let `isomairTcp`: Self = "_isomair._tcp"
    /// isomair [Richard_Fleming]
    public static let `isomairUdp`: Self = "_isomair._udp"
    /// WV CSP SMS Binding [Matti_Salmi]
    public static let `wvCspSmsTcp`: Self = "_wv-csp-sms._tcp"
    /// WV CSP SMS Binding [Matti_Salmi]
    public static let `wvCspSmsUdp`: Self = "_wv-csp-sms._udp"
    /// LOCANIS G-TRACK Server 
    public static let `gtrackServerTcp`: Self = "_gtrack-server._tcp"
    /// LOCANIS G-TRACK Server 
    public static let `gtrackServerUdp`: Self = "_gtrack-server._udp"
    /// LOCANIS G-TRACK NE Port [Juergen_Edelhaeuser]
    public static let `gtrackNeTcp`: Self = "_gtrack-ne._tcp"
    /// LOCANIS G-TRACK NE Port [Juergen_Edelhaeuser]
    public static let `gtrackNeUdp`: Self = "_gtrack-ne._udp"
    /// BP Model Debugger [Keith_Fligg]
    public static let `bpmdTcp`: Self = "_bpmd._tcp"
    /// BP Model Debugger [Keith_Fligg]
    public static let `bpmdUdp`: Self = "_bpmd._udp"
    /// MediaSpace 
    public static let `mediaspaceTcp`: Self = "_mediaspace._tcp"
    /// MediaSpace 
    public static let `mediaspaceUdp`: Self = "_mediaspace._udp"
    /// ShareApp [Jeff_King]
    public static let `shareappTcp`: Self = "_shareapp._tcp"
    /// ShareApp [Jeff_King]
    public static let `shareappUdp`: Self = "_shareapp._udp"
    /// Illusion Wireless MMOG [Jan_Vrsinsky]
    public static let `iwMmogameTcp`: Self = "_iw-mmogame._tcp"
    /// Illusion Wireless MMOG [Jan_Vrsinsky]
    public static let `iwMmogameUdp`: Self = "_iw-mmogame._udp"
    /// A14 (AN-to-SC/MM) 
    public static let `a14Tcp`: Self = "_a14._tcp"
    /// A14 (AN-to-SC/MM) 
    public static let `a14Udp`: Self = "_a14._udp"
    /// A15 (AN-to-AN) [David_Ott]
    public static let `a15Tcp`: Self = "_a15._tcp"
    /// A15 (AN-to-AN) [David_Ott]
    public static let `a15Udp`: Self = "_a15._udp"
    /// Quasar Accounting Server [Brad_Pepers]
    public static let `quasarServerTcp`: Self = "_quasar-server._tcp"
    /// Quasar Accounting Server [Brad_Pepers]
    public static let `quasarServerUdp`: Self = "_quasar-server._udp"
    /// text relay-answer [John_Willis]
    public static let `trapDaemonTcp`: Self = "_trap-daemon._tcp"
    /// text relay-answer [John_Willis]
    public static let `trapDaemonUdp`: Self = "_trap-daemon._udp"
    /// Visinet Gui [Jeff_Douglass]
    public static let `visinetGuiTcp`: Self = "_visinet-gui._tcp"
    /// Visinet Gui [Jeff_Douglass]
    public static let `visinetGuiUdp`: Self = "_visinet-gui._udp"
    /// InfiniSwitch Mgr Client [Lee_VanTine]
    public static let `infiniswitchclTcp`: Self = "_infiniswitchcl._tcp"
    /// InfiniSwitch Mgr Client [Lee_VanTine]
    public static let `infiniswitchclUdp`: Self = "_infiniswitchcl._udp"
    /// Integrated Rcvr Control [Dave_Stone]
    public static let `intRcvCntrlTcp`: Self = "_int-rcv-cntrl._tcp"
    /// Integrated Rcvr Control [Dave_Stone]
    public static let `intRcvCntrlUdp`: Self = "_int-rcv-cntrl._udp"
    /// BMC JMX Port [Portnoy_Boxman]
    public static let `bmcJmxPortTcp`: Self = "_bmc-jmx-port._tcp"
    /// BMC JMX Port [Portnoy_Boxman]
    public static let `bmcJmxPortUdp`: Self = "_bmc-jmx-port._udp"
    /// ComCam IO Port [Don_Gilbreath]
    public static let `comcamIoTcp`: Self = "_comcam-io._tcp"
    /// ComCam IO Port [Don_Gilbreath]
    public static let `comcamIoUdp`: Self = "_comcam-io._udp"
    /// Splitlock Server [Andrew_Tune]
    public static let `splitlockTcp`: Self = "_splitlock._tcp"
    /// Splitlock Server [Andrew_Tune]
    public static let `splitlockUdp`: Self = "_splitlock._udp"
    /// Precise I3 [Tomer_Shain]
    public static let `preciseI3Tcp`: Self = "_precise-i3._tcp"
    /// Precise I3 [Tomer_Shain]
    public static let `preciseI3Udp`: Self = "_precise-i3._udp"
    /// Trendchip control protocol [Ming_Jen_Chen]
    public static let `trendchipDcpTcp`: Self = "_trendchip-dcp._tcp"
    /// Trendchip control protocol [Ming_Jen_Chen]
    public static let `trendchipDcpUdp`: Self = "_trendchip-dcp._udp"
    /// CPDI PIDAS Connection Mon [Tony_Splaver]
    public static let `cpdiPidasCmTcp`: Self = "_cpdi-pidas-cm._tcp"
    /// CPDI PIDAS Connection Mon [Tony_Splaver]
    public static let `cpdiPidasCmUdp`: Self = "_cpdi-pidas-cm._udp"
    /// ECHONET [Takeshi_Saito]
    public static let `echonetTcp`: Self = "_echonet._tcp"
    /// ECHONET [Takeshi_Saito]
    public static let `echonetUdp`: Self = "_echonet._udp"
    /// Six Degrees Port [Zach_Nies]
    public static let `sixDegreesTcp`: Self = "_six-degrees._tcp"
    /// Six Degrees Port [Zach_Nies]
    public static let `sixDegreesUdp`: Self = "_six-degrees._udp"
    /// Micro Focus Data Protector [Micro_Focus]
    public static let `dataprotectorTcp`: Self = "_dataprotector._tcp"
    /// Micro Focus Data Protector [Micro_Focus]
    public static let `dataprotectorUdp`: Self = "_dataprotector._udp"
    /// Alaris Device Discovery [Chris_Dern]
    public static let `alarisDiscTcp`: Self = "_alaris-disc._tcp"
    /// Alaris Device Discovery [Chris_Dern]
    public static let `alarisDiscUdp`: Self = "_alaris-disc._udp"
    /// Satchwell Sigma [Dave_Chapman]
    public static let `sigmaPortTcp`: Self = "_sigma-port._tcp"
    /// Satchwell Sigma [Dave_Chapman]
    public static let `sigmaPortUdp`: Self = "_sigma-port._udp"
    /// Start Messaging Network [Peter_Rocca]
    public static let `startNetworkTcp`: Self = "_start-network._tcp"
    /// Start Messaging Network [Peter_Rocca]
    public static let `startNetworkUdp`: Self = "_start-network._udp"
    /// cd3o Control Protocol [Chris_Wilcox]
    public static let `cd3oProtocolTcp`: Self = "_cd3o-protocol._tcp"
    /// cd3o Control Protocol [Chris_Wilcox]
    public static let `cd3oProtocolUdp`: Self = "_cd3o-protocol._udp"
    /// ATI SHARP Logic Engine [Bill_Reveile]
    public static let `sharpServerTcp`: Self = "_sharp-server._tcp"
    /// ATI SHARP Logic Engine [Bill_Reveile]
    public static let `sharpServerUdp`: Self = "_sharp-server._udp"
    /// AAIR-Network 1 
    public static let `aairnet1Tcp`: Self = "_aairnet-1._tcp"
    /// AAIR-Network 1 
    public static let `aairnet1Udp`: Self = "_aairnet-1._udp"
    /// AAIR-Network 2 [James_Mealey]
    public static let `aairnet2Tcp`: Self = "_aairnet-2._tcp"
    /// AAIR-Network 2 [James_Mealey]
    public static let `aairnet2Udp`: Self = "_aairnet-2._udp"
    /// EPSON Projector Control Port 
    public static let `epPcpTcp`: Self = "_ep-pcp._tcp"
    /// EPSON Projector Control Port 
    public static let `epPcpUdp`: Self = "_ep-pcp._udp"
    /// EPSON Network Screen Port [SEIKO_EPSON_3]
    public static let `epNspTcp`: Self = "_ep-nsp._tcp"
    /// EPSON Network Screen Port [SEIKO_EPSON_3]
    public static let `epNspUdp`: Self = "_ep-nsp._udp"
    /// FF LAN Redundancy Port [Fieldbus_Foundation]
    public static let `ffLrPortTcp`: Self = "_ff-lr-port._tcp"
    /// FF LAN Redundancy Port [Fieldbus_Foundation]
    public static let `ffLrPortUdp`: Self = "_ff-lr-port._udp"
    /// HAIPIS Dynamic Discovery [Mike_Irani]
    public static let `haipeDiscoverTcp`: Self = "_haipe-discover._tcp"
    /// HAIPIS Dynamic Discovery [Mike_Irani]
    public static let `haipeDiscoverUdp`: Self = "_haipe-discover._udp"
    /// Distributed Upgrade Port [Jason_Schoon]
    public static let `distUpgradeTcp`: Self = "_dist-upgrade._tcp"
    /// Distributed Upgrade Port [Jason_Schoon]
    public static let `distUpgradeUdp`: Self = "_dist-upgrade._udp"
    /// Volley [David_Catmull]
    public static let `volleyTcp`: Self = "_volley._tcp"
    /// Volley [David_Catmull]
    public static let `volleyUdp`: Self = "_volley._udp"
    /// bvControl Daemon [Ravi_Gokhale]
    public static let `bvcdaemonPortTcp`: Self = "_bvcdaemon-port._tcp"
    /// bvControl Daemon [Ravi_Gokhale]
    public static let `bvcdaemonPortUdp`: Self = "_bvcdaemon-port._udp"
    /// Jam Server Port [Art_Pope]
    public static let `jamserverportTcp`: Self = "_jamserverport._tcp"
    /// Jam Server Port [Art_Pope]
    public static let `jamserverportUdp`: Self = "_jamserverport._udp"
    /// EPT Machine Interface [Victor_H_Farrace]
    public static let `eptMachineTcp`: Self = "_ept-machine._tcp"
    /// EPT Machine Interface [Victor_H_Farrace]
    public static let `eptMachineUdp`: Self = "_ept-machine._udp"
    /// ESC/VP.net [Hiroyuki_Hashimoto]
    public static let `escvpnetTcp`: Self = "_escvpnet._tcp"
    /// ESC/VP.net [Hiroyuki_Hashimoto]
    public static let `escvpnetUdp`: Self = "_escvpnet._udp"
    /// C&S Remote Database Port 
    public static let `csRemoteDbTcp`: Self = "_cs-remote-db._tcp"
    /// C&S Remote Database Port 
    public static let `csRemoteDbUdp`: Self = "_cs-remote-db._udp"
    /// C&S Web Services Port [Computer_Software_Gm]
    public static let `csServicesTcp`: Self = "_cs-services._tcp"
    /// C&S Web Services Port [Computer_Software_Gm]
    public static let `csServicesUdp`: Self = "_cs-services._udp"
    /// distributed compiler [Martin_Pool]
    public static let `distccTcp`: Self = "_distcc._tcp"
    /// distributed compiler [Martin_Pool]
    public static let `distccUdp`: Self = "_distcc._udp"
    /// Wyrnix AIS port [Harry_T_Vennik]
    public static let `wacpTcp`: Self = "_wacp._tcp"
    /// Wyrnix AIS port [Harry_T_Vennik]
    public static let `wacpUdp`: Self = "_wacp._udp"
    /// hNTSP Library Manager [Kenji_Tetsuyama]
    public static let `hlibmgrTcp`: Self = "_hlibmgr._tcp"
    /// hNTSP Library Manager [Kenji_Tetsuyama]
    public static let `hlibmgrUdp`: Self = "_hlibmgr._udp"
    /// Simple Distributed Objects [Alexander_Philippou]
    public static let `sdoTcp`: Self = "_sdo._tcp"
    /// Simple Distributed Objects [Alexander_Philippou]
    public static let `sdoUdp`: Self = "_sdo._udp"
    /// SerVistaITSM [Ralph_Campbell]
    public static let `servistaitsmTcp`: Self = "_servistaitsm._tcp"
    /// SerVistaITSM [Ralph_Campbell]
    public static let `servistaitsmUdp`: Self = "_servistaitsm._udp"
    /// Customer Service Port [Jonathan_A_Zdziarsk]
    public static let `scservpTcp`: Self = "_scservp._tcp"
    /// Customer Service Port [Jonathan_A_Zdziarsk]
    public static let `scservpUdp`: Self = "_scservp._udp"
    /// EHP Backup Protocol [Ed_Fair]
    public static let `ehpBackupTcp`: Self = "_ehp-backup._tcp"
    /// EHP Backup Protocol [Ed_Fair]
    public static let `ehpBackupUdp`: Self = "_ehp-backup._udp"
    /// Extensible Automation [Mark_Harrison]
    public static let `xapHaTcp`: Self = "_xap-ha._tcp"
    /// Extensible Automation [Mark_Harrison]
    public static let `xapHaUdp`: Self = "_xap-ha._udp"
    /// Netplay Port 1 
    public static let `netplayPort1Tcp`: Self = "_netplay-port1._tcp"
    /// Netplay Port 1 
    public static let `netplayPort1Udp`: Self = "_netplay-port1._udp"
    /// Netplay Port 2 [Predrag_Filipovic]
    public static let `netplayPort2Tcp`: Self = "_netplay-port2._tcp"
    /// Netplay Port 2 [Predrag_Filipovic]
    public static let `netplayPort2Udp`: Self = "_netplay-port2._udp"
    /// Juxml Replication port [Colin_Reid]
    public static let `juxmlPortTcp`: Self = "_juxml-port._tcp"
    /// Juxml Replication port [Colin_Reid]
    public static let `juxmlPortUdp`: Self = "_juxml-port._udp"
    /// AudioJuggler [Morten_Mertner]
    public static let `audiojugglerTcp`: Self = "_audiojuggler._tcp"
    /// AudioJuggler [Morten_Mertner]
    public static let `audiojugglerUdp`: Self = "_audiojuggler._udp"
    /// ssowatch [Marie_France_Dubreui]
    public static let `ssowatchTcp`: Self = "_ssowatch._tcp"
    /// ssowatch [Marie_France_Dubreui]
    public static let `ssowatchUdp`: Self = "_ssowatch._udp"
    /// Cyc [Stephen_Reed]
    public static let `cycTcp`: Self = "_cyc._tcp"
    /// Cyc [Stephen_Reed]
    public static let `cycUdp`: Self = "_cyc._udp"
    /// XSS Server Port [Joe_Purcell]
    public static let `xssSrvPortTcp`: Self = "_xss-srv-port._tcp"
    /// XSS Server Port [Joe_Purcell]
    public static let `xssSrvPortUdp`: Self = "_xss-srv-port._udp"
    /// Splitlock Gateway [Andrew_Tune]
    public static let `splitlockGwTcp`: Self = "_splitlock-gw._tcp"
    /// Splitlock Gateway [Andrew_Tune]
    public static let `splitlockGwUdp`: Self = "_splitlock-gw._udp"
    /// Fujitsu Cooperation Port [Kouji_Sugisawa]
    public static let `fjcpTcp`: Self = "_fjcp._tcp"
    /// Fujitsu Cooperation Port [Kouji_Sugisawa]
    public static let `fjcpUdp`: Self = "_fjcp._udp"
    /// Nishioka Miyuki Msg Protocol [TAKEDA_Hiroyuki]
    public static let `nmmpTcp`: Self = "_nmmp._tcp"
    /// Nishioka Miyuki Msg Protocol [TAKEDA_Hiroyuki]
    public static let `nmmpUdp`: Self = "_nmmp._udp"
    /// PRISMIQ VOD plug-in [Richard_Hodges_3]
    public static let `prismiqPluginTcp`: Self = "_prismiq-plugin._tcp"
    /// PRISMIQ VOD plug-in [Richard_Hodges_3]
    public static let `prismiqPluginUdp`: Self = "_prismiq-plugin._udp"
    /// XRPC Registry [Slava_Monich]
    public static let `xrpcRegistryTcp`: Self = "_xrpc-registry._tcp"
    /// XRPC Registry [Slava_Monich]
    public static let `xrpcRegistryUdp`: Self = "_xrpc-registry._udp"
    /// VxCR NBU Default Port [Boris_Star]
    public static let `vxcrnbuportTcp`: Self = "_vxcrnbuport._tcp"
    /// VxCR NBU Default Port [Boris_Star]
    public static let `vxcrnbuportUdp`: Self = "_vxcrnbuport._udp"
    /// Tunnel Setup Protocol [Marc_Blanchet]
    public static let `tspTcp`: Self = "_tsp._tcp"
    /// Tunnel Setup Protocol [Marc_Blanchet]
    public static let `tspUdp`: Self = "_tsp._udp"
    /// VAP RealTime Messenger [Boris_Polevoy]
    public static let `vaprtmTcp`: Self = "_vaprtm._tcp"
    /// VAP RealTime Messenger [Boris_Polevoy]
    public static let `vaprtmUdp`: Self = "_vaprtm._udp"
    /// ActiveBatch Exec Agent 
    public static let `abatemgrTcp`: Self = "_abatemgr._tcp"
    /// ActiveBatch Exec Agent 
    public static let `abatemgrUdp`: Self = "_abatemgr._udp"
    /// ActiveBatch Job Scheduler [Ben_Rosenberg]
    public static let `abatjssTcp`: Self = "_abatjss._tcp"
    /// ActiveBatch Job Scheduler [Ben_Rosenberg]
    public static let `abatjssUdp`: Self = "_abatjss._udp"
    /// ImmediaNet Beacon [Bill_Homan]
    public static let `immedianetBcnTcp`: Self = "_immedianet-bcn._tcp"
    /// ImmediaNet Beacon [Bill_Homan]
    public static let `immedianetBcnUdp`: Self = "_immedianet-bcn._udp"
    /// PlayStation AMS (Secure) [Edgar_Alan_Tu]
    public static let `psAmsTcp`: Self = "_ps-ams._tcp"
    /// PlayStation AMS (Secure) [Edgar_Alan_Tu]
    public static let `psAmsUdp`: Self = "_ps-ams._udp"
    /// Apple SASL [David_M_O_Rourke]
    public static let `appleSaslTcp`: Self = "_apple-sasl._tcp"
    /// Apple SASL [David_M_O_Rourke]
    public static let `appleSaslUdp`: Self = "_apple-sasl._udp"
    /// IBM Tivoli Directory Service using SSL 
    public static let `canNdsSslTcp`: Self = "_can-nds-ssl._tcp"
    /// IBM Tivoli Directory Service using SSL 
    public static let `canNdsSslUdp`: Self = "_can-nds-ssl._udp"
    /// IBM Tivoli Directory Service using SSL [Nic_Catrambone]
    public static let `canFerretSslTcp`: Self = "_can-ferret-ssl._tcp"
    /// IBM Tivoli Directory Service using SSL [Nic_Catrambone]
    public static let `canFerretSslUdp`: Self = "_can-ferret-ssl._udp"
    /// pserver [Patrick_Furlong]
    public static let `pserverTcp`: Self = "_pserver._tcp"
    /// pserver [Patrick_Furlong]
    public static let `pserverUdp`: Self = "_pserver._udp"
    /// DIRECWAY Tunnel Protocol [John_Border]
    public static let `dtpTcp`: Self = "_dtp._tcp"
    /// DIRECWAY Tunnel Protocol [John_Border]
    public static let `dtpUdp`: Self = "_dtp._udp"
    /// UPS Engine Port 
    public static let `upsEngineTcp`: Self = "_ups-engine._tcp"
    /// UPS Engine Port 
    public static let `upsEngineUdp`: Self = "_ups-engine._udp"
    /// Enterprise Engine Port [Mike_Delgrosso]
    public static let `entEngineTcp`: Self = "_ent-engine._tcp"
    /// Enterprise Engine Port [Mike_Delgrosso]
    public static let `entEngineUdp`: Self = "_ent-engine._udp"
    /// IBM eServer PAP [Dave_Gimpl]
    public static let `eserverPapTcp`: Self = "_eserver-pap._tcp"
    /// IBM EServer PAP [Dave_Gimpl]
    public static let `eserverPapUdp`: Self = "_eserver-pap._udp"
    /// IBM Information Exchange [Paul_Ford_Hutchinson]
    public static let `infoexchTcp`: Self = "_infoexch._tcp"
    /// IBM Information Exchange [Paul_Ford_Hutchinson]
    public static let `infoexchUdp`: Self = "_infoexch._udp"
    /// Dell Remote Management [Bradley_Bransom]
    public static let `dellRmPortTcp`: Self = "_dell-rm-port._tcp"
    /// Dell Remote Management [Bradley_Bransom]
    public static let `dellRmPortUdp`: Self = "_dell-rm-port._udp"
    /// CA SAN Switch Management [Emre_Tunar]
    public static let `casanswmgmtTcp`: Self = "_casanswmgmt._tcp"
    /// CA SAN Switch Management [Emre_Tunar]
    public static let `casanswmgmtUdp`: Self = "_casanswmgmt._udp"
    /// SMILE TCP/UDP Interface [Andre_Petras]
    public static let `smileTcp`: Self = "_smile._tcp"
    /// SMILE TCP/UDP Interface [Andre_Petras]
    public static let `smileUdp`: Self = "_smile._udp"
    /// e Field Control (EIBnet) [Marc_Goossens]
    public static let `efcpTcp`: Self = "_efcp._tcp"
    /// e Field Control (EIBnet) [Marc_Goossens]
    public static let `efcpUdp`: Self = "_efcp._udp"
    /// LispWorks ORB [Lisp_Support]
    public static let `lispworksOrbTcp`: Self = "_lispworks-orb._tcp"
    /// LispWorks ORB [Lisp_Support]
    public static let `lispworksOrbUdp`: Self = "_lispworks-orb._udp"
    /// Openview Media Vault GUI [Stephen_Gold]
    public static let `mediavaultGuiTcp`: Self = "_mediavault-gui._tcp"
    /// Openview Media Vault GUI [Stephen_Gold]
    public static let `mediavaultGuiUdp`: Self = "_mediavault-gui._udp"
    /// WinINSTALL IPC Port [Bill_Somerville]
    public static let `wininstallIpcTcp`: Self = "_wininstall-ipc._tcp"
    /// WinINSTALL IPC Port [Bill_Somerville]
    public static let `wininstallIpcUdp`: Self = "_wininstall-ipc._udp"
    /// CallTrax Data Port [Oliver_Bailey]
    public static let `calltraxTcp`: Self = "_calltrax._tcp"
    /// CallTrax Data Port [Oliver_Bailey]
    public static let `calltraxUdp`: Self = "_calltrax._udp"
    /// VisualAge Pacbase server [Dominique_Lelievre]
    public static let `vaPacbaseTcp`: Self = "_va-pacbase._tcp"
    /// VisualAge Pacbase server [Dominique_Lelievre]
    public static let `vaPacbaseUdp`: Self = "_va-pacbase._udp"
    /// RoverLog IPC [Tom_Mayo]
    public static let `roverlogTcp`: Self = "_roverlog._tcp"
    /// RoverLog IPC [Tom_Mayo]
    public static let `roverlogUdp`: Self = "_roverlog._udp"
    /// DataGuardianLT [Bruce_Carlson]
    public static let `iprDgltTcp`: Self = "_ipr-dglt._tcp"
    /// DataGuardianLT [Bruce_Carlson]
    public static let `iprDgltUdp`: Self = "_ipr-dglt._udp"
    /// NPDS Tracker [Paul_Guyot]
    public static let `npdsTrackerTcp`: Self = "_npds-tracker._tcp"
    /// NPDS Tracker [Paul_Guyot]
    public static let `npdsTrackerUdp`: Self = "_npds-tracker._udp"
    /// BTS X73 Port [Todd_Cooper]
    public static let `btsX73Tcp`: Self = "_bts-x73._tcp"
    /// BTS X73 Port [Todd_Cooper]
    public static let `btsX73Udp`: Self = "_bts-x73._udp"
    /// EMC SmartPackets-MAPI [Koen_Schoofs]
    public static let `casMapiTcp`: Self = "_cas-mapi._tcp"
    /// EMC SmartPackets-MAPI [Koen_Schoofs]
    public static let `casMapiUdp`: Self = "_cas-mapi._udp"
    /// BMC EDV/EA [Portnoy_Boxman]
    public static let `bmcEaTcp`: Self = "_bmc-ea._tcp"
    /// BMC EDV/EA [Portnoy_Boxman]
    public static let `bmcEaUdp`: Self = "_bmc-ea._udp"
    /// FAXstfX [Alec_Carlson]
    public static let `faxstfxPortTcp`: Self = "_faxstfx-port._tcp"
    /// FAXstfX [Alec_Carlson]
    public static let `faxstfxPortUdp`: Self = "_faxstfx-port._udp"
    /// DS Expert Agent [Jason_Lockett][Melanie_Kacerek]
    public static let `dsxAgentTcp`: Self = "_dsx-agent._tcp"
    /// DS Expert Agent [Jason_Lockett][Melanie_Kacerek]
    public static let `dsxAgentUdp`: Self = "_dsx-agent._udp"
    /// Trivial Network Management [Andrea_Premoli]
    public static let `tnmpv2Tcp`: Self = "_tnmpv2._tcp"
    /// Trivial Network Management [Andrea_Premoli]
    public static let `tnmpv2Udp`: Self = "_tnmpv2._udp"
    /// simple-push 
    public static let `simplePushTcp`: Self = "_simple-push._tcp"
    /// simple-push 
    public static let `simplePushUdp`: Self = "_simple-push._udp"
    /// simple-push Secure [C_Enrique_Ortiz]
    public static let `simplePushSTcp`: Self = "_simple-push-s._tcp"
    /// simple-push Secure [C_Enrique_Ortiz]
    public static let `simplePushSUdp`: Self = "_simple-push-s._udp"
    /// Digital Audio Access Protocol (iTunes) [Amandeep_Jawa]
    public static let `daapTcp`: Self = "_daap._tcp"
    /// Digital Audio Access Protocol (iTunes) [Amandeep_Jawa]
    public static let `daapUdp`: Self = "_daap._udp"
    /// Subversion [Greg_Hudson_2]
    public static let `svnTcp`: Self = "_svn._tcp"
    /// Subversion [Greg_Hudson_2]
    public static let `svnUdp`: Self = "_svn._udp"
    /// Magaya Network Port [Jesus_David_Rodrigue]
    public static let `magayaNetworkTcp`: Self = "_magaya-network._tcp"
    /// Magaya Network Port [Jesus_David_Rodrigue]
    public static let `magayaNetworkUdp`: Self = "_magaya-network._udp"
    /// Brimstone IntelSync [Davey_Taylor]
    public static let `intelsyncTcp`: Self = "_intelsync._tcp"
    /// Brimstone IntelSync [Davey_Taylor]
    public static let `intelsyncUdp`: Self = "_intelsync._udp"
    /// Emergency Automatic Structure Lockdown System [Mele_Associates]
    public static let `easlTcp`: Self = "_easl._tcp"
    /// BMC Data Collection [Portnoy_Boxman]
    public static let `bmcDataCollTcp`: Self = "_bmc-data-coll._tcp"
    /// BMC Data Collection [Portnoy_Boxman]
    public static let `bmcDataCollUdp`: Self = "_bmc-data-coll._udp"
    /// Telnet Com Port Control [Thomas_J_Pinkl]
    public static let `telnetcpcdTcp`: Self = "_telnetcpcd._tcp"
    /// Telnet Com Port Control [Thomas_J_Pinkl]
    public static let `telnetcpcdUdp`: Self = "_telnetcpcd._udp"
    /// NavisWorks License System [Tim_Wiegand]
    public static let `nwLicenseTcp`: Self = "_nw-license._tcp"
    /// NavisWorks License System [Tim_Wiegand]
    public static let `nwLicenseUdp`: Self = "_nw-license._udp"
    /// SAGECTLPANEL [Mark_Gamble]
    public static let `sagectlpanelTcp`: Self = "_sagectlpanel._tcp"
    /// SAGECTLPANEL [Mark_Gamble]
    public static let `sagectlpanelUdp`: Self = "_sagectlpanel._udp"
    /// Internet Call Waiting [B_J_Kortekaas]
    public static let `kpnIcwTcp`: Self = "_kpn-icw._tcp"
    /// Internet Call Waiting [B_J_Kortekaas]
    public static let `kpnIcwUdp`: Self = "_kpn-icw._udp"
    /// LRS NetPage [Geoffrey_Wossum]
    public static let `lrsPagingTcp`: Self = "_lrs-paging._tcp"
    /// LRS NetPage [Geoffrey_Wossum]
    public static let `lrsPagingUdp`: Self = "_lrs-paging._udp"
    /// NetCelera [Tarek_Nabhan]
    public static let `netceleraTcp`: Self = "_netcelera._tcp"
    /// NetCelera [Tarek_Nabhan]
    public static let `netceleraUdp`: Self = "_netcelera._udp"
    /// Web Service Discovery [Christian_Huitema_2]
    public static let `wsDiscoveryTcp`: Self = "_ws-discovery._tcp"
    /// Web Service Discovery [Christian_Huitema_2]
    public static let `wsDiscoveryUdp`: Self = "_ws-discovery._udp"
    /// Adobe Server 3 
    public static let `adobeserver3Tcp`: Self = "_adobeserver-3._tcp"
    /// Adobe Server 3 
    public static let `adobeserver3Udp`: Self = "_adobeserver-3._udp"
    /// Adobe Server 4 [Frank_Soetebeer]
    public static let `adobeserver4Tcp`: Self = "_adobeserver-4._tcp"
    /// Adobe Server 4 [Frank_Soetebeer]
    public static let `adobeserver4Udp`: Self = "_adobeserver-4._udp"
    /// Adobe Server 5 [Bernd_Paradies]
    public static let `adobeserver5Tcp`: Self = "_adobeserver-5._tcp"
    /// Adobe Server 5 [Bernd_Paradies]
    public static let `adobeserver5Udp`: Self = "_adobeserver-5._udp"
    /// Real-Time Event Port 
    public static let `rtEventTcp`: Self = "_rt-event._tcp"
    /// Real-Time Event Port 
    public static let `rtEventUdp`: Self = "_rt-event._udp"
    /// Real-Time Event Secure Port [Terry_Gin]
    public static let `rtEventSTcp`: Self = "_rt-event-s._tcp"
    /// Real-Time Event Secure Port [Terry_Gin]
    public static let `rtEventSUdp`: Self = "_rt-event-s._udp"
    /// Sun App Svr - Naming [Abhijit_Kumar]
    public static let `sunAsIiopsTcp`: Self = "_sun-as-iiops._tcp"
    /// Sun App Svr - Naming [Abhijit_Kumar]
    public static let `sunAsIiopsUdp`: Self = "_sun-as-iiops._udp"
    /// CA-IDMS Server [Dave_Ross]
    public static let `caIdmsTcp`: Self = "_ca-idms._tcp"
    /// CA-IDMS Server [Dave_Ross]
    public static let `caIdmsUdp`: Self = "_ca-idms._udp"
    /// PortGate Authentication [Scott_Harris]
    public static let `portgateAuthTcp`: Self = "_portgate-auth._tcp"
    /// PortGate Authentication [Scott_Harris]
    public static let `portgateAuthUdp`: Self = "_portgate-auth._udp"
    /// EBD Server 2 [Carlos_Portela]
    public static let `edbServer2Tcp`: Self = "_edb-server2._tcp"
    /// EBD Server 2 [Carlos_Portela]
    public static let `edbServer2Udp`: Self = "_edb-server2._udp"
    /// Sentinel Enterprise [Ian_Gordon_2]
    public static let `sentinelEntTcp`: Self = "_sentinel-ent._tcp"
    /// Sentinel Enterprise [Ian_Gordon_2]
    public static let `sentinelEntUdp`: Self = "_sentinel-ent._udp"
    /// TFTP over TLS [Mark_mayernick]
    public static let `tftpsTcp`: Self = "_tftps._tcp"
    /// TFTP over TLS [Mark_mayernick]
    public static let `tftpsUdp`: Self = "_tftps._udp"
    /// DELOS Direct Messaging [Ekkehard_Morgenstern]
    public static let `delosDmsTcp`: Self = "_delos-dms._tcp"
    /// DELOS Direct Messaging [Ekkehard_Morgenstern]
    public static let `delosDmsUdp`: Self = "_delos-dms._udp"
    /// Anoto Rendezvous Port [Ola_Sandstrom]
    public static let `anotoRendezvTcp`: Self = "_anoto-rendezv._tcp"
    /// Anoto Rendezvous Port [Ola_Sandstrom]
    public static let `anotoRendezvUdp`: Self = "_anoto-rendezv._udp"
    /// WV CSP SMS CIR Channel 
    public static let `wvCspSmsCirTcp`: Self = "_wv-csp-sms-cir._tcp"
    /// WV CSP SMS CIR Channel 
    public static let `wvCspSmsCirUdp`: Self = "_wv-csp-sms-cir._udp"
    /// WV CSP UDP/IP CIR Channel [Jon_Ingi_Ingimundars]
    public static let `wvCspUdpCirTcp`: Self = "_wv-csp-udp-cir._tcp"
    /// WV CSP UDP/IP CIR Channel [Jon_Ingi_Ingimundars]
    public static let `wvCspUdpCirUdp`: Self = "_wv-csp-udp-cir._udp"
    /// OPUS Server Port [Detlef_Stoever]
    public static let `opusServicesTcp`: Self = "_opus-services._tcp"
    /// OPUS Server Port [Detlef_Stoever]
    public static let `opusServicesUdp`: Self = "_opus-services._udp"
    /// iTel Server Port [Mark_Hendricks]
    public static let `itelserverportTcp`: Self = "_itelserverport._tcp"
    /// iTel Server Port [Mark_Hendricks]
    public static let `itelserverportUdp`: Self = "_itelserverport._udp"
    /// UF Astro. Instr. Services [David_B_Hon]
    public static let `ufastroInstrTcp`: Self = "_ufastro-instr._tcp"
    /// UF Astro. Instr. Services [David_B_Hon]
    public static let `ufastroInstrUdp`: Self = "_ufastro-instr._udp"
    /// Xsync 
    public static let `xsyncTcp`: Self = "_xsync._tcp"
    /// Xsync 
    public static let `xsyncUdp`: Self = "_xsync._udp"
    /// Xserve RAID [Bob_Bradley]
    public static let `xserveraidTcp`: Self = "_xserveraid._tcp"
    /// Xserve RAID [Bob_Bradley]
    public static let `xserveraidUdp`: Self = "_xserveraid._udp"
    /// Sychron Service Daemon [Robert_Marinelli]
    public static let `sychrondTcp`: Self = "_sychrond._tcp"
    /// Sychron Service Daemon [Robert_Marinelli]
    public static let `sychrondUdp`: Self = "_sychrond._udp"
    /// World of Warcraft [Domain_Tech]
    public static let `blizwowTcp`: Self = "_blizwow._tcp"
    /// World of Warcraft [Domain_Tech]
    public static let `blizwowUdp`: Self = "_blizwow._udp"
    /// Netia NA-ER Port [Jean_Pierre_Garcia]
    public static let `naErTipTcp`: Self = "_na-er-tip._tcp"
    /// Netia NA-ER Port [Jean_Pierre_Garcia]
    public static let `naErTipUdp`: Self = "_na-er-tip._udp"
    /// Xyratex Array Manager [David_A_Lethe]
    public static let `arrayManagerTcp`: Self = "_array-manager._tcp"
    /// Xyratex Array Manager [David_A_Lethe]
    public static let `arrayManagerUdp`: Self = "_array-manager._udp"
    /// Ericsson Mobile Data Unit 
    public static let `eMduTcp`: Self = "_e-mdu._tcp"
    /// Ericsson Mobile Data Unit 
    public static let `eMduUdp`: Self = "_e-mdu._udp"
    /// Ericsson Web on Air [Marco_Casole]
    public static let `eWoaTcp`: Self = "_e-woa._tcp"
    /// Ericsson Web on Air [Marco_Casole]
    public static let `eWoaUdp`: Self = "_e-woa._udp"
    /// Fireking Audit Port [Richard_Thurman]
    public static let `fkspAuditTcp`: Self = "_fksp-audit._tcp"
    /// Fireking Audit Port [Richard_Thurman]
    public static let `fkspAuditUdp`: Self = "_fksp-audit._udp"
    /// Client Control [Lawrence_W_Dunn]
    public static let `clientCtrlTcp`: Self = "_client-ctrl._tcp"
    /// Client Control [Lawrence_W_Dunn]
    public static let `clientCtrlUdp`: Self = "_client-ctrl._udp"
    /// Service Manager 
    public static let `smapTcp`: Self = "_smap._tcp"
    /// Service Manager 
    public static let `smapUdp`: Self = "_smap._udp"
    /// Mobile Wnn [Yasunari_Yamashita]
    public static let `mWnnTcp`: Self = "_m-wnn._tcp"
    /// Mobile Wnn [Yasunari_Yamashita]
    public static let `mWnnUdp`: Self = "_m-wnn._udp"
    /// Multipuesto Msg Port [Felisa_Ares]
    public static let `multipMsgTcp`: Self = "_multip-msg._tcp"
    /// Multipuesto Msg Port [Felisa_Ares]
    public static let `multipMsgUdp`: Self = "_multip-msg._udp"
    /// Synel Data Collection Port [David_Ashkenazi]
    public static let `synelDataTcp`: Self = "_synel-data._tcp"
    /// Synel Data Collection Port [David_Ashkenazi]
    public static let `synelDataUdp`: Self = "_synel-data._udp"
    /// Password Distribution [Robert_Erl]
    public static let `pwdisTcp`: Self = "_pwdis._tcp"
    /// Password Distribution [Robert_Erl]
    public static let `pwdisUdp`: Self = "_pwdis._udp"
    /// RealSpace RMI [Barry_McDarby]
    public static let `rsRmiTcp`: Self = "_rs-rmi._tcp"
    /// RealSpace RMI [Barry_McDarby]
    public static let `rsRmiUdp`: Self = "_rs-rmi._udp"
    /// XPanel Daemon [Lilian_Rudenco]
    public static let `xpanelTcp`: Self = "_xpanel._tcp"
    /// versaTalk Server Port [Dr_Kingsley_C_Nwos]
    public static let `versatalkTcp`: Self = "_versatalk._tcp"
    /// versaTalk Server Port [Dr_Kingsley_C_Nwos]
    public static let `versatalkUdp`: Self = "_versatalk._udp"
    /// Launchbird LicenseManager [Tom_Hawkins]
    public static let `launchbirdLmTcp`: Self = "_launchbird-lm._tcp"
    /// Launchbird LicenseManager [Tom_Hawkins]
    public static let `launchbirdLmUdp`: Self = "_launchbird-lm._udp"
    /// Heartbeat Protocol [Jeroen_Massar]
    public static let `heartbeatTcp`: Self = "_heartbeat._tcp"
    /// Heartbeat Protocol [Jeroen_Massar]
    public static let `heartbeatUdp`: Self = "_heartbeat._udp"
    /// WysDM Agent [Jim_McDonald]
    public static let `wysdmaTcp`: Self = "_wysdma._tcp"
    /// WysDM Agent [Jim_McDonald]
    public static let `wysdmaUdp`: Self = "_wysdma._udp"
    /// CST - Configuration & Service Tracker [Hai_Ou_Yang]
    public static let `cstPortTcp`: Self = "_cst-port._tcp"
    /// CST - Configuration & Service Tracker [Hai_Ou_Yang]
    public static let `cstPortUdp`: Self = "_cst-port._udp"
    /// IP Control Systems Ltd. [Paul_Anderson]
    public static let `ipcsCommandTcp`: Self = "_ipcs-command._tcp"
    /// IP Control Systems Ltd. [Paul_Anderson]
    public static let `ipcsCommandUdp`: Self = "_ipcs-command._udp"
    /// SASG [Cristian_Petculescu_2]
    public static let `sasgTcp`: Self = "_sasg._tcp"
    /// SASG [Cristian_Petculescu_2]
    public static let `sasgUdp`: Self = "_sasg._udp"
    /// GWRTC Call Port [Felisa_Ares]
    public static let `gwCallPortTcp`: Self = "_gw-call-port._tcp"
    /// GWRTC Call Port [Felisa_Ares]
    public static let `gwCallPortUdp`: Self = "_gw-call-port._udp"
    /// LXPRO.COM LinkTest 
    public static let `linktestTcp`: Self = "_linktest._tcp"
    /// LXPRO.COM LinkTest 
    public static let `linktestUdp`: Self = "_linktest._udp"
    /// LXPRO.COM LinkTest SSL [Greg_Bailey]
    public static let `linktestSTcp`: Self = "_linktest-s._tcp"
    /// LXPRO.COM LinkTest SSL [Greg_Bailey]
    public static let `linktestSUdp`: Self = "_linktest-s._udp"
    /// webData [Michael_Whiteley]
    public static let `webdataTcp`: Self = "_webdata._tcp"
    /// webData [Michael_Whiteley]
    public static let `webdataUdp`: Self = "_webdata._udp"
    /// CimTrak [Robert_E_Johnson_II]
    public static let `cimtrakTcp`: Self = "_cimtrak._tcp"
    /// CimTrak [Robert_E_Johnson_II]
    public static let `cimtrakUdp`: Self = "_cimtrak._udp"
    /// CBOS/IP ncapsalation port [Thomas_Dannemiller]
    public static let `cbosIpPortTcp`: Self = "_cbos-ip-port._tcp"
    /// CBOS/IP ncapsalation port [Thomas_Dannemiller]
    public static let `cbosIpPortUdp`: Self = "_cbos-ip-port._udp"
    /// CommLinx GPRS Cube [Peter_Johnson]
    public static let `gprsCubeTcp`: Self = "_gprs-cube._tcp"
    /// CommLinx GPRS Cube [Peter_Johnson]
    public static let `gprsCubeUdp`: Self = "_gprs-cube._udp"
    /// Vigil-IP RemoteAgent [Bryan_Alvord]
    public static let `vipremoteagentTcp`: Self = "_vipremoteagent._tcp"
    /// Vigil-IP RemoteAgent [Bryan_Alvord]
    public static let `vipremoteagentUdp`: Self = "_vipremoteagent._udp"
    /// NattyServer Port [Akira_Saito]
    public static let `nattyserverTcp`: Self = "_nattyserver._tcp"
    /// NattyServer Port [Akira_Saito]
    public static let `nattyserverUdp`: Self = "_nattyserver._udp"
    /// TimesTen Broker Port [David_Aspinwall]
    public static let `timestenbrokerTcp`: Self = "_timestenbroker._tcp"
    /// TimesTen Broker Port [David_Aspinwall]
    public static let `timestenbrokerUdp`: Self = "_timestenbroker._udp"
    /// SAS Remote Help Server [Gary_T_Ciampa]
    public static let `sasRemoteHlpTcp`: Self = "_sas-remote-hlp._tcp"
    /// SAS Remote Help Server [Gary_T_Ciampa]
    public static let `sasRemoteHlpUdp`: Self = "_sas-remote-hlp._udp"
    /// Canon CAPT Port [Takashi_Okazawa]
    public static let `canonCaptTcp`: Self = "_canon-capt._tcp"
    /// Canon CAPT Port [Takashi_Okazawa]
    public static let `canonCaptUdp`: Self = "_canon-capt._udp"
    /// GRF Server Port [Robert_Banfill]
    public static let `grfPortTcp`: Self = "_grf-port._tcp"
    /// GRF Server Port [Robert_Banfill]
    public static let `grfPortUdp`: Self = "_grf-port._udp"
    /// apw RMI registry [Dan_Davis]
    public static let `apwRegistryTcp`: Self = "_apw-registry._tcp"
    /// apw RMI registry [Dan_Davis]
    public static let `apwRegistryUdp`: Self = "_apw-registry._udp"
    /// Exapt License Manager [Christoph_Kukulies]
    public static let `exaptLmgrTcp`: Self = "_exapt-lmgr._tcp"
    /// Exapt License Manager [Christoph_Kukulies]
    public static let `exaptLmgrUdp`: Self = "_exapt-lmgr._udp"
    /// adTempus Client [Bill_Wingate]
    public static let `adtempusclientTcp`: Self = "_adtempusclient._tcp"
    /// adTEmpus Client [Bill_Wingate]
    public static let `adtempusclientUdp`: Self = "_adtempusclient._udp"
    /// gsakmp port 
    public static let `gsakmpTcp`: Self = "_gsakmp._tcp"
    /// gsakmp port 
    public static let `gsakmpUdp`: Self = "_gsakmp._udp"
    /// GBS SnapMail Protocol [Eric_Harris_Braun]
    public static let `gbsSmpTcp`: Self = "_gbs-smp._tcp"
    /// GBS SnapMail Protocol [Eric_Harris_Braun]
    public static let `gbsSmpUdp`: Self = "_gbs-smp._udp"
    /// XO Wave Control Port [Bjorn_Dittmer_Roche]
    public static let `xoWaveTcp`: Self = "_xo-wave._tcp"
    /// XO Wave Control Port [Bjorn_Dittmer_Roche]
    public static let `xoWaveUdp`: Self = "_xo-wave._udp"
    /// MNI Protected Routing [Tim_Behne]
    public static let `mniProtRoutTcp`: Self = "_mni-prot-rout._tcp"
    /// MNI Protected Routing [Tim_Behne]
    public static let `mniProtRoutUdp`: Self = "_mni-prot-rout._udp"
    /// Remote Traceroute [A_Blake_Cooper]
    public static let `rtracerouteTcp`: Self = "_rtraceroute._tcp"
    /// Remote Traceroute [A_Blake_Cooper]
    public static let `rtracerouteUdp`: Self = "_rtraceroute._udp"
    /// SSL e-watch sitewatch server [e-Watch_Corporation]
    public static let `sitewatchSTcp`: Self = "_sitewatch-s._tcp"
    /// ListMGR Port [Takashi_Kubota]
    public static let `listmgrPortTcp`: Self = "_listmgr-port._tcp"
    /// ListMGR Port [Takashi_Kubota]
    public static let `listmgrPortUdp`: Self = "_listmgr-port._udp"
    /// rblcheckd server daemon [Sabri_Berisha]
    public static let `rblcheckdTcp`: Self = "_rblcheckd._tcp"
    /// rblcheckd server daemon [Sabri_Berisha]
    public static let `rblcheckdUdp`: Self = "_rblcheckd._udp"
    /// HAIPE Network Keying [Mike_Irani_2]
    public static let `haipeOtnkTcp`: Self = "_haipe-otnk._tcp"
    /// HAIPE Network Keying [Mike_Irani_2]
    public static let `haipeOtnkUdp`: Self = "_haipe-otnk._udp"
    /// Cinderella Collaboration [Ulrich_Kortenkamp]
    public static let `cindycollabTcp`: Self = "_cindycollab._tcp"
    /// Cinderella Collaboration [Ulrich_Kortenkamp]
    public static let `cindycollabUdp`: Self = "_cindycollab._udp"
    /// RTP Paging Port [Patrick_Ferriter]
    public static let `pagingPortTcp`: Self = "_paging-port._tcp"
    /// RTP Paging Port [Patrick_Ferriter]
    public static let `pagingPortUdp`: Self = "_paging-port._udp"
    /// Chantry Tunnel Protocol [Inderpreet_Singh]
    public static let `ctpTcp`: Self = "_ctp._tcp"
    /// Chantry Tunnel Protocol [Inderpreet_Singh]
    public static let `ctpUdp`: Self = "_ctp._udp"
    /// ctdhercules [Carl_Banzhof]
    public static let `ctdherculesTcp`: Self = "_ctdhercules._tcp"
    /// ctdhercules [Carl_Banzhof]
    public static let `ctdherculesUdp`: Self = "_ctdhercules._udp"
    /// ZICOM [Sabu_Das]
    public static let `zicomTcp`: Self = "_zicom._tcp"
    /// ZICOM [Sabu_Das]
    public static let `zicomUdp`: Self = "_zicom._udp"
    /// ISPM Manager Port [Eric_Anderson]
    public static let `ispmmgrTcp`: Self = "_ispmmgr._tcp"
    /// ISPM Manager Port [Eric_Anderson]
    public static let `ispmmgrUdp`: Self = "_ispmmgr._udp"
    /// Device Provisioning Port [Rob_Lehew]
    public static let `dvcprovPortTcp`: Self = "_dvcprov-port._tcp"
    /// Device Provisioning Port [Rob_Lehew]
    public static let `dvcprovPortUdp`: Self = "_dvcprov-port._udp"
    /// Jibe EdgeBurst [Chap_Tippin]
    public static let `jibeEbTcp`: Self = "_jibe-eb._tcp"
    /// Jibe EdgeBurst [Chap_Tippin]
    public static let `jibeEbUdp`: Self = "_jibe-eb._udp"
    /// Cutler-Hammer IT Port [Thomas_Ruchti]
    public static let `cHItPortTcp`: Self = "_c-h-it-port._tcp"
    /// Cutler-Hammer IT Port [Thomas_Ruchti]
    public static let `cHItPortUdp`: Self = "_c-h-it-port._udp"
    /// Cognima Replication [Ralph_Greenwell]
    public static let `cognimaTcp`: Self = "_cognima._tcp"
    /// Cognima Replication [Ralph_Greenwell]
    public static let `cognimaUdp`: Self = "_cognima._udp"
    /// Nuzzler Network Protocol [Andreas_Schwarz_2]
    public static let `nnpTcp`: Self = "_nnp._tcp"
    /// Nuzzler Network Protocol [Andreas_Schwarz_2]
    public static let `nnpUdp`: Self = "_nnp._udp"
    /// ABCvoice server port [Carlos_Gonzalez_Roma]
    public static let `abcvoicePortTcp`: Self = "_abcvoice-port._tcp"
    /// ABCvoice server port [Carlos_Gonzalez_Roma]
    public static let `abcvoicePortUdp`: Self = "_abcvoice-port._udp"
    /// Secure ISO TP0 port [Herbert_Falk]
    public static let `isoTp0sTcp`: Self = "_iso-tp0s._tcp"
    /// Secure ISO TP0 port [Herbert_Falk]
    public static let `isoTp0sUdp`: Self = "_iso-tp0s._udp"
    /// Impact Mgr./PEM Gateway [Walter_G_Giroir]
    public static let `bimPemTcp`: Self = "_bim-pem._tcp"
    /// Impact Mgr./PEM Gateway [Walter_G_Giroir]
    public static let `bimPemUdp`: Self = "_bim-pem._udp"
    /// BFD Control Protocol 
    public static let `bfdControlTcp`: Self = "_bfd-control._tcp"
    /// BFD Control Protocol 
    public static let `bfdControlUdp`: Self = "_bfd-control._udp"
    /// BFD Echo Protocol 
    public static let `bfdEchoTcp`: Self = "_bfd-echo._tcp"
    /// BFD Echo Protocol 
    public static let `bfdEchoUdp`: Self = "_bfd-echo._udp"
    /// VSW Upstrigger port [Mark_Tim_Junghanns]
    public static let `upstriggervswTcp`: Self = "_upstriggervsw._tcp"
    /// VSW Upstrigger port [Mark_Tim_Junghanns]
    public static let `upstriggervswUdp`: Self = "_upstriggervsw._udp"
    /// Fintrx [Peter_G_L_Potgiese]
    public static let `fintrxTcp`: Self = "_fintrx._tcp"
    /// Fintrx [Peter_G_L_Potgiese]
    public static let `fintrxUdp`: Self = "_fintrx._udp"
    /// SPACEWAY Routing port [Vaibhav_Kumar]
    public static let `isrpPortTcp`: Self = "_isrp-port._tcp"
    /// SPACEWAY Routing port [Vaibhav_Kumar]
    public static let `isrpPortUdp`: Self = "_isrp-port._udp"
    /// RemoteDeploy Administration Port [July 2003] [Detlef_Rothe]
    public static let `remotedeployTcp`: Self = "_remotedeploy._tcp"
    /// RemoteDeploy Administration Port [July 2003] [Detlef_Rothe]
    public static let `remotedeployUdp`: Self = "_remotedeploy._udp"
    /// QuickBooks RDS [Almira]
    public static let `quickbooksrdsTcp`: Self = "_quickbooksrds._tcp"
    /// QuickBooks RDS [Almira]
    public static let `quickbooksrdsUdp`: Self = "_quickbooksrds._udp"
    /// TV NetworkVideo Data port [Kevin_Brunner]
    public static let `tvnetworkvideoTcp`: Self = "_tvnetworkvideo._tcp"
    /// TV NetworkVideo Data port [Kevin_Brunner]
    public static let `tvnetworkvideoUdp`: Self = "_tvnetworkvideo._udp"
    /// e-Watch Corporation SiteWatch [John_M_Baird]
    public static let `sitewatchTcp`: Self = "_sitewatch._tcp"
    /// e-Watch Corporation SiteWatch [John_M_Baird]
    public static let `sitewatchUdp`: Self = "_sitewatch._udp"
    /// DataCore Software [Andre_Cato]
    public static let `dcsoftwareTcp`: Self = "_dcsoftware._tcp"
    /// DataCore Software [Andre_Cato]
    public static let `dcsoftwareUdp`: Self = "_dcsoftware._udp"
    /// JAUS Robots [Steven_B_Cliff]
    public static let `jausTcp`: Self = "_jaus._tcp"
    /// JAUS Robots [Steven_B_Cliff]
    public static let `jausUdp`: Self = "_jaus._udp"
    /// myBLAST Mekentosj port [Alexander_Griekspoor]
    public static let `myblastTcp`: Self = "_myblast._tcp"
    /// myBLAST Mekentosj port [Alexander_Griekspoor]
    public static let `myblastUdp`: Self = "_myblast._udp"
    /// Spaceway Dialer [Patrick_Fisher]
    public static let `spwDialerTcp`: Self = "_spw-dialer._tcp"
    /// Spaceway Dialer [Patrick_Fisher]
    public static let `spwDialerUdp`: Self = "_spw-dialer._udp"
    /// idps [Jean_Francois_Rabass]
    public static let `idpsTcp`: Self = "_idps._tcp"
    /// idps [Jean_Francois_Rabass]
    public static let `idpsUdp`: Self = "_idps._udp"
    /// Minilock [Daniel_Julio_Reyes]
    public static let `minilockTcp`: Self = "_minilock._tcp"
    /// Minilock [Daniel_Julio_Reyes]
    public static let `minilockUdp`: Self = "_minilock._udp"
    /// RADIUS Dynamic Authorization 
    public static let `radiusDynauthTcp`: Self = "_radius-dynauth._tcp"
    /// RADIUS Dynamic Authorization 
    public static let `radiusDynauthUdp`: Self = "_radius-dynauth._udp"
    /// Print Services Interface [Harry_Lewis]
    public static let `pwgpsiTcp`: Self = "_pwgpsi._tcp"
    /// Print Services Interface [Harry_Lewis]
    public static let `pwgpsiUdp`: Self = "_pwgpsi._udp"
    /// ibm manager service [Tim_Hahn]
    public static let `ibmMgrTcp`: Self = "_ibm-mgr._tcp"
    /// ibm manager service [Tim_Hahn]
    public static let `ibmMgrUdp`: Self = "_ibm-mgr._udp"
    /// VHD [Chris_Duncombe]
    public static let `vhdTcp`: Self = "_vhd._tcp"
    /// VHD [Chris_Duncombe]
    public static let `vhdUdp`: Self = "_vhd._udp"
    /// SoniqSync [Ryan_Melville]
    public static let `soniqsyncTcp`: Self = "_soniqsync._tcp"
    /// SoniqSync [Ryan_Melville]
    public static let `soniqsyncUdp`: Self = "_soniqsync._udp"
    /// Harman IQNet Port [Bruce_Vander_Werf]
    public static let `iqnetPortTcp`: Self = "_iqnet-port._tcp"
    /// Harman IQNet Port [Bruce_Vander_Werf]
    public static let `iqnetPortUdp`: Self = "_iqnet-port._udp"
    /// ThorGuard Server Port [Joel_E_Steiger]
    public static let `tcpdataserverTcp`: Self = "_tcpdataserver._tcp"
    /// ThorGuard Server Port [Joel_E_Steiger]
    public static let `tcpdataserverUdp`: Self = "_tcpdataserver._udp"
    /// Remote System Manager [Thomas_Fiege]
    public static let `wsmlbTcp`: Self = "_wsmlb._tcp"
    /// Remote System Manager [Thomas_Fiege]
    public static let `wsmlbUdp`: Self = "_wsmlb._udp"
    /// SpuGNA Communication Port [Samuele_Sequi]
    public static let `spugnaTcp`: Self = "_spugna._tcp"
    /// SpuGNA Communication Port [Samuele_Sequi]
    public static let `spugnaUdp`: Self = "_spugna._udp"
    /// Sun App Svr-IIOPClntAuth [Abhijit_Kumar]
    public static let `sunAsIiopsCaTcp`: Self = "_sun-as-iiops-ca._tcp"
    /// Sun App Svr-IIOPClntAuth [Abhijit_Kumar]
    public static let `sunAsIiopsCaUdp`: Self = "_sun-as-iiops-ca._udp"
    /// Java Desktop System Configuration Agent [Geoff_Higgins]
    public static let `apocdTcp`: Self = "_apocd._tcp"
    /// Java Desktop System Configuration Agent [Geoff_Higgins]
    public static let `apocdUdp`: Self = "_apocd._udp"
    /// WLAN AS server [Bianling_Zhang]
    public static let `wlanauthTcp`: Self = "_wlanauth._tcp"
    /// WLAN AS server [Bianling_Zhang]
    public static let `wlanauthUdp`: Self = "_wlanauth._udp"
    /// AMP [Northon_Rodrigues]
    public static let `ampTcp`: Self = "_amp._tcp"
    /// AMP [Northon_Rodrigues]
    public static let `ampUdp`: Self = "_amp._udp"
    /// netO WOL Server [Martin_Bestmann_2]
    public static let `netoWolServerTcp`: Self = "_neto-wol-server._tcp"
    /// netO WOL Server [Martin_Bestmann_2]
    public static let `netoWolServerUdp`: Self = "_neto-wol-server._udp"
    /// Rhapsody Interface Protocol [Paul_Zander]
    public static let `rapIpTcp`: Self = "_rap-ip._tcp"
    /// Rhapsody Interface Protocol [Paul_Zander]
    public static let `rapIpUdp`: Self = "_rap-ip._udp"
    /// netO DCS [Martin_Bestmann_2]
    public static let `netoDcsTcp`: Self = "_neto-dcs._tcp"
    /// netO DCS [Martin_Bestmann_2]
    public static let `netoDcsUdp`: Self = "_neto-dcs._udp"
    /// LANsurveyor XML [Michael_Swan]
    public static let `lansurveyorxmlTcp`: Self = "_lansurveyorxml._tcp"
    /// LANsurveyor XML [Michael_Swan]
    public static let `lansurveyorxmlUdp`: Self = "_lansurveyorxml._udp"
    /// Sun Local Patch Server [Barry_Greenberg]
    public static let `sunlpsHttpTcp`: Self = "_sunlps-http._tcp"
    /// Sun Local Patch Server [Barry_Greenberg]
    public static let `sunlpsHttpUdp`: Self = "_sunlps-http._udp"
    /// Yosemite Tech Tapeware [Luke_Dion]
    public static let `tapewareTcp`: Self = "_tapeware._tcp"
    /// Yosemite Tech Tapeware [Luke_Dion]
    public static let `tapewareUdp`: Self = "_tapeware._udp"
    /// Crinis Heartbeat [Eric_McMurry]
    public static let `crinisHbTcp`: Self = "_crinis-hb._tcp"
    /// Crinis Heartbeat [Eric_McMurry]
    public static let `crinisHbUdp`: Self = "_crinis-hb._udp"
    /// EPL Sequ Layer Protocol [Hans_Weibel]
    public static let `eplSlpTcp`: Self = "_epl-slp._tcp"
    /// EPL Sequ Layer Protocol [Hans_Weibel]
    public static let `eplSlpUdp`: Self = "_epl-slp._udp"
    /// Siemens AuD SCP [Johann_Arnold]
    public static let `scpTcp`: Self = "_scp._tcp"
    /// Siemens AuD SCP [Johann_Arnold]
    public static let `scpUdp`: Self = "_scp._udp"
    /// ATSC PMCP Standard [Graham_Jones]
    public static let `pmcpTcp`: Self = "_pmcp._tcp"
    /// ATSC PMCP Standard [Graham_Jones]
    public static let `pmcpUdp`: Self = "_pmcp._udp"
    /// Compute Pool Discovery 
    public static let `acpDiscoveryTcp`: Self = "_acp-discovery._tcp"
    /// Compute Pool Discovery 
    public static let `acpDiscoveryUdp`: Self = "_acp-discovery._udp"
    /// Compute Pool Conduit 
    public static let `acpConduitTcp`: Self = "_acp-conduit._tcp"
    /// Compute Pool Conduit 
    public static let `acpConduitUdp`: Self = "_acp-conduit._udp"
    /// Compute Pool Policy [Andy_Belk_2]
    public static let `acpPolicyTcp`: Self = "_acp-policy._tcp"
    /// Compute Pool Policy [Andy_Belk_2]
    public static let `acpPolicyUdp`: Self = "_acp-policy._udp"
    /// Antera FlowFusion Process Simulation [Armin_Liebchen]
    public static let `ffserverTcp`: Self = "_ffserver._tcp"
    /// Antera FlowFusion Process Simulation [Armin_Liebchen]
    public static let `ffserverUdp`: Self = "_ffserver._udp"
    /// WarMUX game server [Christophe_Gisquet]
    public static let `warmuxTcp`: Self = "_warmux._tcp"
    /// WarMUX game server [Christophe_Gisquet]
    public static let `warmuxUdp`: Self = "_warmux._udp"
    /// Netadmin Systems MPI service [G_Runfeldt]
    public static let `netmpiTcp`: Self = "_netmpi._tcp"
    /// Netadmin Systems MPI service [G_Runfeldt]
    public static let `netmpiUdp`: Self = "_netmpi._udp"
    /// Netadmin Systems Event Handler 
    public static let `netehTcp`: Self = "_neteh._tcp"
    /// Netadmin Systems Event Handler 
    public static let `netehUdp`: Self = "_neteh._udp"
    /// Netadmin Systems Event Handler External [Jonas_Krogell]
    public static let `netehExtTcp`: Self = "_neteh-ext._tcp"
    /// Netadmin Systems Event Handler External [Jonas_Krogell]
    public static let `netehExtUdp`: Self = "_neteh-ext._udp"
    /// Cerner System Management Agent [Mike_Craft]
    public static let `cernsysmgmtagtTcp`: Self = "_cernsysmgmtagt._tcp"
    /// Cerner System Management Agent [Mike_Craft]
    public static let `cernsysmgmtagtUdp`: Self = "_cernsysmgmtagt._udp"
    /// Docsvault Application Service [Ketul_Patel]
    public static let `dvappsTcp`: Self = "_dvapps._tcp"
    /// Docsvault Application Service [Ketul_Patel]
    public static let `dvappsUdp`: Self = "_dvapps._udp"
    /// xxNETserver [XXT_LLC]
    public static let `xxnetserverTcp`: Self = "_xxnetserver._tcp"
    /// xxNETserver [XXT_LLC]
    public static let `xxnetserverUdp`: Self = "_xxnetserver._udp"
    /// AIPN LS Authentication [Qiang_Zhang]
    public static let `aipnAuthTcp`: Self = "_aipn-auth._tcp"
    /// AIPN LS Authentication [Qiang_Zhang]
    public static let `aipnAuthUdp`: Self = "_aipn-auth._udp"
    /// Spectar Data Stream Service 
    public static let `spectardataTcp`: Self = "_spectardata._tcp"
    /// Spectar Data Stream Service 
    public static let `spectardataUdp`: Self = "_spectardata._udp"
    /// Spectar Database Rights Service [Jan_Rutger_Voorhorst]
    public static let `spectardbTcp`: Self = "_spectardb._tcp"
    /// Spectar Database Rights Service [Jan_Rutger_Voorhorst]
    public static let `spectardbUdp`: Self = "_spectardb._udp"
    /// MARKEM NEXTGEN DCP 
    public static let `markemDcpTcp`: Self = "_markem-dcp._tcp"
    /// MARKEM NEXTGEN DCP 
    public static let `markemDcpUdp`: Self = "_markem-dcp._udp"
    /// MARKEM Auto-Discovery [Vadym_Kargin]
    public static let `mkmDiscoveryTcp`: Self = "_mkm-discovery._tcp"
    /// MARKEM Auto-Discovery [Vadym_Kargin]
    public static let `mkmDiscoveryUdp`: Self = "_mkm-discovery._udp"
    /// Scito Object Server [Arno_Klaassen]
    public static let `sosTcp`: Self = "_sos._tcp"
    /// Scito Object Server [Arno_Klaassen]
    public static let `sosUdp`: Self = "_sos._udp"
    /// AMX Resource Management Suite [Ron_Barber]
    public static let `amxRmsTcp`: Self = "_amx-rms._tcp"
    /// AMX Resource Management Suite [Ron_Barber]
    public static let `amxRmsUdp`: Self = "_amx-rms._udp"
    /// www.FlirtMitMir.de [Carsten_Falticska]
    public static let `flirtmitmirTcp`: Self = "_flirtmitmir._tcp"
    /// www.FlirtMitMir.de [Carsten_Falticska]
    public static let `flirtmitmirUdp`: Self = "_flirtmitmir._udp"
    /// ShipRush Database Server [Z-Firm_LLC]
    public static let `shiprushDbSvrTcp`: Self = "_shiprush-db-svr._tcp"
    /// NHCI status port [Eric_Welch_2]
    public static let `nhciTcp`: Self = "_nhci._tcp"
    /// NHCI status port [Eric_Welch_2]
    public static let `nhciUdp`: Self = "_nhci._udp"
    /// Quest Common Agent [Peter_Maher]
    public static let `questAgentTcp`: Self = "_quest-agent._tcp"
    /// Quest Common Agent [Peter_Maher]
    public static let `questAgentUdp`: Self = "_quest-agent._udp"
    /// RNM [sn_w_of_renegade_lab]
    public static let `rnmTcp`: Self = "_rnm._tcp"
    /// RNM [sn_w_of_renegade_lab]
    public static let `rnmUdp`: Self = "_rnm._udp"
    /// V-ONE Single Port Proxy [Daniel_Becker_3]
    public static let `vOneSppTcp`: Self = "_v-one-spp._tcp"
    /// V-ONE Single Port Proxy [Daniel_Becker_3]
    public static let `vOneSppUdp`: Self = "_v-one-spp._udp"
    /// Astare Network PCP [Tony_Gulino]
    public static let `anPcpTcp`: Self = "_an-pcp._tcp"
    /// Astare Network PCP [Tony_Gulino]
    public static let `anPcpUdp`: Self = "_an-pcp._udp"
    /// MS Firewall Control [Oren_Trutner]
    public static let `msfwControlTcp`: Self = "_msfw-control._tcp"
    /// MS Firewall Control [Oren_Trutner]
    public static let `msfwControlUdp`: Self = "_msfw-control._udp"
    /// IT Environmental Monitor [Keith_Wright]
    public static let `itemTcp`: Self = "_item._tcp"
    /// IT Environmental Monitor [Keith_Wright]
    public static let `itemUdp`: Self = "_item._udp"
    /// SPACEWAY DNS Preload [Daniel_Friedman]
    public static let `spwDnspreloadTcp`: Self = "_spw-dnspreload._tcp"
    /// SPACEWAY DNS Preload [Daniel_Friedman]
    public static let `spwDnspreloadUdp`: Self = "_spw-dnspreload._udp"
    /// QTMS Bootstrap Protocol [Phil_Willis]
    public static let `qtmsBootstrapTcp`: Self = "_qtms-bootstrap._tcp"
    /// QTMS Bootstrap Protocol [Phil_Willis]
    public static let `qtmsBootstrapUdp`: Self = "_qtms-bootstrap._udp"
    /// SpectraTalk Port [Madhav_Karhade]
    public static let `spectraportTcp`: Self = "_spectraport._tcp"
    /// SpectraTalk Port [Madhav_Karhade]
    public static let `spectraportUdp`: Self = "_spectraport._udp"
    /// SSE App Configuration [Tim_Wilson]
    public static let `sseAppConfigTcp`: Self = "_sse-app-config._tcp"
    /// SSE App Configuration [Tim_Wilson]
    public static let `sseAppConfigUdp`: Self = "_sse-app-config._udp"
    /// SONY scanning protocol [Takashi_Aihara]
    public static let `sscanTcp`: Self = "_sscan._tcp"
    /// SONY scanning protocol [Takashi_Aihara]
    public static let `sscanUdp`: Self = "_sscan._udp"
    /// Stryker Comm Port [Andrew_Schultz]
    public static let `strykerComTcp`: Self = "_stryker-com._tcp"
    /// Stryker Comm Port [Andrew_Schultz]
    public static let `strykerComUdp`: Self = "_stryker-com._udp"
    /// OpenTRAC [Scott_Miller]
    public static let `opentracTcp`: Self = "_opentrac._tcp"
    /// OpenTRAC [Scott_Miller]
    public static let `opentracUdp`: Self = "_opentrac._udp"
    /// INFORMER [Filippo_Fadda]
    public static let `informerTcp`: Self = "_informer._tcp"
    /// INFORMER [Filippo_Fadda]
    public static let `informerUdp`: Self = "_informer._udp"
    /// Trap Port [Norm_Freedman]
    public static let `trapPortTcp`: Self = "_trap-port._tcp"
    /// Trap Port [Norm_Freedman]
    public static let `trapPortUdp`: Self = "_trap-port._udp"
    /// Trap Port MOM [Norm_Freedman]
    public static let `trapPortMomTcp`: Self = "_trap-port-mom._tcp"
    /// Trap Port MOM [Norm_Freedman]
    public static let `trapPortMomUdp`: Self = "_trap-port-mom._udp"
    /// Navini Port [Chris_Sanders]
    public static let `navPortTcp`: Self = "_nav-port._tcp"
    /// Navini Port [Chris_Sanders]
    public static let `navPortUdp`: Self = "_nav-port._udp"
    /// Server/Application State Protocol (SASP) [Alan_Bivens]
    public static let `saspTcp`: Self = "_sasp._tcp"
    /// Server/Application State Protocol (SASP) [Alan_Bivens]
    public static let `saspUdp`: Self = "_sasp._udp"
    /// winShadow Host Discovery [Shu_Wei_Tan]
    public static let `winshadowHdTcp`: Self = "_winshadow-hd._tcp"
    /// winShadow Host Discovery [Shu_Wei_Tan]
    public static let `winshadowHdUdp`: Self = "_winshadow-hd._udp"
    /// GIGA-POCKET [Yoshikazu_Watanabe]
    public static let `gigaPocketTcp`: Self = "_giga-pocket._tcp"
    /// GIGA-POCKET [Yoshikazu_Watanabe]
    public static let `gigaPocketUdp`: Self = "_giga-pocket._udp"
    /// asap tcp port 
    public static let `asapTcpTcp`: Self = "_asap-tcp._tcp"
    /// asap udp port 
    public static let `asapUdpUdp`: Self = "_asap-udp._udp"
    /// asap sctp 
    public static let `asapSctpSctp`: Self = "_asap-sctp._sctp"
    /// asap/tls tcp port 
    public static let `asapTcpTlsTcp`: Self = "_asap-tcp-tls._tcp"
    /// asap-sctp/tls 
    public static let `asapSctpTlsSctp`: Self = "_asap-sctp-tls._sctp"
    /// xpl automation protocol [Ian_Lowe]
    public static let `xplTcp`: Self = "_xpl._tcp"
    /// xpl automation protocol [Ian_Lowe]
    public static let `xplUdp`: Self = "_xpl._udp"
    /// Sun SDViz DZDAEMON Port [Kevin_Rushforth]
    public static let `dzdaemonTcp`: Self = "_dzdaemon._tcp"
    /// Sun SDViz DZDAEMON Port [Kevin_Rushforth]
    public static let `dzdaemonUdp`: Self = "_dzdaemon._udp"
    /// Sun SDViz DZOGLSERVER Port [Kevin_Rushforth]
    public static let `dzoglserverTcp`: Self = "_dzoglserver._tcp"
    /// Sun SDViz DZOGLSERVER Port [Kevin_Rushforth]
    public static let `dzoglserverUdp`: Self = "_dzoglserver._udp"
    /// DIAMETER 
    public static let `diameterTcp`: Self = "_diameter._tcp"
    /// DIAMETER 
    public static let `diameterSctp`: Self = "_diameter._sctp"
    /// hp OVSAM MgmtServer Disco [Mike_Pontillo]
    public static let `ovsamMgmtTcp`: Self = "_ovsam-mgmt._tcp"
    /// hp OVSAM MgmtServer Disco [Mike_Pontillo]
    public static let `ovsamMgmtUdp`: Self = "_ovsam-mgmt._udp"
    /// hp OVSAM HostAgent Disco [Mike_Pontillo]
    public static let `ovsamDAgentTcp`: Self = "_ovsam-d-agent._tcp"
    /// hp OVSAM HostAgent Disco [Mike_Pontillo]
    public static let `ovsamDAgentUdp`: Self = "_ovsam-d-agent._udp"
    /// Avocent DS Authorization [Eduardo_Fernandez]
    public static let `avocentAdsapTcp`: Self = "_avocent-adsap._tcp"
    /// Avocent DS Authorization [Eduardo_Fernandez]
    public static let `avocentAdsapUdp`: Self = "_avocent-adsap._udp"
    /// OEM Agent [Narain_Jagathesan]
    public static let `oemAgentTcp`: Self = "_oem-agent._tcp"
    /// OEM Agent [Narain_Jagathesan]
    public static let `oemAgentUdp`: Self = "_oem-agent._udp"
    /// fagordnc [Luis_Zugasti]
    public static let `fagordncTcp`: Self = "_fagordnc._tcp"
    /// fagordnc [Luis_Zugasti]
    public static let `fagordncUdp`: Self = "_fagordnc._udp"
    /// SixXS Configuration [Jeroen_Massar]
    public static let `sixxsconfigTcp`: Self = "_sixxsconfig._tcp"
    /// SixXS Configuration [Jeroen_Massar]
    public static let `sixxsconfigUdp`: Self = "_sixxsconfig._udp"
    /// PNBSCADA [Philip_N_Bergstress]
    public static let `pnbscadaTcp`: Self = "_pnbscada._tcp"
    /// PNBSCADA [Philip_N_Bergstress]
    public static let `pnbscadaUdp`: Self = "_pnbscada._udp"
    /// DirectoryLockdown Agent IANA assigned this well-formed service name as a replacement for "dl_agent". [Jason_Lockett][Melanie_Kacerek]
    public static let `dlAgentTcp`: Self = "_dl-agent._tcp"
    /// DirectoryLockdown Agent [Jason_Lockett][Melanie_Kacerek]
    public static let `dl_agentTcp`: Self = "_dl_agent._tcp"
    /// DirectoryLockdown Agent IANA assigned this well-formed service name as a replacement for "dl_agent". [Jason_Lockett][Melanie_Kacerek]
    public static let `dlAgentUdp`: Self = "_dl-agent._udp"
    /// DirectoryLockdown Agent [Jason_Lockett][Melanie_Kacerek]
    public static let `dl_agentUdp`: Self = "_dl_agent._udp"
    /// XMPCR Interface Port [Christopher_Carlson]
    public static let `xmpcrInterfaceTcp`: Self = "_xmpcr-interface._tcp"
    /// XMPCR Interface Port [Christopher_Carlson]
    public static let `xmpcrInterfaceUdp`: Self = "_xmpcr-interface._udp"
    /// FotoG CAD interface [Jason_Szabo]
    public static let `fotogcadTcp`: Self = "_fotogcad._tcp"
    /// FotoG CAD interface [Jason_Szabo]
    public static let `fotogcadUdp`: Self = "_fotogcad._udp"
    /// appss license manager [Peter_Krueger]
    public static let `appssLmTcp`: Self = "_appss-lm._tcp"
    /// appss license manager [Peter_Krueger]
    public static let `appssLmUdp`: Self = "_appss-lm._udp"
    /// IGRS [Huang_Jingnan]
    public static let `igrsTcp`: Self = "_igrs._tcp"
    /// IGRS [Huang_Jingnan]
    public static let `igrsUdp`: Self = "_igrs._udp"
    /// Data Acquisition and Control [Chatziandreoglou_Chr]
    public static let `idacTcp`: Self = "_idac._tcp"
    /// Data Acquisition and Control [Chatziandreoglou_Chr]
    public static let `idacUdp`: Self = "_idac._udp"
    /// DTS Service Port [Sergei_Ivanov]
    public static let `msdts1Tcp`: Self = "_msdts1._tcp"
    /// DTS Service Port [Sergei_Ivanov]
    public static let `msdts1Udp`: Self = "_msdts1._udp"
    /// VR Peripheral Network [Sensics]
    public static let `vrpnTcp`: Self = "_vrpn._tcp"
    /// VR Peripheral Network [Sensics]
    public static let `vrpnUdp`: Self = "_vrpn._udp"
    /// SofTrack Metering [John_T_McCann]
    public static let `softrackMeterTcp`: Self = "_softrack-meter._tcp"
    /// SofTrack Metering [John_T_McCann]
    public static let `softrackMeterUdp`: Self = "_softrack-meter._udp"
    /// TopFlow SSL [Ken_Nelson]
    public static let `topflowSslTcp`: Self = "_topflow-ssl._tcp"
    /// TopFlow SSL [Ken_Nelson]
    public static let `topflowSslUdp`: Self = "_topflow-ssl._udp"
    /// NEI management port [Kevin_Murphy_2]
    public static let `neiManagementTcp`: Self = "_nei-management._tcp"
    /// NEI management port [Kevin_Murphy_2]
    public static let `neiManagementUdp`: Self = "_nei-management._udp"
    /// Ciphire Data Transport [Lars_Eilebrecht]
    public static let `ciphireDataTcp`: Self = "_ciphire-data._tcp"
    /// Ciphire Data Transport [Lars_Eilebrecht]
    public static let `ciphireDataUdp`: Self = "_ciphire-data._udp"
    /// Ciphire Services [Lars_Eilebrecht]
    public static let `ciphireServTcp`: Self = "_ciphire-serv._tcp"
    /// Ciphire Services [Lars_Eilebrecht]
    public static let `ciphireServUdp`: Self = "_ciphire-serv._udp"
    /// D and V Tester Control Port [Voiko_Loukanov]
    public static let `dandvTesterTcp`: Self = "_dandv-tester._tcp"
    /// D and V Tester Control Port [Voiko_Loukanov]
    public static let `dandvTesterUdp`: Self = "_dandv-tester._udp"
    /// Niche Data Server Connect [Roland_Schneider]
    public static let `ndsconnectTcp`: Self = "_ndsconnect._tcp"
    /// Niche Data Server Connect [Roland_Schneider]
    public static let `ndsconnectUdp`: Self = "_ndsconnect._udp"
    /// Oracle RTC-PM port [PV_Shivkumar]
    public static let `rtcPmPortTcp`: Self = "_rtc-pm-port._tcp"
    /// Oracle RTC-PM port [PV_Shivkumar]
    public static let `rtcPmPortUdp`: Self = "_rtc-pm-port._udp"
    /// PCC-image-port [Shiro_Tamoto]
    public static let `pccImagePortTcp`: Self = "_pcc-image-port._tcp"
    /// PCC-image-port [Shiro_Tamoto]
    public static let `pccImagePortUdp`: Self = "_pcc-image-port._udp"
    /// CGI StarAPI Server [Garry_Moore]
    public static let `cgiStarapiTcp`: Self = "_cgi-starapi._tcp"
    /// CGI StarAPI Server [Garry_Moore]
    public static let `cgiStarapiUdp`: Self = "_cgi-starapi._udp"
    /// SyAM Agent Port [Michael_Daniele]
    public static let `syamAgentTcp`: Self = "_syam-agent._tcp"
    /// SyAM Agent Port [Michael_Daniele]
    public static let `syamAgentUdp`: Self = "_syam-agent._udp"
    /// SyAm SMC Service Port [Michael_Daniele]
    public static let `syamSmcTcp`: Self = "_syam-smc._tcp"
    /// SyAm SMC Service Port [Michael_Daniele]
    public static let `syamSmcUdp`: Self = "_syam-smc._udp"
    /// Simple Distributed Objects over TLS [Alexander_Philippou]
    public static let `sdoTlsTcp`: Self = "_sdo-tls._tcp"
    /// Simple Distributed Objects over TLS [Alexander_Philippou]
    public static let `sdoTlsUdp`: Self = "_sdo-tls._udp"
    /// Simple Distributed Objects over SSH [Alexander_Philippou]
    public static let `sdoSshTcp`: Self = "_sdo-ssh._tcp"
    /// Simple Distributed Objects over SSH [Alexander_Philippou]
    public static let `sdoSshUdp`: Self = "_sdo-ssh._udp"
    /// IAS, Inc. SmartEye NET Internet Protocol [Matt_Nowicki]
    public static let `senipTcp`: Self = "_senip._tcp"
    /// IAS, Inc. SmartEye NET Internet Protocol [Matt_Nowicki]
    public static let `senipUdp`: Self = "_senip._udp"
    /// ITV Port [Alex_Nicu]
    public static let `itvControlTcp`: Self = "_itv-control._tcp"
    /// ITV Port [Alex_Nicu]
    public static let `itvControlUdp`: Self = "_itv-control._udp"
    /// NIM Service Handler [Paul_B_Finley]
    public static let `nimshTcp`: Self = "_nimsh._tcp"
    /// NIM Service Handler [Paul_B_Finley]
    public static let `nimshUdp`: Self = "_nimsh._udp"
    /// NIMsh Auxiliary Port [Paul_B_Finley]
    public static let `nimauxTcp`: Self = "_nimaux._tcp"
    /// NIMsh Auxiliary Port [Paul_B_Finley]
    public static let `nimauxUdp`: Self = "_nimaux._udp"
    /// CharsetMGR [Tatsuya_Ueda]
    public static let `charsetmgrTcp`: Self = "_charsetmgr._tcp"
    /// CharsetMGR [Tatsuya_Ueda]
    public static let `charsetmgrUdp`: Self = "_charsetmgr._udp"
    /// Arnet Omnilink Port [Ronen_Shaul]
    public static let `omnilinkPortTcp`: Self = "_omnilink-port._tcp"
    /// Arnet Omnilink Port [Ronen_Shaul]
    public static let `omnilinkPortUdp`: Self = "_omnilink-port._udp"
    /// Mailbox Update (MUPDATE) protocol 
    public static let `mupdateTcp`: Self = "_mupdate._tcp"
    /// Mailbox Update (MUPDATE) protocol 
    public static let `mupdateUdp`: Self = "_mupdate._udp"
    /// TopoVista elevation data [Gregg_Townsend]
    public static let `topovistaDataTcp`: Self = "_topovista-data._tcp"
    /// TopoVista elevation data [Gregg_Townsend]
    public static let `topovistaDataUdp`: Self = "_topovista-data._udp"
    /// Imoguia Port [Emidio_Cunha]
    public static let `imoguiaPortTcp`: Self = "_imoguia-port._tcp"
    /// Imoguia Port [Emidio_Cunha]
    public static let `imoguiaPortUdp`: Self = "_imoguia-port._udp"
    /// HP Procurve NetManagement [Devon_Dawson]
    public static let `hppronetmanTcp`: Self = "_hppronetman._tcp"
    /// HP Procurve NetManagement [Devon_Dawson]
    public static let `hppronetmanUdp`: Self = "_hppronetman._udp"
    /// SurfControl CPA [Hywel_Morgan]
    public static let `surfcontrolcpaTcp`: Self = "_surfcontrolcpa._tcp"
    /// SurfControl CPA [Hywel_Morgan]
    public static let `surfcontrolcpaUdp`: Self = "_surfcontrolcpa._udp"
    /// Printer Request Port [Brett_Green]
    public static let `prnrequestTcp`: Self = "_prnrequest._tcp"
    /// Printer Request Port [Brett_Green]
    public static let `prnrequestUdp`: Self = "_prnrequest._udp"
    /// Printer Status Port [Brett_Green]
    public static let `prnstatusTcp`: Self = "_prnstatus._tcp"
    /// Printer Status Port [Brett_Green]
    public static let `prnstatusUdp`: Self = "_prnstatus._udp"
    /// Global Maintech Stars [Harry_Goldschmitt]
    public static let `gbmtStarsTcp`: Self = "_gbmt-stars._tcp"
    /// Global Maintech Stars [Harry_Goldschmitt]
    public static let `gbmtStarsUdp`: Self = "_gbmt-stars._udp"
    /// ListCREATOR Port [Tomokazu_Asai]
    public static let `listcrtPortTcp`: Self = "_listcrt-port._tcp"
    /// ListCREATOR Port [Tomokazu_Asai]
    public static let `listcrtPortUdp`: Self = "_listcrt-port._udp"
    /// ListCREATOR Port 2 [Tomokazu_Asai]
    public static let `listcrtPort2Tcp`: Self = "_listcrt-port-2._tcp"
    /// ListCREATOR Port 2 [Tomokazu_Asai]
    public static let `listcrtPort2Udp`: Self = "_listcrt-port-2._udp"
    /// Auto-Graphics Cataloging [Paul_Cope]
    public static let `agcatTcp`: Self = "_agcat._tcp"
    /// Auto-Graphics Cataloging [Paul_Cope]
    public static let `agcatUdp`: Self = "_agcat._udp"
    /// WysDM Controller [Jim_McDonald_2]
    public static let `wysdmcTcp`: Self = "_wysdmc._tcp"
    /// WysDM Controller [Jim_McDonald_2]
    public static let `wysdmcUdp`: Self = "_wysdmc._udp"
    /// AFT multiplex port [Alfred_Schmidt]
    public static let `aftmuxTcp`: Self = "_aftmux._tcp"
    /// AFT multiplex port [Alfred_Schmidt]
    public static let `aftmuxUdp`: Self = "_aftmux._udp"
    /// PacketCableMultimediaCOPS [Eric_Rosenfeld]
    public static let `pktcablemmcopsTcp`: Self = "_pktcablemmcops._tcp"
    /// PacketCableMultimediaCOPS [Eric_Rosenfeld]
    public static let `pktcablemmcopsUdp`: Self = "_pktcablemmcops._udp"
    /// HyperIP [Network_Executive_Software_Inc]
    public static let `hyperipTcp`: Self = "_hyperip._tcp"
    /// HyperIP [Network_Executive_Software_Inc]
    public static let `hyperipUdp`: Self = "_hyperip._udp"
    /// Exasoft IP Port [Alan_Malik]
    public static let `exasoftport1Tcp`: Self = "_exasoftport1._tcp"
    /// Exasoft IP Port [Alan_Malik]
    public static let `exasoftport1Udp`: Self = "_exasoftport1._udp"
    /// Herodotus Net [Adam_Gawne_Cain]
    public static let `herodotusNetTcp`: Self = "_herodotus-net._tcp"
    /// Herodotus Net [Adam_Gawne_Cain]
    public static let `herodotusNetUdp`: Self = "_herodotus-net._udp"
    /// Soronti Update Port [Carleton_Watkins]
    public static let `sorUpdateTcp`: Self = "_sor-update._tcp"
    /// Soronti Update Port [Carleton_Watkins]
    public static let `sorUpdateUdp`: Self = "_sor-update._udp"
    /// Symbian Service Broker [Ian_McDowall]
    public static let `symbSbPortTcp`: Self = "_symb-sb-port._tcp"
    /// Symbian Service Broker [Ian_McDowall]
    public static let `symbSbPortUdp`: Self = "_symb-sb-port._udp"
    /// MPL_GPRS_PORT [David_Barrass_2]
    public static let `mplGprsPortTcp`: Self = "_mpl-gprs-port._tcp"
    /// MPL_GPRS_Port [David_Barrass_2]
    public static let `mplGprsPortUdp`: Self = "_mpl-gprs-port._udp"
    /// Zoran Media Port [Gerard_Cerchio]
    public static let `zmpTcp`: Self = "_zmp._tcp"
    /// Zoran Media Port [Gerard_Cerchio]
    public static let `zmpUdp`: Self = "_zmp._udp"
    /// WINPort [Alwin_Egger]
    public static let `winportTcp`: Self = "_winport._tcp"
    /// WINPort [Alwin_Egger]
    public static let `winportUdp`: Self = "_winport._udp"
    /// ScsTsr [Ghanshyam_Patel]
    public static let `natdataserviceTcp`: Self = "_natdataservice._tcp"
    /// ScsTsr [Ghanshyam_Patel]
    public static let `natdataserviceUdp`: Self = "_natdataservice._udp"
    /// PXE NetBoot Manager [Markus_Treinen]
    public static let `netbootPxeTcp`: Self = "_netboot-pxe._tcp"
    /// PXE NetBoot Manager [Markus_Treinen]
    public static let `netbootPxeUdp`: Self = "_netboot-pxe._udp"
    /// AMS Port [Angelique_Dokos]
    public static let `smauthPortTcp`: Self = "_smauth-port._tcp"
    /// AMS Port [Angelique_Dokos]
    public static let `smauthPortUdp`: Self = "_smauth-port._udp"
    /// Syam Web Server Port [Michael_Daniele]
    public static let `syamWebserverTcp`: Self = "_syam-webserver._tcp"
    /// Syam Web Server Port [Michael_Daniele]
    public static let `syamWebserverUdp`: Self = "_syam-webserver._udp"
    /// MSR Plugin Port [Ron_Steed]
    public static let `msrPluginPortTcp`: Self = "_msr-plugin-port._tcp"
    /// MSR Plugin Port [Ron_Steed]
    public static let `msrPluginPortUdp`: Self = "_msr-plugin-port._udp"
    /// Dynamic Site System [Steve_Qi]
    public static let `dynSiteTcp`: Self = "_dyn-site._tcp"
    /// Dynamic Site System [Steve_Qi]
    public static let `dynSiteUdp`: Self = "_dyn-site._udp"
    /// PL/B App Server User Port [Edward_R_Boedecker]
    public static let `plbservePortTcp`: Self = "_plbserve-port._tcp"
    /// PL/B App Server User Port [Edward_R_Boedecker]
    public static let `plbservePortUdp`: Self = "_plbserve-port._udp"
    /// PL/B File Manager Port [Edward_R_Boedecker]
    public static let `sunfmPortTcp`: Self = "_sunfm-port._tcp"
    /// PL/B File Manager Port [Edward_R_Boedecker]
    public static let `sunfmPortUdp`: Self = "_sunfm-port._udp"
    /// SDP Port Mapper Protocol [James_Pinkerton]
    public static let `sdpPortmapperTcp`: Self = "_sdp-portmapper._tcp"
    /// SDP Port Mapper Protocol [James_Pinkerton]
    public static let `sdpPortmapperUdp`: Self = "_sdp-portmapper._udp"
    /// Mailprox [Christof_Drescher]
    public static let `mailproxTcp`: Self = "_mailprox._tcp"
    /// Mailprox [Christof_Drescher]
    public static let `mailproxUdp`: Self = "_mailprox._udp"
    /// DVB Service Discovery [Bert_van_Willigen][Peter_MacAvock]
    public static let `dvbservdscTcp`: Self = "_dvbservdsc._tcp"
    /// DVB Service Discovery [Bert_van_Willigen][Peter_MacAvock]
    public static let `dvbservdscUdp`: Self = "_dvbservdsc._udp"
    /// Oracle dbControl Agent po IANA assigned this well-formed service name as a replacement for "dbcontrol_agent". [Todd_Guay]
    public static let `dbcontrolAgentTcp`: Self = "_dbcontrol-agent._tcp"
    /// Oracle dbControl Agent po [Todd_Guay]
    public static let `dbcontrol_agentTcp`: Self = "_dbcontrol_agent._tcp"
    /// Oracle dbControl Agent po IANA assigned this well-formed service name as a replacement for "dbcontrol_agent". [Todd_Guay]
    public static let `dbcontrolAgentUdp`: Self = "_dbcontrol-agent._udp"
    /// Oracle dbControl Agent po [Todd_Guay]
    public static let `dbcontrol_agentUdp`: Self = "_dbcontrol_agent._udp"
    /// Anti-virus Application Management Port [In_sik_Choi]
    public static let `aampTcp`: Self = "_aamp._tcp"
    /// Anti-virus Application Management Port [In_sik_Choi]
    public static let `aampUdp`: Self = "_aamp._udp"
    /// XeCP Node Service [Brent_McCullough]
    public static let `xecpNodeTcp`: Self = "_xecp-node._tcp"
    /// XeCP Node Service [Brent_McCullough]
    public static let `xecpNodeUdp`: Self = "_xecp-node._udp"
    /// Home Portal Web Server [Christian_Beaumont]
    public static let `homeportalWebTcp`: Self = "_homeportal-web._tcp"
    /// Home Portal Web Server [Christian_Beaumont]
    public static let `homeportalWebUdp`: Self = "_homeportal-web._udp"
    /// satellite distribution [Simone_Molendini]
    public static let `srdpTcp`: Self = "_srdp._tcp"
    /// satellite distribution [Simone_Molendini]
    public static let `srdpUdp`: Self = "_srdp._udp"
    /// TetraNode Ip Gateway [B_van_Klinken]
    public static let `tigTcp`: Self = "_tig._tcp"
    /// TetraNode Ip Gateway [B_van_Klinken]
    public static let `tigUdp`: Self = "_tig._udp"
    /// S-Ops Management [Stefan_Hochuli]
    public static let `sopsTcp`: Self = "_sops._tcp"
    /// S-Ops Management [Stefan_Hochuli]
    public static let `sopsUdp`: Self = "_sops._udp"
    /// EMCADS Server Port [Lars_Struwe_Christen]
    public static let `emcadsTcp`: Self = "_emcads._tcp"
    /// EMCADS Server Port [Lars_Struwe_Christen]
    public static let `emcadsUdp`: Self = "_emcads._udp"
    /// BackupEDGE Server [Microlite_Corporation]
    public static let `backupedgeTcp`: Self = "_backupedge._tcp"
    /// BackupEDGE Server [Microlite_Corporation]
    public static let `backupedgeUdp`: Self = "_backupedge._udp"
    /// Connect and Control Protocol for Consumer, Commercial, and Industrial Electronic Devices [Aaron_Myer]
    public static let `ccpTcp`: Self = "_ccp._tcp"
    /// Connect and Control Protocol for Consumer, Commercial, and Industrial Electronic Devices [Aaron_Myer]
    public static let `ccpUdp`: Self = "_ccp._udp"
    /// Anton Paar Device Administration Protocol [Martin_Leitner]
    public static let `apdapTcp`: Self = "_apdap._tcp"
    /// Anton Paar Device Administration Protocol [Martin_Leitner]
    public static let `apdapUdp`: Self = "_apdap._udp"
    /// Dynamic Routing Information Protocol [Dana_Blair]
    public static let `dripTcp`: Self = "_drip._tcp"
    /// Dynamic Routing Information Protocol [Dana_Blair]
    public static let `dripUdp`: Self = "_drip._udp"
    /// Name Munging [John_C_Klensin]
    public static let `namemungeTcp`: Self = "_namemunge._tcp"
    /// Name Munging [John_C_Klensin]
    public static let `namemungeUdp`: Self = "_namemunge._udp"
    /// PWG IPP Facsimile [Ira_McDonald]
    public static let `pwgippfaxTcp`: Self = "_pwgippfax._tcp"
    /// PWG IPP Facsimile [Ira_McDonald]
    public static let `pwgippfaxUdp`: Self = "_pwgippfax._udp"
    /// I3 Session Manager [Mike_Gagle_2]
    public static let `i3SessionmgrTcp`: Self = "_i3-sessionmgr._tcp"
    /// I3 Session Manager [Mike_Gagle_2]
    public static let `i3SessionmgrUdp`: Self = "_i3-sessionmgr._udp"
    /// Eydeas XMLink Connect [David_Crewson]
    public static let `xmlinkConnectTcp`: Self = "_xmlink-connect._tcp"
    /// Eydeas XMLink Connect [David_Crewson]
    public static let `xmlinkConnectUdp`: Self = "_xmlink-connect._udp"
    /// AD Replication RPC [Robert_Ball]
    public static let `adrepTcp`: Self = "_adrep._tcp"
    /// AD Replication RPC [Robert_Ball]
    public static let `adrepUdp`: Self = "_adrep._udp"
    /// p2pCommunity [Tiago_Bittencourt_Si]
    public static let `p2pcommunityTcp`: Self = "_p2pcommunity._tcp"
    /// p2pCommunity [Tiago_Bittencourt_Si]
    public static let `p2pcommunityUdp`: Self = "_p2pcommunity._udp"
    /// GigE Vision Control [Eric_Carey]
    public static let `gvcpTcp`: Self = "_gvcp._tcp"
    /// GigE Vision Control [Eric_Carey]
    public static let `gvcpUdp`: Self = "_gvcp._udp"
    /// MQEnterprise Broker 
    public static let `mqeBrokerTcp`: Self = "_mqe-broker._tcp"
    /// MQEnterprise Broker 
    public static let `mqeBrokerUdp`: Self = "_mqe-broker._udp"
    /// MQEnterprise Agent [Bob_Lauria]
    public static let `mqeAgentTcp`: Self = "_mqe-agent._tcp"
    /// MQEnterprise Agent [Bob_Lauria]
    public static let `mqeAgentUdp`: Self = "_mqe-agent._udp"
    /// Tree Hopper Networking [Gary_Whelan]
    public static let `treehopperTcp`: Self = "_treehopper._tcp"
    /// Tree Hopper Networking [Gary_Whelan]
    public static let `treehopperUdp`: Self = "_treehopper._udp"
    /// Bess Peer Assessment [Peter_Verdon]
    public static let `bessTcp`: Self = "_bess._tcp"
    /// Bess Peer Assessment [Peter_Verdon]
    public static let `bessUdp`: Self = "_bess._udp"
    /// ProAxess Server [Jonas_Ahlqvist]
    public static let `proaxessTcp`: Self = "_proaxess._tcp"
    /// ProAxess Server [Jonas_Ahlqvist]
    public static let `proaxessUdp`: Self = "_proaxess._udp"
    /// SBI Agent Protocol [Yossi_Appleboum_2]
    public static let `sbiAgentTcp`: Self = "_sbi-agent._tcp"
    /// SBI Agent Protocol [Yossi_Appleboum_2]
    public static let `sbiAgentUdp`: Self = "_sbi-agent._udp"
    /// Teran Hybrid Routing Protocol [Spencer_Teran]
    public static let `thrpTcp`: Self = "_thrp._tcp"
    /// Teran Hybrid Routing Protocol [Spencer_Teran]
    public static let `thrpUdp`: Self = "_thrp._udp"
    /// SASG GPRS [Cristian_Petculescu_3]
    public static let `sasggprsTcp`: Self = "_sasggprs._tcp"
    /// SASG GPRS [Cristian_Petculescu_3]
    public static let `sasggprsUdp`: Self = "_sasggprs._udp"
    /// Avanti IP to NCPE API [Steve_Meyer_Sr]
    public static let `atiIpToNcpeTcp`: Self = "_ati-ip-to-ncpe._tcp"
    /// Avanti IP to NCPE API [Steve_Meyer_Sr]
    public static let `atiIpToNcpeUdp`: Self = "_ati-ip-to-ncpe._udp"
    /// BuildForge Lock Manager [Joe_Senner]
    public static let `bflckmgrTcp`: Self = "_bflckmgr._tcp"
    /// BuildForge Lock Manager [Joe_Senner]
    public static let `bflckmgrUdp`: Self = "_bflckmgr._udp"
    /// PPS Message Service [Bart_Schaefer]
    public static let `ppsmsTcp`: Self = "_ppsms._tcp"
    /// PPS Message Service [Bart_Schaefer]
    public static let `ppsmsUdp`: Self = "_ppsms._udp"
    /// iAnywhere DBNS [Graeme_Perrow]
    public static let `ianywhereDbnsTcp`: Self = "_ianywhere-dbns._tcp"
    /// iAnywhere DBNS [Graeme_Perrow]
    public static let `ianywhereDbnsUdp`: Self = "_ianywhere-dbns._udp"
    /// Landmark Messages [Petri_Rauhala]
    public static let `landmarksTcp`: Self = "_landmarks._tcp"
    /// Landmark Messages [Petri_Rauhala]
    public static let `landmarksUdp`: Self = "_landmarks._udp"
    /// LANrev Agent [Martin_Bestmann_3]
    public static let `lanrevagentTcp`: Self = "_lanrevagent._tcp"
    /// LANrev Agent [Martin_Bestmann_3]
    public static let `lanrevagentUdp`: Self = "_lanrevagent._udp"
    /// LANrev Server [Martin_Bestmann_3]
    public static let `lanrevserverTcp`: Self = "_lanrevserver._tcp"
    /// LANrev Server [Martin_Bestmann_3]
    public static let `lanrevserverUdp`: Self = "_lanrevserver._udp"
    /// ict-control Protocol [Roel_Harbers]
    public static let `iconpTcp`: Self = "_iconp._tcp"
    /// ict-control Protocol [Roel_Harbers]
    public static let `iconpUdp`: Self = "_iconp._udp"
    /// ConnectShip Progistics [ConnectShip_Inc]
    public static let `progisticsTcp`: Self = "_progistics._tcp"
    /// ConnectShip Progistics [ConnectShip_Inc]
    public static let `progisticsUdp`: Self = "_progistics._udp"
    /// Remote Applicant Tracking Service [Marc_Castelluccio]
    public static let `xk22Tcp`: Self = "_xk22._tcp"
    /// Remote Applicant Tracking Service [Marc_Castelluccio]
    public static let `xk22Udp`: Self = "_xk22._udp"
    /// Air Shot [Shingo_Kimura]
    public static let `airshotTcp`: Self = "_airshot._tcp"
    /// Air Shot [Shingo_Kimura]
    public static let `airshotUdp`: Self = "_airshot._udp"
    /// Server Automation Agent [Hewlett_Packard_Enterprise]
    public static let `opswagentTcp`: Self = "_opswagent._tcp"
    /// Server Automation Agent [Hewlett_Packard_Enterprise]
    public static let `opswagentUdp`: Self = "_opswagent._udp"
    /// Opsware Manager [Dave_Jagoda]
    public static let `opswmanagerTcp`: Self = "_opswmanager._tcp"
    /// Opsware Manager [Dave_Jagoda]
    public static let `opswmanagerUdp`: Self = "_opswmanager._udp"
    /// Secured Configuration Server [Dr_Anupam_Bharali]
    public static let `secureCfgSvrTcp`: Self = "_secure-cfg-svr._tcp"
    /// Secured Configuration Server [Dr_Anupam_Bharali]
    public static let `secureCfgSvrUdp`: Self = "_secure-cfg-svr._udp"
    /// Smith Micro Wide Area Network Service [David_Sperling]
    public static let `smwanTcp`: Self = "_smwan._tcp"
    /// Smith Micro Wide Area Network Service [David_Sperling]
    public static let `smwanUdp`: Self = "_smwan._udp"
    /// Starfish System Admin [Dan_Razzell]
    public static let `starfishTcp`: Self = "_starfish._tcp"
    /// Starfish System Admin [Dan_Razzell]
    public static let `starfishUdp`: Self = "_starfish._udp"
    /// ESRI Image Server 
    public static let `eisTcp`: Self = "_eis._tcp"
    /// ESRI Image Server 
    public static let `eisUdp`: Self = "_eis._udp"
    /// ESRI Image Service [Keith_Ryden]
    public static let `eispTcp`: Self = "_eisp._tcp"
    /// ESRI Image Service [Keith_Ryden]
    public static let `eispUdp`: Self = "_eisp._udp"
    /// MAPPER network node manager 
    public static let `mapperNodemgrTcp`: Self = "_mapper-nodemgr._tcp"
    /// MAPPER network node manager 
    public static let `mapperNodemgrUdp`: Self = "_mapper-nodemgr._udp"
    /// MAPPER TCP/IP server 
    public static let `mapperMapethdTcp`: Self = "_mapper-mapethd._tcp"
    /// MAPPER TCP/IP server 
    public static let `mapperMapethdUdp`: Self = "_mapper-mapethd._udp"
    /// MAPPER workstation server IANA assigned this well-formed service name as a replacement for "mapper-ws_ethd". [John_C_Horton]
    public static let `mapperWsEthdTcp`: Self = "_mapper-ws-ethd._tcp"
    /// MAPPER workstation server [John_C_Horton]
    public static let `mapperWs_ethdTcp`: Self = "_mapper-ws_ethd._tcp"
    /// MAPPER workstation server IANA assigned this well-formed service name as a replacement for "mapper-ws_ethd". [John_C_Horton]
    public static let `mapperWsEthdUdp`: Self = "_mapper-ws-ethd._udp"
    /// MAPPER workstation server [John_C_Horton]
    public static let `mapperWs_ethdUdp`: Self = "_mapper-ws_ethd._udp"
    /// Centerline [Mark_Simpson]
    public static let `centerlineTcp`: Self = "_centerline._tcp"
    /// Centerline [Mark_Simpson]
    public static let `centerlineUdp`: Self = "_centerline._udp"
    /// DCS Configuration Port [Ian_Cargill]
    public static let `dcsConfigTcp`: Self = "_dcs-config._tcp"
    /// DCS Configuration Port [Ian_Cargill]
    public static let `dcsConfigUdp`: Self = "_dcs-config._udp"
    /// BindView-Query Engine 
    public static let `bvQueryengineTcp`: Self = "_bv-queryengine._tcp"
    /// BindView-Query Engine 
    public static let `bvQueryengineUdp`: Self = "_bv-queryengine._udp"
    /// BindView-IS 
    public static let `bvIsTcp`: Self = "_bv-is._tcp"
    /// BindView-IS 
    public static let `bvIsUdp`: Self = "_bv-is._udp"
    /// BindView-SMCServer 
    public static let `bvSmcsrvTcp`: Self = "_bv-smcsrv._tcp"
    /// BindView-SMCServer 
    public static let `bvSmcsrvUdp`: Self = "_bv-smcsrv._udp"
    /// BindView-DirectoryServer 
    public static let `bvDsTcp`: Self = "_bv-ds._tcp"
    /// BindView-DirectoryServer 
    public static let `bvDsUdp`: Self = "_bv-ds._udp"
    /// BindView-Agent [David_A_Gayler]
    public static let `bvAgentTcp`: Self = "_bv-agent._tcp"
    /// BindView-Agent [David_A_Gayler]
    public static let `bvAgentUdp`: Self = "_bv-agent._udp"
    /// ISS Management Svcs SSL [Wes_Wilson]
    public static let `issMgmtSslTcp`: Self = "_iss-mgmt-ssl._tcp"
    /// ISS Management Svcs SSL [Wes_Wilson]
    public static let `issMgmtSslUdp`: Self = "_iss-mgmt-ssl._udp"
    /// abcsoftware-01 [Andrew_Zimmerman]
    public static let `abcsoftwareTcp`: Self = "_abcsoftware._tcp"
    /// abcsoftware-01 [Andrew_Zimmerman]
    public static let `abcsoftwareUdp`: Self = "_abcsoftware._udp"
    /// aes_db [Colin_Hughes]
    public static let `agentseaseDbTcp`: Self = "_agentsease-db._tcp"
    /// aes_db [Colin_Hughes]
    public static let `agentseaseDbUdp`: Self = "_agentsease-db._udp"
    /// Distributed Nagios Executor Service [John_Calcote]
    public static let `dnxTcp`: Self = "_dnx._tcp"
    /// Distributed Nagios Executor Service [John_Calcote]
    public static let `dnxUdp`: Self = "_dnx._udp"
    /// Norman distributes scanning service [Kristian_A_Bognaes]
    public static let `nvcnetTcp`: Self = "_nvcnet._tcp"
    /// Norman distributes scanning service [Kristian_A_Bognaes]
    public static let `nvcnetUdp`: Self = "_nvcnet._udp"
    /// Terabase [Thor_Olson]
    public static let `terabaseTcp`: Self = "_terabase._tcp"
    /// Terabase [Thor_Olson]
    public static let `terabaseUdp`: Self = "_terabase._udp"
    /// NewOak [Jim_Philippou]
    public static let `newoakTcp`: Self = "_newoak._tcp"
    /// NewOak [Jim_Philippou]
    public static let `newoakUdp`: Self = "_newoak._udp"
    /// pxc-spvr-ft 
    public static let `pxcSpvrFtTcp`: Self = "_pxc-spvr-ft._tcp"
    /// pxc-spvr-ft 
    public static let `pxcSpvrFtUdp`: Self = "_pxc-spvr-ft._udp"
    /// pxc-splr-ft 
    public static let `pxcSplrFtTcp`: Self = "_pxc-splr-ft._tcp"
    /// pxc-splr-ft 
    public static let `pxcSplrFtUdp`: Self = "_pxc-splr-ft._udp"
    /// pxc-roid 
    public static let `pxcRoidTcp`: Self = "_pxc-roid._tcp"
    /// pxc-roid 
    public static let `pxcRoidUdp`: Self = "_pxc-roid._udp"
    /// pxc-pin 
    public static let `pxcPinTcp`: Self = "_pxc-pin._tcp"
    /// pxc-pin 
    public static let `pxcPinUdp`: Self = "_pxc-pin._udp"
    /// pxc-spvr 
    public static let `pxcSpvrTcp`: Self = "_pxc-spvr._tcp"
    /// pxc-spvr 
    public static let `pxcSpvrUdp`: Self = "_pxc-spvr._udp"
    /// pxc-splr [Dave_Nesbitt]
    public static let `pxcSplrTcp`: Self = "_pxc-splr._tcp"
    /// pxc-splr [Dave_Nesbitt]
    public static let `pxcSplrUdp`: Self = "_pxc-splr._udp"
    /// NetCheque accounting [B_Clifford_Neuman]
    public static let `netchequeTcp`: Self = "_netcheque._tcp"
    /// NetCheque accounting [B_Clifford_Neuman]
    public static let `netchequeUdp`: Self = "_netcheque._udp"
    /// Chimera HWM [Ken_Anderson]
    public static let `chimeraHwmTcp`: Self = "_chimera-hwm._tcp"
    /// Chimera HWM [Ken_Anderson]
    public static let `chimeraHwmUdp`: Self = "_chimera-hwm._udp"
    /// Samsung Unidex [Konstantin_V_Vyazni]
    public static let `samsungUnidexTcp`: Self = "_samsung-unidex._tcp"
    /// Samsung Unidex [Konstantin_V_Vyazni]
    public static let `samsungUnidexUdp`: Self = "_samsung-unidex._udp"
    /// Alternate Service Boot [Eric_Dittert]
    public static let `altservicebootTcp`: Self = "_altserviceboot._tcp"
    /// Alternate Service Boot [Eric_Dittert]
    public static let `altservicebootUdp`: Self = "_altserviceboot._udp"
    /// PDA Gate [Masakuni_Okada]
    public static let `pdaGateTcp`: Self = "_pda-gate._tcp"
    /// PDA Gate [Masakuni_Okada]
    public static let `pdaGateUdp`: Self = "_pda-gate._udp"
    /// ACL Manager [Toru_Murai]
    public static let `aclManagerTcp`: Self = "_acl-manager._tcp"
    /// ACL Manager [Toru_Murai]
    public static let `aclManagerUdp`: Self = "_acl-manager._udp"
    /// TAICLOCK [D_J_Bernstein]
    public static let `taiclockTcp`: Self = "_taiclock._tcp"
    /// TAICLOCK [D_J_Bernstein]
    public static let `taiclockUdp`: Self = "_taiclock._udp"
    /// Talarian Mcast 
    public static let `talarianMcast1Tcp`: Self = "_talarian-mcast1._tcp"
    /// Talarian Mcast 
    public static let `talarianMcast1Udp`: Self = "_talarian-mcast1._udp"
    /// Talarian Mcast 
    public static let `talarianMcast2Tcp`: Self = "_talarian-mcast2._tcp"
    /// Talarian Mcast 
    public static let `talarianMcast2Udp`: Self = "_talarian-mcast2._udp"
    /// Talarian Mcast 
    public static let `talarianMcast3Tcp`: Self = "_talarian-mcast3._tcp"
    /// Talarian Mcast 
    public static let `talarianMcast3Udp`: Self = "_talarian-mcast3._udp"
    /// Talarian Mcast 
    public static let `talarianMcast4Tcp`: Self = "_talarian-mcast4._tcp"
    /// Talarian Mcast 
    public static let `talarianMcast4Udp`: Self = "_talarian-mcast4._udp"
    /// Talarian Mcast [Geoff_Mendal]
    public static let `talarianMcast5Tcp`: Self = "_talarian-mcast5._tcp"
    /// Talarian Mcast [Geoff_Mendal]
    public static let `talarianMcast5Udp`: Self = "_talarian-mcast5._udp"
    /// TRAP Port [Jeffrey_C_Byrd]
    public static let `trapTcp`: Self = "_trap._tcp"
    /// TRAP Port [Jeffrey_C_Byrd]
    public static let `trapUdp`: Self = "_trap._udp"
    /// Nexus Portal [Damian_Tarnawsky]
    public static let `nexusPortalTcp`: Self = "_nexus-portal._tcp"
    /// Nexus Portal [Damian_Tarnawsky]
    public static let `nexusPortalUdp`: Self = "_nexus-portal._udp"
    /// DNOX [Leo_Rathnayake]
    public static let `dnoxTcp`: Self = "_dnox._tcp"
    /// DNOX [Leo_Rathnayake]
    public static let `dnoxUdp`: Self = "_dnox._udp"
    /// ESNM Zoning Port [Yong_Cai]
    public static let `esnmZoningTcp`: Self = "_esnm-zoning._tcp"
    /// ESNM Zoning Port [Yong_Cai]
    public static let `esnmZoningUdp`: Self = "_esnm-zoning._udp"
    /// TNP1 User Port [Tony_Gibbs]
    public static let `tnp1PortTcp`: Self = "_tnp1-port._tcp"
    /// TNP1 User Port [Tony_Gibbs]
    public static let `tnp1PortUdp`: Self = "_tnp1-port._udp"
    /// Partition Image Port [Franck_Ladurelle]
    public static let `partimageTcp`: Self = "_partimage._tcp"
    /// Partition Image Port [Franck_Ladurelle]
    public static let `partimageUdp`: Self = "_partimage._udp"
    /// Graphical Debug Server [Steve_Halverson]
    public static let `asDebugTcp`: Self = "_as-debug._tcp"
    /// Graphical Debug Server [Steve_Halverson]
    public static let `asDebugUdp`: Self = "_as-debug._udp"
    /// bitxpress [Morgan_Doyle]
    public static let `bxpTcp`: Self = "_bxp._tcp"
    /// bitxpress [Morgan_Doyle]
    public static let `bxpUdp`: Self = "_bxp._udp"
    /// DTServer Port [Stephen_Aikins]
    public static let `dtserverPortTcp`: Self = "_dtserver-port._tcp"
    /// DTServer Port [Stephen_Aikins]
    public static let `dtserverPortUdp`: Self = "_dtserver-port._udp"
    /// IP Q signaling protocol [Toru_Tachibana]
    public static let `ipQsigTcp`: Self = "_ip-qsig._tcp"
    /// IP Q signaling protocol [Toru_Tachibana]
    public static let `ipQsigUdp`: Self = "_ip-qsig._udp"
    /// Accell/JSP Daemon Port [Daegis_Inc]
    public static let `jdmnPortTcp`: Self = "_jdmn-port._tcp"
    /// Accell/JSP Daemon Port [Daegis_Inc]
    public static let `jdmnPortUdp`: Self = "_jdmn-port._udp"
    /// UUCP over SSL [Harald_Welte]
    public static let `suucpTcp`: Self = "_suucp._tcp"
    /// UUCP over SSL [Harald_Welte]
    public static let `suucpUdp`: Self = "_suucp._udp"
    /// VERITAS Authorization Service [Stefan_Winkel]
    public static let `vrtsAuthPortTcp`: Self = "_vrts-auth-port._tcp"
    /// VERITAS Authorization Service [Stefan_Winkel]
    public static let `vrtsAuthPortUdp`: Self = "_vrts-auth-port._udp"
    /// SANavigator Peer Port [Robert_J_Chansler]
    public static let `sanavigatorTcp`: Self = "_sanavigator._tcp"
    /// SANavigator Peer Port [Robert_J_Chansler]
    public static let `sanavigatorUdp`: Self = "_sanavigator._udp"
    /// Ubiquinox Daemon [Kit_Smithers]
    public static let `ubxdTcp`: Self = "_ubxd._tcp"
    /// Ubiquinox Daemon [Kit_Smithers]
    public static let `ubxdUdp`: Self = "_ubxd._udp"
    /// WAP Push OTA-HTTP port 
    public static let `wapPushHttpTcp`: Self = "_wap-push-http._tcp"
    /// WAP Push OTA-HTTP port 
    public static let `wapPushHttpUdp`: Self = "_wap-push-http._udp"
    /// WAP Push OTA-HTTP secure [Matthieu_Lachance]
    public static let `wapPushHttpsTcp`: Self = "_wap-push-https._tcp"
    /// WAP Push OTA-HTTP secure [Matthieu_Lachance]
    public static let `wapPushHttpsUdp`: Self = "_wap-push-https._udp"
    /// RaveHD network control [Jason_Howard]
    public static let `ravehdTcp`: Self = "_ravehd._tcp"
    /// RaveHD network control [Jason_Howard]
    public static let `ravehdUdp`: Self = "_ravehd._udp"
    /// Fazzt Point-To-Point 
    public static let `fazztPtpTcp`: Self = "_fazzt-ptp._tcp"
    /// Fazzt Point-To-Point 
    public static let `fazztPtpUdp`: Self = "_fazzt-ptp._udp"
    /// Fazzt Administration [Lewis_Wolfgang]
    public static let `fazztAdminTcp`: Self = "_fazzt-admin._tcp"
    /// Fazzt Administration [Lewis_Wolfgang]
    public static let `fazztAdminUdp`: Self = "_fazzt-admin._udp"
    /// Yo.net main service [John_Tintor]
    public static let `yoMainTcp`: Self = "_yo-main._tcp"
    /// Yo.net main service [John_Tintor]
    public static let `yoMainUdp`: Self = "_yo-main._udp"
    /// Rocketeer-Houston [Johnny_C_Norris_II]
    public static let `houstonTcp`: Self = "_houston._tcp"
    /// Rocketeer-Houston [Johnny_C_Norris_II]
    public static let `houstonUdp`: Self = "_houston._udp"
    /// LDXP [Craig_Calef]
    public static let `ldxpTcp`: Self = "_ldxp._tcp"
    /// LDXP [Craig_Calef]
    public static let `ldxpUdp`: Self = "_ldxp._udp"
    /// Neighbour Identity Resolution 
    public static let `nirpTcp`: Self = "_nirp._tcp"
    /// Neighbour Identity Resolution 
    public static let `nirpUdp`: Self = "_nirp._udp"
    /// Location Tracking Protocol 
    public static let `ltpTcp`: Self = "_ltp._tcp"
    /// Location Tracking Protocol 
    public static let `ltpUdp`: Self = "_ltp._udp"
    /// Accounting Protocol 
    public static let `acpProtoTcp`: Self = "_acp-proto._tcp"
    /// Accounting Protocol 
    public static let `acpProtoUdp`: Self = "_acp-proto._udp"
    /// Context Transfer Protocol [Hesham_Soliman]
    public static let `ctpStateTcp`: Self = "_ctp-state._tcp"
    /// Context Transfer Protocol [Hesham_Soliman]
    public static let `ctpStateUdp`: Self = "_ctp-state._udp"
    /// Wide Area File Services [Yuval_Hager]
    public static let `wafsTcp`: Self = "_wafs._tcp"
    /// Wide Area File Services [Yuval_Hager]
    public static let `wafsUdp`: Self = "_wafs._udp"
    /// Wide Area File Services [Etai_Lev_Ran]
    public static let `ciscoWafsTcp`: Self = "_cisco-wafs._tcp"
    /// Wide Area File Services [Etai_Lev_Ran]
    public static let `ciscoWafsUdp`: Self = "_cisco-wafs._udp"
    /// Cisco Peer to Peer Distribution Protocol [Susan_Sauter]
    public static let `cppdpTcp`: Self = "_cppdp._tcp"
    /// Cisco Peer to Peer Distribution Protocol [Susan_Sauter]
    public static let `cppdpUdp`: Self = "_cppdp._udp"
    /// VoiceConnect Interact [Jonathan_Custance]
    public static let `interactTcp`: Self = "_interact._tcp"
    /// VoiceConnect Interact [Jonathan_Custance]
    public static let `interactUdp`: Self = "_interact._udp"
    /// CosmoCall Universe Communications Port 1 
    public static let `ccuComm1Tcp`: Self = "_ccu-comm-1._tcp"
    /// CosmoCall Universe Communications Port 1 
    public static let `ccuComm1Udp`: Self = "_ccu-comm-1._udp"
    /// CosmoCall Universe Communications Port 2 
    public static let `ccuComm2Tcp`: Self = "_ccu-comm-2._tcp"
    /// CosmoCall Universe Communications Port 2 
    public static let `ccuComm2Udp`: Self = "_ccu-comm-2._udp"
    /// CosmoCall Universe Communications Port 3 [Steve_Dellutri_2]
    public static let `ccuComm3Tcp`: Self = "_ccu-comm-3._tcp"
    /// CosmoCall Universe Communications Port 3 [Steve_Dellutri_2]
    public static let `ccuComm3Udp`: Self = "_ccu-comm-3._udp"
    /// Location Message Service [Sergey_Burnevsky]
    public static let `lmsTcp`: Self = "_lms._tcp"
    /// Location Message Service [Sergey_Burnevsky]
    public static let `lmsUdp`: Self = "_lms._udp"
    /// Servigistics WFM server [Yuri_Machkasov_2]
    public static let `wfmTcp`: Self = "_wfm._tcp"
    /// Servigistics WFM server [Yuri_Machkasov_2]
    public static let `wfmUdp`: Self = "_wfm._udp"
    /// Kingfisher protocol [Vaughan_Wesson]
    public static let `kingfisherTcp`: Self = "_kingfisher._tcp"
    /// Kingfisher protocol [Vaughan_Wesson]
    public static let `kingfisherUdp`: Self = "_kingfisher._udp"
    /// DLMS/COSEM [Gyozo_Kmethy]
    public static let `dlmsCosemTcp`: Self = "_dlms-cosem._tcp"
    /// DLMS/COSEM [Gyozo_Kmethy]
    public static let `dlmsCosemUdp`: Self = "_dlms-cosem._udp"
    /// DSMETER Inter-Agent Transfer Channel IANA assigned this well-formed service name as a replacement for "dsmeter_iatc". [John_McCann]
    public static let `dsmeterIatcTcp`: Self = "_dsmeter-iatc._tcp"
    /// DSMETER Inter-Agent Transfer Channel [John_McCann]
    public static let `dsmeter_iatcTcp`: Self = "_dsmeter_iatc._tcp"
    /// DSMETER Inter-Agent Transfer Channel IANA assigned this well-formed service name as a replacement for "dsmeter_iatc". [John_McCann]
    public static let `dsmeterIatcUdp`: Self = "_dsmeter-iatc._udp"
    /// DSMETER Inter-Agent Transfer Channel [John_McCann]
    public static let `dsmeter_iatcUdp`: Self = "_dsmeter_iatc._udp"
    /// Ice Location Service (TCP) 
    public static let `iceLocationTcp`: Self = "_ice-location._tcp"
    /// Ice Location Service (TCP) 
    public static let `iceLocationUdp`: Self = "_ice-location._udp"
    /// Ice Location Service (SSL) 
    public static let `iceSlocationTcp`: Self = "_ice-slocation._tcp"
    /// Ice Location Service (SSL) 
    public static let `iceSlocationUdp`: Self = "_ice-slocation._udp"
    /// Ice Firewall Traversal Service (TCP) 
    public static let `iceRouterTcp`: Self = "_ice-router._tcp"
    /// Ice Firewall Traversal Service (TCP) 
    public static let `iceRouterUdp`: Self = "_ice-router._udp"
    /// Ice Firewall Traversal Service (SSL) [Bernard_Normier]
    public static let `iceSrouterTcp`: Self = "_ice-srouter._tcp"
    /// Ice Firewall Traversal Service (SSL) [Bernard_Normier]
    public static let `iceSrouterUdp`: Self = "_ice-srouter._udp"
    /// Avanti Common Data IANA assigned this well-formed service name as a replacement for "avanti_cdp". [Steve_Meyer_Sr]
    public static let `avantiCdpTcp`: Self = "_avanti-cdp._tcp"
    /// Avanti Common Data [Steve_Meyer_Sr]
    public static let `avanti_cdpTcp`: Self = "_avanti_cdp._tcp"
    /// Avanti Common Data IANA assigned this well-formed service name as a replacement for "avanti_cdp". [Steve_Meyer_Sr]
    public static let `avantiCdpUdp`: Self = "_avanti-cdp._udp"
    /// Avanti Common Data [Steve_Meyer_Sr]
    public static let `avanti_cdpUdp`: Self = "_avanti_cdp._udp"
    /// Performance Measurement and Analysis [Zenon_Fortuna]
    public static let `pmasTcp`: Self = "_pmas._tcp"
    /// Performance Measurement and Analysis [Zenon_Fortuna]
    public static let `pmasUdp`: Self = "_pmas._udp"
    /// Information Distribution Protocol [Michaela_Vanderveen]
    public static let `idpTcp`: Self = "_idp._tcp"
    /// Information Distribution Protocol [Michaela_Vanderveen]
    public static let `idpUdp`: Self = "_idp._udp"
    /// IP Fleet Broadcast [Trung_Huu_Tran]
    public static let `ipfltbcstTcp`: Self = "_ipfltbcst._tcp"
    /// IP Fleet Broadcast [Trung_Huu_Tran]
    public static let `ipfltbcstUdp`: Self = "_ipfltbcst._udp"
    /// Minger Email Address Validation Service [Arvel_Hathcock]
    public static let `mingerTcp`: Self = "_minger._tcp"
    /// Minger Email Address Validation Service [Arvel_Hathcock]
    public static let `mingerUdp`: Self = "_minger._udp"
    /// Trivial IP Encryption (TrIPE) [Mark_Wooding]
    public static let `tripeTcp`: Self = "_tripe._tcp"
    /// Trivial IP Encryption (TrIPE) [Mark_Wooding]
    public static let `tripeUdp`: Self = "_tripe._udp"
    /// Automatically Incremental Backup [Volker_Wiegand]
    public static let `aibkupTcp`: Self = "_aibkup._tcp"
    /// Automatically Incremental Backup [Volker_Wiegand]
    public static let `aibkupUdp`: Self = "_aibkup._udp"
    /// Zieto Socket Communications [Malcolm_McLean]
    public static let `zietoSockTcp`: Self = "_zieto-sock._tcp"
    /// Zieto Socket Communications [Malcolm_McLean]
    public static let `zietoSockUdp`: Self = "_zieto-sock._udp"
    /// Interactive Remote Application Pairing Protocol [Volodymyr_Bykov]
    public static let `iRAPPTcp`: Self = "_iRAPP._tcp"
    /// Interactive Remote Application Pairing Protocol [Volodymyr_Bykov]
    public static let `iRAPPUdp`: Self = "_iRAPP._udp"
    /// Cequint City ID UI trigger [Phill_Goeckler]
    public static let `cequintCityidTcp`: Self = "_cequint-cityid._tcp"
    /// Cequint City ID UI trigger [Phill_Goeckler]
    public static let `cequintCityidUdp`: Self = "_cequint-cityid._udp"
    /// ISC Alarm Message Service [Bernie_Malkowski]
    public static let `perimlanTcp`: Self = "_perimlan._tcp"
    /// ISC Alarm Message Service [Bernie_Malkowski]
    public static let `perimlanUdp`: Self = "_perimlan._udp"
    /// Seraph DCS [Jason_Spence]
    public static let `seraphTcp`: Self = "_seraph._tcp"
    /// Seraph DCS [Jason_Spence]
    public static let `seraphUdp`: Self = "_seraph._udp"
    /// Ascom IP Alarming [Ascom_Austria_GmbH]
    public static let `ascomalarmUdp`: Self = "_ascomalarm._udp"
    /// Coordinated Security Service Protocol [Michael_McDaniels]
    public static let `csspTcp`: Self = "_cssp._tcp"
    /// SANtools Diagnostic Server [David_A_Lethe_2]
    public static let `santoolsTcp`: Self = "_santools._tcp"
    /// SANtools Diagnostic Server [David_A_Lethe_2]
    public static let `santoolsUdp`: Self = "_santools._udp"
    /// Lorica inside facing 
    public static let `loricaInTcp`: Self = "_lorica-in._tcp"
    /// Lorica inside facing 
    public static let `loricaInUdp`: Self = "_lorica-in._udp"
    /// Lorica inside facing (SSL) 
    public static let `loricaInSecTcp`: Self = "_lorica-in-sec._tcp"
    /// Lorica inside facing (SSL) 
    public static let `loricaInSecUdp`: Self = "_lorica-in-sec._udp"
    /// Lorica outside facing 
    public static let `loricaOutTcp`: Self = "_lorica-out._tcp"
    /// Lorica outside facing 
    public static let `loricaOutUdp`: Self = "_lorica-out._udp"
    /// Lorica outside facing (SSL) [Johannes_Skov_Frands]
    public static let `loricaOutSecTcp`: Self = "_lorica-out-sec._tcp"
    /// Lorica outside facing (SSL) [Johannes_Skov_Frands]
    public static let `loricaOutSecUdp`: Self = "_lorica-out-sec._udp"
    /// Fortisphere VM Service [Daniel_Becker_4]
    public static let `fortisphereVmUdp`: Self = "_fortisphere-vm._udp"
    /// EZNews Newsroom Message Service [Gerald_R_Jensen]
    public static let `ezmessagesrvTcp`: Self = "_ezmessagesrv._tcp"
    /// Firewall/NAT state table synchronization [Heiner_Erne]
    public static let `ftsyncUdp`: Self = "_ftsync._udp"
    /// APplus Service [Alfred_Weindl]
    public static let `applusserviceTcp`: Self = "_applusservice._tcp"
    /// Noah Printing Service Protocol [Hiromi_Ohara]
    public static let `npspTcp`: Self = "_npsp._tcp"
    /// OpenCORE Remote Control Service [Pim_van_Riezen]
    public static let `opencoreTcp`: Self = "_opencore._tcp"
    /// OpenCORE Remote Control Service [Pim_van_Riezen]
    public static let `opencoreUdp`: Self = "_opencore._udp"
    /// OMA BCAST Service Guide [Mark_Lipford]
    public static let `omasgportTcp`: Self = "_omasgport._tcp"
    /// OMA BCAST Service Guide [Mark_Lipford]
    public static let `omasgportUdp`: Self = "_omasgport._udp"
    /// EminentWare Installer 
    public static let `ewinstallerTcp`: Self = "_ewinstaller._tcp"
    /// EminentWare Installer 
    public static let `ewinstallerUdp`: Self = "_ewinstaller._udp"
    /// EminentWare DGS [David_A_Gayler_2]
    public static let `ewdgsTcp`: Self = "_ewdgs._tcp"
    /// EminentWare DGS [David_A_Gayler_2]
    public static let `ewdgsUdp`: Self = "_ewdgs._udp"
    /// Pvx Plus CS Host [Michael_King]
    public static let `pvxpluscsTcp`: Self = "_pvxpluscs._tcp"
    /// Pvx Plus CS Host [Michael_King]
    public static let `pvxpluscsUdp`: Self = "_pvxpluscs._udp"
    /// sysrq daemon [Julien_Danjou]
    public static let `sysrqdTcp`: Self = "_sysrqd._tcp"
    /// sysrq daemon [Julien_Danjou]
    public static let `sysrqdUdp`: Self = "_sysrqd._udp"
    /// xtgui information service [Jim_Robanske]
    public static let `xtguiTcp`: Self = "_xtgui._tcp"
    /// xtgui information service [Jim_Robanske]
    public static let `xtguiUdp`: Self = "_xtgui._udp"
    /// BRE (Bridge Relay Element) [Stephen_Egbert]
    public static let `breTcp`: Self = "_bre._tcp"
    /// BRE (Bridge Relay Element) [Stephen_Egbert]
    public static let `breUdp`: Self = "_bre._udp"
    /// Patrol View [Portnoy_Boxman]
    public static let `patrolviewTcp`: Self = "_patrolview._tcp"
    /// Patrol View [Portnoy_Boxman]
    public static let `patrolviewUdp`: Self = "_patrolview._udp"
    /// drmsfsd [Masao_Iwai]
    public static let `drmsfsdTcp`: Self = "_drmsfsd._tcp"
    /// drmsfsd [Masao_Iwai]
    public static let `drmsfsdUdp`: Self = "_drmsfsd._udp"
    /// DPCP [John_Croft]
    public static let `dpcpTcp`: Self = "_dpcp._tcp"
    /// DPCP [John_Croft]
    public static let `dpcpUdp`: Self = "_dpcp._udp"
    /// IGo Incognito Data Port [Paul_Reddy_2]
    public static let `igoIncognitoTcp`: Self = "_igo-incognito._tcp"
    /// IGo Incognito Data Port [Paul_Reddy_2]
    public static let `igoIncognitoUdp`: Self = "_igo-incognito._udp"
    /// Braille protocol 
    public static let `brlp0Tcp`: Self = "_brlp-0._tcp"
    /// Braille protocol 
    public static let `brlp0Udp`: Self = "_brlp-0._udp"
    /// Braille protocol 
    public static let `brlp1Tcp`: Self = "_brlp-1._tcp"
    /// Braille protocol 
    public static let `brlp1Udp`: Self = "_brlp-1._udp"
    /// Braille protocol 
    public static let `brlp2Tcp`: Self = "_brlp-2._tcp"
    /// Braille protocol 
    public static let `brlp2Udp`: Self = "_brlp-2._udp"
    /// Braille protocol [Sebastien_Hinderer]
    public static let `brlp3Tcp`: Self = "_brlp-3._tcp"
    /// Braille protocol [Sebastien_Hinderer]
    public static let `brlp3Udp`: Self = "_brlp-3._udp"
    /// Shofar [ShofarNexus]
    public static let `shofarTcp`: Self = "_shofar._tcp"
    /// Shofar [ShofarNexus]
    public static let `shofarUdp`: Self = "_shofar._udp"
    /// Synchronite [James_Figgins]
    public static let `synchroniteTcp`: Self = "_synchronite._tcp"
    /// Synchronite [James_Figgins]
    public static let `synchroniteUdp`: Self = "_synchronite._udp"
    /// JDL Accounting LAN Service [Takashi_Sahara]
    public static let `jAcTcp`: Self = "_j-ac._tcp"
    /// JDL Accounting LAN Service [Takashi_Sahara]
    public static let `jAcUdp`: Self = "_j-ac._udp"
    /// ACCEL [Masahiro_Koiwai]
    public static let `accelTcp`: Self = "_accel._tcp"
    /// ACCEL [Masahiro_Koiwai]
    public static let `accelUdp`: Self = "_accel._udp"
    /// Instantiated Zero-control Messaging [David_Miller]
    public static let `izmTcp`: Self = "_izm._tcp"
    /// Instantiated Zero-control Messaging [David_Miller]
    public static let `izmUdp`: Self = "_izm._udp"
    /// G2 RFID Tag Telemetry Data [David_Goodall]
    public static let `g2tagTcp`: Self = "_g2tag._tcp"
    /// G2 RFID Tag Telemetry Data [David_Goodall]
    public static let `g2tagUdp`: Self = "_g2tag._udp"
    /// Xgrid [David_Kramer]
    public static let `xgridTcp`: Self = "_xgrid._tcp"
    /// Xgrid [David_Kramer]
    public static let `xgridUdp`: Self = "_xgrid._udp"
    /// Apple VPN Server Reporting Protocol [Christophe_Allie]
    public static let `appleVpnsRpTcp`: Self = "_apple-vpns-rp._tcp"
    /// Apple VPN Server Reporting Protocol [Christophe_Allie]
    public static let `appleVpnsRpUdp`: Self = "_apple-vpns-rp._udp"
    /// AIPN LS Registration [Qiang_Zhang_2]
    public static let `aipnRegTcp`: Self = "_aipn-reg._tcp"
    /// AIPN LS Registration [Qiang_Zhang_2]
    public static let `aipnRegUdp`: Self = "_aipn-reg._udp"
    /// JomaMQMonitor [Marcel_Hofstetter]
    public static let `jomamqmonitorTcp`: Self = "_jomamqmonitor._tcp"
    /// JomaMQMonitor [Marcel_Hofstetter]
    public static let `jomamqmonitorUdp`: Self = "_jomamqmonitor._udp"
    /// CDS Transfer Agent [Neil_Coggins]
    public static let `cdsTcp`: Self = "_cds._tcp"
    /// CDS Transfer Agent [Neil_Coggins]
    public static let `cdsUdp`: Self = "_cds._udp"
    /// smartcard-TLS [Ilan_Mahalal]
    public static let `smartcardTlsTcp`: Self = "_smartcard-tls._tcp"
    /// smartcard-TLS [Ilan_Mahalal]
    public static let `smartcardTlsUdp`: Self = "_smartcard-tls._udp"
    /// Hillr Connection Manager [Freddy_A_Ayuso_Hens]
    public static let `hillrservTcp`: Self = "_hillrserv._tcp"
    /// Hillr Connection Manager [Freddy_A_Ayuso_Hens]
    public static let `hillrservUdp`: Self = "_hillrserv._udp"
    /// Netadmin Systems NETscript service [Goran_Runfeldt]
    public static let `netscriptTcp`: Self = "_netscript._tcp"
    /// Netadmin Systems NETscript service [Goran_Runfeldt]
    public static let `netscriptUdp`: Self = "_netscript._udp"
    /// Assuria Log Manager [Nick_Connor]
    public static let `assuriaSlmTcp`: Self = "_assuria-slm._tcp"
    /// Assuria Log Manager [Nick_Connor]
    public static let `assuriaSlmUdp`: Self = "_assuria-slm._udp"
    /// MiniRem Remote Telemetry and Control [MobilePro_Systems]
    public static let `miniremTcp`: Self = "_minirem._tcp"
    /// e-Builder Application Communication [James_Caza]
    public static let `eBuilderTcp`: Self = "_e-builder._tcp"
    /// e-Builder Application Communication [James_Caza]
    public static let `eBuilderUdp`: Self = "_e-builder._udp"
    /// Fiber Patrol Alarm Service [Zhizhong_Zhuang]
    public static let `fpramsTcp`: Self = "_fprams._tcp"
    /// Fiber Patrol Alarm Service [Zhizhong_Zhuang]
    public static let `fpramsUdp`: Self = "_fprams._udp"
    /// Z-Wave Protocol [Sigma_Designs_Inc_2]
    public static let `zWaveTcp`: Self = "_z-wave._tcp"
    /// Z-Wave Protocol [Sigma_Designs_Inc_2]
    public static let `zWaveUdp`: Self = "_z-wave._udp"
    /// Rohill TetraNode Ip Gateway v2 [Bert_Bouwers]
    public static let `tigv2Tcp`: Self = "_tigv2._tcp"
    /// Rohill TetraNode Ip Gateway v2 [Bert_Bouwers]
    public static let `tigv2Udp`: Self = "_tigv2._udp"
    /// Opsview Envoy [Ton_Voon]
    public static let `opsviewEnvoyTcp`: Self = "_opsview-envoy._tcp"
    /// Opsview Envoy [Ton_Voon]
    public static let `opsviewEnvoyUdp`: Self = "_opsview-envoy._udp"
    /// Data Domain Replication Service [Pratik_Wadher]
    public static let `ddreplTcp`: Self = "_ddrepl._tcp"
    /// Data Domain Replication Service [Pratik_Wadher]
    public static let `ddreplUdp`: Self = "_ddrepl._udp"
    /// NetUniKeyServer [Raymond_Chaw]
    public static let `unikeyproTcp`: Self = "_unikeypro._tcp"
    /// NetUniKeyServer [Raymond_Chaw]
    public static let `unikeyproUdp`: Self = "_unikeypro._udp"
    /// NuFW decision delegation protocol 
    public static let `nufwTcp`: Self = "_nufw._tcp"
    /// NuFW decision delegation protocol 
    public static let `nufwUdp`: Self = "_nufw._udp"
    /// NuFW authentication protocol [Eric_Leblond]
    public static let `nuauthTcp`: Self = "_nuauth._tcp"
    /// NuFW authentication protocol [Eric_Leblond]
    public static let `nuauthUdp`: Self = "_nuauth._udp"
    /// FRONET message protocol [Christer_Nygren]
    public static let `fronetTcp`: Self = "_fronet._tcp"
    /// FRONET message protocol [Christer_Nygren]
    public static let `fronetUdp`: Self = "_fronet._udp"
    /// Global Maintech Stars [Harry_Goldschmitt_2]
    public static let `starsTcp`: Self = "_stars._tcp"
    /// Global Maintech Stars [Harry_Goldschmitt_2]
    public static let `starsUdp`: Self = "_stars._udp"
    /// NUTS Daemon IANA assigned this well-formed service name as a replacement for "nuts_dem". 
    public static let `nutsDemTcp`: Self = "_nuts-dem._tcp"
    /// NUTS Daemon 
    public static let `nuts_demTcp`: Self = "_nuts_dem._tcp"
    /// NUTS Daemon IANA assigned this well-formed service name as a replacement for "nuts_dem". 
    public static let `nutsDemUdp`: Self = "_nuts-dem._udp"
    /// NUTS Daemon 
    public static let `nuts_demUdp`: Self = "_nuts_dem._udp"
    /// NUTS Bootp Server IANA assigned this well-formed service name as a replacement for "nuts_bootp". [Martin_Freiss_2]
    public static let `nutsBootpTcp`: Self = "_nuts-bootp._tcp"
    /// NUTS Bootp Server [Martin_Freiss_2]
    public static let `nuts_bootpTcp`: Self = "_nuts_bootp._tcp"
    /// NUTS Bootp Server IANA assigned this well-formed service name as a replacement for "nuts_bootp". [Martin_Freiss_2]
    public static let `nutsBootpUdp`: Self = "_nuts-bootp._udp"
    /// NUTS Bootp Server [Martin_Freiss_2]
    public static let `nuts_bootpUdp`: Self = "_nuts_bootp._udp"
    /// NIFTY-Serve HMI protocol [Ryuichi_Suzuki]
    public static let `niftyHmiTcp`: Self = "_nifty-hmi._tcp"
    /// NIFTY-Serve HMI protocol [Ryuichi_Suzuki]
    public static let `niftyHmiUdp`: Self = "_nifty-hmi._udp"
    /// Classic Line Database Server Attach 
    public static let `clDbAttachTcp`: Self = "_cl-db-attach._tcp"
    /// Classic Line Database Server Attach 
    public static let `clDbAttachUdp`: Self = "_cl-db-attach._udp"
    /// Classic Line Database Server Request 
    public static let `clDbRequestTcp`: Self = "_cl-db-request._tcp"
    /// Classic Line Database Server Request 
    public static let `clDbRequestUdp`: Self = "_cl-db-request._udp"
    /// Classic Line Database Server Remote [Arno_Kirmeir]
    public static let `clDbRemoteTcp`: Self = "_cl-db-remote._tcp"
    /// Classic Line Database Server Remote [Arno_Kirmeir]
    public static let `clDbRemoteUdp`: Self = "_cl-db-remote._udp"
    /// nettest [David_Borman]
    public static let `nettestTcp`: Self = "_nettest._tcp"
    /// nettest [David_Borman]
    public static let `nettestUdp`: Self = "_nettest._udp"
    /// Imperfect Networks Server [Dinkar_Chivaluri_2]
    public static let `thrtxTcp`: Self = "_thrtx._tcp"
    /// Imperfect Networks Server [Dinkar_Chivaluri_2]
    public static let `thrtxUdp`: Self = "_thrtx._udp"
    /// Cedros Fraud Detection System IANA assigned this well-formed service name as a replacement for "cedros_fds". [Markus_Michels_3]
    public static let `cedrosFdsTcp`: Self = "_cedros-fds._tcp"
    /// Cedros Fraud Detection System [Markus_Michels_3]
    public static let `cedros_fdsTcp`: Self = "_cedros_fds._tcp"
    /// Cedros Fraud Detection System IANA assigned this well-formed service name as a replacement for "cedros_fds". [Markus_Michels_3]
    public static let `cedrosFdsUdp`: Self = "_cedros-fds._udp"
    /// Cedros Fraud Detection System [Markus_Michels_3]
    public static let `cedros_fdsUdp`: Self = "_cedros_fds._udp"
    /// Workflow Server 
    public static let `oirtgsvcTcp`: Self = "_oirtgsvc._tcp"
    /// Workflow Server 
    public static let `oirtgsvcUdp`: Self = "_oirtgsvc._udp"
    /// Document Server 
    public static let `oidocsvcTcp`: Self = "_oidocsvc._tcp"
    /// Document Server 
    public static let `oidocsvcUdp`: Self = "_oidocsvc._udp"
    /// Document Replication [Norman_Brie]
    public static let `oidsrTcp`: Self = "_oidsr._tcp"
    /// Document Replication [Norman_Brie]
    public static let `oidsrUdp`: Self = "_oidsr._udp"
    /// VVR Control [Ming_Xu]
    public static let `vvrControlTcp`: Self = "_vvr-control._tcp"
    /// VVR Control [Ming_Xu]
    public static let `vvrControlUdp`: Self = "_vvr-control._udp"
    /// TGCConnect Beacon [Brian_Becker]
    public static let `tgcconnectTcp`: Self = "_tgcconnect._tcp"
    /// TGCConnect Beacon [Brian_Becker]
    public static let `tgcconnectUdp`: Self = "_tgcconnect._udp"
    /// Multum Service Manager [Scott_Mager]
    public static let `vrxpservmanTcp`: Self = "_vrxpservman._tcp"
    /// Multum Service Manager [Scott_Mager]
    public static let `vrxpservmanUdp`: Self = "_vrxpservman._udp"
    /// HHB Handheld Client [Steven_G_Loughner]
    public static let `hhbHandheldTcp`: Self = "_hhb-handheld._tcp"
    /// HHB Handheld Client [Steven_G_Loughner]
    public static let `hhbHandheldUdp`: Self = "_hhb-handheld._udp"
    /// A10 GSLB Service [John_Chiong]
    public static let `agslbTcp`: Self = "_agslb._tcp"
    /// A10 GSLB Service [John_Chiong]
    public static let `agslbUdp`: Self = "_agslb._udp"
    /// PowerAlert Network Shutdown Agent [Mike_Delgrosso_2]
    public static let `PowerAlertNsaTcp`: Self = "_PowerAlert-nsa._tcp"
    /// PowerAlert Network Shutdown Agent [Mike_Delgrosso_2]
    public static let `PowerAlertNsaUdp`: Self = "_PowerAlert-nsa._udp"
    /// Men & Mice Remote Control IANA assigned this well-formed service name as a replacement for "menandmice_noh". [Eggert_Thorlacius]
    public static let `menandmiceNohTcp`: Self = "_menandmice-noh._tcp"
    /// Men & Mice Remote Control [Eggert_Thorlacius]
    public static let `menandmice_nohTcp`: Self = "_menandmice_noh._tcp"
    /// Men & Mice Remote Control IANA assigned this well-formed service name as a replacement for "menandmice_noh". [Eggert_Thorlacius]
    public static let `menandmiceNohUdp`: Self = "_menandmice-noh._udp"
    /// Men & Mice Remote Control [Eggert_Thorlacius]
    public static let `menandmice_nohUdp`: Self = "_menandmice_noh._udp"
    /// iDigTech Multiplex IANA assigned this well-formed service name as a replacement for "idig_mux". [Robin_Findley]
    public static let `idigMuxTcp`: Self = "_idig-mux._tcp"
    /// iDigTech Multiplex [Robin_Findley]
    public static let `idig_muxTcp`: Self = "_idig_mux._tcp"
    /// iDigTech Multiplex IANA assigned this well-formed service name as a replacement for "idig_mux". [Robin_Findley]
    public static let `idigMuxUdp`: Self = "_idig-mux._udp"
    /// iDigTech Multiplex [Robin_Findley]
    public static let `idig_muxUdp`: Self = "_idig_mux._udp"
    /// MBL Remote Battery Monitoring [Claudio_Procida]
    public static let `mblBattdTcp`: Self = "_mbl-battd._tcp"
    /// MBL Remote Battery Monitoring [Claudio_Procida]
    public static let `mblBattdUdp`: Self = "_mbl-battd._udp"
    /// atlinks device discovery [Scott_Griepentrog]
    public static let `atlinksTcp`: Self = "_atlinks._tcp"
    /// atlinks device discovery [Scott_Griepentrog]
    public static let `atlinksUdp`: Self = "_atlinks._udp"
    /// Bazaar version control system [Martin_Pool_2]
    public static let `bzrTcp`: Self = "_bzr._tcp"
    /// Bazaar version control system [Martin_Pool_2]
    public static let `bzrUdp`: Self = "_bzr._udp"
    /// STAT Results 
    public static let `statResultsTcp`: Self = "_stat-results._tcp"
    /// STAT Results 
    public static let `statResultsUdp`: Self = "_stat-results._udp"
    /// STAT Scanner Control 
    public static let `statScannerTcp`: Self = "_stat-scanner._tcp"
    /// STAT Scanner Control 
    public static let `statScannerUdp`: Self = "_stat-scanner._udp"
    /// STAT Command Center [Darwin_Ammala]
    public static let `statCcTcp`: Self = "_stat-cc._tcp"
    /// STAT Command Center [Darwin_Ammala]
    public static let `statCcUdp`: Self = "_stat-cc._udp"
    /// Network Security Service [Dave_Wierbowski]
    public static let `nssTcp`: Self = "_nss._tcp"
    /// Network Security Service [Dave_Wierbowski]
    public static let `nssUdp`: Self = "_nss._udp"
    /// Jini Discovery [Mark_Hodapp]
    public static let `jiniDiscoveryTcp`: Self = "_jini-discovery._tcp"
    /// Jini Discovery [Mark_Hodapp]
    public static let `jiniDiscoveryUdp`: Self = "_jini-discovery._udp"
    /// OMS Contact 
    public static let `omscontactTcp`: Self = "_omscontact._tcp"
    /// OMS Contact 
    public static let `omscontactUdp`: Self = "_omscontact._udp"
    /// OMS Topology [David_Page]
    public static let `omstopologyTcp`: Self = "_omstopology._tcp"
    /// OMS Topology [David_Page]
    public static let `omstopologyUdp`: Self = "_omstopology._udp"
    /// Silver Peak Peer Protocol [Damon_Ennis]
    public static let `silverpeakpeerTcp`: Self = "_silverpeakpeer._tcp"
    /// Silver Peak Peer Protocol [Damon_Ennis]
    public static let `silverpeakpeerUdp`: Self = "_silverpeakpeer._udp"
    /// Silver Peak Communication Protocol [Damon_Ennis]
    public static let `silverpeakcommTcp`: Self = "_silverpeakcomm._tcp"
    /// Silver Peak Communication Protocol [Damon_Ennis]
    public static let `silverpeakcommUdp`: Self = "_silverpeakcomm._udp"
    /// ArcLink over Ethernet [Dmitry_Brant]
    public static let `altcpTcp`: Self = "_altcp._tcp"
    /// ArcLink over Ethernet [Dmitry_Brant]
    public static let `altcpUdp`: Self = "_altcp._udp"
    /// Joost Peer to Peer Protocol [Colm_MacCarthaigh]
    public static let `joostTcp`: Self = "_joost._tcp"
    /// Joost Peer to Peer Protocol [Colm_MacCarthaigh]
    public static let `joostUdp`: Self = "_joost._udp"
    /// DeskDirect Global Network [Laurie_Charlwood]
    public static let `ddgnTcp`: Self = "_ddgn._tcp"
    /// DeskDirect Global Network [Laurie_Charlwood]
    public static let `ddgnUdp`: Self = "_ddgn._udp"
    /// PrintSoft License Server [David_Weisgerber]
    public static let `pslicserTcp`: Self = "_pslicser._tcp"
    /// PrintSoft License Server [David_Weisgerber]
    public static let `pslicserUdp`: Self = "_pslicser._udp"
    /// Automation Drive Interface Transport [Paul_Suhler]
    public static let `iadtTcp`: Self = "_iadt._tcp"
    /// Internet ADT Discovery Protocol [Paul_A_Suhler]
    public static let `iadtDiscUdp`: Self = "_iadt-disc._udp"
    /// SMPTE Content Synchonization Protocol [Michael_Karagosian]
    public static let `dCinemaCspTcp`: Self = "_d-cinema-csp._tcp"
    /// Maxlogic Supervisor Communication [Taha_Paksu]
    public static let `mlSvnetTcp`: Self = "_ml-svnet._tcp"
    /// PC over IP [Teradici]
    public static let `pcoipTcp`: Self = "_pcoip._tcp"
    /// PC over IP [Teradici]
    public static let `pcoipUdp`: Self = "_pcoip._udp"
    /// MMA Device Discovery [MIDI_Manufacturers_Assoc_Inc]
    public static let `mmaDiscoveryUdp`: Self = "_mma-discovery._udp"
    /// StorMagic Cluster Services [Chris_Farey]
    public static let `smclusterTcp`: Self = "_smcluster._tcp"
    /// StorMagic Discovery [StorMagic_Ltd]
    public static let `smDiscUdp`: Self = "_sm-disc._udp"
    /// Brocade Cluster Communication Protocol [Norival_Figueira]
    public static let `bccpTcp`: Self = "_bccp._tcp"
    /// Translattice Cluster IPC Proxy [Michael_Lyle]
    public static let `tlIpcproxyTcp`: Self = "_tl-ipcproxy._tcp"
    /// Wello P2P pubsub service [Christian_Westbrook]
    public static let `welloTcp`: Self = "_wello._tcp"
    /// Wello P2P pubsub service [Christian_Westbrook]
    public static let `welloUdp`: Self = "_wello._udp"
    /// StorMan [Werner_Guertler]
    public static let `stormanTcp`: Self = "_storman._tcp"
    /// StorMan [Werner_Guertler]
    public static let `stormanUdp`: Self = "_storman._udp"
    /// Maxum Services [Greg_Stine]
    public static let `MaxumSPTcp`: Self = "_MaxumSP._tcp"
    /// Maxum Services [Greg_Stine]
    public static let `MaxumSPUdp`: Self = "_MaxumSP._udp"
    /// HTTPX [Paul_McGough]
    public static let `httpxTcp`: Self = "_httpx._tcp"
    /// HTTPX [Paul_McGough]
    public static let `httpxUdp`: Self = "_httpx._udp"
    /// MacBak [Wes_Peters]
    public static let `macbakTcp`: Self = "_macbak._tcp"
    /// MacBak [Wes_Peters]
    public static let `macbakUdp`: Self = "_macbak._udp"
    /// Production Company Pro TCP Service [Ben_McNeill]
    public static let `pcptcpserviceTcp`: Self = "_pcptcpservice._tcp"
    /// Production Company Pro TCP Service [Ben_McNeill]
    public static let `pcptcpserviceUdp`: Self = "_pcptcpservice._udp"
    /// CyborgNet communications protocol [Gareth_Nelson]
    public static let `cyborgnetTcp`: Self = "_cyborgnet._tcp"
    /// CyborgNet communications protocol [Gareth_Nelson]
    public static let `cyborgnetUdp`: Self = "_cyborgnet._udp"
    /// UNIVERSE SUITE MESSAGE SERVICE IANA assigned this well-formed service name as a replacement for "universe_suite". [Gary_ANDREWS]
    public static let `universeSuiteTcp`: Self = "_universe-suite._tcp"
    /// UNIVERSE SUITE MESSAGE SERVICE [Gary_ANDREWS]
    public static let `universe_suiteTcp`: Self = "_universe_suite._tcp"
    /// UNIVERSE SUITE MESSAGE SERVICE IANA assigned this well-formed service name as a replacement for "universe_suite". [Gary_ANDREWS]
    public static let `universeSuiteUdp`: Self = "_universe-suite._udp"
    /// UNIVERSE SUITE MESSAGE SERVICE [Gary_ANDREWS]
    public static let `universe_suiteUdp`: Self = "_universe_suite._udp"
    /// Woven Control Plane Protocol [Christopher_LILJENST]
    public static let `wcppTcp`: Self = "_wcpp._tcp"
    /// Woven Control Plane Protocol [Christopher_LILJENST]
    public static let `wcppUdp`: Self = "_wcpp._udp"
    /// Box Backup Store Service [Chris_Wilson]
    public static let `boxbackupstoreTcp`: Self = "_boxbackupstore._tcp"
    /// Cascade Proxy IANA assigned this well-formed service name as a replacement for "csc_proxy". [Matt_Craighead]
    public static let `cscProxyTcp`: Self = "_csc-proxy._tcp"
    /// Cascade Proxy [Matt_Craighead]
    public static let `csc_proxyTcp`: Self = "_csc_proxy._tcp"
    /// Vatata Peer to Peer Protocol [Song_Jian]
    public static let `vatataTcp`: Self = "_vatata._tcp"
    /// Vatata Peer to Peer Protocol [Song_Jian]
    public static let `vatataUdp`: Self = "_vatata._udp"
    /// Path Computation Element Communication Protocol 
    public static let `pcepTcp`: Self = "_pcep._tcp"
    /// ManageSieve Protocol 
    public static let `sieveTcp`: Self = "_sieve._tcp"
    /// Dual Stack MIPv6 NAT Traversal 
    public static let `dsmipv6Udp`: Self = "_dsmipv6._udp"
    /// Azeti Agent Service [Uwe_Holz]
    public static let `azetiTcp`: Self = "_azeti._tcp"
    /// azeti blinddate [Michael_Werski]
    public static let `azetiBdUdp`: Self = "_azeti-bd._udp"
    /// PxPlus remote file srvr [Mike_King]
    public static let `pvxplusioTcp`: Self = "_pvxplusio._tcp"
    /// Security Protocol and Data Model [Intel_Corporation]
    public static let `spdmTcp`: Self = "_spdm._tcp"
    /// AWS protocol for cloud remoting solution [Amazon.com_Services_LLC]
    public static let `awsWspTcp`: Self = "_aws-wsp._tcp"
    /// AWS protocol for cloud remoting solution [Amazon.com_Services_LLC]
    public static let `awsWspUdp`: Self = "_aws-wsp._udp"
    /// AWS protocol for cloud remoting solution [Amazon.com_Services_LLC]
    public static let `awsWspSctp`: Self = "_aws-wsp._sctp"
    /// AWS protocol for cloud remoting solution [Amazon.com_Services_LLC]
    public static let `awsWspDccp`: Self = "_aws-wsp._dccp"
    /// Harman HControl Protocol [Harman_International_Industries_Inc]
    public static let `hctlTcp`: Self = "_hctl._tcp"
    /// Harman HControl Protocol [Harman_International_Industries_Inc]
    public static let `hctlUdp`: Self = "_hctl._udp"
    /// EIMS ADMIN [Glenn_Anderson]
    public static let `eimsAdminTcp`: Self = "_eims-admin._tcp"
    /// EIMS ADMIN [Glenn_Anderson]
    public static let `eimsAdminUdp`: Self = "_eims-admin._udp"
    /// Corel CCam [Jason_Aiken]
    public static let `corelccamTcp`: Self = "_corelccam._tcp"
    /// Corel CCam [Jason_Aiken]
    public static let `corelccamUdp`: Self = "_corelccam._udp"
    /// Diagnostic Data 
    public static let `dDataTcp`: Self = "_d-data._tcp"
    /// Diagnostic Data 
    public static let `dDataUdp`: Self = "_d-data._udp"
    /// Diagnostic Data Control [Jon_March]
    public static let `dDataControlTcp`: Self = "_d-data-control._tcp"
    /// Diagnostic Data Control [Jon_March]
    public static let `dDataControlUdp`: Self = "_d-data-control._udp"
    /// Simple Railroad Command Protocol [Matthias_Trute]
    public static let `srcpTcp`: Self = "_srcp._tcp"
    /// Simple Railroad Command Protocol [Matthias_Trute]
    public static let `srcpUdp`: Self = "_srcp._udp"
    /// One-Wire Filesystem Server [Paul_Alfille]
    public static let `owserverTcp`: Self = "_owserver._tcp"
    /// One-Wire Filesystem Server [Paul_Alfille]
    public static let `owserverUdp`: Self = "_owserver._udp"
    /// better approach to mobile ad-hoc networking [Simon_Wunderlich]
    public static let `batmanTcp`: Self = "_batman._tcp"
    /// better approach to mobile ad-hoc networking [Simon_Wunderlich]
    public static let `batmanUdp`: Self = "_batman._udp"
    /// Hellgate London [David_Berk]
    public static let `pinghglTcp`: Self = "_pinghgl._tcp"
    /// Hellgate London [David_Berk]
    public static let `pinghglUdp`: Self = "_pinghgl._udp"
    /// TrueConf Videoconference Service [Dmitry_Odintsov]
    public static let `trueconfTcp`: Self = "_trueconf._tcp"
    /// TrueConf Videoconference Service [Dmitry_Odintsov]
    public static let `trueconfUdp`: Self = "_trueconf._udp"
    /// CompX-LockView [John_Payson]
    public static let `compxLockviewTcp`: Self = "_compx-lockview._tcp"
    /// CompX-LockView [John_Payson]
    public static let `compxLockviewUdp`: Self = "_compx-lockview._udp"
    /// Exsequi Appliance Discovery [Angelo_Masci]
    public static let `dserverTcp`: Self = "_dserver._tcp"
    /// Exsequi Appliance Discovery [Angelo_Masci]
    public static let `dserverUdp`: Self = "_dserver._udp"
    /// Mir-RT exchange service [Sylvain_Robert]
    public static let `mirrtexTcp`: Self = "_mirrtex._tcp"
    /// Mir-RT exchange service [Sylvain_Robert]
    public static let `mirrtexUdp`: Self = "_mirrtex._udp"
    /// P6R Secure Server Management Console [Jim_Susoy]
    public static let `p6ssmcTcp`: Self = "_p6ssmc._tcp"
    /// Parascale Membership Manager [John_Muth]
    public static let `psclMgtTcp`: Self = "_pscl-mgt._tcp"
    /// PERRLA User Services [Cliff_Batson]
    public static let `perrlaTcp`: Self = "_perrla._tcp"
    /// ChoiceView Agent [Radish_Systems]
    public static let `choiceviewAgtTcp`: Self = "_choiceview-agt._tcp"
    /// ChoiceView Client [Radish_Systems]
    public static let `choiceviewCltTcp`: Self = "_choiceview-clt._tcp"
    /// OpenTelemetry Protocol [OpenTelemetry]
    public static let `opentelemetryTcp`: Self = "_opentelemetry._tcp"
    /// Fox SkyTale encrypted communication [Fox_Crypto_BV]
    public static let `foxSkytaleTcp`: Self = "_fox-skytale._tcp"
    /// Fox SkyTale encrypted communication [Fox_Crypto_BV]
    public static let `foxSkytaleUdp`: Self = "_fox-skytale._udp"
    /// FDT Remote Categorization Protocol [Russell_P_Holsclaw]
    public static let `fdtRcatpTcp`: Self = "_fdt-rcatp._tcp"
    /// FDT Remote Categorization Protocol [Russell_P_Holsclaw]
    public static let `fdtRcatpUdp`: Self = "_fdt-rcatp._udp"
    /// Remote Who Is [Mark_Kosters]
    public static let `rwhoisTcp`: Self = "_rwhois._tcp"
    /// Remote Who Is [Mark_Kosters]
    public static let `rwhoisUdp`: Self = "_rwhois._udp"
    /// TRIM Event Service 
    public static let `trimEventTcp`: Self = "_trim-event._tcp"
    /// TRIM Event Service 
    public static let `trimEventUdp`: Self = "_trim-event._udp"
    /// TRIM ICE Service [Siva_Poobalasingam_2]
    public static let `trimIceTcp`: Self = "_trim-ice._tcp"
    /// TRIM ICE Service [Siva_Poobalasingam_2]
    public static let `trimIceUdp`: Self = "_trim-ice._udp"
    /// Cadcorp GeognoSIS Administrator [Computer_Aided_Development_Corporation_Ltd]
    public static let `geognosisadminTcp`: Self = "_geognosisadmin._tcp"
    /// Cadcorp GeognoSIS Administrator [Computer_Aided_Development_Corporation_Ltd]
    public static let `geognosismanUdp`: Self = "_geognosisman._udp"
    /// Cadcorp GeognoSIS [Martin_Daly]
    public static let `geognosisTcp`: Self = "_geognosis._tcp"
    /// Cadcorp GeognoSIS [Martin_Daly]
    public static let `geognosisUdp`: Self = "_geognosis._udp"
    /// Jaxer Web Protocol [Uri_Sarid]
    public static let `jaxerWebTcp`: Self = "_jaxer-web._tcp"
    /// Jaxer Web Protocol [Uri_Sarid]
    public static let `jaxerWebUdp`: Self = "_jaxer-web._udp"
    /// Jaxer Manager Command Protocol [Uri_Sarid]
    public static let `jaxerManagerTcp`: Self = "_jaxer-manager._tcp"
    /// Jaxer Manager Command Protocol [Uri_Sarid]
    public static let `jaxerManagerUdp`: Self = "_jaxer-manager._udp"
    /// PubliQare Distributed Environment Synchronisation Engine [Tom_Maaswinkel]
    public static let `publiqareSyncTcp`: Self = "_publiqare-sync._tcp"
    /// DEY Storage Administration REST API [DEY_Storage_Systems_Inc]
    public static let `deySapiTcp`: Self = "_dey-sapi._tcp"
    /// ktickets REST API for event management and ticketing systems (embedded POS devices) [KeyTicket_Solutions]
    public static let `kticketsRestTcp`: Self = "_ktickets-rest._tcp"
    /// Getty Images FOCUS service [Matthew_Margolis]
    public static let `gettyFocusTcp`: Self = "_getty-focus._tcp"
    /// ArrowHead Service Protocol (AHSP) [QuantuMatriX_Technologies]
    public static let `ahspTcp`: Self = "_ahsp._tcp"
    /// ArrowHead Service Protocol (AHSP) [QuantuMatriX_Technologies]
    public static let `ahspUdp`: Self = "_ahsp._udp"
    /// ArrowHead Service Protocol (AHSP) [QuantuMatriX_Technologies]
    public static let `ahspSctp`: Self = "_ahsp._sctp"
    /// NETCONF Call Home (SSH) [IESG]
    public static let `netconfChSshTcp`: Self = "_netconf-ch-ssh._tcp"
    /// NETCONF Call Home (TLS) [IESG]
    public static let `netconfChTlsTcp`: Self = "_netconf-ch-tls._tcp"
    /// RESTCONF Call Home (TLS) [IESG]
    public static let `restconfChTlsTcp`: Self = "_restconf-ch-tls._tcp"
    /// Gaia Connector Protocol [Philippe_Detournay]
    public static let `gaiaTcp`: Self = "_gaia._tcp"
    /// Gaia Connector Protocol [Philippe_Detournay]
    public static let `gaiaUdp`: Self = "_gaia._udp"
    /// LISP Data Packets [IESG]
    public static let `lispDataUdp`: Self = "_lisp-data._udp"
    /// LISP Control Packets [IETF]
    public static let `lispControlUdp`: Self = "_lisp-control._udp"
    /// UNICALL [James_Powell_2]
    public static let `unicallTcp`: Self = "_unicall._tcp"
    /// UNICALL [James_Powell_2]
    public static let `unicallUdp`: Self = "_unicall._udp"
    /// VinaInstall [Jay_Slupesky]
    public static let `vinainstallTcp`: Self = "_vinainstall._tcp"
    /// VinaInstall [Jay_Slupesky]
    public static let `vinainstallUdp`: Self = "_vinainstall._udp"
    /// Macro 4 Network AS [Paul_Wren]
    public static let `m4NetworkAsTcp`: Self = "_m4-network-as._tcp"
    /// Macro 4 Network AS [Paul_Wren]
    public static let `m4NetworkAsUdp`: Self = "_m4-network-as._udp"
    /// ELAN LM [Paul_Ballew]
    public static let `elanlmTcp`: Self = "_elanlm._tcp"
    /// ELAN LM [Paul_Ballew]
    public static let `elanlmUdp`: Self = "_elanlm._udp"
    /// LAN Surveyor [Michael_Swan]
    public static let `lansurveyorTcp`: Self = "_lansurveyor._tcp"
    /// LAN Surveyor [Michael_Swan]
    public static let `lansurveyorUdp`: Self = "_lansurveyor._udp"
    /// ITOSE [Michael_Haeuptle]
    public static let `itoseTcp`: Self = "_itose._tcp"
    /// ITOSE [Michael_Haeuptle]
    public static let `itoseUdp`: Self = "_itose._udp"
    /// File System Port Map [Ron_Minnich_2]
    public static let `fsportmapTcp`: Self = "_fsportmap._tcp"
    /// File System Port Map [Ron_Minnich_2]
    public static let `fsportmapUdp`: Self = "_fsportmap._udp"
    /// Net Device [Glenn_Peterson]
    public static let `netDeviceTcp`: Self = "_net-device._tcp"
    /// Net Device [Glenn_Peterson]
    public static let `netDeviceUdp`: Self = "_net-device._udp"
    /// PLCY Net Services [J_J_Ekstrom]
    public static let `plcyNetSvcsTcp`: Self = "_plcy-net-svcs._tcp"
    /// PLCY Net Services [J_J_Ekstrom]
    public static let `plcyNetSvcsUdp`: Self = "_plcy-net-svcs._udp"
    /// Projector Link [Mitsuo_Kodama]
    public static let `pjlinkTcp`: Self = "_pjlink._tcp"
    /// Projector Link [Mitsuo_Kodama]
    public static let `pjlinkUdp`: Self = "_pjlink._udp"
    /// F5 iQuery [Tom_Kee]
    public static let `f5IqueryTcp`: Self = "_f5-iquery._tcp"
    /// F5 iQuery [Tom_Kee]
    public static let `f5IqueryUdp`: Self = "_f5-iquery._udp"
    /// QSNet Transmitter 
    public static let `qsnetTransTcp`: Self = "_qsnet-trans._tcp"
    /// QSNet Transmitter 
    public static let `qsnetTransUdp`: Self = "_qsnet-trans._udp"
    /// QSNet Workstation 
    public static let `qsnetWorkstTcp`: Self = "_qsnet-workst._tcp"
    /// QSNet Workstation 
    public static let `qsnetWorkstUdp`: Self = "_qsnet-workst._udp"
    /// QSNet Assistant 
    public static let `qsnetAssistTcp`: Self = "_qsnet-assist._tcp"
    /// QSNet Assistant 
    public static let `qsnetAssistUdp`: Self = "_qsnet-assist._udp"
    /// QSNet Conductor 
    public static let `qsnetCondTcp`: Self = "_qsnet-cond._tcp"
    /// QSNet Conductor 
    public static let `qsnetCondUdp`: Self = "_qsnet-cond._udp"
    /// QSNet Nucleus [Neer_Kleinman]
    public static let `qsnetNuclTcp`: Self = "_qsnet-nucl._tcp"
    /// QSNet Nucleus [Neer_Kleinman]
    public static let `qsnetNuclUdp`: Self = "_qsnet-nucl._udp"
    /// OMA BCAST Long-Term Key Messages [Frank_Hartung]
    public static let `omabcastltkmTcp`: Self = "_omabcastltkm._tcp"
    /// OMA BCAST Long-Term Key Messages [Frank_Hartung]
    public static let `omabcastltkmUdp`: Self = "_omabcastltkm._udp"
    /// Matrix VNet Communication Protocol IANA assigned this well-formed service name as a replacement for "matrix_vnet". [Rehan_Mahmood]
    public static let `matrixVnetTcp`: Self = "_matrix-vnet._tcp"
    /// Matrix VNet Communication Protocol [Rehan_Mahmood]
    public static let `matrix_vnetTcp`: Self = "_matrix_vnet._tcp"
    /// NavCom Discovery and Control Port [Yilei_Jia]
    public static let `nacnlUdp`: Self = "_nacnl._udp"
    /// AFORE vNode Discovery protocol [Michael_Richardson]
    public static let `aforeVdpDiscUdp`: Self = "_afore-vdp-disc._udp"
    /// ShadowStream System [StorageCraft_Technology_Corporation]
    public static let `shadowstreamUdp`: Self = "_shadowstream._udp"
    /// WeatherBrief Direct [Kim_Alan_Waggoner]
    public static let `wxbriefTcp`: Self = "_wxbrief._tcp"
    /// WeatherBrief Direct [Kim_Alan_Waggoner]
    public static let `wxbriefUdp`: Self = "_wxbrief._udp"
    /// Erlang Port Mapper Daemon [Erlang]
    public static let `epmdTcp`: Self = "_epmd._tcp"
    /// Erlang Port Mapper Daemon [Erlang]
    public static let `epmdUdp`: Self = "_epmd._udp"
    /// ELPRO V2 Protocol Tunnel IANA assigned this well-formed service name as a replacement for "elpro_tunnel". [Harry_Courtice]
    public static let `elproTunnelTcp`: Self = "_elpro-tunnel._tcp"
    /// ELPRO V2 Protocol Tunnel [Harry_Courtice]
    public static let `elpro_tunnelTcp`: Self = "_elpro_tunnel._tcp"
    /// ELPRO V2 Protocol Tunnel IANA assigned this well-formed service name as a replacement for "elpro_tunnel". [Harry_Courtice]
    public static let `elproTunnelUdp`: Self = "_elpro-tunnel._udp"
    /// ELPRO V2 Protocol Tunnel [Harry_Courtice]
    public static let `elpro_tunnelUdp`: Self = "_elpro_tunnel._udp"
    /// LAN2CAN Control [Phil_Tolson]
    public static let `l2cControlTcp`: Self = "_l2c-control._tcp"
    /// LAN2CAN Discovery [Phil_Tolson]
    public static let `l2cDiscUdp`: Self = "_l2c-disc._udp"
    /// LAN2CAN Data [Phil_Tolson]
    public static let `l2cDataTcp`: Self = "_l2c-data._tcp"
    /// LAN2CAN Data [Phil_Tolson]
    public static let `l2cDataUdp`: Self = "_l2c-data._udp"
    /// Remote Authenticated Command Service [Russ_Allbery]
    public static let `remctlTcp`: Self = "_remctl._tcp"
    /// Remote Authenticated Command Service [Russ_Allbery]
    public static let `remctlUdp`: Self = "_remctl._udp"
    /// PSI Push-to-Talk Protocol [Frank_B]
    public static let `psiPttTcp`: Self = "_psi-ptt._tcp"
    /// Toltec EasyShare [Joon_Radley_2]
    public static let `toltecesTcp`: Self = "_tolteces._tcp"
    /// Toltec EasyShare [Joon_Radley_2]
    public static let `toltecesUdp`: Self = "_tolteces._udp"
    /// BioAPI Interworking [Jean_Paul_Lemaire]
    public static let `bipTcp`: Self = "_bip._tcp"
    /// BioAPI Interworking [Jean_Paul_Lemaire]
    public static let `bipUdp`: Self = "_bip._udp"
    /// Cambridge Pixel SPx Server 
    public static let `cpSpxsvrTcp`: Self = "_cp-spxsvr._tcp"
    /// Cambridge Pixel SPx Server 
    public static let `cpSpxsvrUdp`: Self = "_cp-spxsvr._udp"
    /// Cambridge Pixel SPx Display [Richard_Warren]
    public static let `cpSpxdpyTcp`: Self = "_cp-spxdpy._tcp"
    /// Cambridge Pixel SPx Display [Richard_Warren]
    public static let `cpSpxdpyUdp`: Self = "_cp-spxdpy._udp"
    /// CTDB [Ronnie_Sahlberg]
    public static let `ctdbTcp`: Self = "_ctdb._tcp"
    /// CTDB [Ronnie_Sahlberg]
    public static let `ctdbUdp`: Self = "_ctdb._udp"
    /// Xandros Community Management Service [Stephen_M_Webb]
    public static let `xandrosCmsTcp`: Self = "_xandros-cms._tcp"
    /// Xandros Community Management Service [Stephen_M_Webb]
    public static let `xandrosCmsUdp`: Self = "_xandros-cms._udp"
    /// Physical Access Control [Scott_Guthery_2]
    public static let `wiegandTcp`: Self = "_wiegand._tcp"
    /// Physical Access Control [Scott_Guthery_2]
    public static let `wiegandUdp`: Self = "_wiegand._udp"
    /// American Printware IMServer Protocol [Lech_Lakomy]
    public static let `apwiImserverTcp`: Self = "_apwi-imserver._tcp"
    /// American Printware RXServer Protocol [Lech_Lakomy]
    public static let `apwiRxserverTcp`: Self = "_apwi-rxserver._tcp"
    /// American Printware RXSpooler Protocol [Lech_Lakomy]
    public static let `apwiRxspoolerTcp`: Self = "_apwi-rxspooler._tcp"
    /// American Printware Discovery [Lech_Lakomy]
    public static let `apwiDiscUdp`: Self = "_apwi-disc._udp"
    /// OmniVision communication for Virtual environments [Vacquier_Serge]
    public static let `omnivisionesxTcp`: Self = "_omnivisionesx._tcp"
    /// OmniVision communication for Virtual environments [Vacquier_Serge]
    public static let `omnivisionesxUdp`: Self = "_omnivisionesx._udp"
    /// Fly Object Space [Nigel_Warren]
    public static let `flyTcp`: Self = "_fly._tcp"
    /// ASIGRA Services [David_Farajun]
    public static let `dsSrvTcp`: Self = "_ds-srv._tcp"
    /// ASIGRA Services [David_Farajun]
    public static let `dsSrvUdp`: Self = "_ds-srv._udp"
    /// ASIGRA Televaulting DS-System Service 
    public static let `dsSrvrTcp`: Self = "_ds-srvr._tcp"
    /// ASIGRA Televaulting DS-System Service 
    public static let `dsSrvrUdp`: Self = "_ds-srvr._udp"
    /// ASIGRA Televaulting DS-Client Service 
    public static let `dsClntTcp`: Self = "_ds-clnt._tcp"
    /// ASIGRA Televaulting DS-Client Service 
    public static let `dsClntUdp`: Self = "_ds-clnt._udp"
    /// ASIGRA Televaulting DS-Client Monitoring/Management 
    public static let `dsUserTcp`: Self = "_ds-user._tcp"
    /// ASIGRA Televaulting DS-Client Monitoring/Management 
    public static let `dsUserUdp`: Self = "_ds-user._udp"
    /// ASIGRA Televaulting DS-System Monitoring/Management 
    public static let `dsAdminTcp`: Self = "_ds-admin._tcp"
    /// ASIGRA Televaulting DS-System Monitoring/Management 
    public static let `dsAdminUdp`: Self = "_ds-admin._udp"
    /// ASIGRA Televaulting Message Level Restore service 
    public static let `dsMailTcp`: Self = "_ds-mail._tcp"
    /// ASIGRA Televaulting Message Level Restore service 
    public static let `dsMailUdp`: Self = "_ds-mail._udp"
    /// ASIGRA Televaulting DS-Sleeper Service [Andrei_Litvinn]
    public static let `dsSlpTcp`: Self = "_ds-slp._tcp"
    /// ASIGRA Televaulting DS-Sleeper Service [Andrei_Litvinn]
    public static let `dsSlpUdp`: Self = "_ds-slp._udp"
    /// Network Access Control Agent [ITGroup]
    public static let `nacagentTcp`: Self = "_nacagent._tcp"
    /// SLS Technology Control Centre [Steven_Sweeting]
    public static let `slsccTcp`: Self = "_slscc._tcp"
    /// Net-Cabinet comunication [Ian_Manning_2]
    public static let `netcabinetComTcp`: Self = "_netcabinet-com._tcp"
    /// RIB iTWO Application Server [Kristean_Heisler_2]
    public static let `itwoServerTcp`: Self = "_itwo-server._tcp"
    /// Found Messaging Protocol [Found_Software]
    public static let `foundTcp`: Self = "_found._tcp"
    /// SmallChat [Valentino_Giudice]
    public static let `smallchatUdp`: Self = "_smallchat._udp"
    /// AVI Systems NMS [AVI_Systems]
    public static let `aviNmsTcp`: Self = "_avi-nms._tcp"
    /// AVI Systems NMS [AVI_Systems]
    public static let `aviNmsDiscUdp`: Self = "_avi-nms-disc._udp"
    /// Updog Monitoring and Status Framework [Egon_Technologies_LLC]
    public static let `updogTcp`: Self = "_updog._tcp"
    /// Brocade Virtual Router Request [Brocade_Communications_Systems]
    public static let `brcdVrReqTcp`: Self = "_brcd-vr-req._tcp"
    /// PJJ Media Player [PJJ_Productions_Inc]
    public static let `pjjPlayerTcp`: Self = "_pjj-player._tcp"
    /// PJJ Media Player discovery [PJJ_Productions_Inc]
    public static let `pjjPlayerDiscUdp`: Self = "_pjj-player-disc._udp"
    /// Workflow Director Communication [WfDir]
    public static let `workflowdirTcp`: Self = "_workflowdir._tcp"
    /// AXYS communication protocol [Duran_Audio_B.V.]
    public static let `axysbridgeUdp`: Self = "_axysbridge._udp"
    /// Colnod Binary Protocol [Colsys_s.r.o.]
    public static let `cbpTcp`: Self = "_cbp._tcp"
    /// NVM Express over Fabrics storage access [NVM_Express_Inc]
    public static let `nvmeTcp`: Self = "_nvme._tcp"
    /// NVM Express over Fabrics storage access [NVM_Express_Inc]
    public static let `nvmeUdp`: Self = "_nvme._udp"
    /// Multi-Platform Remote Management for Cloud Infrastructure [ScaleFT_Inc]
    public static let `scaleftTcp`: Self = "_scaleft._tcp"
    /// TSEP Installation Service Protocol [Technical_Software_Engineering_Plazotta]
    public static let `tsepispTcp`: Self = "_tsepisp._tcp"
    /// thingkit secure mesh [thingkit_inc.]
    public static let `thingkitTcp`: Self = "_thingkit._tcp"
    /// NetROCKEY6 SMART Plus Service [Feitian_Technologies]
    public static let `netrockey6Tcp`: Self = "_netrockey6._tcp"
    /// NetROCKEY6 SMART Plus Service [Feitian_Technologies]
    public static let `netrockey6Udp`: Self = "_netrockey6._udp"
    /// SMARTS Beacon Port [Eyal_Yardeni]
    public static let `beaconPort2Tcp`: Self = "_beacon-port-2._tcp"
    /// SMARTS Beacon Port [Eyal_Yardeni]
    public static let `beaconPort2Udp`: Self = "_beacon-port-2._udp"
    /// Drizzle database server [Elliot_Murphy]
    public static let `drizzleTcp`: Self = "_drizzle._tcp"
    /// OMV-Investigation Server-Client [Serge_Vacquier]
    public static let `omviserverTcp`: Self = "_omviserver._tcp"
    /// OMV Investigation Agent-Server [Serge_Vacquier]
    public static let `omviagentTcp`: Self = "_omviagent._tcp"
    /// REAL SQL Server [Marco_Bambini]
    public static let `rsqlserverTcp`: Self = "_rsqlserver._tcp"
    /// REAL SQL Server [Marco_Bambini]
    public static let `rsqlserverUdp`: Self = "_rsqlserver._udp"
    /// adWISE Pipe [Heikki_E]
    public static let `wspipeTcp`: Self = "_wspipe._tcp"
    /// L-ACOUSTICS management [L-ACOUSTICS]
    public static let `lAcousticsTcp`: Self = "_l-acoustics._tcp"
    /// L-ACOUSTICS management [L-ACOUSTICS]
    public static let `lAcousticsUdp`: Self = "_l-acoustics._udp"
    /// Versile Object Protocol [Versile_AS]
    public static let `vopTcp`: Self = "_vop._tcp"
    /// Netblox Protocol [Brian_S_Locke]
    public static let `netbloxUdp`: Self = "_netblox._udp"
    /// Saris 
    public static let `sarisTcp`: Self = "_saris._tcp"
    /// Saris 
    public static let `sarisUdp`: Self = "_saris._udp"
    /// Pharos [TeleConsult]
    public static let `pharosTcp`: Self = "_pharos._tcp"
    /// Pharos [TeleConsult]
    public static let `pharosUdp`: Self = "_pharos._udp"
    /// KRB524 [B_Clifford_Neuman]
    public static let `krb524Tcp`: Self = "_krb524._tcp"
    /// KRB524 [B_Clifford_Neuman]
    public static let `krb524Udp`: Self = "_krb524._udp"
    /// NV Video default [Ron_Frederick]
    public static let `nvVideoTcp`: Self = "_nv-video._tcp"
    /// NV Video default [Ron_Frederick]
    public static let `nvVideoUdp`: Self = "_nv-video._udp"
    /// UPNOTIFYP [Mark_Fox]
    public static let `upnotifypTcp`: Self = "_upnotifyp._tcp"
    /// UPNOTIFYP [Mark_Fox]
    public static let `upnotifypUdp`: Self = "_upnotifyp._udp"
    /// N1-FWP 
    public static let `n1FwpTcp`: Self = "_n1-fwp._tcp"
    /// N1-FWP 
    public static let `n1FwpUdp`: Self = "_n1-fwp._udp"
    /// N1-RMGMT [Lori_Tassin]
    public static let `n1RmgmtTcp`: Self = "_n1-rmgmt._tcp"
    /// N1-RMGMT [Lori_Tassin]
    public static let `n1RmgmtUdp`: Self = "_n1-rmgmt._udp"
    /// ASC Licence Manager [Casper_Stoel]
    public static let `ascSlmdTcp`: Self = "_asc-slmd._tcp"
    /// ASC Licence Manager [Casper_Stoel]
    public static let `ascSlmdUdp`: Self = "_asc-slmd._udp"
    /// PrivateWire [Uri_Resnitzky]
    public static let `privatewireTcp`: Self = "_privatewire._tcp"
    /// PrivateWire [Uri_Resnitzky]
    public static let `privatewireUdp`: Self = "_privatewire._udp"
    /// Common ASCII Messaging Protocol [Control_Technology_Inc]
    public static let `campTcp`: Self = "_camp._tcp"
    /// Common ASCII Messaging Protocol [Control_Technology_Inc]
    public static let `campUdp`: Self = "_camp._udp"
    /// CTI System Msg [Control_Technology_Inc]
    public static let `ctisystemmsgTcp`: Self = "_ctisystemmsg._tcp"
    /// CTI System Msg [Control_Technology_Inc]
    public static let `ctisystemmsgUdp`: Self = "_ctisystemmsg._udp"
    /// CTI Program Load [Control_Technology_Inc]
    public static let `ctiprogramloadTcp`: Self = "_ctiprogramload._tcp"
    /// CTI Program Load [Control_Technology_Inc]
    public static let `ctiprogramloadUdp`: Self = "_ctiprogramload._udp"
    /// NSS Alert Manager 
    public static let `nssalertmgrTcp`: Self = "_nssalertmgr._tcp"
    /// NSS Alert Manager 
    public static let `nssalertmgrUdp`: Self = "_nssalertmgr._udp"
    /// NSS Agent Manager [Jim_Hill]
    public static let `nssagentmgrTcp`: Self = "_nssagentmgr._tcp"
    /// NSS Agent Manager [Jim_Hill]
    public static let `nssagentmgrUdp`: Self = "_nssagentmgr._udp"
    /// PR Chat User 
    public static let `prchatUserTcp`: Self = "_prchat-user._tcp"
    /// PR Chat User 
    public static let `prchatUserUdp`: Self = "_prchat-user._udp"
    /// PR Chat Server 
    public static let `prchatServerTcp`: Self = "_prchat-server._tcp"
    /// PR Chat Server 
    public static let `prchatServerUdp`: Self = "_prchat-server._udp"
    /// PR Register [Donny_Gilor]
    public static let `prRegisterTcp`: Self = "_prRegister._tcp"
    /// PR Register [Donny_Gilor]
    public static let `prRegisterUdp`: Self = "_prRegister._udp"
    /// Matrix Configuration Protocol [Tim_DeBaillie]
    public static let `mcpTcp`: Self = "_mcp._tcp"
    /// Matrix Configuration Protocol [Tim_DeBaillie]
    public static let `mcpUdp`: Self = "_mcp._udp"
    /// Network Time Security Key Establishment [IESG]
    public static let `ntskeTcp`: Self = "_ntske._tcp"
    /// hpssmgmt service [David_Straw]
    public static let `hpssmgmtTcp`: Self = "_hpssmgmt._tcp"
    /// hpssmgmt service [David_Straw]
    public static let `hpssmgmtUdp`: Self = "_hpssmgmt._udp"
    /// Assyst Data Repository Service [Albert_Cester]
    public static let `assystDrTcp`: Self = "_assyst-dr._tcp"
    /// Integrated Client Message Service [Resource_Allocation]
    public static let `icmsTcp`: Self = "_icms._tcp"
    /// Integrated Client Message Service [Resource_Allocation]
    public static let `icmsUdp`: Self = "_icms._udp"
    /// Protocol for Remote Execution over TCP [Daniel_Ruppert]
    public static let `prexTcpTcp`: Self = "_prex-tcp._tcp"
    /// Apple Wide Area Connectivity Service ICE Bootstrap [Rory_McGuire]
    public static let `awacsIceTcp`: Self = "_awacs-ice._tcp"
    /// Apple Wide Area Connectivity Service ICE Bootstrap [Rory_McGuire]
    public static let `awacsIceUdp`: Self = "_awacs-ice._udp"
    /// IPsec NAT-Traversal 
    public static let `ipsecNatTTcp`: Self = "_ipsec-nat-t._tcp"
    /// IPsec NAT-Traversal 
    public static let `ipsecNatTUdp`: Self = "_ipsec-nat-t._udp"
    /// A25 (FAP-FGW) [ThreeGPP_2]
    public static let `a25FapFgwSctp`: Self = "_a25-fap-fgw._sctp"
    /// Armagetron Advanced Game Server [Manuel_Moos]
    public static let `armagetronadUdp`: Self = "_armagetronad._udp"
    /// Event Heap Server 
    public static let `ehsTcp`: Self = "_ehs._tcp"
    /// Event Heap Server 
    public static let `ehsUdp`: Self = "_ehs._udp"
    /// Event Heap Server SSL [Brad_Johanson]
    public static let `ehsSslTcp`: Self = "_ehs-ssl._tcp"
    /// Event Heap Server SSL [Brad_Johanson]
    public static let `ehsSslUdp`: Self = "_ehs-ssl._udp"
    /// WSS Security Service [Mark_Tirschwell]
    public static let `wssauthsvcTcp`: Self = "_wssauthsvc._tcp"
    /// WSS Security Service [Mark_Tirschwell]
    public static let `wssauthsvcUdp`: Self = "_wssauthsvc._udp"
    /// Software Data Exchange Gateway [Julien_VALIENTE]
    public static let `swxGateTcp`: Self = "_swx-gate._tcp"
    /// Software Data Exchange Gateway [Julien_VALIENTE]
    public static let `swxGateUdp`: Self = "_swx-gate._udp"
    /// WorldScores [Steve_Davis]
    public static let `worldscoresTcp`: Self = "_worldscores._tcp"
    /// WorldScores [Steve_Davis]
    public static let `worldscoresUdp`: Self = "_worldscores._udp"
    /// SF License Manager (Sentinel) [Thomas_Koell]
    public static let `sfLmTcp`: Self = "_sf-lm._tcp"
    /// SF License Manager (Sentinel) [Thomas_Koell]
    public static let `sfLmUdp`: Self = "_sf-lm._udp"
    /// Lanner License Manager [Les_Enstone]
    public static let `lannerLmTcp`: Self = "_lanner-lm._tcp"
    /// Lanner License Manager [Les_Enstone]
    public static let `lannerLmUdp`: Self = "_lanner-lm._udp"
    /// Synchromesh [Tom_Hawkins_2]
    public static let `synchromeshTcp`: Self = "_synchromesh._tcp"
    /// Synchromesh [Tom_Hawkins_2]
    public static let `synchromeshUdp`: Self = "_synchromesh._udp"
    /// Aegate PMR Service [Nick_Warrington]
    public static let `aegateTcp`: Self = "_aegate._tcp"
    /// Aegate PMR Service [Nick_Warrington]
    public static let `aegateUdp`: Self = "_aegate._udp"
    /// Perman I Interbase Server [Leo_Lesage]
    public static let `gdsAdppiwDbTcp`: Self = "_gds-adppiw-db._tcp"
    /// Perman I Interbase Server [Leo_Lesage]
    public static let `gdsAdppiwDbUdp`: Self = "_gds-adppiw-db._udp"
    /// MIH Services 
    public static let `ieeeMihTcp`: Self = "_ieee-mih._tcp"
    /// MIH Services 
    public static let `ieeeMihUdp`: Self = "_ieee-mih._udp"
    /// Men and Mice Monitoring [Carsten_Strotmann]
    public static let `menandmiceMonTcp`: Self = "_menandmice-mon._tcp"
    /// Men and Mice Monitoring [Carsten_Strotmann]
    public static let `menandmiceMonUdp`: Self = "_menandmice-mon._udp"
    /// ICS host services [Gordan_Vosicki]
    public static let `icshostsvcTcp`: Self = "_icshostsvc._tcp"
    /// MS FRS Replication [Kev_George]
    public static let `msfrsTcp`: Self = "_msfrs._tcp"
    /// MS FRS Replication [Kev_George]
    public static let `msfrsUdp`: Self = "_msfrs._udp"
    /// RSIP Port 
    public static let `rsipTcp`: Self = "_rsip._tcp"
    /// RSIP Port 
    public static let `rsipUdp`: Self = "_rsip._udp"
    /// DTN Bundle TCP CL Protocol [IESG]
    public static let `dtnBundleTcp`: Self = "_dtn-bundle._tcp"
    /// DTN Bundle UDP CL Protocol 
    public static let `dtnBundleUdp`: Self = "_dtn-bundle._udp"
    /// DTN Bundle DCCP CL Protocol 
    public static let `dtnBundleDccp`: Self = "_dtn-bundle._dccp"
    /// Marathon everRun Quorum Service Server [David_Schwartz_2]
    public static let `mtcevrunqssUdp`: Self = "_mtcevrunqss._udp"
    /// Marathon everRun Quorum Service Manager [David_Schwartz_2]
    public static let `mtcevrunqmanUdp`: Self = "_mtcevrunqman._udp"
    /// HylaFAX [Lee_Howard]
    public static let `hylafaxTcp`: Self = "_hylafax._tcp"
    /// HylaFAX [Lee_Howard]
    public static let `hylafaxUdp`: Self = "_hylafax._udp"
    /// Amahi Anywhere [Amahi]
    public static let `amahiAnywhereTcp`: Self = "_amahi-anywhere._tcp"
    /// Kids Watch Time Control Service [Larry_Zarou]
    public static let `kwtcTcp`: Self = "_kwtc._tcp"
    /// Kids Watch Time Control Service [Larry_Zarou]
    public static let `kwtcUdp`: Self = "_kwtc._udp"
    /// TRAM [Joe_Wesley]
    public static let `tramTcp`: Self = "_tram._tcp"
    /// TRAM [Joe_Wesley]
    public static let `tramUdp`: Self = "_tram._udp"
    /// BMC Reporting [Portnoy_Boxman]
    public static let `bmcReportingTcp`: Self = "_bmc-reporting._tcp"
    /// BMC Reporting [Portnoy_Boxman]
    public static let `bmcReportingUdp`: Self = "_bmc-reporting._udp"
    /// Inter-Asterisk eXchange [Benjamin_Kowarsch]
    public static let `iaxTcp`: Self = "_iax._tcp"
    /// Inter-Asterisk eXchange [Benjamin_Kowarsch]
    public static let `iaxUdp`: Self = "_iax._udp"
    /// Service to distribute and update within a site deployment information for Oracle Communications Suite [Oracle_3]
    public static let `deploymentmapTcp`: Self = "_deploymentmap._tcp"
    /// A port for communication between a server and client for a custom backup system [CardiffTec]
    public static let `cardifftecBackTcp`: Self = "_cardifftec-back._tcp"
    /// RID over HTTP/TLS [IESG]
    public static let `ridTcp`: Self = "_rid._tcp"
    /// HRPD L3T (AT-AN) [Avi_Lior]
    public static let `l3tAtAnTcp`: Self = "_l3t-at-an._tcp"
    /// HRPD L3T (AT-AN) [Avi_Lior]
    public static let `l3tAtAnUdp`: Self = "_l3t-at-an._udp"
    /// HRPD-ITH (AT-AN) [David_Ott]
    public static let `hrpdIthAtAnUdp`: Self = "_hrpd-ith-at-an._udp"
    /// IPT (ANRI-ANRI) 
    public static let `iptAnriAnriTcp`: Self = "_ipt-anri-anri._tcp"
    /// IPT (ANRI-ANRI) 
    public static let `iptAnriAnriUdp`: Self = "_ipt-anri-anri._udp"
    /// IAS-Session (ANRI-ANRI) 
    public static let `iasSessionTcp`: Self = "_ias-session._tcp"
    /// IAS-Session (ANRI-ANRI) 
    public static let `iasSessionUdp`: Self = "_ias-session._udp"
    /// IAS-Paging (ANRI-ANRI) 
    public static let `iasPagingTcp`: Self = "_ias-paging._tcp"
    /// IAS-Paging (ANRI-ANRI) 
    public static let `iasPagingUdp`: Self = "_ias-paging._udp"
    /// IAS-Neighbor (ANRI-ANRI) [David_Ott]
    public static let `iasNeighborTcp`: Self = "_ias-neighbor._tcp"
    /// IAS-Neighbor (ANRI-ANRI) [David_Ott]
    public static let `iasNeighborUdp`: Self = "_ias-neighbor._udp"
    /// A21 (AN-1xBS) [David_Ott]
    public static let `a21An1xbsTcp`: Self = "_a21-an-1xbs._tcp"
    /// A21 (AN-1xBS) [David_Ott]
    public static let `a21An1xbsUdp`: Self = "_a21-an-1xbs._udp"
    /// A16 (AN-AN) [David_Ott]
    public static let `a16AnAnTcp`: Self = "_a16-an-an._tcp"
    /// A16 (AN-AN) [David_Ott]
    public static let `a16AnAnUdp`: Self = "_a16-an-an._udp"
    /// A17 (AN-AN) [David_Ott]
    public static let `a17AnAnTcp`: Self = "_a17-an-an._tcp"
    /// A17 (AN-AN) [David_Ott]
    public static let `a17AnAnUdp`: Self = "_a17-an-an._udp"
    /// Piranha1 
    public static let `piranha1Tcp`: Self = "_piranha1._tcp"
    /// Piranha1 
    public static let `piranha1Udp`: Self = "_piranha1._udp"
    /// Piranha2 [Primark_Corporation]
    public static let `piranha2Tcp`: Self = "_piranha2._tcp"
    /// Piranha2 [Primark_Corporation]
    public static let `piranha2Udp`: Self = "_piranha2._udp"
    /// EAX MTS Server [Pedro_A_Rodriguez]
    public static let `mtsserverTcp`: Self = "_mtsserver._tcp"
    /// Men & Mice Upgrade Agent [Eggert_Thorlacius_2]
    public static let `menandmiceUpgTcp`: Self = "_menandmice-upg._tcp"
    /// Identity Registration Protocol [Sixscape_Communications_Pte_Ltd]
    public static let `irpTcp`: Self = "_irp._tcp"
    /// Direct End to End Secure Chat Protocol [Sixscape_Communications_Pte_Ltd]
    public static let `sixchatTcp`: Self = "_sixchat._tcp"
    /// Secure ID to IP registration and lookup [Sixscape_Communications_Pte_Ltd]
    public static let `sixidTcp`: Self = "_sixid._tcp"
    /// Bidirectional single port remote radio VOIP and Control stream [Ventoso_Integrated_Peripherals]
    public static let `ventosoUdp`: Self = "_ventoso._udp"
    /// Distributed Denial-of-Service Open Threat Signaling (DOTS) Signal Channel Protocol. The service name is used to construct the SRV service names "_dots-signal._udp" and "_dots-signal._tcp" for discovering DOTS servers used to establish DOTS signal channel. [IESG]
    public static let `dotsSignalTcp`: Self = "_dots-signal._tcp"
    /// Distributed Denial-of-Service Open Threat Signaling (DOTS) Signal Channel Protocol. The service name is used to construct the SRV service names "_dots-signal._udp" and "_dots-signal._tcp" for discovering DOTS servers used to establish DOTS signal channel. [IESG]
    public static let `dotsSignalUdp`: Self = "_dots-signal._udp"
    /// PlayStation2 App Port 
    public static let `playsta2AppTcp`: Self = "_playsta2-app._tcp"
    /// PlayStation2 App Port 
    public static let `playsta2AppUdp`: Self = "_playsta2-app._udp"
    /// PlayStation2 Lobby Port [Noam_Rimon]
    public static let `playsta2LobTcp`: Self = "_playsta2-lob._tcp"
    /// PlayStation2 Lobby Port [Noam_Rimon]
    public static let `playsta2LobUdp`: Self = "_playsta2-lob._udp"
    /// smaclmgr [Hiromi_Taki]
    public static let `smaclmgrTcp`: Self = "_smaclmgr._tcp"
    /// smaclmgr [Hiromi_Taki]
    public static let `smaclmgrUdp`: Self = "_smaclmgr._udp"
    /// Kar2ouche Peer location service [Andy_Krouwel]
    public static let `kar2oucheTcp`: Self = "_kar2ouche._tcp"
    /// Kar2ouche Peer location service [Andy_Krouwel]
    public static let `kar2oucheUdp`: Self = "_kar2ouche._udp"
    /// OrbitNet Message Service [Roy_Davies]
    public static let `omsTcp`: Self = "_oms._tcp"
    /// OrbitNet Message Service [Roy_Davies]
    public static let `omsUdp`: Self = "_oms._udp"
    /// Note It! Message Service [Pedro_Alpedrinha]
    public static let `noteitTcp`: Self = "_noteit._tcp"
    /// Note It! Message Service [Pedro_Alpedrinha]
    public static let `noteitUdp`: Self = "_noteit._udp"
    /// Rimage Messaging Server [David_V_Raskin]
    public static let `emsTcp`: Self = "_ems._tcp"
    /// Rimage Messaging Server [David_V_Raskin]
    public static let `emsUdp`: Self = "_ems._udp"
    /// Container Client Message Service [Bruce_Thompson]
    public static let `contclientmsTcp`: Self = "_contclientms._tcp"
    /// Container Client Message Service [Bruce_Thompson]
    public static let `contclientmsUdp`: Self = "_contclientms._udp"
    /// E-Port Message Service 
    public static let `eportcommTcp`: Self = "_eportcomm._tcp"
    /// E-Port Message Service 
    public static let `eportcommUdp`: Self = "_eportcomm._udp"
    /// MMA Comm Services 
    public static let `mmacommTcp`: Self = "_mmacomm._tcp"
    /// MMA Comm Services 
    public static let `mmacommUdp`: Self = "_mmacomm._udp"
    /// MMA EDS Service [Robert_Shaffer]
    public static let `mmaedsTcp`: Self = "_mmaeds._tcp"
    /// MMA EDS Service [Robert_Shaffer]
    public static let `mmaedsUdp`: Self = "_mmaeds._udp"
    /// E-Port Data Service [Robert_Shaffer]
    public static let `eportcommdataTcp`: Self = "_eportcommdata._tcp"
    /// E-Port Data Service [Robert_Shaffer]
    public static let `eportcommdataUdp`: Self = "_eportcommdata._udp"
    /// Light packets transfer protocol [Adam_Golovenko]
    public static let `lightTcp`: Self = "_light._tcp"
    /// Light packets transfer protocol [Adam_Golovenko]
    public static let `lightUdp`: Self = "_light._udp"
    /// Bull RSF action server [Christian_Caudrelier]
    public static let `acterTcp`: Self = "_acter._tcp"
    /// Bull RSF action server [Christian_Caudrelier]
    public static let `acterUdp`: Self = "_acter._udp"
    /// remote file access server 
    public static let `rfaTcp`: Self = "_rfa._tcp"
    /// remote file access server 
    public static let `rfaUdp`: Self = "_rfa._udp"
    /// CXWS Operations [Phil_Abercrombie]
    public static let `cxwsTcp`: Self = "_cxws._tcp"
    /// CXWS Operations [Phil_Abercrombie]
    public static let `cxwsUdp`: Self = "_cxws._udp"
    /// AppIQ Agent Management [Phil_Abercrombie]
    public static let `appiqMgmtTcp`: Self = "_appiq-mgmt._tcp"
    /// AppIQ Agent Management [Phil_Abercrombie]
    public static let `appiqMgmtUdp`: Self = "_appiq-mgmt._udp"
    /// BIAP Device Status 
    public static let `dhctStatusTcp`: Self = "_dhct-status._tcp"
    /// BIAP Device Status 
    public static let `dhctStatusUdp`: Self = "_dhct-status._udp"
    /// BIAP Generic Alert [Louis_Slothouber]
    public static let `dhctAlertsTcp`: Self = "_dhct-alerts._tcp"
    /// BIAP Generic Alert [Louis_Slothouber]
    public static let `dhctAlertsUdp`: Self = "_dhct-alerts._udp"
    /// Business Continuity Servi [Siew_Sim]
    public static let `bcsTcp`: Self = "_bcs._tcp"
    /// Business Continuity Servi [Siew_Sim]
    public static let `bcsUdp`: Self = "_bcs._udp"
    /// boundary traversal [Kevin_Lu]
    public static let `traversalTcp`: Self = "_traversal._tcp"
    /// boundary traversal [Kevin_Lu]
    public static let `traversalUdp`: Self = "_traversal._udp"
    /// MGE UPS Supervision 
    public static let `mgesupervisionTcp`: Self = "_mgesupervision._tcp"
    /// MGE UPS Supervision 
    public static let `mgesupervisionUdp`: Self = "_mgesupervision._udp"
    /// MGE UPS Management [Lecuivre_J]
    public static let `mgemanagementTcp`: Self = "_mgemanagement._tcp"
    /// MGE UPS Management [Lecuivre_J]
    public static let `mgemanagementUdp`: Self = "_mgemanagement._udp"
    /// Parliant Telephony System [Colin_Henein]
    public static let `parliantTcp`: Self = "_parliant._tcp"
    /// Parliant Telephony System [Colin_Henein]
    public static let `parliantUdp`: Self = "_parliant._udp"
    /// finisar [Christina_Mercier]
    public static let `finisarTcp`: Self = "_finisar._tcp"
    /// finisar [Christina_Mercier]
    public static let `finisarUdp`: Self = "_finisar._udp"
    /// Spike Clipboard Service [Scott_Herscher]
    public static let `spikeTcp`: Self = "_spike._tcp"
    /// Spike Clipboard Service [Scott_Herscher]
    public static let `spikeUdp`: Self = "_spike._udp"
    /// RFID Reader Protocol 1.0 [Michael_Mealling_2]
    public static let `rfidRp1Tcp`: Self = "_rfid-rp1._tcp"
    /// RFID Reader Protocol 1.0 [Michael_Mealling_2]
    public static let `rfidRp1Udp`: Self = "_rfid-rp1._udp"
    /// Autopac Protocol [Peter_Hallenbeck]
    public static let `autopacTcp`: Self = "_autopac._tcp"
    /// Autopac Protocol [Peter_Hallenbeck]
    public static let `autopacUdp`: Self = "_autopac._udp"
    /// Manina Service Protocol [Markus_Nix]
    public static let `mspOsTcp`: Self = "_msp-os._tcp"
    /// Manina Service Protocol [Markus_Nix]
    public static let `mspOsUdp`: Self = "_msp-os._udp"
    /// Network Scanner Tool FTP [Mala_Bhat]
    public static let `nstTcp`: Self = "_nst._tcp"
    /// Network Scanner Tool FTP [Mala_Bhat]
    public static let `nstUdp`: Self = "_nst._udp"
    /// Mobile P2P Service [Hanz_Hager]
    public static let `mobileP2pTcp`: Self = "_mobile-p2p._tcp"
    /// Mobile P2P Service [Hanz_Hager]
    public static let `mobileP2pUdp`: Self = "_mobile-p2p._udp"
    /// Altova DatabaseCentral [Altova]
    public static let `altovacentralTcp`: Self = "_altovacentral._tcp"
    /// Altova DatabaseCentral [Altova]
    public static let `altovacentralUdp`: Self = "_altovacentral._udp"
    /// Prelude IDS message proto [Yoann_Vandoorselaere]
    public static let `preludeTcp`: Self = "_prelude._tcp"
    /// Prelude IDS message proto [Yoann_Vandoorselaere]
    public static let `preludeUdp`: Self = "_prelude._udp"
    /// monotone Netsync Protocol [Thomas_Keller]
    public static let `mtnTcp`: Self = "_mtn._tcp"
    /// monotone Netsync Protocol [Thomas_Keller]
    public static let `mtnUdp`: Self = "_mtn._udp"
    /// Conspiracy messaging [Jens_Edlund]
    public static let `conspiracyTcp`: Self = "_conspiracy._tcp"
    /// Conspiracy messaging [Jens_Edlund]
    public static let `conspiracyUdp`: Self = "_conspiracy._udp"
    /// NetXMS Agent 
    public static let `netxmsAgentTcp`: Self = "_netxms-agent._tcp"
    /// NetXMS Agent 
    public static let `netxmsAgentUdp`: Self = "_netxms-agent._udp"
    /// NetXMS Management 
    public static let `netxmsMgmtTcp`: Self = "_netxms-mgmt._tcp"
    /// NetXMS Management 
    public static let `netxmsMgmtUdp`: Self = "_netxms-mgmt._udp"
    /// NetXMS Server Synchronization [Victor_Kirhenshtein]
    public static let `netxmsSyncTcp`: Self = "_netxms-sync._tcp"
    /// NetXMS Server Synchronization [Victor_Kirhenshtein]
    public static let `netxmsSyncUdp`: Self = "_netxms-sync._udp"
    /// Network Performance Quality Evaluation System Test Service [Zhengli]
    public static let `npqesTestTcp`: Self = "_npqes-test._tcp"
    /// Assuria Insider [Nick_Connor]
    public static let `assuriaInsTcp`: Self = "_assuria-ins._tcp"
    /// Trinity Trust Network Node Communication [P3KI_GmbH]
    public static let `trinityDistTcp`: Self = "_trinity-dist._tcp"
    /// Trinity Trust Network Node Communication [P3KI_GmbH]
    public static let `trinityDistUdp`: Self = "_trinity-dist._udp"
    /// Trinity Trust Network Node Communication [P3KI_GmbH]
    public static let `trinityDistSctp`: Self = "_trinity-dist._sctp"
    /// TruckStar Service [Brian_Toothill]
    public static let `truckstarTcp`: Self = "_truckstar._tcp"
    /// TruckStar Service [Brian_Toothill]
    public static let `truckstarUdp`: Self = "_truckstar._udp"
    /// A26 (FAP-FGW) [David_Ott]
    public static let `a26FapFgwUdp`: Self = "_a26-fap-fgw._udp"
    /// F-Link Client Information Service 
    public static let `fcisTcp`: Self = "_fcis._tcp"
    /// F-Link Client Information Service Discovery [Makoto_Zukawa]
    public static let `fcisDiscUdp`: Self = "_fcis-disc._udp"
    /// CA Port Multiplexer [Nigel_Groves]
    public static let `capmuxTcp`: Self = "_capmux._tcp"
    /// CA Port Multiplexer [Nigel_Groves]
    public static let `capmuxUdp`: Self = "_capmux._udp"
    /// GSM Interface Tap [Harald_Welte]
    public static let `gsmtapUdp`: Self = "_gsmtap._udp"
    /// Gearman Job Queue System [Eric_Day]
    public static let `gearmanTcp`: Self = "_gearman._tcp"
    /// Gearman Job Queue System [Eric_Day]
    public static let `gearmanUdp`: Self = "_gearman._udp"
    /// Remote Capture Protocol [Marc_Donner]
    public static let `remcapTcp`: Self = "_remcap._tcp"
    /// OHM server trigger [Franck_Lefevre]
    public static let `ohmtriggerUdp`: Self = "_ohmtrigger._udp"
    /// RES Orchestration Catalog Services [Bob_Janssen_2]
    public static let `resorcsTcp`: Self = "_resorcs._tcp"
    /// IPDR/SP [Ken_Sarno]
    public static let `ipdrSpTcp`: Self = "_ipdr-sp._tcp"
    /// IPDR/SP [Ken_Sarno]
    public static let `ipdrSpUdp`: Self = "_ipdr-sp._udp"
    /// SoleraTec Locator [Mark_Armstrong]
    public static let `soleraLpnTcp`: Self = "_solera-lpn._tcp"
    /// SoleraTec Locator [Mark_Armstrong]
    public static let `soleraLpnUdp`: Self = "_solera-lpn._udp"
    /// IP Flow Info Export [Nevil_Brownlee]
    public static let `ipfixTcp`: Self = "_ipfix._tcp"
    /// IP Flow Info Export [Nevil_Brownlee]
    public static let `ipfixUdp`: Self = "_ipfix._udp"
    /// IP Flow Info Export [Nevil_Brownlee]
    public static let `ipfixSctp`: Self = "_ipfix._sctp"
    /// ipfix protocol over TLS [Nevil_Brownlee]
    public static let `ipfixsTcp`: Self = "_ipfixs._tcp"
    /// ipfix protocol over DTLS [Nevil_Brownlee]
    public static let `ipfixsSctp`: Self = "_ipfixs._sctp"
    /// ipfix protocol over DTLS [Nevil_Brownlee]
    public static let `ipfixsUdp`: Self = "_ipfixs._udp"
    /// Luminizer Manager [George_Hwa]
    public static let `lumimgrdTcp`: Self = "_lumimgrd._tcp"
    /// Luminizer Manager [George_Hwa]
    public static let `lumimgrdUdp`: Self = "_lumimgrd._udp"
    /// SICCT 
    public static let `sicctTcp`: Self = "_sicct._tcp"
    /// SICCT Service Discovery Protocol [TeleTrusT_Deutschlan]
    public static let `sicctSdpUdp`: Self = "_sicct-sdp._udp"
    /// openhpi HPI service [Thomas_Kanngieser]
    public static let `openhpidTcp`: Self = "_openhpid._tcp"
    /// openhpi HPI service [Thomas_Kanngieser]
    public static let `openhpidUdp`: Self = "_openhpid._udp"
    /// Internet File Synchronization Protocol [Alex_White]
    public static let `ifspTcp`: Self = "_ifsp._tcp"
    /// Internet File Synchronization Protocol [Alex_White]
    public static let `ifspUdp`: Self = "_ifsp._udp"
    /// Funambol Mobile Push [Andrea_Gazzaniga]
    public static let `fmpTcp`: Self = "_fmp._tcp"
    /// Funambol Mobile Push [Andrea_Gazzaniga]
    public static let `fmpUdp`: Self = "_fmp._udp"
    /// IntelliAdmin Discovery [IntelliAdmin_LLC]
    public static let `intelliadmDiscUdp`: Self = "_intelliadm-disc._udp"
    /// peer-to-peer file exchange protocol [Tobias_Sturm]
    public static let `buschtrommelUdp`: Self = "_buschtrommel._udp"
    /// Profile for Mac [David_Sinclair]
    public static let `profilemacTcp`: Self = "_profilemac._tcp"
    /// Profile for Mac [David_Sinclair]
    public static let `profilemacUdp`: Self = "_profilemac._udp"
    /// Simple Service Auto Discovery [Dr_Horst_Herb]
    public static let `ssadTcp`: Self = "_ssad._tcp"
    /// Simple Service Auto Discovery [Dr_Horst_Herb]
    public static let `ssadUdp`: Self = "_ssad._udp"
    /// Simple Policy Control Protocol [Roland_Hedberg_2]
    public static let `spocpTcp`: Self = "_spocp._tcp"
    /// Simple Policy Control Protocol [Roland_Hedberg_2]
    public static let `spocpUdp`: Self = "_spocp._udp"
    /// Simple Network Audio Protocol [Dameon_Wagner]
    public static let `snapTcp`: Self = "_snap._tcp"
    /// Simple Network Audio Protocol [Dameon_Wagner]
    public static let `snapUdp`: Self = "_snap._udp"
    /// Simple Invocation of Methods Over Network (SIMON) [Alexander_Christian]
    public static let `simonTcp`: Self = "_simon._tcp"
    /// Simple Invocation of Methods Over Network (SIMON) Discovery [Alexander_Christian]
    public static let `simonDiscUdp`: Self = "_simon-disc._udp"
    /// GRE-in-UDP Encapsulation [IESG]
    public static let `greInUdpUdp`: Self = "_gre-in-udp._udp"
    /// GRE-in-UDP Encapsulation with DTLS [IESG]
    public static let `greUdpDtlsUdp`: Self = "_gre-udp-dtls._udp"
    /// Reticle Decision Center [KLA_Tencor]
    public static let `RDCenterTcp`: Self = "_RDCenter._tcp"
    /// Converge RPC [Asteris_LLC]
    public static let `convergeTcp`: Self = "_converge._tcp"
    /// BFD Multihop Control [Dave_Katz][Dave_Ward]
    public static let `bfdMultiCtlTcp`: Self = "_bfd-multi-ctl._tcp"
    /// BFD Multihop Control [Dave_Katz][Dave_Ward]
    public static let `bfdMultiCtlUdp`: Self = "_bfd-multi-ctl._udp"
    /// Cisco Nexus Control Protocol [Joseph_Swaminathan]
    public static let `cncpUdp`: Self = "_cncp._udp"
    /// Smart Install Service [Amit_Nigam]
    public static let `smartInstallTcp`: Self = "_smart-install._tcp"
    /// Service Insertion Architecture (SIA) Control-Plane [Shree_Murthy]
    public static let `siaCtrlPlaneTcp`: Self = "_sia-ctrl-plane._tcp"
    /// eXtensible Messaging Client Protocol [Cisco]
    public static let `xmcpTcp`: Self = "_xmcp._tcp"
    /// Virtual eXtensible Local Area Network (VXLAN) [Lawrence_Kreeger]
    public static let `vxlanUdp`: Self = "_vxlan._udp"
    /// Generic Protocol Extension for Virtual eXtensible Local Area Network (VXLAN) [Lawrence_Kreeger]
    public static let `vxlanGpeUdp`: Self = "_vxlan-gpe._udp"
    /// IP Routable RocE [InfiniBand_Trade_Association]
    public static let `roceUdp`: Self = "_roce._udp"
    /// IP Routable Unified Bus [Huawei]
    public static let `unifiedBusTcp`: Self = "_unified-bus._tcp"
    /// IP Routable Unified Bus [Huawei]
    public static let `unifiedBusUdp`: Self = "_unified-bus._udp"
    /// Icona Instant Messenging System 
    public static let `iimsTcp`: Self = "_iims._tcp"
    /// Icona Instant Messenging System 
    public static let `iimsUdp`: Self = "_iims._udp"
    /// Icona Web Embedded Chat 
    public static let `iwecTcp`: Self = "_iwec._tcp"
    /// Icona Web Embedded Chat 
    public static let `iwecUdp`: Self = "_iwec._udp"
    /// Icona License System Server [Paul_Stephen_Borlie]
    public static let `ilssTcp`: Self = "_ilss._tcp"
    /// Icona License System Server [Paul_Stephen_Borlie]
    public static let `ilssUdp`: Self = "_ilss._udp"
    /// Notateit Messaging 
    public static let `notateitTcp`: Self = "_notateit._tcp"
    /// Notateit Messaging Discovery [Ean_Black]
    public static let `notateitDiscUdp`: Self = "_notateit-disc._udp"
    /// AJA ntv4 Video System Discovery [Mike_Bernadett]
    public static let `ajaNtv4DiscUdp`: Self = "_aja-ntv4-disc._udp"
    /// HTCP [Paul_Vixie]
    public static let `htcpTcp`: Self = "_htcp._tcp"
    /// HTCP [Paul_Vixie]
    public static let `htcpUdp`: Self = "_htcp._udp"
    /// Varadero-0 
    public static let `varadero0Tcp`: Self = "_varadero-0._tcp"
    /// Varadero-0 
    public static let `varadero0Udp`: Self = "_varadero-0._udp"
    /// Varadero-1 
    public static let `varadero1Tcp`: Self = "_varadero-1._tcp"
    /// Varadero-1 
    public static let `varadero1Udp`: Self = "_varadero-1._udp"
    /// Varadero-2 [Carlos_Arteaga]
    public static let `varadero2Tcp`: Self = "_varadero-2._tcp"
    /// Varadero-2 [Carlos_Arteaga]
    public static let `varadero2Udp`: Self = "_varadero-2._udp"
    /// OPC UA Connection Protocol [OPC_Foundation]
    public static let `opcuaTcpTcp`: Self = "_opcua-tcp._tcp"
    /// OPC UA Multicast Datagram Protocol [OPC_Foundation]
    public static let `opcuaUdpUdp`: Self = "_opcua-udp._udp"
    /// QUOSA Virtual Library Service [Uri_Blank]
    public static let `quosaTcp`: Self = "_quosa._tcp"
    /// QUOSA Virtual Library Service [Uri_Blank]
    public static let `quosaUdp`: Self = "_quosa._udp"
    /// nCode ICE-flow Library AppServer [Ross_Swithenbank]
    public static let `gwAsvTcp`: Self = "_gw-asv._tcp"
    /// nCode ICE-flow Library AppServer [Ross_Swithenbank]
    public static let `gwAsvUdp`: Self = "_gw-asv._udp"
    /// OPC UA TCP Protocol over TLS/SSL [OPC_Foundation]
    public static let `opcuaTlsTcp`: Self = "_opcua-tls._tcp"
    /// OPC UA TCP Protocol over TLS/SSL [OPC_Foundation]
    public static let `opcuaTlsUdp`: Self = "_opcua-tls._udp"
    /// nCode ICE-flow Library LogServer [Ross_Swithenbank]
    public static let `gwLogTcp`: Self = "_gw-log._tcp"
    /// nCode ICE-flow Library LogServer [Ross_Swithenbank]
    public static let `gwLogUdp`: Self = "_gw-log._udp"
    /// WordCruncher Remote Library Service [Jason_Dzubak]
    public static let `wcrRemlibTcp`: Self = "_wcr-remlib._tcp"
    /// WordCruncher Remote Library Service [Jason_Dzubak]
    public static let `wcrRemlibUdp`: Self = "_wcr-remlib._udp"
    /// Contamac ICM Service IANA assigned this well-formed service name as a replacement for "contamac_icm". [Abdullah_Obeid]
    public static let `contamacIcmTcp`: Self = "_contamac-icm._tcp"
    /// Contamac ICM Service [Abdullah_Obeid]
    public static let `contamac_icmTcp`: Self = "_contamac_icm._tcp"
    /// Contamac ICM Service IANA assigned this well-formed service name as a replacement for "contamac_icm". [Abdullah_Obeid]
    public static let `contamacIcmUdp`: Self = "_contamac-icm._udp"
    /// Contamac ICM Service [Abdullah_Obeid]
    public static let `contamac_icmUdp`: Self = "_contamac_icm._udp"
    /// Web Fresh Communication [Jonathan_Bastnagel]
    public static let `wfcTcp`: Self = "_wfc._tcp"
    /// Web Fresh Communication [Jonathan_Bastnagel]
    public static let `wfcUdp`: Self = "_wfc._udp"
    /// App Server - Admin HTTP 
    public static let `appservHttpTcp`: Self = "_appserv-http._tcp"
    /// App Server - Admin HTTP 
    public static let `appservHttpUdp`: Self = "_appserv-http._udp"
    /// App Server - Admin HTTPS [Sreeram_Duvvuru]
    public static let `appservHttpsTcp`: Self = "_appserv-https._tcp"
    /// App Server - Admin HTTPS [Sreeram_Duvvuru]
    public static let `appservHttpsUdp`: Self = "_appserv-https._udp"
    /// Sun App Server - NA [Kedar_Mhaswade]
    public static let `sunAsNodeagtTcp`: Self = "_sun-as-nodeagt._tcp"
    /// Sun App Server - NA [Kedar_Mhaswade]
    public static let `sunAsNodeagtUdp`: Self = "_sun-as-nodeagt._udp"
    /// Apache Derby Replication [Jorgen_Loland]
    public static let `derbyRepliTcp`: Self = "_derby-repli._tcp"
    /// Apache Derby Replication [Jorgen_Loland]
    public static let `derbyRepliUdp`: Self = "_derby-repli._udp"
    /// Unify Debugger [Daegis_Inc]
    public static let `unifyDebugTcp`: Self = "_unify-debug._tcp"
    /// Unify Debugger [Daegis_Inc]
    public static let `unifyDebugUdp`: Self = "_unify-debug._udp"
    /// Photon Relay 
    public static let `phrelayTcp`: Self = "_phrelay._tcp"
    /// Photon Relay 
    public static let `phrelayUdp`: Self = "_phrelay._udp"
    /// Photon Relay Debug [Michael_Hunter]
    public static let `phrelaydbgTcp`: Self = "_phrelaydbg._tcp"
    /// Photon Relay Debug [Michael_Hunter]
    public static let `phrelaydbgUdp`: Self = "_phrelaydbg._udp"
    /// Citcom Tracking Service [Wolfgang_Weidner]
    public static let `ccTrackingTcp`: Self = "_cc-tracking._tcp"
    /// Citcom Tracking Service [Wolfgang_Weidner]
    public static let `ccTrackingUdp`: Self = "_cc-tracking._udp"
    /// Wired [Axel_Andersson]
    public static let `wiredTcp`: Self = "_wired._tcp"
    /// Wired [Axel_Andersson]
    public static let `wiredUdp`: Self = "_wired._udp"
    /// Tritium CAN Bus Bridge Service [James_Kennedy]
    public static let `tritiumCanTcp`: Self = "_tritium-can._tcp"
    /// Tritium CAN Bus Bridge Service [James_Kennedy]
    public static let `tritiumCanUdp`: Self = "_tritium-can._udp"
    /// Lighting Management Control System [Timothy_Parry]
    public static let `lmcsTcp`: Self = "_lmcs._tcp"
    /// Lighting Management Control System [Timothy_Parry]
    public static let `lmcsUdp`: Self = "_lmcs._udp"
    /// Agilent Instrument Discovery [Charles_F_Steele]
    public static let `instDiscoveryUdp`: Self = "_inst-discovery._udp"
    /// WSDL Event Receiver [Charles_F_Steele]
    public static let `wsdlEventTcp`: Self = "_wsdl-event._tcp"
    /// IVI High-Speed LAN Instrument Protocol [IVI_Foundation]
    public static let `hislipTcp`: Self = "_hislip._tcp"
    /// SOCP Time Synchronization Protocol [Joe_Haver]
    public static let `socpTUdp`: Self = "_socp-t._udp"
    /// SOCP Control Protocol [Joe_Haver]
    public static let `socpCUdp`: Self = "_socp-c._udp"
    /// Meier-Phelps License Server [William_Phelps]
    public static let `wmlserverTcp`: Self = "_wmlserver._tcp"
    /// HiveStor Distributed File System [Nicholas_Young]
    public static let `hivestorTcp`: Self = "_hivestor._tcp"
    /// HiveStor Distributed File System [Nicholas_Young]
    public static let `hivestorUdp`: Self = "_hivestor._udp"
    /// ABBS [Ryan_Rubley]
    public static let `abbsTcp`: Self = "_abbs._tcp"
    /// ABBS [Ryan_Rubley]
    public static let `abbsUdp`: Self = "_abbs._udp"
    /// xcap code analysis portal public user access [_88solutions_Corporation]
    public static let `xcapPortalTcp`: Self = "_xcap-portal._tcp"
    /// xcap code analysis portal cluster control and administration [_88solutions_Corporation]
    public static let `xcapControlTcp`: Self = "_xcap-control._tcp"
    /// LysKOM Protocol A [Per_Cederqvist]
    public static let `lyskomTcp`: Self = "_lyskom._tcp"
    /// LysKOM Protocol A [Per_Cederqvist]
    public static let `lyskomUdp`: Self = "_lyskom._udp"
    /// RAdmin Port [Dmitri_Znosko]
    public static let `radminPortTcp`: Self = "_radmin-port._tcp"
    /// RAdmin Port [Dmitri_Znosko]
    public static let `radminPortUdp`: Self = "_radmin-port._udp"
    /// HFSQL Client/Server Database Engine [PC_SOFT]
    public static let `hfcsTcp`: Self = "_hfcs._tcp"
    /// HFSQL Client/Server Database Engine [PC_SOFT]
    public static let `hfcsUdp`: Self = "_hfcs._udp"
    /// FileLocator Remote Search Agent IANA assigned this well-formed service name as a replacement for "flr_agent". [David_Vest]
    public static let `flrAgentTcp`: Self = "_flr-agent._tcp"
    /// FileLocator Remote Search Agent [David_Vest]
    public static let `flr_agentTcp`: Self = "_flr_agent._tcp"
    /// magicCONROL RF and Data Interface [Andreas_Spalenski]
    public static let `magiccontrolTcp`: Self = "_magiccontrol._tcp"
    /// Technicolor LUT Access Protocol [Markus_Loeffler]
    public static let `lutapTcp`: Self = "_lutap._tcp"
    /// LUTher Control Protocol [Markus_Loeffler]
    public static let `lutcpTcp`: Self = "_lutcp._tcp"
    /// Bones Remote Control [Andreas_Foedrowitz]
    public static let `bonesTcp`: Self = "_bones._tcp"
    /// Bones Remote Control [Andreas_Foedrowitz]
    public static let `bonesUdp`: Self = "_bones._udp"
    /// Fibics Remote Control Service [Ken_Lagarec]
    public static let `frcsTcp`: Self = "_frcs._tcp"
    /// Signal protocol port for autonomic networking [Cisco_Systems_3]
    public static let `anSignalingUdp`: Self = "_an-signaling._udp"
    /// ATSC-M/H Service Signaling Channel [Jerry_Whitaker]
    public static let `atscMhSscUdp`: Self = "_atsc-mh-ssc._udp"
    /// Equitrac Office 
    public static let `eqOffice4940Tcp`: Self = "_eq-office-4940._tcp"
    /// Equitrac Office 
    public static let `eqOffice4940Udp`: Self = "_eq-office-4940._udp"
    /// Equitrac Office 
    public static let `eqOffice4941Tcp`: Self = "_eq-office-4941._tcp"
    /// Equitrac Office 
    public static let `eqOffice4941Udp`: Self = "_eq-office-4941._udp"
    /// Equitrac Office [Tom_Haapanen_2]
    public static let `eqOffice4942Tcp`: Self = "_eq-office-4942._tcp"
    /// Equitrac Office [Tom_Haapanen_2]
    public static let `eqOffice4942Udp`: Self = "_eq-office-4942._udp"
    /// Munin Graphing Framework [Jimmy_Olsen]
    public static let `muninTcp`: Self = "_munin._tcp"
    /// Munin Graphing Framework [Jimmy_Olsen]
    public static let `muninUdp`: Self = "_munin._udp"
    /// Sybase Server Monitor [Chris_Irie]
    public static let `sybasesrvmonTcp`: Self = "_sybasesrvmon._tcp"
    /// Sybase Server Monitor [Chris_Irie]
    public static let `sybasesrvmonUdp`: Self = "_sybasesrvmon._udp"
    /// PWG WIMS [Ira_McDonald]
    public static let `pwgwimsTcp`: Self = "_pwgwims._tcp"
    /// PWG WIMS [Ira_McDonald]
    public static let `pwgwimsUdp`: Self = "_pwgwims._udp"
    /// SAG Directory Server [Michael_Chirila]
    public static let `sagxtsdsTcp`: Self = "_sagxtsds._tcp"
    /// SAG Directory Server [Michael_Chirila]
    public static let `sagxtsdsUdp`: Self = "_sagxtsds._udp"
    /// Synchronization Arbiter [Dave_Neudoerffer_2]
    public static let `dbsyncarbiterTcp`: Self = "_dbsyncarbiter._tcp"
    /// CCSS QMessageMonitor 
    public static let `ccssQmmTcp`: Self = "_ccss-qmm._tcp"
    /// CCSS QMessageMonitor 
    public static let `ccssQmmUdp`: Self = "_ccss-qmm._udp"
    /// CCSS QSystemMonitor [David_Young]
    public static let `ccssQsmTcp`: Self = "_ccss-qsm._tcp"
    /// CCSS QSystemMonitor [David_Young]
    public static let `ccssQsmUdp`: Self = "_ccss-qsm._udp"
    /// BackUp and Restore Program [Marat_Khalili]
    public static let `burpTcp`: Self = "_burp._tcp"
    /// Citrix Virtual Path [Citrix_Systems]
    public static let `ctxsVppUdp`: Self = "_ctxs-vpp._udp"
    /// WebYast [Federico_Lucifredi]
    public static let `webyastTcp`: Self = "_webyast._tcp"
    /// GER HC Standard [Roger_Ward]
    public static let `gerhcsTcp`: Self = "_gerhcs._tcp"
    /// Model Railway Interface Program [Howard_Amos]
    public static let `mripTcp`: Self = "_mrip._tcp"
    /// Model Railway Interface Program [Howard_Amos]
    public static let `mripUdp`: Self = "_mrip._udp"
    /// SMAR Ethernet Port 1 
    public static let `smarSePort1Tcp`: Self = "_smar-se-port1._tcp"
    /// SMAR Ethernet Port 1 
    public static let `smarSePort1Udp`: Self = "_smar-se-port1._udp"
    /// SMAR Ethernet Port 2 [Delcio_Prizon]
    public static let `smarSePort2Tcp`: Self = "_smar-se-port2._tcp"
    /// SMAR Ethernet Port 2 [Delcio_Prizon]
    public static let `smarSePort2Udp`: Self = "_smar-se-port2._udp"
    /// Parallel for GAUSS (tm) [Matthew_Ford]
    public static let `parallelTcp`: Self = "_parallel._tcp"
    /// Parallel for GAUSS (tm) [Matthew_Ford]
    public static let `parallelUdp`: Self = "_parallel._udp"
    /// BusySync Calendar Synch. Protocol [David_Riggle]
    public static let `busycalTcp`: Self = "_busycal._tcp"
    /// BusySync Calendar Synch. Protocol [David_Riggle]
    public static let `busycalUdp`: Self = "_busycal._udp"
    /// VITA Radio Transport [Sam_Bretheim]
    public static let `vrtTcp`: Self = "_vrt._tcp"
    /// VITA Radio Transport [Sam_Bretheim]
    public static let `vrtUdp`: Self = "_vrt._udp"
    /// HFSQL Client/Server Database Engine Manager [PC_SOFT]
    public static let `hfcsManagerTcp`: Self = "_hfcs-manager._tcp"
    /// HFSQL Client/Server Database Engine Manager [PC_SOFT]
    public static let `hfcsManagerUdp`: Self = "_hfcs-manager._udp"
    ///  
    public static let `commplexMainTcp`: Self = "_commplex-main._tcp"
    ///  
    public static let `commplexMainUdp`: Self = "_commplex-main._udp"
    ///  
    public static let `commplexLinkTcp`: Self = "_commplex-link._tcp"
    ///  
    public static let `commplexLinkUdp`: Self = "_commplex-link._udp"
    /// radio free ethernet 
    public static let `rfeTcp`: Self = "_rfe._tcp"
    /// radio free ethernet 
    public static let `rfeUdp`: Self = "_rfe._udp"
    /// FileMaker, Inc. - Proprietary transport [Clay_Maeckel]
    public static let `fmproInternalTcp`: Self = "_fmpro-internal._tcp"
    /// FileMaker, Inc. - Proprietary name binding [Clay_Maeckel]
    public static let `fmproInternalUdp`: Self = "_fmpro-internal._udp"
    /// RTP media data 
    public static let `avtProfile1Tcp`: Self = "_avt-profile-1._tcp"
    /// RTP media data 
    public static let `avtProfile1Udp`: Self = "_avt-profile-1._udp"
    /// RTP media data 
    public static let `avtProfile1Dccp`: Self = "_avt-profile-1._dccp"
    /// RTP control protocol 
    public static let `avtProfile2Tcp`: Self = "_avt-profile-2._tcp"
    /// RTP control protocol 
    public static let `avtProfile2Udp`: Self = "_avt-profile-2._udp"
    /// RTP control protocol 
    public static let `avtProfile2Dccp`: Self = "_avt-profile-2._dccp"
    /// wsm server [Adam_Berk]
    public static let `wsmServerTcp`: Self = "_wsm-server._tcp"
    /// wsm server [Adam_Berk]
    public static let `wsmServerUdp`: Self = "_wsm-server._udp"
    /// wsm server ssl [Adam_Berk]
    public static let `wsmServerSslTcp`: Self = "_wsm-server-ssl._tcp"
    /// wsm server ssl [Adam_Berk]
    public static let `wsmServerSslUdp`: Self = "_wsm-server-ssl._udp"
    /// Synapsis EDGE [Paul_Schilling]
    public static let `synapsisEdgeTcp`: Self = "_synapsis-edge._tcp"
    /// Synapsis EDGE [Paul_Schilling]
    public static let `synapsisEdgeUdp`: Self = "_synapsis-edge._udp"
    /// Microsoft Windows Filesystem [Simon_Skaria]
    public static let `winfsTcp`: Self = "_winfs._tcp"
    /// Microsoft Windows Filesystem [Simon_Skaria]
    public static let `winfsUdp`: Self = "_winfs._udp"
    /// TelepathStart [Helmuth_Breitenfelln]
    public static let `telelpathstartTcp`: Self = "_telelpathstart._tcp"
    /// TelepathStart [Helmuth_Breitenfelln]
    public static let `telelpathstartUdp`: Self = "_telelpathstart._udp"
    /// TelepathAttack [Helmuth_Breitenfelln]
    public static let `telelpathattackTcp`: Self = "_telelpathattack._tcp"
    /// TelepathAttack [Helmuth_Breitenfelln]
    public static let `telelpathattackUdp`: Self = "_telelpathattack._udp"
    /// NetOnTap Service [Kim_Hancock]
    public static let `nspTcp`: Self = "_nsp._tcp"
    /// NetOnTap Service [Kim_Hancock]
    public static let `nspUdp`: Self = "_nsp._udp"
    /// FileMaker, Inc. - Proprietary transport [Alex_Chen]
    public static let `fmproV6Tcp`: Self = "_fmpro-v6._tcp"
    /// FileMaker, Inc. - Proprietary transport [Alex_Chen]
    public static let `fmproV6Udp`: Self = "_fmpro-v6._udp"
    /// Overlay Network Protocol [Roger_Matthias]
    public static let `onpsocketUdp`: Self = "_onpsocket._udp"
    /// FileMaker, Inc. - Web publishing [Alex_Chen]
    public static let `fmwpTcp`: Self = "_fmwp._tcp"
    /// zenginkyo-1 [Masashi_Suzaki]
    public static let `zenginkyo1Tcp`: Self = "_zenginkyo-1._tcp"
    /// zenginkyo-1 [Masashi_Suzaki]
    public static let `zenginkyo1Udp`: Self = "_zenginkyo-1._udp"
    /// zenginkyo-2 [Masashi_Suzaki]
    public static let `zenginkyo2Tcp`: Self = "_zenginkyo-2._tcp"
    /// zenginkyo-2 [Masashi_Suzaki]
    public static let `zenginkyo2Udp`: Self = "_zenginkyo-2._udp"
    /// mice server [Alan_Clifford]
    public static let `miceTcp`: Self = "_mice._tcp"
    /// mice server [Alan_Clifford]
    public static let `miceUdp`: Self = "_mice._udp"
    /// Htuil Server for PLD2 [Dennis_Reinhardt]
    public static let `htuilsrvTcp`: Self = "_htuilsrv._tcp"
    /// Htuil Server for PLD2 [Dennis_Reinhardt]
    public static let `htuilsrvUdp`: Self = "_htuilsrv._udp"
    /// SCPI-TELNET [IVI_Foundation]
    public static let `scpiTelnetTcp`: Self = "_scpi-telnet._tcp"
    /// SCPI-TELNET [IVI_Foundation]
    public static let `scpiTelnetUdp`: Self = "_scpi-telnet._udp"
    /// SCPI-RAW [IVI_Foundation]
    public static let `scpiRawTcp`: Self = "_scpi-raw._tcp"
    /// SCPI-RAW [IVI_Foundation]
    public static let `scpiRawUdp`: Self = "_scpi-raw._udp"
    /// Storix I/O daemon (data) [Storix_Inc]
    public static let `strexecDTcp`: Self = "_strexec-d._tcp"
    /// Storix I/O daemon (data) [Storix_Inc]
    public static let `strexecDUdp`: Self = "_strexec-d._udp"
    /// Storix I/O daemon (stat) [Storix_Inc]
    public static let `strexecSTcp`: Self = "_strexec-s._tcp"
    /// Storix I/O daemon (stat) [Storix_Inc]
    public static let `strexecSUdp`: Self = "_strexec-s._udp"
    /// Quiqum Virtual Relais [Philipp_Marcel_Albre]
    public static let `qvrTcp`: Self = "_qvr._tcp"
    /// Infobright Database Server [Mark_Windrim]
    public static let `infobrightTcp`: Self = "_infobright._tcp"
    /// Infobright Database Server [Mark_Windrim]
    public static let `infobrightUdp`: Self = "_infobright._udp"
    /// Direct Message Protocol [Gjermund_Wallenius]
    public static let `dmpUdp`: Self = "_dmp._udp"
    /// SignaCert Enterprise Trust Server Agent [Harris_Corporation]
    public static let `signacertAgentTcp`: Self = "_signacert-agent._tcp"
    /// Janstor Secure Data [Janstor_Technology]
    public static let `jtnetdServerTcp`: Self = "_jtnetd-server._tcp"
    /// Janstor Status [Janstor_Technology]
    public static let `jtnetdStatusTcp`: Self = "_jtnetd-status._tcp"
    /// asnaacceler8db [Walter_Goodwin]
    public static let `asnaacceler8dbTcp`: Self = "_asnaacceler8db._tcp"
    /// asnaacceler8db [Walter_Goodwin]
    public static let `asnaacceler8dbUdp`: Self = "_asnaacceler8db._udp"
    /// ShopWorX Administration [Don_W_Fitzpatrick]
    public static let `swxadminTcp`: Self = "_swxadmin._tcp"
    /// ShopWorX Administration [Don_W_Fitzpatrick]
    public static let `swxadminUdp`: Self = "_swxadmin._udp"
    /// LXI Event Service [Nick_Barendt]
    public static let `lxiEvntsvcTcp`: Self = "_lxi-evntsvc._tcp"
    /// LXI Event Service [Nick_Barendt]
    public static let `lxiEvntsvcUdp`: Self = "_lxi-evntsvc._udp"
    /// Open Settlement Protocol [Dmitry_Isakbayev]
    public static let `ospTcp`: Self = "_osp._tcp"
    /// Vishay PM UDP Service [Ashley_Clarke]
    public static let `vpmUdpUdp`: Self = "_vpm-udp._udp"
    /// iSCAPE Data Broadcasting [Roland_van_der_Veen]
    public static let `iscapeUdp`: Self = "_iscape._udp"
    /// Texai Message Service [Stephen_Reed_2]
    public static let `texaiTcp`: Self = "_texai._tcp"
    /// iVocalize Web Conference [Bryan_Vergato]
    public static let `ivocalizeTcp`: Self = "_ivocalize._tcp"
    /// iVocalize Web Conference [Bryan_Vergato]
    public static let `ivocalizeUdp`: Self = "_ivocalize._udp"
    /// multimedia conference control tool [Steve_Casner]
    public static let `mmccTcp`: Self = "_mmcc._tcp"
    /// multimedia conference control tool [Steve_Casner]
    public static let `mmccUdp`: Self = "_mmcc._udp"
    /// ITA Agent [Don_Merrell]
    public static let `itaAgentTcp`: Self = "_ita-agent._tcp"
    /// ITA Agent [Don_Merrell]
    public static let `itaAgentUdp`: Self = "_ita-agent._udp"
    /// ITA Manager [Don_Merrell]
    public static let `itaManagerTcp`: Self = "_ita-manager._tcp"
    /// ITA Manager [Don_Merrell]
    public static let `itaManagerUdp`: Self = "_ita-manager._udp"
    /// RLM License Server [Matt_Christiano_2]
    public static let `rlmTcp`: Self = "_rlm._tcp"
    /// RLM Discovery Server [Reprise_Software_Inc]
    public static let `rlmDiscUdp`: Self = "_rlm-disc._udp"
    /// RLM administrative interface [Matt_Christiano_2]
    public static let `rlmAdminTcp`: Self = "_rlm-admin._tcp"
    /// UNOT [Gordon_Mohr_2]
    public static let `unotTcp`: Self = "_unot._tcp"
    /// UNOT [Gordon_Mohr_2]
    public static let `unotUdp`: Self = "_unot._udp"
    /// Intecom Pointspan 1 [David_Meermans]
    public static let `intecomPs1Tcp`: Self = "_intecom-ps1._tcp"
    /// Intecom Pointspan 1 [David_Meermans]
    public static let `intecomPs1Udp`: Self = "_intecom-ps1._udp"
    /// Intecom Pointspan 2 [David_Meermans]
    public static let `intecomPs2Tcp`: Self = "_intecom-ps2._tcp"
    /// Intecom Pointspan 2 [David_Meermans]
    public static let `intecomPs2Udp`: Self = "_intecom-ps2._udp"
    /// Locus Discovery [Alan_King]
    public static let `locusDiscUdp`: Self = "_locus-disc._udp"
    /// SIP Directory Services [Arthur_Wilton]
    public static let `sdsTcp`: Self = "_sds._tcp"
    /// SIP Directory Services [Arthur_Wilton]
    public static let `sdsUdp`: Self = "_sds._udp"
    /// SIP 
    public static let `sipTcp`: Self = "_sip._tcp"
    /// SIP 
    public static let `sipUdp`: Self = "_sip._udp"
    /// SIP 
    public static let `sipSctp`: Self = "_sip._sctp"
    /// SIP-TLS 
    public static let `sipsTcp`: Self = "_sips._tcp"
    /// SIP-TLS 
    public static let `sipsUdp`: Self = "_sips._udp"
    /// SIP-TLS 
    public static let `sipsSctp`: Self = "_sips._sctp"
    /// Localisation access [Jean_Pierre_Garcia_2]
    public static let `naLocaliseTcp`: Self = "_na-localise._tcp"
    /// Localisation access [Jean_Pierre_Garcia_2]
    public static let `naLocaliseUdp`: Self = "_na-localise._udp"
    /// centrify secure RPC [Paul_Moore]
    public static let `csrpcTcp`: Self = "_csrpc._tcp"
    /// Channel Access 1 [Jeffrey_Hill]
    public static let `ca1Tcp`: Self = "_ca-1._tcp"
    /// Channel Access 1 [Jeffrey_Hill]
    public static let `ca1Udp`: Self = "_ca-1._udp"
    /// Channel Access 2 [Jeffrey_Hill]
    public static let `ca2Tcp`: Self = "_ca-2._tcp"
    /// Channel Access 2 [Jeffrey_Hill]
    public static let `ca2Udp`: Self = "_ca-2._udp"
    /// STANAG-5066-SUBNET-INTF [Donald_G_Kallgren]
    public static let `stanag5066Tcp`: Self = "_stanag-5066._tcp"
    /// STANAG-5066-SUBNET-INTF [Donald_G_Kallgren]
    public static let `stanag5066Udp`: Self = "_stanag-5066._udp"
    /// Authentx Service [Alberto_Fernandez]
    public static let `authentxTcp`: Self = "_authentx._tcp"
    /// Authentx Service [Alberto_Fernandez]
    public static let `authentxUdp`: Self = "_authentx._udp"
    /// Bitforest Data Service [Ville_Pekka_Vahteala]
    public static let `bitforestsrvTcp`: Self = "_bitforestsrv._tcp"
    /// I/Net 2000-NPR [Chris_Megede]
    public static let `iNet2000NprTcp`: Self = "_i-net-2000-npr._tcp"
    /// I/Net 2000-NPR [Chris_Megede]
    public static let `iNet2000NprUdp`: Self = "_i-net-2000-npr._udp"
    /// VersaTrans Server Agent Service [Christopher_Miller]
    public static let `vtsasTcp`: Self = "_vtsas._tcp"
    /// VersaTrans Server Agent Service [Christopher_Miller]
    public static let `vtsasUdp`: Self = "_vtsas._udp"
    /// PowerSchool [Greg_Porter]
    public static let `powerschoolTcp`: Self = "_powerschool._tcp"
    /// PowerSchool [Greg_Porter]
    public static let `powerschoolUdp`: Self = "_powerschool._udp"
    /// Anything In Anything [Jeroen_Massar]
    public static let `ayiyaTcp`: Self = "_ayiya._tcp"
    /// Anything In Anything [Jeroen_Massar]
    public static let `ayiyaUdp`: Self = "_ayiya._udp"
    /// Advantage Group Port Mgr [James_Goddard]
    public static let `tagPmTcp`: Self = "_tag-pm._tcp"
    /// Advantage Group Port Mgr [James_Goddard]
    public static let `tagPmUdp`: Self = "_tag-pm._udp"
    /// ALES Query [Tim_Maloney]
    public static let `alesqueryTcp`: Self = "_alesquery._tcp"
    /// ALES Query [Tim_Maloney]
    public static let `alesqueryUdp`: Self = "_alesquery._udp"
    /// Experimental Physics and Industrial Control System [Matej_Sekoranja]
    public static let `pvaccessTcp`: Self = "_pvaccess._tcp"
    /// PixelPusher pixel data [heroicrobotics.com]
    public static let `pixelpusherUdp`: Self = "_pixelpusher._udp"
    /// Cambridge Pixel SPx Reports [Richard_Warren]
    public static let `cpSpxrptsUdp`: Self = "_cp-spxrpts._udp"
    /// OnScreen Data Collection Service [Christopher_Miller_2]
    public static let `onscreenTcp`: Self = "_onscreen._tcp"
    /// OnScreen Data Collection Service [Christopher_Miller_2]
    public static let `onscreenUdp`: Self = "_onscreen._udp"
    /// SDL - Ent Trans Server [Marc_Morin]
    public static let `sdlEtsTcp`: Self = "_sdl-ets._tcp"
    /// SDL - Ent Trans Server [Marc_Morin]
    public static let `sdlEtsUdp`: Self = "_sdl-ets._udp"
    /// Qpur Communication Protocol [Joachim_Kluemper]
    public static let `qcpTcp`: Self = "_qcp._tcp"
    /// Qpur Communication Protocol [Joachim_Kluemper]
    public static let `qcpUdp`: Self = "_qcp._udp"
    /// Qpur File Protocol [Joachim_Kluemper]
    public static let `qfpTcp`: Self = "_qfp._tcp"
    /// Qpur File Protocol [Joachim_Kluemper]
    public static let `qfpUdp`: Self = "_qfp._udp"
    /// EPCglobal Low-Level Reader Protocol [Margaret_Cullen][Paul_Dietrich]
    public static let `llrpTcp`: Self = "_llrp._tcp"
    /// EPCglobal Low-Level Reader Protocol [Margaret_Cullen][Paul_Dietrich]
    public static let `llrpUdp`: Self = "_llrp._udp"
    /// EPCglobal Encrypted LLRP [Margaret_Cullen]
    public static let `encryptedLlrpTcp`: Self = "_encrypted-llrp._tcp"
    /// EPCglobal Encrypted LLRP [Margaret_Cullen]
    public static let `encryptedLlrpUdp`: Self = "_encrypted-llrp._udp"
    /// Aprigo Collection Service [Ron_Zalkind]
    public static let `aprigoCsTcp`: Self = "_aprigo-cs._tcp"
    /// BIOTIC - Binary Internet of Things Interoperable Communication [Waher_Data_AB]
    public static let `bioticTcp`: Self = "_biotic._tcp"
    /// Candidate AR 
    public static let `carSctp`: Self = "_car._sctp"
    /// Context Transfer Protocol 
    public static let `cxtpSctp`: Self = "_cxtp._sctp"
    /// Magpie Binary [Phil_Maker]
    public static let `magpieUdp`: Self = "_magpie._udp"
    /// Sentinel LM [Derick_Snyder]
    public static let `sentinelLmTcp`: Self = "_sentinel-lm._tcp"
    /// Sentinel LM [Derick_Snyder]
    public static let `sentinelLmUdp`: Self = "_sentinel-lm._udp"
    /// HART-IP [Wally_Pratt_Jr]
    public static let `hartIpTcp`: Self = "_hart-ip._tcp"
    /// HART-IP [Wally_Pratt_Jr]
    public static let `hartIpUdp`: Self = "_hart-ip._udp"
    /// SentLM Srv2Srv [Derick_Snyder]
    public static let `sentlmSrv2srvTcp`: Self = "_sentlm-srv2srv._tcp"
    /// SentLM Srv2Srv [Derick_Snyder]
    public static let `sentlmSrv2srvUdp`: Self = "_sentlm-srv2srv._udp"
    /// Socalia service mux [Alberto_Raydan_2]
    public static let `socaliaTcp`: Self = "_socalia._tcp"
    /// Socalia service mux [Alberto_Raydan_2]
    public static let `socaliaUdp`: Self = "_socalia._udp"
    /// Talarian_TCP [Leo_Martins]
    public static let `talarianTcpTcp`: Self = "_talarian-tcp._tcp"
    /// Talarian_UDP [Leo_Martins]
    public static let `talarianUdpUdp`: Self = "_talarian-udp._udp"
    /// Oracle OMS non-secure [Todd_Guay]
    public static let `omsNonsecureTcp`: Self = "_oms-nonsecure._tcp"
    /// Oracle OMS non-secure [Todd_Guay]
    public static let `omsNonsecureUdp`: Self = "_oms-nonsecure._udp"
    /// Actifio C2C [Ravi_Kollipara]
    public static let `actifioC2cTcp`: Self = "_actifio-c2c._tcp"
    /// TinyMessage [Josip_Medved]
    public static let `tinymessageUdp`: Self = "_tinymessage._udp"
    /// Hughes Association Protocol [Varun_Santosh]
    public static let `hughesApUdp`: Self = "_hughes-ap._udp"
    /// Actifio UDS Agent [Actifio]
    public static let `actifioudsagentTcp`: Self = "_actifioudsagent._tcp"
    /// Disk to Disk replication between Actifio Clusters [Actifio]
    public static let `actifioreplicTcp`: Self = "_actifioreplic._tcp"
    /// TAEP AS service [Liu_Changchun]
    public static let `taepAsSvcTcp`: Self = "_taep-as-svc._tcp"
    /// TAEP AS service [Liu_Changchun]
    public static let `taepAsSvcUdp`: Self = "_taep-as-svc._udp"
    /// PeerMe Msg Cmd Service [Marcos_Della]
    public static let `pmCmdsvrTcp`: Self = "_pm-cmdsvr._tcp"
    /// PeerMe Msg Cmd Service [Marcos_Della]
    public static let `pmCmdsvrUdp`: Self = "_pm-cmdsvr._udp"
    /// Enterprise Vault Services [Richard_Jones_2]
    public static let `evServicesTcp`: Self = "_ev-services._tcp"
    /// Symantec Autobuild Service [David_Warden]
    public static let `autobuildTcp`: Self = "_autobuild._tcp"
    /// EPSON Projecter Image Transfer [SEIKO_EPSON_4]
    public static let `embProjCmdUdp`: Self = "_emb-proj-cmd._udp"
    /// GradeCam Image Processing [Robert_Porter]
    public static let `gradecamTcp`: Self = "_gradecam._tcp"
    /// Barracuda Backup Protocol [Barracuda_Networks]
    public static let `barracudaBbsTcp`: Self = "_barracuda-bbs._tcp"
    /// Barracuda Backup Protocol [Barracuda_Networks]
    public static let `barracudaBbsUdp`: Self = "_barracuda-bbs._udp"
    /// Policy Commander [Emily_Harris]
    public static let `nbtPcTcp`: Self = "_nbt-pc._tcp"
    /// Policy Commander [Emily_Harris]
    public static let `nbtPcUdp`: Self = "_nbt-pc._udp"
    /// PP ActivationServer [Ian_Bradley]
    public static let `ppactivationTcp`: Self = "_ppactivation._tcp"
    /// ERP-Scale [Ian_Bradley]
    public static let `erpScaleTcp`: Self = "_erp-scale._tcp"
    /// Minotaur SA [Kenneth_Flynn]
    public static let `minotaurSaUdp`: Self = "_minotaur-sa._udp"
    /// MyCTS server port [Jilles_Oldenbeuving]
    public static let `ctsdTcp`: Self = "_ctsd._tcp"
    /// MyCTS server port [Jilles_Oldenbeuving]
    public static let `ctsdUdp`: Self = "_ctsd._udp"
    /// RMONITOR SECURE IANA assigned this well-formed service name as a replacement for "rmonitor_secure". [Kory_Hamzeh]
    public static let `rmonitorSecureTcp`: Self = "_rmonitor-secure._tcp"
    /// RMONITOR SECURE [Kory_Hamzeh]
    public static let `rmonitor_secureTcp`: Self = "_rmonitor_secure._tcp"
    /// RMONITOR SECURE IANA assigned this well-formed service name as a replacement for "rmonitor_secure". [Kory_Hamzeh]
    public static let `rmonitorSecureUdp`: Self = "_rmonitor-secure._udp"
    /// RMONITOR SECURE [Kory_Hamzeh]
    public static let `rmonitor_secureUdp`: Self = "_rmonitor_secure._udp"
    /// Social Alarm Service [Shaun_Byrne]
    public static let `socialAlarmTcp`: Self = "_social-alarm._tcp"
    /// Ascend Tunnel Management Protocol [Kory_Hamzeh]
    public static let `atmpTcp`: Self = "_atmp._tcp"
    /// Ascend Tunnel Management Protocol [Kory_Hamzeh]
    public static let `atmpUdp`: Self = "_atmp._udp"
    /// ESRI SDE Instance IANA assigned this well-formed service name as a replacement for "esri_sde". [Peter_Aronson]
    public static let `esriSdeTcp`: Self = "_esri-sde._tcp"
    /// ESRI SDE Instance [Peter_Aronson]
    public static let `esri_sdeTcp`: Self = "_esri_sde._tcp"
    /// ESRI SDE Remote Start IANA assigned this well-formed service name as a replacement for "esri_sde". [Peter_Aronson]
    public static let `esriSdeUdp`: Self = "_esri-sde._udp"
    /// ESRI SDE Remote Start [Peter_Aronson]
    public static let `esri_sdeUdp`: Self = "_esri_sde._udp"
    /// ESRI SDE Instance Discovery [Peter_Aronson]
    public static let `sdeDiscoveryTcp`: Self = "_sde-discovery._tcp"
    /// ESRI SDE Instance Discovery [Peter_Aronson]
    public static let `sdeDiscoveryUdp`: Self = "_sde-discovery._udp"
    /// BZFlag game server [Tim_Riker]
    public static let `bzflagTcp`: Self = "_bzflag._tcp"
    /// BZFlag game server [Tim_Riker]
    public static let `bzflagUdp`: Self = "_bzflag._udp"
    /// Oracle asControl Agent [Todd_Guay]
    public static let `asctrlAgentTcp`: Self = "_asctrl-agent._tcp"
    /// Oracle asControl Agent [Todd_Guay]
    public static let `asctrlAgentUdp`: Self = "_asctrl-agent._udp"
    /// Russian Online Game [Andrey_Mohov]
    public static let `rugameonlineTcp`: Self = "_rugameonline._tcp"
    /// Mediat Remote Object Exchange [Oliver_Anan]
    public static let `mediatTcp`: Self = "_mediat._tcp"
    /// SNMP over SSH Transport Model 
    public static let `snmpsshTcp`: Self = "_snmpssh._tcp"
    /// SNMP Notification over SSH Transport Model 
    public static let `snmpsshTrapTcp`: Self = "_snmpssh-trap._tcp"
    /// Shadow Backup [Glenn_Allen]
    public static let `sbackupTcp`: Self = "_sbackup._tcp"
    /// Virtual Protocol Adapter [Douglas_Goodall]
    public static let `vpaTcp`: Self = "_vpa._tcp"
    /// Virtual Protocol Adapter Discovery [Douglas_Goodall]
    public static let `vpaDiscUdp`: Self = "_vpa-disc._udp"
    /// ife_1corp IANA assigned this well-formed service name as a replacement for "ife_icorp". [Paul_Annala]
    public static let `ifeIcorpTcp`: Self = "_ife-icorp._tcp"
    /// ife_1corp [Paul_Annala]
    public static let `ife_icorpTcp`: Self = "_ife_icorp._tcp"
    /// ife_1corp IANA assigned this well-formed service name as a replacement for "ife_icorp". [Paul_Annala]
    public static let `ifeIcorpUdp`: Self = "_ife-icorp._udp"
    /// ife_1corp [Paul_Annala]
    public static let `ife_icorpUdp`: Self = "_ife_icorp._udp"
    /// WinPCS Service Connection [Complan_Network_AS]
    public static let `winpcsTcp`: Self = "_winpcs._tcp"
    /// WinPCS Service Connection [Complan_Network_AS]
    public static let `winpcsUdp`: Self = "_winpcs._udp"
    /// SCTE104 Connection [Thomas_Russell]
    public static let `scte104Tcp`: Self = "_scte104._tcp"
    /// SCTE104 Connection [Thomas_Russell]
    public static let `scte104Udp`: Self = "_scte104._udp"
    /// SCTE30 Connection [Thomas_Russell]
    public static let `scte30Tcp`: Self = "_scte30._tcp"
    /// SCTE30 Connection [Thomas_Russell]
    public static let `scte30Udp`: Self = "_scte30._udp"
    /// PC over IP Endpoint Management [Teradici_2]
    public static let `pcoipMgmtTcp`: Self = "_pcoip-mgmt._tcp"
    /// America-Online [Marty_Lyons]
    public static let `aolTcp`: Self = "_aol._tcp"
    /// America-Online [Marty_Lyons]
    public static let `aolUdp`: Self = "_aol._udp"
    /// AmericaOnline1 [Bruce_Mackey]
    public static let `aol1Tcp`: Self = "_aol-1._tcp"
    /// AmericaOnline1 [Bruce_Mackey]
    public static let `aol1Udp`: Self = "_aol-1._udp"
    /// AmericaOnline2 [Bruce_Mackey]
    public static let `aol2Tcp`: Self = "_aol-2._tcp"
    /// AmericaOnline2 [Bruce_Mackey]
    public static let `aol2Udp`: Self = "_aol-2._udp"
    /// AmericaOnline3 [Bruce_Mackey]
    public static let `aol3Tcp`: Self = "_aol-3._tcp"
    /// AmericaOnline3 [Bruce_Mackey]
    public static let `aol3Udp`: Self = "_aol-3._udp"
    /// CipherPoint Config Service [CipherPoint]
    public static let `cpscommTcp`: Self = "_cpscomm._tcp"
    /// The protocol is used by a license server and client programs to control use of program licenses that float to networked machines [AMPL_Optimization]
    public static let `amplLicTcp`: Self = "_ampl-lic._tcp"
    /// The protocol is used by two programs that exchange "table" data used in the AMPL modeling language [AMPL_Optimization]
    public static let `amplTableproxyTcp`: Self = "_ampl-tableproxy._tcp"
    /// Tunstall Lone worker device interface [Tunstall_Healthcare_UK_Ltd]
    public static let `tunstallLwpTcp`: Self = "_tunstall-lwp._tcp"
    /// TARGUS GetData [John_Keaveney]
    public static let `targusGetdataTcp`: Self = "_targus-getdata._tcp"
    /// TARGUS GetData [John_Keaveney]
    public static let `targusGetdataUdp`: Self = "_targus-getdata._udp"
    /// TARGUS GetData 1 [John_Keaveney]
    public static let `targusGetdata1Tcp`: Self = "_targus-getdata1._tcp"
    /// TARGUS GetData 1 [John_Keaveney]
    public static let `targusGetdata1Udp`: Self = "_targus-getdata1._udp"
    /// TARGUS GetData 2 [John_Keaveney]
    public static let `targusGetdata2Tcp`: Self = "_targus-getdata2._tcp"
    /// TARGUS GetData 2 [John_Keaveney]
    public static let `targusGetdata2Udp`: Self = "_targus-getdata2._udp"
    /// TARGUS GetData 3 [John_Keaveney]
    public static let `targusGetdata3Tcp`: Self = "_targus-getdata3._tcp"
    /// TARGUS GetData 3 [John_Keaveney]
    public static let `targusGetdata3Udp`: Self = "_targus-getdata3._udp"
    /// Nomad Device Video Transfer [Morega_System]
    public static let `nomadTcp`: Self = "_nomad._tcp"
    /// NOTEZA Data Safety Service [CNS_a.s.]
    public static let `notezaTcp`: Self = "_noteza._tcp"
    /// NOTEZA Data Safety Service [CNS_a.s.]
    public static let `notezaSctp`: Self = "_noteza._sctp"
    /// XMPP Client Connection 
    public static let `xmppClientTcp`: Self = "_xmpp-client._tcp"
    /// HP Virtual Machine Group Management [John_Williams]
    public static let `hpvirtgrpTcp`: Self = "_hpvirtgrp._tcp"
    /// HP Virtual Machine Group Management [John_Williams]
    public static let `hpvirtgrpUdp`: Self = "_hpvirtgrp._udp"
    /// HP Virtual Machine Console Operations [John_Williams]
    public static let `hpvirtctrlTcp`: Self = "_hpvirtctrl._tcp"
    /// HP Virtual Machine Console Operations [John_Williams]
    public static let `hpvirtctrlUdp`: Self = "_hpvirtctrl._udp"
    /// HP Server [Brett_Green_2]
    public static let `hpServerTcp`: Self = "_hp-server._tcp"
    /// HP Server [Brett_Green_2]
    public static let `hpServerUdp`: Self = "_hp-server._udp"
    /// HP Status [Brett_Green_2]
    public static let `hpStatusTcp`: Self = "_hp-status._tcp"
    /// HP Status [Brett_Green_2]
    public static let `hpStatusUdp`: Self = "_hp-status._udp"
    /// HP System Performance Metric Service [Chris_Bertin]
    public static let `perfdTcp`: Self = "_perfd._tcp"
    /// HP System Performance Metric Service [Chris_Bertin]
    public static let `perfdUdp`: Self = "_perfd._udp"
    /// HP Virtual Room Service [Scott_Levin]
    public static let `hpvroomTcp`: Self = "_hpvroom._tcp"
    /// Netflow/IPFIX/sFlow Collector and Forwarder Management [JaxMP]
    public static let `jaxflowTcp`: Self = "_jaxflow._tcp"
    /// JaxMP RealFlow application and protocol data [JaxMP]
    public static let `jaxflowDataTcp`: Self = "_jaxflow-data._tcp"
    /// Remote Control of Scan Software for Cruse Scanners [Cruse_Spezialmaschinen_GmbH]
    public static let `crusecontrolTcp`: Self = "_crusecontrol._tcp"
    /// Cruse Scanning System Service [Christof_J_Reetz]
    public static let `csedaemonTcp`: Self = "_csedaemon._tcp"
    /// Etinnae Network File Service [Chris_Peel]
    public static let `enfsTcp`: Self = "_enfs._tcp"
    /// EEnet communications [Helmut_Giritzer]
    public static let `eenetTcp`: Self = "_eenet._tcp"
    /// EEnet communications [Helmut_Giritzer]
    public static let `eenetUdp`: Self = "_eenet._udp"
    /// Galaxy Network Service [Michael_Andre_2]
    public static let `galaxyNetworkTcp`: Self = "_galaxy-network._tcp"
    /// Galaxy Network Service [Michael_Andre_2]
    public static let `galaxyNetworkUdp`: Self = "_galaxy-network._udp"
    ///  
    public static let `padl2simTcp`: Self = "_padl2sim._tcp"
    ///  
    public static let `padl2simUdp`: Self = "_padl2sim._udp"
    /// m-net discovery [Andy_Crick]
    public static let `mnetDiscoveryTcp`: Self = "_mnet-discovery._tcp"
    /// m-net discovery [Andy_Crick]
    public static let `mnetDiscoveryUdp`: Self = "_mnet-discovery._udp"
    /// ATTUne API [Bellvedi_Ltd]
    public static let `attuneTcp`: Self = "_attune._tcp"
    /// xyClient Status API and rendevous point [Xycare_Ltd]
    public static let `xycstatusTcp`: Self = "_xycstatus._tcp"
    /// DownTools Control Protocol [Jarrod_Sayers]
    public static let `downtoolsTcp`: Self = "_downtools._tcp"
    /// DownTools Discovery Protocol [Jarrod_Sayers]
    public static let `downtoolsDiscUdp`: Self = "_downtools-disc._udp"
    /// CAPWAP Control Protocol 
    public static let `capwapControlUdp`: Self = "_capwap-control._udp"
    /// CAPWAP Data Protocol 
    public static let `capwapDataUdp`: Self = "_capwap-data._udp"
    /// CA Access Control Web Service [Gabriel_Kalmar]
    public static let `caacwsTcp`: Self = "_caacws._tcp"
    /// CA Access Control Web Service [Gabriel_Kalmar]
    public static let `caacwsUdp`: Self = "_caacws._udp"
    /// CA AC Lang Service [Gabriel_Kalmar]
    public static let `caaclang2Tcp`: Self = "_caaclang2._tcp"
    /// CA AC Lang Service [Gabriel_Kalmar]
    public static let `caaclang2Udp`: Self = "_caaclang2._udp"
    /// soaGateway [Greg_Bodine]
    public static let `soagatewayTcp`: Self = "_soagateway._tcp"
    /// soaGateway [Greg_Bodine]
    public static let `soagatewayUdp`: Self = "_soagateway._udp"
    /// CA eTrust VM Service [Kevin_Bond]
    public static let `caevmsTcp`: Self = "_caevms._tcp"
    /// CA eTrust VM Service [Kevin_Bond]
    public static let `caevmsUdp`: Self = "_caevms._udp"
    /// Movaz SSC [Lou_Berger]
    public static let `movazSscTcp`: Self = "_movaz-ssc._tcp"
    /// Movaz SSC [Lou_Berger]
    public static let `movazSscUdp`: Self = "_movaz-ssc._udp"
    /// Kohler Power Device Protocol [Bill_Gross]
    public static let `kpdpTcp`: Self = "_kpdp._tcp"
    /// LogCabin storage service [Diego_Ongaro]
    public static let `logcabinTcp`: Self = "_logcabin._tcp"
    /// XMPP Server Connection 
    public static let `xmppServerTcp`: Self = "_xmpp-server._tcp"
    /// Cartographer XMP [Bobby_Krupczak_2]
    public static let `cartographerxmpTcp`: Self = "_cartographerxmp._tcp"
    /// Cartographer XMP [Bobby_Krupczak_2]
    public static let `cartographerxmpUdp`: Self = "_cartographerxmp._udp"
    /// StageSoft CueLink messaging [Todd_Pichler]
    public static let `cuelinkTcp`: Self = "_cuelink._tcp"
    /// StageSoft CueLink discovery [Todd_Pichler]
    public static let `cuelinkDiscUdp`: Self = "_cuelink-disc._udp"
    /// PK [Patrick_Kara]
    public static let `pkTcp`: Self = "_pk._tcp"
    /// PK [Patrick_Kara]
    public static let `pkUdp`: Self = "_pk._udp"
    /// Bidirectional-streams Over Synchronous HTTP (BOSH) [Peter_Saint_Andre]
    public static let `xmppBoshTcp`: Self = "_xmpp-bosh._tcp"
    /// Undo License Manager [Undo_Ltd]
    public static let `undoLmTcp`: Self = "_undo-lm._tcp"
    /// Marimba Transmitter Port [Johan_Eriksson]
    public static let `transmitPortTcp`: Self = "_transmit-port._tcp"
    /// Marimba Transmitter Port [Johan_Eriksson]
    public static let `transmitPortUdp`: Self = "_transmit-port._udp"
    /// XMPP Link-Local Messaging [Eric_St_Onge]
    public static let `presenceTcp`: Self = "_presence._tcp"
    /// XMPP Link-Local Messaging [Eric_St_Onge]
    public static let `presenceUdp`: Self = "_presence._udp"
    /// NLG Data Service [Andy_Shellam]
    public static let `nlgDataTcp`: Self = "_nlg-data._tcp"
    /// NLG Data Service [Andy_Shellam]
    public static let `nlgDataUdp`: Self = "_nlg-data._udp"
    /// HA cluster heartbeat [Eric_Soderberg_2][Edward_Yim]
    public static let `haclHbTcp`: Self = "_hacl-hb._tcp"
    /// HA cluster heartbeat [Eric_Soderberg_2][Edward_Yim]
    public static let `haclHbUdp`: Self = "_hacl-hb._udp"
    /// HA cluster general services [Eric_Soderberg_2][Edward_Yim]
    public static let `haclGsTcp`: Self = "_hacl-gs._tcp"
    /// HA cluster general services [Eric_Soderberg_2][Edward_Yim]
    public static let `haclGsUdp`: Self = "_hacl-gs._udp"
    /// HA cluster configuration [Eric_Soderberg_2][Edward_Yim]
    public static let `haclCfgTcp`: Self = "_hacl-cfg._tcp"
    /// HA cluster configuration [Eric_Soderberg_2][Edward_Yim]
    public static let `haclCfgUdp`: Self = "_hacl-cfg._udp"
    /// HA cluster probing [Eric_Soderberg_2][Edward_Yim]
    public static let `haclProbeTcp`: Self = "_hacl-probe._tcp"
    /// HA cluster probing [Eric_Soderberg_2][Edward_Yim]
    public static let `haclProbeUdp`: Self = "_hacl-probe._udp"
    /// HA Cluster Commands [Eric_Soderberg_2][Edward_Yim]
    public static let `haclLocalTcp`: Self = "_hacl-local._tcp"
    /// HA Cluster Commands [Eric_Soderberg_2][Edward_Yim]
    public static let `haclLocalUdp`: Self = "_hacl-local._udp"
    /// HA Cluster Test [Eric_Soderberg_2][Edward_Yim]
    public static let `haclTestTcp`: Self = "_hacl-test._tcp"
    /// HA Cluster Test [Eric_Soderberg_2][Edward_Yim]
    public static let `haclTestUdp`: Self = "_hacl-test._udp"
    /// Sun MC Group [Michael_DeMoney]
    public static let `sunMcGrpTcp`: Self = "_sun-mc-grp._tcp"
    /// Sun MC Group [Michael_DeMoney]
    public static let `sunMcGrpUdp`: Self = "_sun-mc-grp._udp"
    /// SCO AIP [Barrie_Cooper]
    public static let `scoAipTcp`: Self = "_sco-aip._tcp"
    /// SCO AIP [Barrie_Cooper]
    public static let `scoAipUdp`: Self = "_sco-aip._udp"
    /// CFengine [Mark_Burgess]
    public static let `cfengineTcp`: Self = "_cfengine._tcp"
    /// CFengine [Mark_Burgess]
    public static let `cfengineUdp`: Self = "_cfengine._udp"
    /// J Printer [Ken_Blackwell]
    public static let `jprinterTcp`: Self = "_jprinter._tcp"
    /// J Printer [Ken_Blackwell]
    public static let `jprinterUdp`: Self = "_jprinter._udp"
    /// Outlaws [Richard_Fife]
    public static let `outlawsTcp`: Self = "_outlaws._tcp"
    /// Outlaws [Richard_Fife]
    public static let `outlawsUdp`: Self = "_outlaws._udp"
    /// Permabit Client-Server [Jered_Floyd]
    public static let `permabitCsTcp`: Self = "_permabit-cs._tcp"
    /// Permabit Client-Server [Jered_Floyd]
    public static let `permabitCsUdp`: Self = "_permabit-cs._udp"
    /// Real-time & Reliable Data [Ted_Hoshi]
    public static let `rrdpTcp`: Self = "_rrdp._tcp"
    /// Real-time & Reliable Data [Ted_Hoshi]
    public static let `rrdpUdp`: Self = "_rrdp._udp"
    /// opalis-rbt-ipc [Laurent_Domenech]
    public static let `opalisRbtIpcTcp`: Self = "_opalis-rbt-ipc._tcp"
    /// opalis-rbt-ipc [Laurent_Domenech]
    public static let `opalisRbtIpcUdp`: Self = "_opalis-rbt-ipc._udp"
    /// HA Cluster UDP Polling [Hoa_Nguyen]
    public static let `haclPollTcp`: Self = "_hacl-poll._tcp"
    /// HA Cluster UDP Polling [Hoa_Nguyen]
    public static let `haclPollUdp`: Self = "_hacl-poll._udp"
    /// HPBladeSystem Monitor Service [Alan_Minchew]
    public static let `hpblademsTcp`: Self = "_hpbladems._tcp"
    /// HP Device Monitor Service [Alan_Minchew]
    public static let `hpdevmsTcp`: Self = "_hpdevms._tcp"
    /// PKIX Certificate Management using CMS (CMC) [IESG]
    public static let `pkixCmcTcp`: Self = "_pkix-cmc._tcp"
    /// Webservices-based Zn interface of BSF [Bert_Paul]
    public static let `bsfserverZnTcp`: Self = "_bsfserver-zn._tcp"
    /// Webservices-based Zn interface of BSF over SSL [Bert_Paul]
    public static let `bsfsvrZnSslTcp`: Self = "_bsfsvr-zn-ssl._tcp"
    /// Sculptor Database Server [Keith_Ashman]
    public static let `kfserverTcp`: Self = "_kfserver._tcp"
    /// Sculptor Database Server [Keith_Ashman]
    public static let `kfserverUdp`: Self = "_kfserver._udp"
    /// xkoto DRCP [Jeff_Heisz]
    public static let `xkotodrcpTcp`: Self = "_xkotodrcp._tcp"
    /// xkoto DRCP [Jeff_Heisz]
    public static let `xkotodrcpUdp`: Self = "_xkotodrcp._udp"
    /// Session Traversal Utilities for NAT (STUN) port [IESG]
    public static let `stunsTcp`: Self = "_stuns._tcp"
    /// STUN over DTLS [IESG]
    public static let `stunsUdp`: Self = "_stuns._udp"
    /// TURN over TLS 
    public static let `turnsTcp`: Self = "_turns._tcp"
    /// TURN over DTLS [IESG]
    public static let `turnsUdp`: Self = "_turns._udp"
    /// STUN Behavior Discovery over TLS 
    public static let `stunBehaviorsTcp`: Self = "_stun-behaviors._tcp"
    /// Reserved for a future enhancement of STUN-BEHAVIOR 
    public static let `stunBehaviorsUdp`: Self = "_stun-behaviors._udp"
    /// Port Control Protocol Multicast [IESG]
    public static let `pcpMulticastUdp`: Self = "_pcp-multicast._udp"
    /// Port Control Protocol [IESG]
    public static let `pcpUdp`: Self = "_pcp._udp"
    /// DNS Long-Lived Queries [Stuart_Cheshire]
    public static let `dnsLlqTcp`: Self = "_dns-llq._tcp"
    /// DNS Long-Lived Queries [Stuart_Cheshire]
    public static let `dnsLlqUdp`: Self = "_dns-llq._udp"
    /// Multicast DNS [IESG]
    public static let `mdnsTcp`: Self = "_mdns._tcp"
    /// Multicast DNS [IESG]
    public static let `mdnsUdp`: Self = "_mdns._udp"
    /// Multicast DNS Responder IPC [Stuart_Cheshire_3]
    public static let `mdnsresponderTcp`: Self = "_mdnsresponder._tcp"
    /// Multicast DNS Responder IPC [Stuart_Cheshire_3]
    public static let `mdnsresponderUdp`: Self = "_mdnsresponder._udp"
    /// LLMNR [Bernard_Aboba]
    public static let `llmnrTcp`: Self = "_llmnr._tcp"
    /// LLMNR [Bernard_Aboba]
    public static let `llmnrUdp`: Self = "_llmnr._udp"
    /// Microsoft Small Business [Gopikrishna_Sandra]
    public static let `msSmlbizTcp`: Self = "_ms-smlbiz._tcp"
    /// Microsoft Small Business [Gopikrishna_Sandra]
    public static let `msSmlbizUdp`: Self = "_ms-smlbiz._udp"
    /// Web Services for Devices [Henry_Rawas]
    public static let `wsdapiTcp`: Self = "_wsdapi._tcp"
    /// Web Services for Devices [Henry_Rawas]
    public static let `wsdapiUdp`: Self = "_wsdapi._udp"
    /// WS for Devices Secured [Henry_Rawas]
    public static let `wsdapiSTcp`: Self = "_wsdapi-s._tcp"
    /// WS for Devices Secured [Henry_Rawas]
    public static let `wsdapiSUdp`: Self = "_wsdapi-s._udp"
    /// Microsoft Alerter [Marc_McClure]
    public static let `msAlerterTcp`: Self = "_ms-alerter._tcp"
    /// Microsoft Alerter [Marc_McClure]
    public static let `msAlerterUdp`: Self = "_ms-alerter._udp"
    /// Protocol for Windows SideShow [Dan_Polivy]
    public static let `msSideshowTcp`: Self = "_ms-sideshow._tcp"
    /// Protocol for Windows SideShow [Dan_Polivy]
    public static let `msSideshowUdp`: Self = "_ms-sideshow._udp"
    /// Secure Protocol for Windows SideShow [Dan_Polivy]
    public static let `msSSideshowTcp`: Self = "_ms-s-sideshow._tcp"
    /// Secure Protocol for Windows SideShow [Dan_Polivy]
    public static let `msSSideshowUdp`: Self = "_ms-s-sideshow._udp"
    /// Microsoft Windows Server WSD2 Service [Erhan_Soyer_Osman]
    public static let `serverwsd2Tcp`: Self = "_serverwsd2._tcp"
    /// Microsoft Windows Server WSD2 Service [Erhan_Soyer_Osman]
    public static let `serverwsd2Udp`: Self = "_serverwsd2._udp"
    /// Windows Network Projection [Rob_Williams]
    public static let `netProjectionTcp`: Self = "_net-projection._tcp"
    /// Windows Network Projection [Rob_Williams]
    public static let `netProjectionUdp`: Self = "_net-projection._udp"
    /// Microsoft Kernel Debugger [Microsoft_Corporation_4]
    public static let `kdnetUdp`: Self = "_kdnet._udp"
    /// StressTester(tm) Injector [Graham_Parsons]
    public static let `stresstesterTcp`: Self = "_stresstester._tcp"
    /// StressTester(tm) Injector [Graham_Parsons]
    public static let `stresstesterUdp`: Self = "_stresstester._udp"
    /// Elektron Administration [Chris_Hawk]
    public static let `elektronAdminTcp`: Self = "_elektron-admin._tcp"
    /// Elektron Administration [Chris_Hawk]
    public static let `elektronAdminUdp`: Self = "_elektron-admin._udp"
    /// SecurityChase [Daisuke_Shinomiya]
    public static let `securitychaseTcp`: Self = "_securitychase._tcp"
    /// SecurityChase [Daisuke_Shinomiya]
    public static let `securitychaseUdp`: Self = "_securitychase._udp"
    /// Excerpt Search [John_Hinsdale]
    public static let `excerptTcp`: Self = "_excerpt._tcp"
    /// Excerpt Search [John_Hinsdale]
    public static let `excerptUdp`: Self = "_excerpt._udp"
    /// Excerpt Search Secure [John_Hinsdale]
    public static let `excerptsTcp`: Self = "_excerpts._tcp"
    /// Excerpt Search Secure [John_Hinsdale]
    public static let `excerptsUdp`: Self = "_excerpts._udp"
    /// HPOMS-CI-LSTN [Harold_Froehling]
    public static let `hpomsCiLstnTcp`: Self = "_hpoms-ci-lstn._tcp"
    /// HPOMS-CI-LSTN [Harold_Froehling]
    public static let `hpomsCiLstnUdp`: Self = "_hpoms-ci-lstn._udp"
    /// HPOMS-DPS-LSTN [Harold_Froehling]
    public static let `hpomsDpsLstnTcp`: Self = "_hpoms-dps-lstn._tcp"
    /// HPOMS-DPS-LSTN [Harold_Froehling]
    public static let `hpomsDpsLstnUdp`: Self = "_hpoms-dps-lstn._udp"
    /// NetSupport [Paul_Sanders_2]
    public static let `netsupportTcp`: Self = "_netsupport._tcp"
    /// NetSupport [Paul_Sanders_2]
    public static let `netsupportUdp`: Self = "_netsupport._udp"
    /// Systemics Sox [Gary_Howland]
    public static let `systemicsSoxTcp`: Self = "_systemics-sox._tcp"
    /// Systemics Sox [Gary_Howland]
    public static let `systemicsSoxUdp`: Self = "_systemics-sox._udp"
    /// Foresyte-Clear [Jorge_Aldana]
    public static let `foresyteClearTcp`: Self = "_foresyte-clear._tcp"
    /// Foresyte-Clear [Jorge_Aldana]
    public static let `foresyteClearUdp`: Self = "_foresyte-clear._udp"
    /// Foresyte-Sec [Jorge_Aldana]
    public static let `foresyteSecTcp`: Self = "_foresyte-sec._tcp"
    /// Foresyte-Sec [Jorge_Aldana]
    public static let `foresyteSecUdp`: Self = "_foresyte-sec._udp"
    /// Salient Data Server [Richard_Farnham]
    public static let `salientDtasrvTcp`: Self = "_salient-dtasrv._tcp"
    /// Salient Data Server [Richard_Farnham]
    public static let `salientDtasrvUdp`: Self = "_salient-dtasrv._udp"
    /// Salient User Manager [Richard_Farnham]
    public static let `salientUsrmgrTcp`: Self = "_salient-usrmgr._tcp"
    /// Salient User Manager [Richard_Farnham]
    public static let `salientUsrmgrUdp`: Self = "_salient-usrmgr._udp"
    /// ActNet [Simon_Robillard]
    public static let `actnetTcp`: Self = "_actnet._tcp"
    /// ActNet [Simon_Robillard]
    public static let `actnetUdp`: Self = "_actnet._udp"
    /// Continuus [Steven_Holtsberg]
    public static let `continuusTcp`: Self = "_continuus._tcp"
    /// Continuus [Steven_Holtsberg]
    public static let `continuusUdp`: Self = "_continuus._udp"
    /// WWIOTALK [Roger_Knobbe]
    public static let `wwiotalkTcp`: Self = "_wwiotalk._tcp"
    /// WWIOTALK [Roger_Knobbe]
    public static let `wwiotalkUdp`: Self = "_wwiotalk._udp"
    /// StatusD [Stephen_Misel_2]
    public static let `statusdTcp`: Self = "_statusd._tcp"
    /// StatusD [Stephen_Misel_2]
    public static let `statusdUdp`: Self = "_statusd._udp"
    /// NS Server [Jeffrey_Chiao]
    public static let `nsServerTcp`: Self = "_ns-server._tcp"
    /// NS Server [Jeffrey_Chiao]
    public static let `nsServerUdp`: Self = "_ns-server._udp"
    /// SNS Gateway [Mary_Holstage]
    public static let `snsGatewayTcp`: Self = "_sns-gateway._tcp"
    /// SNS Gateway [Mary_Holstage]
    public static let `snsGatewayUdp`: Self = "_sns-gateway._udp"
    /// SNS Agent [Mary_Holstage]
    public static let `snsAgentTcp`: Self = "_sns-agent._tcp"
    /// SNS Agent [Mary_Holstage]
    public static let `snsAgentUdp`: Self = "_sns-agent._udp"
    /// MCNTP [Heiko_Rupp]
    public static let `mcntpTcp`: Self = "_mcntp._tcp"
    /// MCNTP [Heiko_Rupp]
    public static let `mcntpUdp`: Self = "_mcntp._udp"
    /// DJ-ICE [Don_Tyson_2]
    public static let `djIceTcp`: Self = "_dj-ice._tcp"
    /// DJ-ICE [Don_Tyson_2]
    public static let `djIceUdp`: Self = "_dj-ice._udp"
    /// Cylink-C [John_Jobe]
    public static let `cylinkCTcp`: Self = "_cylink-c._tcp"
    /// Cylink-C [John_Jobe]
    public static let `cylinkCUdp`: Self = "_cylink-c._udp"
    /// Net Support 2 [Paul_Sanders]
    public static let `netsupport2Tcp`: Self = "_netsupport2._tcp"
    /// Net Support 2 [Paul_Sanders]
    public static let `netsupport2Udp`: Self = "_netsupport2._udp"
    /// Salient MUX [Richard_Farnham]
    public static let `salientMuxTcp`: Self = "_salient-mux._tcp"
    /// Salient MUX [Richard_Farnham]
    public static let `salientMuxUdp`: Self = "_salient-mux._udp"
    /// VIRTUALUSER [Chad_Williams]
    public static let `virtualuserTcp`: Self = "_virtualuser._tcp"
    /// VIRTUALUSER [Chad_Williams]
    public static let `virtualuserUdp`: Self = "_virtualuser._udp"
    /// Beyond Remote [Michael_Berg]
    public static let `beyondRemoteTcp`: Self = "_beyond-remote._tcp"
    /// Beyond Remote [Michael_Berg]
    public static let `beyondRemoteUdp`: Self = "_beyond-remote._udp"
    /// Beyond Remote Command Channel [Michael_Berg]
    public static let `brChannelTcp`: Self = "_br-channel._tcp"
    /// Beyond Remote Command Channel [Michael_Berg]
    public static let `brChannelUdp`: Self = "_br-channel._udp"
    /// DEVBASIC [Curtis_Smith]
    public static let `devbasicTcp`: Self = "_devbasic._tcp"
    /// DEVBASIC [Curtis_Smith]
    public static let `devbasicUdp`: Self = "_devbasic._udp"
    /// SCO-PEER-TTA [Andrew_Shire]
    public static let `scoPeerTtaTcp`: Self = "_sco-peer-tta._tcp"
    /// SCO-PEER-TTA [Andrew_Shire]
    public static let `scoPeerTtaUdp`: Self = "_sco-peer-tta._udp"
    /// TELACONSOLE [Joseph_M_Newcomer]
    public static let `telaconsoleTcp`: Self = "_telaconsole._tcp"
    /// TELACONSOLE [Joseph_M_Newcomer]
    public static let `telaconsoleUdp`: Self = "_telaconsole._udp"
    /// Billing and Accounting System Exchange [Odo_Maletzki]
    public static let `baseTcp`: Self = "_base._tcp"
    /// Billing and Accounting System Exchange [Odo_Maletzki]
    public static let `baseUdp`: Self = "_base._udp"
    /// RADEC CORP [David_Chell]
    public static let `radecCorpTcp`: Self = "_radec-corp._tcp"
    /// RADEC CORP [David_Chell]
    public static let `radecCorpUdp`: Self = "_radec-corp._udp"
    /// PARK AGENT [John_Clifford]
    public static let `parkAgentTcp`: Self = "_park-agent._tcp"
    /// PARK AGENT [John_Clifford]
    public static let `parkAgentUdp`: Self = "_park-agent._udp"
    /// PostgreSQL Database [Tom_Lane]
    public static let `postgresqlTcp`: Self = "_postgresql._tcp"
    /// PostgreSQL Database [Tom_Lane]
    public static let `postgresqlUdp`: Self = "_postgresql._udp"
    /// Pyrrho DBMS [Malcolm_Crowe]
    public static let `pyrrhoTcp`: Self = "_pyrrho._tcp"
    /// Pyrrho DBMS [Malcolm_Crowe]
    public static let `pyrrhoUdp`: Self = "_pyrrho._udp"
    /// SGI Array Services Daemon [Karl_Feind]
    public static let `sgiArraydTcp`: Self = "_sgi-arrayd._tcp"
    /// SGI Array Services Daemon [Karl_Feind]
    public static let `sgiArraydUdp`: Self = "_sgi-arrayd._udp"
    /// SCEANICS situation and action notification [Richard_Olsen]
    public static let `sceanicsTcp`: Self = "_sceanics._tcp"
    /// SCEANICS situation and action notification [Richard_Olsen]
    public static let `sceanicsUdp`: Self = "_sceanics._udp"
    /// pmip6-cntl 
    public static let `pmip6CntlUdp`: Self = "_pmip6-cntl._udp"
    /// pmip6-data 
    public static let `pmip6DataUdp`: Self = "_pmip6-data._udp"
    /// Pearson HTTPS [Pearson]
    public static let `spssTcp`: Self = "_spss._tcp"
    /// Pearson HTTPS [Pearson]
    public static let `spssUdp`: Self = "_spss._udp"
    /// Server Message Block over Remote Direct Memory Access [Microsoft_Corporation_2]
    public static let `smbdirectTcp`: Self = "_smbdirect._tcp"
    /// Server Message Block over Remote Direct Memory Access [Microsoft_Corporation_2]
    public static let `smbdirectSctp`: Self = "_smbdirect._sctp"
    /// TiePie engineering data acquisition [TiePie_engineering]
    public static let `tiepieTcp`: Self = "_tiepie._tcp"
    /// TiePie engineering data acquisition (discovery) [TiePie_engineering]
    public static let `tiepieDiscUdp`: Self = "_tiepie-disc._udp"
    /// SureBox [Emin_BORU]
    public static let `sureboxTcp`: Self = "_surebox._tcp"
    /// SureBox [Emin_BORU]
    public static let `sureboxUdp`: Self = "_surebox._udp"
    /// APC 5454 [American_Power_Conve]
    public static let `apc5454Tcp`: Self = "_apc-5454._tcp"
    /// APC 5454 [American_Power_Conve]
    public static let `apc5454Udp`: Self = "_apc-5454._udp"
    /// APC 5455 [American_Power_Conve]
    public static let `apc5455Tcp`: Self = "_apc-5455._tcp"
    /// APC 5455 [American_Power_Conve]
    public static let `apc5455Udp`: Self = "_apc-5455._udp"
    /// APC 5456 [American_Power_Conve]
    public static let `apc5456Tcp`: Self = "_apc-5456._tcp"
    /// APC 5456 [American_Power_Conve]
    public static let `apc5456Udp`: Self = "_apc-5456._udp"
    /// SILKMETER [Klaus_Fellner]
    public static let `silkmeterTcp`: Self = "_silkmeter._tcp"
    /// SILKMETER [Klaus_Fellner]
    public static let `silkmeterUdp`: Self = "_silkmeter._udp"
    /// TTL Publisher [Peter_Jacobs]
    public static let `ttlPublisherTcp`: Self = "_ttl-publisher._tcp"
    /// TTL Publisher [Peter_Jacobs]
    public static let `ttlPublisherUdp`: Self = "_ttl-publisher._udp"
    /// TTL Price Proxy [Peter_Jacobs]
    public static let `ttlpriceproxyTcp`: Self = "_ttlpriceproxy._tcp"
    /// TTL Price Proxy [Peter_Jacobs]
    public static let `ttlpriceproxyUdp`: Self = "_ttlpriceproxy._udp"
    /// Quail Networks Object Broker [Craig_N_Bissell]
    public static let `quailnetTcp`: Self = "_quailnet._tcp"
    /// Quail Networks Object Broker [Craig_N_Bissell]
    public static let `quailnetUdp`: Self = "_quailnet._udp"
    /// NETOPS-BROKER [John_R_Deuel]
    public static let `netopsBrokerTcp`: Self = "_netops-broker._tcp"
    /// NETOPS-BROKER [John_R_Deuel]
    public static let `netopsBrokerUdp`: Self = "_netops-broker._udp"
    /// The Apsolab company's data collection protocol (native api) [Apsolab_Inc]
    public static let `apsolabColTcp`: Self = "_apsolab-col._tcp"
    /// The Apsolab company's secure data collection protocol (native api) [Apsolab_Inc]
    public static let `apsolabColsTcp`: Self = "_apsolab-cols._tcp"
    /// The Apsolab company's dynamic tag protocol [Apsolab_Inc]
    public static let `apsolabTagTcp`: Self = "_apsolab-tag._tcp"
    /// The Apsolab company's secure dynamic tag protocol [Apsolab_Inc]
    public static let `apsolabTagsTcp`: Self = "_apsolab-tags._tcp"
    /// The Apsolab company's status query protocol [Apsolab_Inc]
    public static let `apsolabRpcUdp`: Self = "_apsolab-rpc._udp"
    /// The Apsolab company's data retrieval protocol [Apsolab_Inc]
    public static let `apsolabDataTcp`: Self = "_apsolab-data._tcp"
    /// fcp-addr-srvr1 [Ken_Wittmer]
    public static let `fcpAddrSrvr1Tcp`: Self = "_fcp-addr-srvr1._tcp"
    /// fcp-addr-srvr1 [Ken_Wittmer]
    public static let `fcpAddrSrvr1Udp`: Self = "_fcp-addr-srvr1._udp"
    /// fcp-addr-srvr2 [Ken_Wittmer]
    public static let `fcpAddrSrvr2Tcp`: Self = "_fcp-addr-srvr2._tcp"
    /// fcp-addr-srvr2 [Ken_Wittmer]
    public static let `fcpAddrSrvr2Udp`: Self = "_fcp-addr-srvr2._udp"
    /// fcp-srvr-inst1 [Ken_Wittmer]
    public static let `fcpSrvrInst1Tcp`: Self = "_fcp-srvr-inst1._tcp"
    /// fcp-srvr-inst1 [Ken_Wittmer]
    public static let `fcpSrvrInst1Udp`: Self = "_fcp-srvr-inst1._udp"
    /// fcp-srvr-inst2 [Ken_Wittmer]
    public static let `fcpSrvrInst2Tcp`: Self = "_fcp-srvr-inst2._tcp"
    /// fcp-srvr-inst2 [Ken_Wittmer]
    public static let `fcpSrvrInst2Udp`: Self = "_fcp-srvr-inst2._udp"
    /// fcp-cics-gw1 [Ken_Wittmer]
    public static let `fcpCicsGw1Tcp`: Self = "_fcp-cics-gw1._tcp"
    /// fcp-cics-gw1 [Ken_Wittmer]
    public static let `fcpCicsGw1Udp`: Self = "_fcp-cics-gw1._udp"
    /// Checkout Database [Dirk_Stoop]
    public static let `checkoutdbTcp`: Self = "_checkoutdb._tcp"
    /// Checkout Database [Dirk_Stoop]
    public static let `checkoutdbUdp`: Self = "_checkoutdb._udp"
    /// Amcom Mobile Connect [Aaron_Fracht_Monroe]
    public static let `amcTcp`: Self = "_amc._tcp"
    /// Amcom Mobile Connect [Aaron_Fracht_Monroe]
    public static let `amcUdp`: Self = "_amc._udp"
    /// PowerSysLab Electrical Management [PowerSysLab]
    public static let `pslManagementTcp`: Self = "_psl-management._tcp"
    /// Matter Operational Discovery and Communi [Connectivity_Standards_Alliance]
    public static let `matterTcp`: Self = "_matter._tcp"
    /// Matter Operational Discovery and Communi [Connectivity_Standards_Alliance]
    public static let `matterUdp`: Self = "_matter._udp"
    /// Model Railway control using the CBUS message protocol [MERG]
    public static let `cbusTcp`: Self = "_cbus._tcp"
    /// SGI Eventmond Port [Andrei_Vilkotski]
    public static let `sgiEventmondTcp`: Self = "_sgi-eventmond._tcp"
    /// SGI Eventmond Port [Andrei_Vilkotski]
    public static let `sgiEventmondUdp`: Self = "_sgi-eventmond._udp"
    /// SGI ESP HTTP [Vladimir_Legalov]
    public static let `sgiEsphttpTcp`: Self = "_sgi-esphttp._tcp"
    /// SGI ESP HTTP [Vladimir_Legalov]
    public static let `sgiEsphttpUdp`: Self = "_sgi-esphttp._udp"
    /// Personal Agent [Jackie_Wu]
    public static let `personalAgentTcp`: Self = "_personal-agent._tcp"
    /// Personal Agent [Jackie_Wu]
    public static let `personalAgentUdp`: Self = "_personal-agent._udp"
    /// Freeciv gameplay [Reinier_Post_and_Pau]
    public static let `freecivTcp`: Self = "_freeciv._tcp"
    /// Freeciv gameplay [Reinier_Post_and_Pau]
    public static let `freecivUdp`: Self = "_freeciv._udp"
    /// Sandlab FARENET [Kay_T_Labinsky]
    public static let `farenetTcp`: Self = "_farenet._tcp"
    /// Data Protector BURA [Micro_Focus]
    public static let `dpBuraTcp`: Self = "_dp-bura._tcp"
    /// Westec Connect [Jon_Bolen]
    public static let `westecConnectTcp`: Self = "_westec-connect._tcp"
    /// DOF Protocol Stack Multicast/Secure Transport [OpenDOF]
    public static let `dofDpsMcSecTcp`: Self = "_dof-dps-mc-sec._tcp"
    /// DOF Protocol Stack Multicast/Secure Transport [OpenDOF]
    public static let `dofDpsMcSecUdp`: Self = "_dof-dps-mc-sec._udp"
    /// Session Data Transport Multicast [Daniel_W_Antonuk]
    public static let `sdtTcp`: Self = "_sdt._tcp"
    /// Session Data Transport Multicast [Daniel_W_Antonuk]
    public static let `sdtUdp`: Self = "_sdt._udp"
    /// PLASA E1.33, Remote Device Management (RDM) controller status notifications [PLASA]
    public static let `rdmnetCtrlTcp`: Self = "_rdmnet-ctrl._tcp"
    /// PLASA E1.33, Remote Device Management (RDM) messages [PLASA]
    public static let `rdmnetDeviceUdp`: Self = "_rdmnet-device._udp"
    /// SAS Domain Management Messaging Protocol [Ron_Zuckerman]
    public static let `sdmmpTcp`: Self = "_sdmmp._tcp"
    /// SAS Domain Management Messaging Protocol [Ron_Zuckerman]
    public static let `sdmmpUdp`: Self = "_sdmmp._udp"
    /// SAS IO Forwarding [Mandar_Joshi]
    public static let `lsiBobcatTcp`: Self = "_lsi-bobcat._tcp"
    /// Oracle Access Protocol [Peter_Povinec]
    public static let `oraOapTcp`: Self = "_ora-oap._tcp"
    /// FleetDisplay Tracking Service [Henrik_Woffinden]
    public static let `fdtracksTcp`: Self = "_fdtracks._tcp"
    /// T-Mobile SMS Protocol Message 0 [Ezinne_Oji]
    public static let `tmosms0Tcp`: Self = "_tmosms0._tcp"
    /// T-Mobile SMS Protocol Message 0 [Ezinne_Oji]
    public static let `tmosms0Udp`: Self = "_tmosms0._udp"
    /// T-Mobile SMS Protocol Message 1 [Ezinne_Oji]
    public static let `tmosms1Tcp`: Self = "_tmosms1._tcp"
    /// T-Mobile SMS Protocol Message 1 [Ezinne_Oji]
    public static let `tmosms1Udp`: Self = "_tmosms1._udp"
    /// T-Mobile SMS Protocol Message 3 [Jessica_Yan]
    public static let `facRestoreTcp`: Self = "_fac-restore._tcp"
    /// T-Mobile SMS Protocol Message 3 [Jessica_Yan]
    public static let `facRestoreUdp`: Self = "_fac-restore._udp"
    /// T-Mobile SMS Protocol Message 2 [Donghwan_Lim]
    public static let `tmoIconSyncTcp`: Self = "_tmo-icon-sync._tcp"
    /// T-Mobile SMS Protocol Message 2 [Donghwan_Lim]
    public static let `tmoIconSyncUdp`: Self = "_tmo-icon-sync._udp"
    /// BeInSync-Web [Adi_Ruppin]
    public static let `bisWebTcp`: Self = "_bis-web._tcp"
    /// BeInSync-Web [Adi_Ruppin]
    public static let `bisWebUdp`: Self = "_bis-web._udp"
    /// BeInSync-sync [Adi_Ruppin]
    public static let `bisSyncTcp`: Self = "_bis-sync._tcp"
    /// BeInSync-sync [Adi_Ruppin]
    public static let `bisSyncUdp`: Self = "_bis-sync._udp"
    /// Planning to send mobile terminated SMS to the specific port so that the SMS is not visible to the client [ATT]
    public static let `attMtSmsTcp`: Self = "_att-mt-sms._tcp"
    /// inin secure messaging [Mike_Gagle_2]
    public static let `ininmessagingTcp`: Self = "_ininmessaging._tcp"
    /// inin secure messaging [Mike_Gagle_2]
    public static let `ininmessagingUdp`: Self = "_ininmessaging._udp"
    /// MCT Market Data Feed [Stephane_Touizer]
    public static let `mctfeedTcp`: Self = "_mctfeed._tcp"
    /// MCT Market Data Feed [Stephane_Touizer]
    public static let `mctfeedUdp`: Self = "_mctfeed._udp"
    /// Enterprise Security Remote Install [Kimberly_Gibbs]
    public static let `esinstallTcp`: Self = "_esinstall._tcp"
    /// Enterprise Security Remote Install [Kimberly_Gibbs]
    public static let `esinstallUdp`: Self = "_esinstall._udp"
    /// Enterprise Security Manager [Kimberly_Gibbs]
    public static let `esmmanagerTcp`: Self = "_esmmanager._tcp"
    /// Enterprise Security Manager [Kimberly_Gibbs]
    public static let `esmmanagerUdp`: Self = "_esmmanager._udp"
    /// Enterprise Security Agent [Kimberly_Gibbs]
    public static let `esmagentTcp`: Self = "_esmagent._tcp"
    /// Enterprise Security Agent [Kimberly_Gibbs]
    public static let `esmagentUdp`: Self = "_esmagent._udp"
    /// A1-MSC [Mike_Dolan]
    public static let `a1MscTcp`: Self = "_a1-msc._tcp"
    /// A1-MSC [Mike_Dolan]
    public static let `a1MscUdp`: Self = "_a1-msc._udp"
    /// A1-BS [Mike_Dolan]
    public static let `a1BsTcp`: Self = "_a1-bs._tcp"
    /// A1-BS [Mike_Dolan]
    public static let `a1BsUdp`: Self = "_a1-bs._udp"
    /// A3-SDUNode [Mike_Dolan]
    public static let `a3SdunodeTcp`: Self = "_a3-sdunode._tcp"
    /// A3-SDUNode [Mike_Dolan]
    public static let `a3SdunodeUdp`: Self = "_a3-sdunode._udp"
    /// A4-SDUNode [Mike_Dolan]
    public static let `a4SdunodeTcp`: Self = "_a4-sdunode._tcp"
    /// A4-SDUNode [Mike_Dolan]
    public static let `a4SdunodeUdp`: Self = "_a4-sdunode._udp"
    /// Fiscal Registering Protocol [efsta_IT_Services_GmbH]
    public static let `efrTcp`: Self = "_efr._tcp"
    /// Node Initiated Network Association Forma [Thomas_Scholl]
    public static let `ninafTcp`: Self = "_ninaf._tcp"
    /// Node Initiated Network Association Forma [Thomas_Scholl]
    public static let `ninafUdp`: Self = "_ninaf._udp"
    /// HTrust API [Karl_Olafsson]
    public static let `htrustTcp`: Self = "_htrust._tcp"
    /// HTrust API [Karl_Olafsson]
    public static let `htrustUdp`: Self = "_htrust._udp"
    /// Symantec Storage Foundation for Database [Quang_Thoi]
    public static let `symantecSfdbTcp`: Self = "_symantec-sfdb._tcp"
    /// Symantec Storage Foundation for Database [Quang_Thoi]
    public static let `symantecSfdbUdp`: Self = "_symantec-sfdb._udp"
    /// PreciseCommunication [Alon_Tamir]
    public static let `preciseCommTcp`: Self = "_precise-comm._tcp"
    /// PreciseCommunication [Alon_Tamir]
    public static let `preciseCommUdp`: Self = "_precise-comm._udp"
    /// pcANYWHEREdata [Jon_Rosarky]
    public static let `pcanywheredataTcp`: Self = "_pcanywheredata._tcp"
    /// pcANYWHEREdata [Jon_Rosarky]
    public static let `pcanywheredataUdp`: Self = "_pcanywheredata._udp"
    /// pcANYWHEREstat [Jon_Rosarky]
    public static let `pcanywherestatTcp`: Self = "_pcanywherestat._tcp"
    /// pcANYWHEREstat [Jon_Rosarky]
    public static let `pcanywherestatUdp`: Self = "_pcanywherestat._udp"
    /// BE Operations Request Listener [Chirag_Desai]
    public static let `beorlTcp`: Self = "_beorl._tcp"
    /// BE Operations Request Listener [Chirag_Desai]
    public static let `beorlUdp`: Self = "_beorl._udp"
    /// SF Message Service [VR_Satish]
    public static let `xprtldTcp`: Self = "_xprtld._tcp"
    /// SF Message Service [VR_Satish]
    public static let `xprtldUdp`: Self = "_xprtld._udp"
    /// SFM Authentication Subsystem [De_Chih_Chien]
    public static let `sfmssoTcp`: Self = "_sfmsso._tcp"
    /// SFMdb - SFM DB server [De_Chih_Chien]
    public static let `sfmDbServerTcp`: Self = "_sfm-db-server._tcp"
    /// Symantec CSSC [Amol_P_Tambe]
    public static let `csscTcp`: Self = "_cssc._tcp"
    /// Symantec Fingerprint Lookup and Container Reference Service [Symantec_Corp]
    public static let `flcrsTcp`: Self = "_flcrs._tcp"
    /// Symantec Integrity Checking Service [Symantec_Corp2]
    public static let `icsTcp`: Self = "_ics._tcp"
    /// Ventureforth Mobile [Ventureforth_Inc]
    public static let `vfmobileTcp`: Self = "_vfmobile._tcp"
    /// Nagios Remote Plugin Executor [Nagios_Enterprises_LLC]
    public static let `nrpeTcp`: Self = "_nrpe._tcp"
    /// ZeroMQ file publish-subscribe protocol [Pieter_Hintjens2]
    public static let `filemqTcp`: Self = "_filemq._tcp"
    /// Local area discovery and messaging over ZeroMQ [Pieter_Hintjens_3]
    public static let `zreDiscUdp`: Self = "_zre-disc._udp"
    /// amqp protocol over TLS/SSL [Ted_Ross_2]
    public static let `amqpsTcp`: Self = "_amqps._tcp"
    /// amqp protocol over TLS/SSL [Ted_Ross_2]
    public static let `amqpsUdp`: Self = "_amqps._udp"
    /// AMQP [Pieter_Hintjens]
    public static let `amqpTcp`: Self = "_amqp._tcp"
    /// AMQP [Pieter_Hintjens]
    public static let `amqpUdp`: Self = "_amqp._udp"
    /// AMQP [Martin_Sustrik]
    public static let `amqpSctp`: Self = "_amqp._sctp"
    /// JACL Message Server [Stuart_Allen]
    public static let `jmsTcp`: Self = "_jms._tcp"
    /// JACL Message Server [Stuart_Allen]
    public static let `jmsUdp`: Self = "_jms._udp"
    /// HyperSCSI Port [Data_Storage_Institu]
    public static let `hyperscsiPortTcp`: Self = "_hyperscsi-port._tcp"
    /// HyperSCSI Port [Data_Storage_Institu]
    public static let `hyperscsiPortUdp`: Self = "_hyperscsi-port._udp"
    /// V5UA application port 
    public static let `v5uaTcp`: Self = "_v5ua._tcp"
    /// V5UA application port 
    public static let `v5uaUdp`: Self = "_v5ua._udp"
    /// V5UA application port 
    public static let `v5uaSctp`: Self = "_v5ua._sctp"
    /// RA Administration [Sergei_Zjaikin]
    public static let `raadminTcp`: Self = "_raadmin._tcp"
    /// RA Administration [Sergei_Zjaikin]
    public static let `raadminUdp`: Self = "_raadmin._udp"
    /// Quest Central DB2 Launchr [Robert_M_Mackowiak]
    public static let `questdb2LnchrTcp`: Self = "_questdb2-lnchr._tcp"
    /// Quest Central DB2 Launchr [Robert_M_Mackowiak]
    public static let `questdb2LnchrUdp`: Self = "_questdb2-lnchr._udp"
    /// Remote Replication Agent Connection 
    public static let `rracTcp`: Self = "_rrac._tcp"
    /// Remote Replication Agent Connection 
    public static let `rracUdp`: Self = "_rrac._udp"
    /// Direct Cable Connect Manager [Mark_Miller_2]
    public static let `dccmTcp`: Self = "_dccm._tcp"
    /// Direct Cable Connect Manager [Mark_Miller_2]
    public static let `dccmUdp`: Self = "_dccm._udp"
    /// Auriga Router Service [Vincent_Gaudeul]
    public static let `aurigaRouterTcp`: Self = "_auriga-router._tcp"
    /// Auriga Router Service [Vincent_Gaudeul]
    public static let `aurigaRouterUdp`: Self = "_auriga-router._udp"
    /// Net-coneX Control Protocol [Ryan_Werber]
    public static let `ncxcpTcp`: Self = "_ncxcp._tcp"
    /// Net-coneX Control Protocol [Ryan_Werber]
    public static let `ncxcpUdp`: Self = "_ncxcp._udp"
    /// BrightCore control & data transfer exchange [Marko_Bjelac]
    public static let `brightcoreUdp`: Self = "_brightcore._udp"
    /// Constrained Application Protocol (CoAP) [IESG]
    public static let `coapTcp`: Self = "_coap._tcp"
    /// Constrained Application Protocol [IESG]
    public static let `coapUdp`: Self = "_coap._udp"
    /// Constrained Application Protocol (CoAP) [IESG]
    public static let `coapsTcp`: Self = "_coaps._tcp"
    /// DTLS-secured CoAP [IESG]
    public static let `coapsUdp`: Self = "_coaps._udp"
    /// GOG multiplayer game protocol [GOG.com]
    public static let `gogMultiplayerUdp`: Self = "_gog-multiplayer._udp"
    /// GGZ Gaming Zone [Josef_Spillner]
    public static let `ggzTcp`: Self = "_ggz._tcp"
    /// GGZ Gaming Zone [Josef_Spillner]
    public static let `ggzUdp`: Self = "_ggz._udp"
    /// QM video network management protocol [Jamie_Lokier]
    public static let `qmvideoTcp`: Self = "_qmvideo._tcp"
    /// QM video network management protocol [Jamie_Lokier]
    public static let `qmvideoUdp`: Self = "_qmvideo._udp"
    /// Robert Bosch Data Transfer [Syntegon_Technology_GmbH]
    public static let `rbsystemTcp`: Self = "_rbsystem._tcp"
    /// Key Management Interoperability Protocol [OASIS_KMIP_Technical_Committee]
    public static let `kmipTcp`: Self = "_kmip._tcp"
    /// Dell SupportAssist data center management [Dell_Technologies]
    public static let `supportassistTcp`: Self = "_supportassist._tcp"
    /// StorageOS REST API [StorageOS]
    public static let `storageosTcp`: Self = "_storageos._tcp"
    /// proshare conf audio [gunner]
    public static let `proshareaudioTcp`: Self = "_proshareaudio._tcp"
    /// proshare conf audio [gunner]
    public static let `proshareaudioUdp`: Self = "_proshareaudio._udp"
    /// proshare conf video [gunner]
    public static let `prosharevideoTcp`: Self = "_prosharevideo._tcp"
    /// proshare conf video [gunner]
    public static let `prosharevideoUdp`: Self = "_prosharevideo._udp"
    /// proshare conf data [gunner]
    public static let `prosharedataTcp`: Self = "_prosharedata._tcp"
    /// proshare conf data [gunner]
    public static let `prosharedataUdp`: Self = "_prosharedata._udp"
    /// proshare conf request [gunner]
    public static let `prosharerequestTcp`: Self = "_prosharerequest._tcp"
    /// proshare conf request [gunner]
    public static let `prosharerequestUdp`: Self = "_prosharerequest._udp"
    /// proshare conf notify [gunner]
    public static let `prosharenotifyTcp`: Self = "_prosharenotify._tcp"
    /// proshare conf notify 
    public static let `prosharenotifyUdp`: Self = "_prosharenotify._udp"
    /// DPM Communication Server [Sundar_Srinivasan][Vinay_Badami]
    public static let `dpmTcp`: Self = "_dpm._tcp"
    /// DPM Communication Server [Sundar_Srinivasan][Vinay_Badami]
    public static let `dpmUdp`: Self = "_dpm._udp"
    /// DPM Agent Coordinator [Sundar_Srinivasan][Vinay_Badami]
    public static let `dpmAgentTcp`: Self = "_dpm-agent._tcp"
    /// DPM Agent Coordinator [Sundar_Srinivasan][Vinay_Badami]
    public static let `dpmAgentUdp`: Self = "_dpm-agent._udp"
    /// MS-Licensing [Thomas_Lindeman]
    public static let `msLicensingTcp`: Self = "_ms-licensing._tcp"
    /// MS-Licensing [Thomas_Lindeman]
    public static let `msLicensingUdp`: Self = "_ms-licensing._udp"
    /// Desktop Passthru Service [Dan_Leising]
    public static let `dtptTcp`: Self = "_dtpt._tcp"
    /// Desktop Passthru Service [Dan_Leising]
    public static let `dtptUdp`: Self = "_dtpt._udp"
    /// Microsoft DFS Replication Service [Guhan_Suriyanarayana]
    public static let `msdfsrTcp`: Self = "_msdfsr._tcp"
    /// Microsoft DFS Replication Service [Guhan_Suriyanarayana]
    public static let `msdfsrUdp`: Self = "_msdfsr._udp"
    /// Operations Manager - Health Service [Gerardo_Dilillo]
    public static let `omhsTcp`: Self = "_omhs._tcp"
    /// Operations Manager - Health Service [Gerardo_Dilillo]
    public static let `omhsUdp`: Self = "_omhs._udp"
    /// Operations Manager - SDK Service [Gerardo_Dilillo]
    public static let `omsdkTcp`: Self = "_omsdk._tcp"
    /// Operations Manager - SDK Service [Gerardo_Dilillo]
    public static let `omsdkUdp`: Self = "_omsdk._udp"
    /// Microsoft Identity Lifecycle Manager [Rob_Ward]
    public static let `msIlmTcp`: Self = "_ms-ilm._tcp"
    /// Microsoft Lifecycle Manager Secure Token Service [Rob_Ward]
    public static let `msIlmStsTcp`: Self = "_ms-ilm-sts._tcp"
    /// ASG Event Notification Framework [Arman_Bedonian]
    public static let `asgenfTcp`: Self = "_asgenf._tcp"
    /// Dist. I/O Comm. Service Data and Control [Harish_Kuttan]
    public static let `ioDistDataTcp`: Self = "_io-dist-data._tcp"
    /// Dist. I/O Comm. Service Group Membership [Harish_Kuttan]
    public static let `ioDistGroupUdp`: Self = "_io-dist-group._udp"
    /// Openmail User Agent Layer [OpenMail_Encyclopedi][Don_Loughry]
    public static let `openmailTcp`: Self = "_openmail._tcp"
    /// Openmail User Agent Layer [OpenMail_Encyclopedi][Don_Loughry]
    public static let `openmailUdp`: Self = "_openmail._udp"
    /// Steltor's calendar access [Bernard_Desruisseaux]
    public static let `uniengTcp`: Self = "_unieng._tcp"
    /// Steltor's calendar access [Bernard_Desruisseaux]
    public static let `uniengUdp`: Self = "_unieng._udp"
    /// IDA Discover Port 1 [MPITech_Support]
    public static let `idaDiscover1Tcp`: Self = "_ida-discover1._tcp"
    /// IDA Discover Port 1 [MPITech_Support]
    public static let `idaDiscover1Udp`: Self = "_ida-discover1._udp"
    /// IDA Discover Port 2 [MPITech_Support]
    public static let `idaDiscover2Tcp`: Self = "_ida-discover2._tcp"
    /// IDA Discover Port 2 [MPITech_Support]
    public static let `idaDiscover2Udp`: Self = "_ida-discover2._udp"
    /// Watchdoc NetPOD Protocol [Christophe_Chevalier]
    public static let `watchdocPodTcp`: Self = "_watchdoc-pod._tcp"
    /// Watchdoc NetPOD Protocol [Christophe_Chevalier]
    public static let `watchdocPodUdp`: Self = "_watchdoc-pod._udp"
    /// Watchdoc Server [Christophe_Chevalier]
    public static let `watchdocTcp`: Self = "_watchdoc._tcp"
    /// Watchdoc Server [Christophe_Chevalier]
    public static let `watchdocUdp`: Self = "_watchdoc._udp"
    /// fcopy-server [Moshe_Leibovitch]
    public static let `fcopyServerTcp`: Self = "_fcopy-server._tcp"
    /// fcopy-server [Moshe_Leibovitch]
    public static let `fcopyServerUdp`: Self = "_fcopy-server._udp"
    /// fcopys-server [Moshe_Leibovitch]
    public static let `fcopysServerTcp`: Self = "_fcopys-server._tcp"
    /// fcopys-server [Moshe_Leibovitch]
    public static let `fcopysServerUdp`: Self = "_fcopys-server._udp"
    /// Wildbits Tunatic [Sylvain_Demongeot]
    public static let `tunaticTcp`: Self = "_tunatic._tcp"
    /// Wildbits Tunatic [Sylvain_Demongeot]
    public static let `tunaticUdp`: Self = "_tunatic._udp"
    /// Wildbits Tunalyzer [Sylvain_Demongeot]
    public static let `tunalyzerTcp`: Self = "_tunalyzer._tcp"
    /// Wildbits Tunalyzer [Sylvain_Demongeot]
    public static let `tunalyzerUdp`: Self = "_tunalyzer._udp"
    /// Bladelogic Agent Service [Brian_Trevor]
    public static let `rscdTcp`: Self = "_rscd._tcp"
    /// Bladelogic Agent Service [Brian_Trevor]
    public static let `rscdUdp`: Self = "_rscd._udp"
    /// OpenMail Desk Gateway server [OpenMail_Encyclopedi][Don_Loughry]
    public static let `openmailgTcp`: Self = "_openmailg._tcp"
    /// OpenMail Desk Gateway server [OpenMail_Encyclopedi][Don_Loughry]
    public static let `openmailgUdp`: Self = "_openmailg._udp"
    /// OpenMail X.500 Directory Server [OpenMail_Encyclopedi][Don_Loughry]
    public static let `x500msTcp`: Self = "_x500ms._tcp"
    /// OpenMail X.500 Directory Server [OpenMail_Encyclopedi][Don_Loughry]
    public static let `x500msUdp`: Self = "_x500ms._udp"
    /// OpenMail NewMail Server [OpenMail_Encyclopedi][Don_Loughry]
    public static let `openmailnsTcp`: Self = "_openmailns._tcp"
    /// OpenMail NewMail Server [OpenMail_Encyclopedi][Don_Loughry]
    public static let `openmailnsUdp`: Self = "_openmailns._udp"
    /// OpenMail Suer Agent Layer (Secure) [OpenMail_Encyclopedi][Don_Loughry]
    public static let `sOpenmailTcp`: Self = "_s-openmail._tcp"
    /// OpenMail Suer Agent Layer (Secure) [OpenMail_Encyclopedi][Don_Loughry]
    public static let `sOpenmailUdp`: Self = "_s-openmail._udp"
    /// OpenMail CMTS Server [OpenMail_Encyclopedi][Don_Loughry]
    public static let `openmailpxyTcp`: Self = "_openmailpxy._tcp"
    /// OpenMail CMTS Server [OpenMail_Encyclopedi][Don_Loughry]
    public static let `openmailpxyUdp`: Self = "_openmailpxy._udp"
    /// x509solutions Internal CA [Brendan_Fay]
    public static let `spramscaTcp`: Self = "_spramsca._tcp"
    /// x509solutions Internal CA [Brendan_Fay]
    public static let `spramscaUdp`: Self = "_spramsca._udp"
    /// x509solutions Secure Data [Brendan_Fay]
    public static let `spramsdTcp`: Self = "_spramsd._tcp"
    /// x509solutions Secure Data [Brendan_Fay]
    public static let `spramsdUdp`: Self = "_spramsd._udp"
    /// NetAgent [Bradley_Birnbaum]
    public static let `netagentTcp`: Self = "_netagent._tcp"
    /// NetAgent [Bradley_Birnbaum]
    public static let `netagentUdp`: Self = "_netagent._udp"
    /// Control commands and responses [Wayne_Morrow]
    public static let `starfieldIoTcp`: Self = "_starfield-io._tcp"
    /// Control commands and responses [Wayne_Morrow]
    public static let `starfieldIoUdp`: Self = "_starfield-io._udp"
    /// Visual Tag System RPC [Graham_Bloice]
    public static let `vtsRpcTcp`: Self = "_vts-rpc._tcp"
    /// Cisco Interbox Application Redundancy [Cullen_Jennings]
    public static let `ibarUdp`: Self = "_ibar._udp"
    /// redundancy notification [Ming_Zhang]
    public static let `ciscoReduUdp`: Self = "_cisco-redu._udp"
    /// Cisco WAAS Cluster Protocol [Winston_Chou]
    public static let `waasclusterUdp`: Self = "_waascluster._udp"
    /// XtreamX Supervised Peer message [Ahmad_Tajuddin_Samsu]
    public static let `xtreamxTcp`: Self = "_xtreamx._tcp"
    /// XtreamX Supervised Peer message [Ahmad_Tajuddin_Samsu]
    public static let `xtreamxUdp`: Self = "_xtreamx._udp"
    /// Simple Peered Discovery Protocol [Dave_Lindquist]
    public static let `spdpUdp`: Self = "_spdp._udp"
    /// Proprietary Website deployment service [enLabel_Global_Services]
    public static let `enlabelDplTcp`: Self = "_enlabel-dpl._tcp"
    /// ICMPD [Shane_O_Donnell]
    public static let `icmpdTcp`: Self = "_icmpd._tcp"
    /// ICMPD [Shane_O_Donnell]
    public static let `icmpdUdp`: Self = "_icmpd._udp"
    /// Support Automation [Joshua_Hawkins]
    public static let `sptAutomationTcp`: Self = "_spt-automation._tcp"
    /// Support Automation [Joshua_Hawkins]
    public static let `sptAutomationUdp`: Self = "_spt-automation._udp"
    /// AutoPass licensing [Micro_Focus_2]
    public static let `autopassdaemonTcp`: Self = "_autopassdaemon._tcp"
    /// Z-firm ShipRush interface for web access and bidirectional data [Z-Firm_LLC]
    public static let `shiprushDChTcp`: Self = "_shiprush-d-ch._tcp"
    /// Reversion Backup/Restore [Pincoder_Diagnostics_Inc]
    public static let `reversionTcp`: Self = "_reversion._tcp"
    /// WHEREHOO [Jim_Youll]
    public static let `wherehooTcp`: Self = "_wherehoo._tcp"
    /// WHEREHOO [Jim_Youll]
    public static let `wherehooUdp`: Self = "_wherehoo._udp"
    /// PlanetPress Suite Messeng [Yannick_Fortin]
    public static let `ppsuitemsgTcp`: Self = "_ppsuitemsg._tcp"
    /// PlanetPress Suite Messeng [Yannick_Fortin]
    public static let `ppsuitemsgUdp`: Self = "_ppsuitemsg._udp"
    /// Diameter over TLS/TCP [IESG]
    public static let `diametersTcp`: Self = "_diameters._tcp"
    /// Diameter over DTLS/SCTP [IESG]
    public static let `diametersSctp`: Self = "_diameters._sctp"
    /// Javascript Unit Test Environment [Mark_Ethan_Trostler]
    public static let `juteTcp`: Self = "_jute._tcp"
    /// Remote Framebuffer [Tristan_Richardson]
    public static let `rfbTcp`: Self = "_rfb._tcp"
    /// Remote Framebuffer [Tristan_Richardson]
    public static let `rfbUdp`: Self = "_rfb._udp"
    /// Flight & Flow Info for Collaborative Env [International_Civil_Aviation_Organisation]
    public static let `ffIceTcp`: Self = "_ff-ice._tcp"
    /// Flight & Flow Info for Collaborative Env [International_Civil_Aviation_Organisation]
    public static let `ffIceUdp`: Self = "_ff-ice._udp"
    /// Flight & Flow Info for Collaborative Env [International_Civil_Aviation_Organisation]
    public static let `ffIceSctp`: Self = "_ff-ice._sctp"
    /// Air-Ground SWIM [International_Civil_Aviation_Organisation]
    public static let `agSwimTcp`: Self = "_ag-swim._tcp"
    /// Air-Ground SWIM [International_Civil_Aviation_Organisation]
    public static let `agSwimUdp`: Self = "_ag-swim._udp"
    /// Air-Ground SWIM [International_Civil_Aviation_Organisation]
    public static let `agSwimSctp`: Self = "_ag-swim._sctp"
    /// Adv Surface Mvmnt and Guidance Cont Sys [International_Civil_Aviation_Organisation]
    public static let `asmgcsTcp`: Self = "_asmgcs._tcp"
    /// Adv Surface Mvmnt and Guidance Cont Sys [International_Civil_Aviation_Organisation]
    public static let `asmgcsUdp`: Self = "_asmgcs._udp"
    /// Adv Surface Mvmnt and Guidance Cont Sys [International_Civil_Aviation_Organisation]
    public static let `asmgcsSctp`: Self = "_asmgcs._sctp"
    /// Remotely Piloted Vehicle C&C [International_Civil_Aviation_Organisation]
    public static let `rpasC2Tcp`: Self = "_rpas-c2._tcp"
    /// Remotely Piloted Vehicle C&C [International_Civil_Aviation_Organisation]
    public static let `rpasC2Udp`: Self = "_rpas-c2._udp"
    /// Remotely Piloted Vehicle C&C [International_Civil_Aviation_Organisation]
    public static let `rpasC2Sctp`: Self = "_rpas-c2._sctp"
    /// Distress and Safety Data App [International_Civil_Aviation_Organisation]
    public static let `dsdTcp`: Self = "_dsd._tcp"
    /// Distress and Safety Data App [International_Civil_Aviation_Organisation]
    public static let `dsdUdp`: Self = "_dsd._udp"
    /// Distress and Safety Data App [International_Civil_Aviation_Organisation]
    public static let `dsdSctp`: Self = "_dsd._sctp"
    /// IPS Management Application [International_Civil_Aviation_Organisation]
    public static let `ipsmaTcp`: Self = "_ipsma._tcp"
    /// IPS Management Application [International_Civil_Aviation_Organisation]
    public static let `ipsmaUdp`: Self = "_ipsma._udp"
    /// IPS Management Application [International_Civil_Aviation_Organisation]
    public static let `ipsmaSctp`: Self = "_ipsma._sctp"
    /// Air-ground media advisory [International_Civil_Aviation_Organisation]
    public static let `agmaTcp`: Self = "_agma._tcp"
    /// Air-ground media advisory [International_Civil_Aviation_Organisation]
    public static let `agmaUdp`: Self = "_agma._udp"
    /// Air-ground media advisory [International_Civil_Aviation_Organisation]
    public static let `agmaSctp`: Self = "_agma._sctp"
    /// Air Traffic Services applications using ATN [Eivan_Cerasi]
    public static let `atsAtnTcp`: Self = "_ats-atn._tcp"
    /// Air Traffic Services applications using ATN [Eivan_Cerasi]
    public static let `atsAtnUdp`: Self = "_ats-atn._udp"
    /// Context Management [Justin_Yu]
    public static let `cmSctp`: Self = "_cm._sctp"
    /// Air Traffic Services applications using ACARS [Eivan_Cerasi]
    public static let `atsAcarsTcp`: Self = "_ats-acars._tcp"
    /// Air Traffic Services applications using ACARS [Eivan_Cerasi]
    public static let `atsAcarsUdp`: Self = "_ats-acars._udp"
    /// Controller Pilot Data Link Communication [Justin_Yu]
    public static let `cpdlcSctp`: Self = "_cpdlc._sctp"
    /// Aeronautical Information Service/Meteorological applications using ACARS [Eivan_Cerasi]
    public static let `aisMetTcp`: Self = "_ais-met._tcp"
    /// Aeronautical Information Service/Meteorological applications using ACARS [Eivan_Cerasi]
    public static let `aisMetUdp`: Self = "_ais-met._udp"
    /// Flight Information Services [Justin_Yu]
    public static let `fisSctp`: Self = "_fis._sctp"
    /// Airline operational communications applications using ACARS [Eivan_Cerasi]
    public static let `aocAcarsTcp`: Self = "_aoc-acars._tcp"
    /// Airline operational communications applications using ACARS [Eivan_Cerasi]
    public static let `aocAcarsUdp`: Self = "_aoc-acars._udp"
    /// Automatic Dependent Surveillance [Justin_Yu]
    public static let `adsCSctp`: Self = "_ads-c._sctp"
    /// Indy Application Server [Bjorn_Lantz]
    public static let `indyTcp`: Self = "_indy._tcp"
    /// Indy Application Server [Bjorn_Lantz]
    public static let `indyUdp`: Self = "_indy._udp"
    /// mppolicy-v5 [Yutaka_Ono]
    public static let `mppolicyV5Tcp`: Self = "_mppolicy-v5._tcp"
    /// mppolicy-v5 [Yutaka_Ono]
    public static let `mppolicyV5Udp`: Self = "_mppolicy-v5._udp"
    /// mppolicy-mgr [Yutaka_Ono]
    public static let `mppolicyMgrTcp`: Self = "_mppolicy-mgr._tcp"
    /// mppolicy-mgr [Yutaka_Ono]
    public static let `mppolicyMgrUdp`: Self = "_mppolicy-mgr._udp"
    /// CouchDB [Noah_Slater]
    public static let `couchdbTcp`: Self = "_couchdb._tcp"
    /// CouchDB [Noah_Slater]
    public static let `couchdbUdp`: Self = "_couchdb._udp"
    /// WBEM WS-Management HTTP [Jim_Davis]
    public static let `wsmanTcp`: Self = "_wsman._tcp"
    /// WBEM WS-Management HTTP [Jim_Davis]
    public static let `wsmanUdp`: Self = "_wsman._udp"
    /// WBEM WS-Management HTTP over TLS/SSL [Jim_Davis]
    public static let `wsmansTcp`: Self = "_wsmans._tcp"
    /// WBEM WS-Management HTTP over TLS/SSL [Jim_Davis]
    public static let `wsmansUdp`: Self = "_wsmans._udp"
    /// WBEM RMI [Jim_Davis]
    public static let `wbemRmiTcp`: Self = "_wbem-rmi._tcp"
    /// WBEM RMI [Jim_Davis]
    public static let `wbemRmiUdp`: Self = "_wbem-rmi._udp"
    /// WBEM CIM-XML (HTTP) [Jim_Davis]
    public static let `wbemHttpTcp`: Self = "_wbem-http._tcp"
    /// WBEM CIM-XML (HTTP) [Jim_Davis]
    public static let `wbemHttpUdp`: Self = "_wbem-http._udp"
    /// WBEM CIM-XML (HTTPS) [Jim_Davis]
    public static let `wbemHttpsTcp`: Self = "_wbem-https._tcp"
    /// WBEM CIM-XML (HTTPS) [Jim_Davis]
    public static let `wbemHttpsUdp`: Self = "_wbem-https._udp"
    /// WBEM Export HTTPS [Denise_Eckstein]
    public static let `wbemExpHttpsTcp`: Self = "_wbem-exp-https._tcp"
    /// WBEM Export HTTPS [Denise_Eckstein]
    public static let `wbemExpHttpsUdp`: Self = "_wbem-exp-https._udp"
    /// NUXSL [Kai_Kretschmann]
    public static let `nuxslTcp`: Self = "_nuxsl._tcp"
    /// NUXSL [Kai_Kretschmann]
    public static let `nuxslUdp`: Self = "_nuxsl._udp"
    /// Consul InSight Security [Arthur_Hillenaar]
    public static let `consulInsightTcp`: Self = "_consul-insight._tcp"
    /// Consul InSight Security [Arthur_Hillenaar]
    public static let `consulInsightUdp`: Self = "_consul-insight._udp"
    /// DMTF WBEM CIM REST [WS_Inc]
    public static let `cimRsTcp`: Self = "_cim-rs._tcp"
    /// RMS Agent Listening Service [RiverMeadow_Software_Inc]
    public static let `rmsAgentTcp`: Self = "_rms-agent._tcp"
    /// CVSup [Randall_Atkinson_2]
    public static let `cvsupTcp`: Self = "_cvsup._tcp"
    /// CVSup [Randall_Atkinson_2]
    public static let `cvsupUdp`: Self = "_cvsup._udp"
    /// X Window System [Stephen_Gildea]
    public static let `x11Tcp`: Self = "_x11._tcp"
    /// X Window System [Stephen_Gildea]
    public static let `x11Udp`: Self = "_x11._udp"
    /// NDL-AHP-SVC [John_Richmond_2]
    public static let `ndlAhpSvcTcp`: Self = "_ndl-ahp-svc._tcp"
    /// NDL-AHP-SVC [John_Richmond_2]
    public static let `ndlAhpSvcUdp`: Self = "_ndl-ahp-svc._udp"
    /// WinPharaoh [Basil_Lee]
    public static let `winpharaohTcp`: Self = "_winpharaoh._tcp"
    /// WinPharaoh [Basil_Lee]
    public static let `winpharaohUdp`: Self = "_winpharaoh._udp"
    /// EWCTSP [Mark_Bailon]
    public static let `ewctspTcp`: Self = "_ewctsp._tcp"
    /// EWCTSP [Mark_Bailon]
    public static let `ewctspUdp`: Self = "_ewctsp._udp"
    /// GSMP/ANCP [Avri_Doria]
    public static let `gsmpAncpTcp`: Self = "_gsmp-ancp._tcp"
    /// TRIP [Hussein_F_Salama]
    public static let `tripTcp`: Self = "_trip._tcp"
    /// TRIP [Hussein_F_Salama]
    public static let `tripUdp`: Self = "_trip._udp"
    /// Messageasap [Murray_Freeman]
    public static let `messageasapTcp`: Self = "_messageasap._tcp"
    /// Messageasap [Murray_Freeman]
    public static let `messageasapUdp`: Self = "_messageasap._udp"
    /// SSDTP [Michael_Shearson_2]
    public static let `ssdtpTcp`: Self = "_ssdtp._tcp"
    /// SSDTP [Michael_Shearson_2]
    public static let `ssdtpUdp`: Self = "_ssdtp._udp"
    /// DIAGNOSE-PROC [Allan_Miller]
    public static let `diagnoseProcTcp`: Self = "_diagnose-proc._tcp"
    /// DIAGNOSE-PROC [Allan_Miller]
    public static let `diagnoseProcUdp`: Self = "_diagnose-proc._udp"
    /// DirectPlay8 [John_Kane]
    public static let `directplay8Tcp`: Self = "_directplay8._tcp"
    /// DirectPlay8 [John_Kane]
    public static let `directplay8Udp`: Self = "_directplay8._udp"
    /// Microsoft Max [Jay_Beavers]
    public static let `maxTcp`: Self = "_max._tcp"
    /// Microsoft Max [Jay_Beavers]
    public static let `maxUdp`: Self = "_max._udp"
    /// Microsoft DPM Access Control Manager [Prabu_Ambravaneswara]
    public static let `dpmAcmTcp`: Self = "_dpm-acm._tcp"
    /// Microsoft DPM WCF Certificates [Microsoft_Corporation]
    public static let `msftDpmCertTcp`: Self = "_msft-dpm-cert._tcp"
    /// iConstruct Server [iConstruct_Aus_Pty_Ltd]
    public static let `iconstructsrvTcp`: Self = "_iconstructsrv._tcp"
    /// Generic UDP Encapsulation [Tom_Herbert]
    public static let `gueUdp`: Self = "_gue._udp"
    /// Generic Network Virtualization Encapsulation (Geneve) [IESG]
    public static let `geneveUdp`: Self = "_geneve._udp"
    /// APCO Project 25 Common Air Interface - UDP encapsulation [APCO_Project]
    public static let `p25caiUdp`: Self = "_p25cai._udp"
    /// telecomsoftware miami broadcast [Peter_Steiner]
    public static let `miamiBcastUdp`: Self = "_miami-bcast._udp"
    /// Peer to Peer Infrastructure Configuration [IESG]
    public static let `reloadConfigTcp`: Self = "_reload-config._tcp"
    /// konspire2b p2p network [Jason_Rohrer]
    public static let `konspire2bTcp`: Self = "_konspire2b._tcp"
    /// konspire2b p2p network [Jason_Rohrer]
    public static let `konspire2bUdp`: Self = "_konspire2b._udp"
    /// PDTP P2P [Tony_Arcieri]
    public static let `pdtpTcp`: Self = "_pdtp._tcp"
    /// PDTP P2P [Tony_Arcieri]
    public static let `pdtpUdp`: Self = "_pdtp._udp"
    /// Local Download Sharing Service [Clifford_Heath]
    public static let `ldssTcp`: Self = "_ldss._tcp"
    /// Local Download Sharing Service [Clifford_Heath]
    public static let `ldssUdp`: Self = "_ldss._udp"
    /// SuperDog License Manager [SafeNet]
    public static let `doglmsTcp`: Self = "_doglms._tcp"
    /// SuperDog License Manager Notifier [SafeNet]
    public static let `doglmsNotifyUdp`: Self = "_doglms-notify._udp"
    /// RAXA Management [Sukanta_Ganguly]
    public static let `raxaMgmtTcp`: Self = "_raxa-mgmt._tcp"
    /// SynchroNet-db [Arne_Haugland]
    public static let `synchronetDbTcp`: Self = "_synchronet-db._tcp"
    /// SynchroNet-db [Arne_Haugland]
    public static let `synchronetDbUdp`: Self = "_synchronet-db._udp"
    /// SynchroNet-rtc [Arne_Haugland]
    public static let `synchronetRtcTcp`: Self = "_synchronet-rtc._tcp"
    /// SynchroNet-rtc [Arne_Haugland]
    public static let `synchronetRtcUdp`: Self = "_synchronet-rtc._udp"
    /// SynchroNet-upd [Arne_Haugland]
    public static let `synchronetUpdTcp`: Self = "_synchronet-upd._tcp"
    /// SynchroNet-upd [Arne_Haugland]
    public static let `synchronetUpdUdp`: Self = "_synchronet-upd._udp"
    /// RETS [Jeremy_Crawford]
    public static let `retsTcp`: Self = "_rets._tcp"
    /// RETS [Jeremy_Crawford]
    public static let `retsUdp`: Self = "_rets._udp"
    /// DBDB [Aaron_Brick]
    public static let `dbdbTcp`: Self = "_dbdb._tcp"
    /// DBDB [Aaron_Brick]
    public static let `dbdbUdp`: Self = "_dbdb._udp"
    /// Prima Server [Prima_Designs_System]
    public static let `primaserverTcp`: Self = "_primaserver._tcp"
    /// Prima Server [Prima_Designs_System]
    public static let `primaserverUdp`: Self = "_primaserver._udp"
    /// MPS Server [Prima_Designs_System]
    public static let `mpsserverTcp`: Self = "_mpsserver._tcp"
    /// MPS Server [Prima_Designs_System]
    public static let `mpsserverUdp`: Self = "_mpsserver._udp"
    /// ETC Control [Electronic_Theatre_Controls_Inc]
    public static let `etcControlTcp`: Self = "_etc-control._tcp"
    /// ETC Control [Electronic_Theatre_Controls_Inc]
    public static let `etcControlUdp`: Self = "_etc-control._udp"
    /// Sercomm-SCAdmin [Melinda_Tsao_2]
    public static let `sercommScadminTcp`: Self = "_sercomm-scadmin._tcp"
    /// Sercomm-SCAdmin [Melinda_Tsao_2]
    public static let `sercommScadminUdp`: Self = "_sercomm-scadmin._udp"
    /// GLOBECAST-ID [Piers_Scannell_2]
    public static let `globecastIdTcp`: Self = "_globecast-id._tcp"
    /// GLOBECAST-ID [Piers_Scannell_2]
    public static let `globecastIdUdp`: Self = "_globecast-id._udp"
    /// HP SoftBench CM [Scott_A_Kramer]
    public static let `softcmTcp`: Self = "_softcm._tcp"
    /// HP SoftBench CM [Scott_A_Kramer]
    public static let `softcmUdp`: Self = "_softcm._udp"
    /// HP SoftBench Sub-Process Control [Scott_A_Kramer]
    public static let `spcTcp`: Self = "_spc._tcp"
    /// HP SoftBench Sub-Process Control [Scott_A_Kramer]
    public static let `spcUdp`: Self = "_spc._udp"
    /// Desk-Top Sub-Process Control Daemon [Doug_Royer]
    public static let `dtspcdTcp`: Self = "_dtspcd._tcp"
    /// Desk-Top Sub-Process Control Daemon [Doug_Royer]
    public static let `dtspcdUdp`: Self = "_dtspcd._udp"
    /// Daylite Server [Brent_Gulanowski]
    public static let `dayliteserverTcp`: Self = "_dayliteserver._tcp"
    /// WRspice IPC Service [Stephen_R_Whiteley]
    public static let `wrspiceTcp`: Self = "_wrspice._tcp"
    /// Xic IPC Service [Stephen_R_Whiteley]
    public static let `xicTcp`: Self = "_xic._tcp"
    /// XicTools License Manager Service [Stephen_R_Whiteley]
    public static let `xtlservTcp`: Self = "_xtlserv._tcp"
    /// Daylite Touch Sync [Brent_Gulanowski]
    public static let `daylitetouchTcp`: Self = "_daylitetouch._tcp"
    /// Transparent Inter Process Communication [Ericsson]
    public static let `tipcUdp`: Self = "_tipc._udp"
    /// SPDY for a faster web [Matthew_Lloyd]
    public static let `spdyTcp`: Self = "_spdy._tcp"
    /// Backup Express Web Server [Catalogic_Software_Inc]
    public static let `bexWebadminTcp`: Self = "_bex-webadmin._tcp"
    /// Backup Express Web Server [Catalogic_Software_Inc]
    public static let `bexWebadminUdp`: Self = "_bex-webadmin._udp"
    /// Backup Express [Catalogic_Software_Inc]
    public static let `backupExpressTcp`: Self = "_backup-express._tcp"
    /// Backup Express [Catalogic_Software_Inc]
    public static let `backupExpressUdp`: Self = "_backup-express._udp"
    /// Phlexible Network Backup Service [William_R_Lear_2]
    public static let `pnbsTcp`: Self = "_pnbs._tcp"
    /// Phlexible Network Backup Service [William_R_Lear_2]
    public static let `pnbsUdp`: Self = "_pnbs._udp"
    /// The DameWare Mobile Gateway Service [SolarWinds]
    public static let `damewaremobgtwyTcp`: Self = "_damewaremobgtwy._tcp"
    /// New Boundary Tech WOL [Elizabeth_Zilen]
    public static let `nbtWolTcp`: Self = "_nbt-wol._tcp"
    /// New Boundary Tech WOL [Elizabeth_Zilen]
    public static let `nbtWolUdp`: Self = "_nbt-wol._udp"
    /// Pulsonix Network License Service [David_Manns]
    public static let `pulsonixnlsTcp`: Self = "_pulsonixnls._tcp"
    /// Pulsonix Network License Service [David_Manns]
    public static let `pulsonixnlsUdp`: Self = "_pulsonixnls._udp"
    /// Meta Corporation License Manager [Osamu_Masuda]
    public static let `metaCorpTcp`: Self = "_meta-corp._tcp"
    /// Meta Corporation License Manager [Osamu_Masuda]
    public static let `metaCorpUdp`: Self = "_meta-corp._udp"
    /// Aspen Technology License Manager [Kevin_Massey]
    public static let `aspentecLmTcp`: Self = "_aspentec-lm._tcp"
    /// Aspen Technology License Manager [Kevin_Massey]
    public static let `aspentecLmUdp`: Self = "_aspentec-lm._udp"
    /// Watershed License Manager [David_Ferrero]
    public static let `watershedLmTcp`: Self = "_watershed-lm._tcp"
    /// Watershed License Manager [David_Ferrero]
    public static let `watershedLmUdp`: Self = "_watershed-lm._udp"
    /// StatSci License Manager - 1 [Scott_Blachowicz]
    public static let `statsci1LmTcp`: Self = "_statsci1-lm._tcp"
    /// StatSci License Manager - 1 [Scott_Blachowicz]
    public static let `statsci1LmUdp`: Self = "_statsci1-lm._udp"
    /// StatSci License Manager - 2 [Scott_Blachowicz]
    public static let `statsci2LmTcp`: Self = "_statsci2-lm._tcp"
    /// StatSci License Manager - 2 [Scott_Blachowicz]
    public static let `statsci2LmUdp`: Self = "_statsci2-lm._udp"
    /// Lone Wolf Systems License Manager [Dan_Klein]
    public static let `lonewolfLmTcp`: Self = "_lonewolf-lm._tcp"
    /// Lone Wolf Systems License Manager [Dan_Klein]
    public static let `lonewolfLmUdp`: Self = "_lonewolf-lm._udp"
    /// Montage License Manager [Michael_Ubell]
    public static let `montageLmTcp`: Self = "_montage-lm._tcp"
    /// Montage License Manager [Michael_Ubell]
    public static let `montageLmUdp`: Self = "_montage-lm._udp"
    /// tal-pod [Steven_Loomis]
    public static let `talPodTcp`: Self = "_tal-pod._tcp"
    /// tal-pod [Steven_Loomis]
    public static let `talPodUdp`: Self = "_tal-pod._udp"
    /// EFB Application Control Interface [Jonathan_Schaaf]
    public static let `efbAciTcp`: Self = "_efb-aci._tcp"
    /// Emerson Extensible Control and Management Protocol [Bryce_Beeston]
    public static let `ecmpTcp`: Self = "_ecmp._tcp"
    /// Emerson Extensible Control and Management Protocol Data [Bryce_Beeston]
    public static let `ecmpDataUdp`: Self = "_ecmp-data._udp"
    /// PATROL Internet Srv Mgr [Portnoy_Boxman]
    public static let `patrolIsmTcp`: Self = "_patrol-ism._tcp"
    /// PATROL Internet Srv Mgr [Portnoy_Boxman]
    public static let `patrolIsmUdp`: Self = "_patrol-ism._udp"
    /// PATROL Collector [Portnoy_Boxman]
    public static let `patrolCollTcp`: Self = "_patrol-coll._tcp"
    /// PATROL Collector [Portnoy_Boxman]
    public static let `patrolCollUdp`: Self = "_patrol-coll._udp"
    /// Precision Scribe Cnx Port [Robert_W_Hodges]
    public static let `pscribeTcp`: Self = "_pscribe._tcp"
    /// Precision Scribe Cnx Port [Robert_W_Hodges]
    public static let `pscribeUdp`: Self = "_pscribe._udp"
    /// LM-X License Manager by X-Formation [Henrik_Goldman]
    public static let `lmXTcp`: Self = "_lm-x._tcp"
    /// LM-X License Manager by X-Formation [Henrik_Goldman]
    public static let `lmXUdp`: Self = "_lm-x._udp"
    /// Management of service nodes in a processing grid for thermodynamic calculations [Thermo-Calc_Software]
    public static let `thermoCalcUdp`: Self = "_thermo-calc._udp"
    /// QMTP over TLS [FEHCom]
    public static let `qmtpsTcp`: Self = "_qmtps._tcp"
    /// QMTP over TLS [FEHCom]
    public static let `qmtpsUdp`: Self = "_qmtps._udp"
    /// Radmind Access Protocol [Patrick_M_McNeal]
    public static let `radmindTcp`: Self = "_radmind._tcp"
    /// Radmind Access Protocol [Patrick_M_McNeal]
    public static let `radmindUdp`: Self = "_radmind._udp"
    /// JEOL Network Services Data Transport Protocol 1 [Kevin_Wellwood]
    public static let `jeolNsdtp1Tcp`: Self = "_jeol-nsdtp-1._tcp"
    /// JEOL Network Services Dynamic Discovery Protocol 1 [Kevin_Wellwood]
    public static let `jeolNsddp1Udp`: Self = "_jeol-nsddp-1._udp"
    /// JEOL Network Services Data Transport Protocol 2 [Kevin_Wellwood]
    public static let `jeolNsdtp2Tcp`: Self = "_jeol-nsdtp-2._tcp"
    /// JEOL Network Services Dynamic Discovery Protocol 2 [Kevin_Wellwood]
    public static let `jeolNsddp2Udp`: Self = "_jeol-nsddp-2._udp"
    /// JEOL Network Services Data Transport Protocol 3 [Kevin_Wellwood]
    public static let `jeolNsdtp3Tcp`: Self = "_jeol-nsdtp-3._tcp"
    /// JEOL Network Services Dynamic Discovery Protocol 3 [Kevin_Wellwood]
    public static let `jeolNsddp3Udp`: Self = "_jeol-nsddp-3._udp"
    /// JEOL Network Services Data Transport Protocol 4 [Kevin_Wellwood]
    public static let `jeolNsdtp4Tcp`: Self = "_jeol-nsdtp-4._tcp"
    /// JEOL Network Services Dynamic Discovery Protocol 4 [Kevin_Wellwood]
    public static let `jeolNsddp4Udp`: Self = "_jeol-nsddp-4._udp"
    /// TL1 Raw Over SSL/TLS [Jim_Humphreys]
    public static let `tl1RawSslTcp`: Self = "_tl1-raw-ssl._tcp"
    /// TL1 Raw Over SSL/TLS [Jim_Humphreys]
    public static let `tl1RawSslUdp`: Self = "_tl1-raw-ssl._udp"
    /// TL1 over SSH [Jim_Humphreys]
    public static let `tl1SshTcp`: Self = "_tl1-ssh._tcp"
    /// TL1 over SSH [Jim_Humphreys]
    public static let `tl1SshUdp`: Self = "_tl1-ssh._udp"
    /// CRIP [Mike_Rodbell]
    public static let `cripTcp`: Self = "_crip._tcp"
    /// CRIP [Mike_Rodbell]
    public static let `cripUdp`: Self = "_crip._udp"
    /// GridLAB-D User Interface [David_Chassin]
    public static let `gldTcp`: Self = "_gld._tcp"
    /// Grid Authentication [Jason_Hamilton]
    public static let `gridTcp`: Self = "_grid._tcp"
    /// Grid Authentication [Jason_Hamilton]
    public static let `gridUdp`: Self = "_grid._udp"
    /// Grid Authentication Alt [Jason_Hamilton]
    public static let `gridAltTcp`: Self = "_grid-alt._tcp"
    /// Grid Authentication Alt [Jason_Hamilton]
    public static let `gridAltUdp`: Self = "_grid-alt._udp"
    /// BMC GRX [Portnoy_Boxman]
    public static let `bmcGrxTcp`: Self = "_bmc-grx._tcp"
    /// BMC GRX [Portnoy_Boxman]
    public static let `bmcGrxUdp`: Self = "_bmc-grx._udp"
    /// BMC CONTROL-D LDAP SERVER IANA assigned this well-formed service name as a replacement for "bmc_ctd_ldap". [Portnoy_Boxman_2]
    public static let `bmcCtdLdapTcp`: Self = "_bmc-ctd-ldap._tcp"
    /// BMC CONTROL-D LDAP SERVER [Portnoy_Boxman_2]
    public static let `bmc_ctd_ldapTcp`: Self = "_bmc_ctd_ldap._tcp"
    /// BMC CONTROL-D LDAP SERVER IANA assigned this well-formed service name as a replacement for "bmc_ctd_ldap". [Portnoy_Boxman_2]
    public static let `bmcCtdLdapUdp`: Self = "_bmc-ctd-ldap._udp"
    /// BMC CONTROL-D LDAP SERVER [Portnoy_Boxman_2]
    public static let `bmc_ctd_ldapUdp`: Self = "_bmc_ctd_ldap._udp"
    /// Unified Fabric Management Protocol [Mellanox]
    public static let `ufmpTcp`: Self = "_ufmp._tcp"
    /// Unified Fabric Management Protocol [Mellanox]
    public static let `ufmpUdp`: Self = "_ufmp._udp"
    /// Sensor Control Unit Protocol [Sven_Kopacz]
    public static let `scupTcp`: Self = "_scup._tcp"
    /// Sensor Control Unit Protocol Discovery Protocol [Sven_Kopacz]
    public static let `scupDiscUdp`: Self = "_scup-disc._udp"
    /// Ethernet Sensor Communications Protocol [Jaime_Antolin]
    public static let `abbEscpTcp`: Self = "_abb-escp._tcp"
    /// Ethernet Sensor Communications Protocol [Jaime_Antolin]
    public static let `abbEscpUdp`: Self = "_abb-escp._udp"
    /// Navtech Radar Sensor Data Command [Navtech_Radar_Ltd]
    public static let `navDataCmdTcp`: Self = "_nav-data-cmd._tcp"
    /// Navtech Radar Sensor Data [Navtech_Radar_Ltd]
    public static let `navDataUdp`: Self = "_nav-data._udp"
    /// Double-Take Replication Service [Carbonite_Inc]
    public static let `repsvcTcp`: Self = "_repsvc._tcp"
    /// Double-Take Replication Service [Carbonite_Inc]
    public static let `repsvcUdp`: Self = "_repsvc._udp"
    /// Empress Software Connectivity Server 1 [Srdjan_Holovac]
    public static let `empServer1Tcp`: Self = "_emp-server1._tcp"
    /// Empress Software Connectivity Server 1 [Srdjan_Holovac]
    public static let `empServer1Udp`: Self = "_emp-server1._udp"
    /// Empress Software Connectivity Server 2 [Srdjan_Holovac]
    public static let `empServer2Tcp`: Self = "_emp-server2._tcp"
    /// Empress Software Connectivity Server 2 [Srdjan_Holovac]
    public static let `empServer2Udp`: Self = "_emp-server2._udp"
    /// HR Device Network Configuration Service [Hall_Research]
    public static let `hrdNcsTcp`: Self = "_hrd-ncs._tcp"
    /// HR Device Network service [Hall_Research]
    public static let `hrdNsDiscUdp`: Self = "_hrd-ns-disc._udp"
    /// Double-Take Management Service [Carbonite_Inc]
    public static let `dtMgmtsvcTcp`: Self = "_dt-mgmtsvc._tcp"
    /// Double-Take Virtual Recovery Assistant [Carbonite_Inc]
    public static let `dtVraTcp`: Self = "_dt-vra._tcp"
    /// sFlow traffic monitoring [Peter_Phaal]
    public static let `sflowTcp`: Self = "_sflow._tcp"
    /// sFlow traffic monitoring [Peter_Phaal]
    public static let `sflowUdp`: Self = "_sflow._udp"
    /// Argus-Spectr security and fire-prevention systems service [Argus_Spectr]
    public static let `streletzTcp`: Self = "_streletz._tcp"
    /// gnutella-svc [Serguei_Osokine]
    public static let `gnutellaSvcTcp`: Self = "_gnutella-svc._tcp"
    /// gnutella-svc [Serguei_Osokine]
    public static let `gnutellaSvcUdp`: Self = "_gnutella-svc._udp"
    /// gnutella-rtr [Serguei_Osokine]
    public static let `gnutellaRtrTcp`: Self = "_gnutella-rtr._tcp"
    /// gnutella-rtr [Serguei_Osokine]
    public static let `gnutellaRtrUdp`: Self = "_gnutella-rtr._udp"
    /// App Discovery and Access Protocol [Thomas_Kjoernes]
    public static let `adapTcp`: Self = "_adap._tcp"
    /// App Discovery and Access Protocol [Thomas_Kjoernes]
    public static let `adapUdp`: Self = "_adap._udp"
    /// PMCS applications [Pavel_Mendl]
    public static let `pmcsTcp`: Self = "_pmcs._tcp"
    /// PMCS applications [Pavel_Mendl]
    public static let `pmcsUdp`: Self = "_pmcs._udp"
    /// MetaEdit+ Multi-User [Steven_Kelly]
    public static let `metaeditMuTcp`: Self = "_metaedit-mu._tcp"
    /// MetaEdit+ Multi-User [Steven_Kelly]
    public static let `metaeditMuUdp`: Self = "_metaedit-mu._udp"
    /// Named Data Networking [Regents_of_the_University_of_California]
    public static let `ndnUdp`: Self = "_ndn._udp"
    /// MetaEdit+ Server Administration [Steven_Kelly]
    public static let `metaeditSeTcp`: Self = "_metaedit-se._tcp"
    /// MetaEdit+ Server Administration [Steven_Kelly]
    public static let `metaeditSeUdp`: Self = "_metaedit-se._udp"
    /// An advanced key-value cache and store [Salvatore_Sanfilippo]
    public static let `redisTcp`: Self = "_redis._tcp"
    /// Metatude Dialogue Server [Menno_Zweistra]
    public static let `metatudeMdsTcp`: Self = "_metatude-mds._tcp"
    /// Metatude Dialogue Server [Menno_Zweistra]
    public static let `metatudeMdsUdp`: Self = "_metatude-mds._udp"
    /// clariion-evr01 [Dave_DesRoches]
    public static let `clariionEvr01Tcp`: Self = "_clariion-evr01._tcp"
    /// clariion-evr01 [Dave_DesRoches]
    public static let `clariionEvr01Udp`: Self = "_clariion-evr01._udp"
    /// MetaEdit+ WebService API [Steven_Kelly]
    public static let `metaeditWsTcp`: Self = "_metaedit-ws._tcp"
    /// MetaEdit+ WebService API [Steven_Kelly]
    public static let `metaeditWsUdp`: Self = "_metaedit-ws._udp"
    /// Faxcom Message Service [Albert_Leung]
    public static let `faxcomserviceTcp`: Self = "_faxcomservice._tcp"
    /// Faxcom Message Service [Albert_Leung]
    public static let `faxcomserviceUdp`: Self = "_faxcomservice._udp"
    /// SYserver remote commands [David_Ashkenazi]
    public static let `syserverremoteTcp`: Self = "_syserverremote._tcp"
    /// Simple VDR Protocol [Klaus_Schmidinger]
    public static let `svdrpTcp`: Self = "_svdrp._tcp"
    /// Simple VDR Protocol Discovery [Klaus_Schmidinger]
    public static let `svdrpDiscUdp`: Self = "_svdrp-disc._udp"
    /// NIM_VDRShell [Rik_Ditter]
    public static let `nimVdrshellTcp`: Self = "_nim-vdrshell._tcp"
    /// NIM_VDRShell [Rik_Ditter]
    public static let `nimVdrshellUdp`: Self = "_nim-vdrshell._udp"
    /// NIM_WAN [Rik_Ditter]
    public static let `nimWanTcp`: Self = "_nim-wan._tcp"
    /// NIM_WAN [Rik_Ditter]
    public static let `nimWanUdp`: Self = "_nim-wan._udp"
    /// PgBouncer [Marko_Kreen]
    public static let `pgbouncerTcp`: Self = "_pgbouncer._tcp"
    /// heliosd daemon [Cartesian_Theatre]
    public static let `heliosdTcp`: Self = "_heliosd._tcp"
    /// Transitory Application Request Protocol [Chris_Peel_2]
    public static let `tarpTcp`: Self = "_tarp._tcp"
    /// Service Registry Default HTTPS Domain [Paul_Sterk]
    public static let `sunSrHttpsTcp`: Self = "_sun-sr-https._tcp"
    /// Service Registry Default HTTPS Domain [Paul_Sterk]
    public static let `sunSrHttpsUdp`: Self = "_sun-sr-https._udp"
    /// Grid Engine Qmaster Service IANA assigned this well-formed service name as a replacement for "sge_qmaster". [Andreas_Haas]
    public static let `sgeQmasterTcp`: Self = "_sge-qmaster._tcp"
    /// Grid Engine Qmaster Service [Andreas_Haas]
    public static let `sge_qmasterTcp`: Self = "_sge_qmaster._tcp"
    /// Grid Engine Qmaster Service IANA assigned this well-formed service name as a replacement for "sge_qmaster". [Andreas_Haas]
    public static let `sgeQmasterUdp`: Self = "_sge-qmaster._udp"
    /// Grid Engine Qmaster Service [Andreas_Haas]
    public static let `sge_qmasterUdp`: Self = "_sge_qmaster._udp"
    /// Grid Engine Execution Service IANA assigned this well-formed service name as a replacement for "sge_execd". [Andreas_Haas]
    public static let `sgeExecdTcp`: Self = "_sge-execd._tcp"
    /// Grid Engine Execution Service [Andreas_Haas]
    public static let `sge_execdTcp`: Self = "_sge_execd._tcp"
    /// Grid Engine Execution Service IANA assigned this well-formed service name as a replacement for "sge_execd". [Andreas_Haas]
    public static let `sgeExecdUdp`: Self = "_sge-execd._udp"
    /// Grid Engine Execution Service [Andreas_Haas]
    public static let `sge_execdUdp`: Self = "_sge_execd._udp"
    /// MySQL Proxy [Kay_Roepke]
    public static let `mysqlProxyTcp`: Self = "_mysql-proxy._tcp"
    /// MySQL Proxy [Kay_Roepke]
    public static let `mysqlProxyUdp`: Self = "_mysql-proxy._udp"
    /// SKIP Certificate Receive [Tom_Markson]
    public static let `skipCertRecvTcp`: Self = "_skip-cert-recv._tcp"
    /// SKIP Certificate Receive [Tom_Markson]
    public static let `skipCertRecvUdp`: Self = "_skip-cert-recv._udp"
    /// SKIP Certificate Send [Tom_Markson]
    public static let `skipCertSendTcp`: Self = "_skip-cert-send._tcp"
    /// SKIP Certificate Send [Tom_Markson]
    public static let `skipCertSendUdp`: Self = "_skip-cert-send._udp"
    /// Port assignment for medical device communication in accordance to IEEE 11073-20701 [David_Gregorczyk]
    public static let `ieee1107320701Tcp`: Self = "_ieee11073-20701._tcp"
    /// Port assignment for medical device communication in accordance to IEEE 11073-20701 [David_Gregorczyk]
    public static let `ieee1107320701Udp`: Self = "_ieee11073-20701._udp"
    /// LVision License Manager [Brian_McKinnon]
    public static let `lvisionLmTcp`: Self = "_lvision-lm._tcp"
    /// LVision License Manager [Brian_McKinnon]
    public static let `lvisionLmUdp`: Self = "_lvision-lm._udp"
    /// Service Registry Default HTTP Domain [Paul_Sterk]
    public static let `sunSrHttpTcp`: Self = "_sun-sr-http._tcp"
    /// Service Registry Default HTTP Domain [Paul_Sterk]
    public static let `sunSrHttpUdp`: Self = "_sun-sr-http._udp"
    /// Service Tags [Peter_Schow]
    public static let `servicetagsTcp`: Self = "_servicetags._tcp"
    /// Service Tags [Peter_Schow]
    public static let `servicetagsUdp`: Self = "_servicetags._udp"
    /// Logical Domains Management Interface [Eric_Sharakan]
    public static let `ldomsMgmtTcp`: Self = "_ldoms-mgmt._tcp"
    /// Logical Domains Management Interface [Eric_Sharakan]
    public static let `ldomsMgmtUdp`: Self = "_ldoms-mgmt._udp"
    /// SunVTS RMI [Sumit_Arora]
    public static let `SunVTSRmiTcp`: Self = "_SunVTS-RMI._tcp"
    /// SunVTS RMI [Sumit_Arora]
    public static let `SunVTSRmiUdp`: Self = "_SunVTS-RMI._udp"
    /// Service Registry Default JMS Domain [Paul_Sterk]
    public static let `sunSrJmsTcp`: Self = "_sun-sr-jms._tcp"
    /// Service Registry Default JMS Domain [Paul_Sterk]
    public static let `sunSrJmsUdp`: Self = "_sun-sr-jms._udp"
    /// Service Registry Default IIOP Domain [Paul_Sterk]
    public static let `sunSrIiopTcp`: Self = "_sun-sr-iiop._tcp"
    /// Service Registry Default IIOP Domain [Paul_Sterk]
    public static let `sunSrIiopUdp`: Self = "_sun-sr-iiop._udp"
    /// Service Registry Default IIOPS Domain [Paul_Sterk]
    public static let `sunSrIiopsTcp`: Self = "_sun-sr-iiops._tcp"
    /// Service Registry Default IIOPS Domain [Paul_Sterk]
    public static let `sunSrIiopsUdp`: Self = "_sun-sr-iiops._udp"
    /// Service Registry Default IIOPAuth Domain [Paul_Sterk]
    public static let `sunSrIiopAutTcp`: Self = "_sun-sr-iiop-aut._tcp"
    /// Service Registry Default IIOPAuth Domain [Paul_Sterk]
    public static let `sunSrIiopAutUdp`: Self = "_sun-sr-iiop-aut._udp"
    /// Service Registry Default JMX Domain [Paul_Sterk]
    public static let `sunSrJmxTcp`: Self = "_sun-sr-jmx._tcp"
    /// Service Registry Default JMX Domain [Paul_Sterk]
    public static let `sunSrJmxUdp`: Self = "_sun-sr-jmx._udp"
    /// Service Registry Default Admin Domain [Paul_Sterk]
    public static let `sunSrAdminTcp`: Self = "_sun-sr-admin._tcp"
    /// Service Registry Default Admin Domain [Paul_Sterk]
    public static let `sunSrAdminUdp`: Self = "_sun-sr-admin._udp"
    /// BoKS Master [Magnus_Nystrom]
    public static let `boksTcp`: Self = "_boks._tcp"
    /// BoKS Master [Magnus_Nystrom]
    public static let `boksUdp`: Self = "_boks._udp"
    /// BoKS Servc IANA assigned this well-formed service name as a replacement for "boks_servc". [Magnus_Nystrom]
    public static let `boksServcTcp`: Self = "_boks-servc._tcp"
    /// BoKS Servc [Magnus_Nystrom]
    public static let `boks_servcTcp`: Self = "_boks_servc._tcp"
    /// BoKS Servc IANA assigned this well-formed service name as a replacement for "boks_servc". [Magnus_Nystrom]
    public static let `boksServcUdp`: Self = "_boks-servc._udp"
    /// BoKS Servc [Magnus_Nystrom]
    public static let `boks_servcUdp`: Self = "_boks_servc._udp"
    /// BoKS Servm IANA assigned this well-formed service name as a replacement for "boks_servm". [Magnus_Nystrom]
    public static let `boksServmTcp`: Self = "_boks-servm._tcp"
    /// BoKS Servm [Magnus_Nystrom]
    public static let `boks_servmTcp`: Self = "_boks_servm._tcp"
    /// BoKS Servm IANA assigned this well-formed service name as a replacement for "boks_servm". [Magnus_Nystrom]
    public static let `boksServmUdp`: Self = "_boks-servm._udp"
    /// BoKS Servm [Magnus_Nystrom]
    public static let `boks_servmUdp`: Self = "_boks_servm._udp"
    /// BoKS Clntd IANA assigned this well-formed service name as a replacement for "boks_clntd". [Magnus_Nystrom]
    public static let `boksClntdTcp`: Self = "_boks-clntd._tcp"
    /// BoKS Clntd [Magnus_Nystrom]
    public static let `boks_clntdTcp`: Self = "_boks_clntd._tcp"
    /// BoKS Clntd IANA assigned this well-formed service name as a replacement for "boks_clntd". [Magnus_Nystrom]
    public static let `boksClntdUdp`: Self = "_boks-clntd._udp"
    /// BoKS Clntd [Magnus_Nystrom]
    public static let `boks_clntdUdp`: Self = "_boks_clntd._udp"
    /// BoKS Admin Private Port IANA assigned this well-formed service name as a replacement for "badm_priv". [Magnus_Nystrom]
    public static let `badmPrivTcp`: Self = "_badm-priv._tcp"
    /// BoKS Admin Private Port [Magnus_Nystrom]
    public static let `badm_privTcp`: Self = "_badm_priv._tcp"
    /// BoKS Admin Private Port IANA assigned this well-formed service name as a replacement for "badm_priv". [Magnus_Nystrom]
    public static let `badmPrivUdp`: Self = "_badm-priv._udp"
    /// BoKS Admin Private Port [Magnus_Nystrom]
    public static let `badm_privUdp`: Self = "_badm_priv._udp"
    /// BoKS Admin Public Port IANA assigned this well-formed service name as a replacement for "badm_pub". [Magnus_Nystrom]
    public static let `badmPubTcp`: Self = "_badm-pub._tcp"
    /// BoKS Admin Public Port [Magnus_Nystrom]
    public static let `badm_pubTcp`: Self = "_badm_pub._tcp"
    /// BoKS Admin Public Port IANA assigned this well-formed service name as a replacement for "badm_pub". [Magnus_Nystrom]
    public static let `badmPubUdp`: Self = "_badm-pub._udp"
    /// BoKS Admin Public Port [Magnus_Nystrom]
    public static let `badm_pubUdp`: Self = "_badm_pub._udp"
    /// BoKS Dir Server, Private Port IANA assigned this well-formed service name as a replacement for "bdir_priv". [Magnus_Nystrom]
    public static let `bdirPrivTcp`: Self = "_bdir-priv._tcp"
    /// BoKS Dir Server, Private Port [Magnus_Nystrom]
    public static let `bdir_privTcp`: Self = "_bdir_priv._tcp"
    /// BoKS Dir Server, Private Port IANA assigned this well-formed service name as a replacement for "bdir_priv". [Magnus_Nystrom]
    public static let `bdirPrivUdp`: Self = "_bdir-priv._udp"
    /// BoKS Dir Server, Private Port [Magnus_Nystrom]
    public static let `bdir_privUdp`: Self = "_bdir_priv._udp"
    /// BoKS Dir Server, Public Port IANA assigned this well-formed service name as a replacement for "bdir_pub". [Magnus_Nystrom]
    public static let `bdirPubTcp`: Self = "_bdir-pub._tcp"
    /// BoKS Dir Server, Public Port [Magnus_Nystrom]
    public static let `bdir_pubTcp`: Self = "_bdir_pub._tcp"
    /// BoKS Dir Server, Public Port IANA assigned this well-formed service name as a replacement for "bdir_pub". [Magnus_Nystrom]
    public static let `bdirPubUdp`: Self = "_bdir-pub._udp"
    /// BoKS Dir Server, Public Port [Magnus_Nystrom]
    public static let `bdir_pubUdp`: Self = "_bdir_pub._udp"
    /// MGCS-MFP Port [Minoru_Ozaki]
    public static let `mgcsMfpPortTcp`: Self = "_mgcs-mfp-port._tcp"
    /// MGCS-MFP Port [Minoru_Ozaki]
    public static let `mgcsMfpPortUdp`: Self = "_mgcs-mfp-port._udp"
    /// MCER Port [Portnoy_Boxman]
    public static let `mcerPortTcp`: Self = "_mcer-port._tcp"
    /// MCER Port [Portnoy_Boxman]
    public static let `mcerPortUdp`: Self = "_mcer-port._udp"
    /// Datagram Congestion Control Protocol Encapsulation for NAT Traversal [IESG]
    public static let `dccpUdpUdp`: Self = "_dccp-udp._udp"
    /// NETCONF over TLS [IESG]
    public static let `netconfTlsTcp`: Self = "_netconf-tls._tcp"
    /// Syslog over TLS 
    public static let `syslogTlsTcp`: Self = "_syslog-tls._tcp"
    /// syslog over DTLS 
    public static let `syslogTlsUdp`: Self = "_syslog-tls._udp"
    /// syslog over DTLS 
    public static let `syslogTlsDccp`: Self = "_syslog-tls._dccp"
    /// Elipse RPC Protocol [F_Englert]
    public static let `elipseRecTcp`: Self = "_elipse-rec._tcp"
    /// Elipse RPC Protocol [F_Englert]
    public static let `elipseRecUdp`: Self = "_elipse-rec._udp"
    /// lds_distrib [Jack_Baker]
    public static let `ldsDistribTcp`: Self = "_lds-distrib._tcp"
    /// lds_distrib [Jack_Baker]
    public static let `ldsDistribUdp`: Self = "_lds-distrib._udp"
    /// LDS Dump Service [Jack_Baker]
    public static let `ldsDumpTcp`: Self = "_lds-dump._tcp"
    /// LDS Dump Service [Jack_Baker]
    public static let `ldsDumpUdp`: Self = "_lds-dump._udp"
    /// APC 6547 [American_Power_Conve]
    public static let `apc6547Tcp`: Self = "_apc-6547._tcp"
    /// APC 6547 [American_Power_Conve]
    public static let `apc6547Udp`: Self = "_apc-6547._udp"
    /// APC 6548 [American_Power_Conve]
    public static let `apc6548Tcp`: Self = "_apc-6548._tcp"
    /// APC 6548 [American_Power_Conve]
    public static let `apc6548Udp`: Self = "_apc-6548._udp"
    /// APC 6549 [American_Power_Conve]
    public static let `apc6549Tcp`: Self = "_apc-6549._tcp"
    /// APC 6549 [American_Power_Conve]
    public static let `apc6549Udp`: Self = "_apc-6549._udp"
    /// fg-sysupdate [Mark_Beyer]
    public static let `fgSysupdateTcp`: Self = "_fg-sysupdate._tcp"
    /// fg-sysupdate [Mark_Beyer]
    public static let `fgSysupdateUdp`: Self = "_fg-sysupdate._udp"
    /// Software Update Manager [Jan_Dirven]
    public static let `sumTcp`: Self = "_sum._tcp"
    /// Software Update Manager [Jan_Dirven]
    public static let `sumUdp`: Self = "_sum._udp"
    /// Checkmk Monitoring Agent [Tribe29_GmbH]
    public static let `checkmkAgentTcp`: Self = "_checkmk-agent._tcp"
    ///  [Brian_Tackett]
    public static let `xdsxdmTcp`: Self = "_xdsxdm._tcp"
    ///  [Brian_Tackett]
    public static let `xdsxdmUdp`: Self = "_xdsxdm._udp"
    /// SANE Control Port [Henning_Meier_Geinit]
    public static let `sanePortTcp`: Self = "_sane-port._tcp"
    /// SANE Control Port [Henning_Meier_Geinit]
    public static let `sanePortUdp`: Self = "_sane-port._udp"
    /// CanIt Storage Manager IANA assigned this well-formed service name as a replacement for "canit_store". [Dianne_Skoll]
    public static let `canitStoreTcp`: Self = "_canit-store._tcp"
    /// CanIt Storage Manager [Dianne_Skoll]
    public static let `canit_storeTcp`: Self = "_canit_store._tcp"
    /// Roaring Penguin IP Address Reputation Collection [Dianne_Skoll]
    public static let `rpReputationUdp`: Self = "_rp-reputation._udp"
    /// Affiliate [David_Catmull]
    public static let `affiliateTcp`: Self = "_affiliate._tcp"
    /// Affiliate [David_Catmull]
    public static let `affiliateUdp`: Self = "_affiliate._udp"
    /// Parsec Masterserver [Andreas_Varga]
    public static let `parsecMasterTcp`: Self = "_parsec-master._tcp"
    /// Parsec Masterserver [Andreas_Varga]
    public static let `parsecMasterUdp`: Self = "_parsec-master._udp"
    /// Parsec Peer-to-Peer [Andreas_Varga]
    public static let `parsecPeerTcp`: Self = "_parsec-peer._tcp"
    /// Parsec Peer-to-Peer [Andreas_Varga]
    public static let `parsecPeerUdp`: Self = "_parsec-peer._udp"
    /// Parsec Gameserver [Andreas_Varga]
    public static let `parsecGameTcp`: Self = "_parsec-game._tcp"
    /// Parsec Gameserver [Andreas_Varga]
    public static let `parsecGameUdp`: Self = "_parsec-game._udp"
    /// JOA Jewel Suite [Bob_Rundle]
    public static let `joaJewelSuiteTcp`: Self = "_joaJewelSuite._tcp"
    /// JOA Jewel Suite [Bob_Rundle]
    public static let `joaJewelSuiteUdp`: Self = "_joaJewelSuite._udp"
    /// Microsoft Hyper-V Live Migration [Rajesh_D]
    public static let `mshvlmTcp`: Self = "_mshvlm._tcp"
    /// Microsoft Threat Management Gateway SSTP [Ori_Yosefi]
    public static let `mstmgSstpTcp`: Self = "_mstmg-sstp._tcp"
    /// Windows WSS Communication Framework [Rong_Yu]
    public static let `wsscomfrmwkTcp`: Self = "_wsscomfrmwk._tcp"
    /// ODETTE-FTP over TLS/SSL [Ieuan_Friend]
    public static let `odetteFtpsTcp`: Self = "_odette-ftps._tcp"
    /// ODETTE-FTP over TLS/SSL [Ieuan_Friend]
    public static let `odetteFtpsUdp`: Self = "_odette-ftps._udp"
    /// Kerberos V5 FTP Data [Robert_J_Scott]
    public static let `kftpDataTcp`: Self = "_kftp-data._tcp"
    /// Kerberos V5 FTP Data [Robert_J_Scott]
    public static let `kftpDataUdp`: Self = "_kftp-data._udp"
    /// Kerberos V5 FTP Control [Robert_J_Scott]
    public static let `kftpTcp`: Self = "_kftp._tcp"
    /// Kerberos V5 FTP Control [Robert_J_Scott]
    public static let `kftpUdp`: Self = "_kftp._udp"
    /// Multicast FTP [Bruce_Lueckenhoff_2]
    public static let `mcftpTcp`: Self = "_mcftp._tcp"
    /// Multicast FTP [Bruce_Lueckenhoff_2]
    public static let `mcftpUdp`: Self = "_mcftp._udp"
    /// Kerberos V5 Telnet [Robert_J_Scott]
    public static let `ktelnetTcp`: Self = "_ktelnet._tcp"
    /// Kerberos V5 Telnet [Robert_J_Scott]
    public static let `ktelnetUdp`: Self = "_ktelnet._udp"
    /// DataScaler database [Vasu_Murthy]
    public static let `datascalerDbTcp`: Self = "_datascaler-db._tcp"
    /// DataScaler control [Vasu_Murthy]
    public static let `datascalerCtlTcp`: Self = "_datascaler-ctl._tcp"
    /// WAGO Service and Update [Wolfgang_Adler]
    public static let `wagoServiceTcp`: Self = "_wago-service._tcp"
    /// WAGO Service and Update [Wolfgang_Adler]
    public static let `wagoServiceUdp`: Self = "_wago-service._udp"
    /// Allied Electronics NeXGen [Lou_Seitchik]
    public static let `nexgenTcp`: Self = "_nexgen._tcp"
    /// Allied Electronics NeXGen [Lou_Seitchik]
    public static let `nexgenUdp`: Self = "_nexgen._udp"
    /// AFE Stock Channel M/C [K_K_Ho]
    public static let `afescMcTcp`: Self = "_afesc-mc._tcp"
    /// AFE Stock Channel M/C [K_K_Ho]
    public static let `afescMcUdp`: Self = "_afesc-mc._udp"
    /// Secondary, (non ANDI) multi-protocol multi-function interface to     the Allied ANDI-based family of forecourt controllers [Allied_Electronics]
    public static let `nexgenAuxTcp`: Self = "_nexgen-aux._tcp"
    /// Secondary, (non ANDI) multi-protocol multi-function interface to       the Allied ANDI-based family of forecourt controllers [Allied_Electronics]
    public static let `nexgenAuxUdp`: Self = "_nexgen-aux._udp"
    /// eGenix mxODBC Connect [Marc_Andre_Lemburg]
    public static let `mxodbcConnectTcp`: Self = "_mxodbc-connect._tcp"
    /// Cisco vPath Services Overlay [Cisco2]
    public static let `ciscoVpathTunUdp`: Self = "_cisco-vpath-tun._udp"
    /// MPLS Performance Measurement out-of-band response [Cisco_Systems_2]
    public static let `mplsPmUdp`: Self = "_mpls-pm._udp"
    /// Encapsulate MPLS packets in UDP tunnels. [IESG]
    public static let `mplsUdpUdp`: Self = "_mpls-udp._udp"
    /// Encapsulate MPLS packets in UDP tunnels with DTLS. [IESG]
    public static let `mplsUdpDtlsUdp`: Self = "_mpls-udp-dtls._udp"
    /// Open vSwitch Database protocol [Bruce_Davie_2]
    public static let `ovsdbTcp`: Self = "_ovsdb._tcp"
    /// OpenFlow [Open_Networking_Foundation]
    public static let `openflowTcp`: Self = "_openflow._tcp"
    /// OpenFlow [Open_Networking_Foundation]
    public static let `openflowUdp`: Self = "_openflow._udp"
    /// PC SOFT - Software factory UI/manager [Jerome_AERTS]
    public static let `pcsSfUiManTcp`: Self = "_pcs-sf-ui-man._tcp"
    /// Emergency Message Control Service [Gerry_Gorman]
    public static let `emgmsgTcp`: Self = "_emgmsg._tcp"
    /// PalCom Discovery [Boris_Magnusson]
    public static let `palcomDiscUdp`: Self = "_palcom-disc._udp"
    /// IRCU [Brian_Tackett]
    public static let `ircuTcp`: Self = "_ircu._tcp"
    /// Vocaltec Global Online Directory [Scott_Petrack]
    public static let `vocaltecGoldTcp`: Self = "_vocaltec-gold._tcp"
    /// Vocaltec Global Online Directory [Scott_Petrack]
    public static let `vocaltecGoldUdp`: Self = "_vocaltec-gold._udp"
    /// P4P Portal Service [Chris_Griffiths]
    public static let `p4pPortalTcp`: Self = "_p4p-portal._tcp"
    /// P4P Portal Service [Chris_Griffiths]
    public static let `p4pPortalUdp`: Self = "_p4p-portal._udp"
    /// vision_server IANA assigned this well-formed service name as a replacement for "vision_server". [Chris_Kramer]
    public static let `visionServerTcp`: Self = "_vision-server._tcp"
    /// vision_server [Chris_Kramer]
    public static let `vision_serverTcp`: Self = "_vision_server._tcp"
    /// vision_server IANA assigned this well-formed service name as a replacement for "vision_server". [Chris_Kramer]
    public static let `visionServerUdp`: Self = "_vision-server._udp"
    /// vision_server [Chris_Kramer]
    public static let `vision_serverUdp`: Self = "_vision_server._udp"
    /// vision_elmd IANA assigned this well-formed service name as a replacement for "vision_elmd". [Chris_Kramer]
    public static let `visionElmdTcp`: Self = "_vision-elmd._tcp"
    /// vision_elmd [Chris_Kramer]
    public static let `vision_elmdTcp`: Self = "_vision_elmd._tcp"
    /// vision_elmd IANA assigned this well-formed service name as a replacement for "vision_elmd". [Chris_Kramer]
    public static let `visionElmdUdp`: Self = "_vision-elmd._udp"
    /// vision_elmd [Chris_Kramer]
    public static let `vision_elmdUdp`: Self = "_vision_elmd._udp"
    /// Viscount Freedom Bridge Protocol [Chris_MacDonald]
    public static let `vfbpTcp`: Self = "_vfbp._tcp"
    /// Viscount Freedom Bridge Discovery [Chris_MacDonald]
    public static let `vfbpDiscUdp`: Self = "_vfbp-disc._udp"
    /// Osorno Automation [Peter_Hombach]
    public static let `osautTcp`: Self = "_osaut._tcp"
    /// Osorno Automation [Peter_Hombach]
    public static let `osautUdp`: Self = "_osaut._udp"
    /// CleverView for cTrace Message Service [David_Cheng]
    public static let `cleverCtraceTcp`: Self = "_clever-ctrace._tcp"
    /// CleverView for TCP/IP Message Service [David_Cheng]
    public static let `cleverTcpipTcp`: Self = "_clever-tcpip._tcp"
    /// Tofino Security Appliance [Scott_Howard]
    public static let `tsaTcp`: Self = "_tsa._tcp"
    /// Tofino Security Appliance [Scott_Howard]
    public static let `tsaUdp`: Self = "_tsa._udp"
    /// CLEVERDetect Message Service [Applied_Expert_Systems_Inc]
    public static let `cleverdetectTcp`: Self = "_cleverdetect._tcp"
    /// Babel Routing Protocol 
    public static let `babelUdp`: Self = "_babel._udp"
    /// Internet Relay Chat via TLS/SSL 
    public static let `ircsUTcp`: Self = "_ircs-u._tcp"
    /// Babel Routing Protocol over DTLS [IESG]
    public static let `babelDtlsUdp`: Self = "_babel-dtls._udp"
    /// KTI/ICAD Nameserver [Stanley_Knutson]
    public static let `ktiIcadSrvrTcp`: Self = "_kti-icad-srvr._tcp"
    /// KTI/ICAD Nameserver [Stanley_Knutson]
    public static let `ktiIcadSrvrUdp`: Self = "_kti-icad-srvr._udp"
    /// e-Design network [Janos_Lerch]
    public static let `eDesignNetTcp`: Self = "_e-design-net._tcp"
    /// e-Design network [Janos_Lerch]
    public static let `eDesignNetUdp`: Self = "_e-design-net._udp"
    /// e-Design web [Janos_Lerch]
    public static let `eDesignWebTcp`: Self = "_e-design-web._tcp"
    /// e-Design web [Janos_Lerch]
    public static let `eDesignWebUdp`: Self = "_e-design-web._udp"
    /// ForCES HP (High Priority) channel 
    public static let `frcHpSctp`: Self = "_frc-hp._sctp"
    /// ForCES MP (Medium Priority) channel 
    public static let `frcMpSctp`: Self = "_frc-mp._sctp"
    /// ForCES LP (Low priority) channel 
    public static let `frcLpSctp`: Self = "_frc-lp._sctp"
    /// Internet Backplane Protocol [Alessandro_Bassi]
    public static let `ibprotocolTcp`: Self = "_ibprotocol._tcp"
    /// Internet Backplane Protocol [Alessandro_Bassi]
    public static let `ibprotocolUdp`: Self = "_ibprotocol._udp"
    /// Fibotrader Communications [Robert_Wetzold]
    public static let `fibotraderComTcp`: Self = "_fibotrader-com._tcp"
    /// Fibotrader Communications [Robert_Wetzold]
    public static let `fibotraderComUdp`: Self = "_fibotrader-com._udp"
    /// Princity Agent [ENSTEAM_Sp_z.o.o.]
    public static let `princityAgentTcp`: Self = "_princity-agent._tcp"
    /// BMC PERFORM AGENT [Portnoy_Boxman]
    public static let `bmcPerfAgentTcp`: Self = "_bmc-perf-agent._tcp"
    /// BMC PERFORM AGENT [Portnoy_Boxman]
    public static let `bmcPerfAgentUdp`: Self = "_bmc-perf-agent._udp"
    /// BMC PERFORM MGRD [Portnoy_Boxman]
    public static let `bmcPerfMgrdTcp`: Self = "_bmc-perf-mgrd._tcp"
    /// BMC PERFORM MGRD [Portnoy_Boxman]
    public static let `bmcPerfMgrdUdp`: Self = "_bmc-perf-mgrd._udp"
    /// ADInstruments GxP Server [Mathew_Pitchforth]
    public static let `adiGxpSrvprtTcp`: Self = "_adi-gxp-srvprt._tcp"
    /// ADInstruments GxP Server [Mathew_Pitchforth]
    public static let `adiGxpSrvprtUdp`: Self = "_adi-gxp-srvprt._udp"
    /// PolyServe http [Mike_Spitzer]
    public static let `plysrvHttpTcp`: Self = "_plysrv-http._tcp"
    /// PolyServe http [Mike_Spitzer]
    public static let `plysrvHttpUdp`: Self = "_plysrv-http._udp"
    /// PolyServe https [Mike_Spitzer]
    public static let `plysrvHttpsTcp`: Self = "_plysrv-https._tcp"
    /// PolyServe https [Mike_Spitzer]
    public static let `plysrvHttpsUdp`: Self = "_plysrv-https._udp"
    /// netTsunami Tracker [Tomahawk_Holdings]
    public static let `ntzTrackerTcp`: Self = "_ntz-tracker._tcp"
    /// netTsunami p2p storage system [Tomahawk_Holdings]
    public static let `ntzP2pStorageTcp`: Self = "_ntz-p2p-storage._tcp"
    /// Bidirectional Forwarding Detection (BFD) on Link Aggregation Group (LAG) Interfaces [IESG]
    public static let `bfdLagUdp`: Self = "_bfd-lag._udp"
    /// DGPF Individual Exchange [Thomas_Weise]
    public static let `dgpfExchgTcp`: Self = "_dgpf-exchg._tcp"
    /// DGPF Individual Exchange [Thomas_Weise]
    public static let `dgpfExchgUdp`: Self = "_dgpf-exchg._udp"
    /// Sun Java Web Console JMX [Bill_Edwards]
    public static let `smcJmxTcp`: Self = "_smc-jmx._tcp"
    /// Sun Java Web Console JMX [Bill_Edwards]
    public static let `smcJmxUdp`: Self = "_smc-jmx._udp"
    /// Sun Web Console Admin [Bill_Edwards]
    public static let `smcAdminTcp`: Self = "_smc-admin._tcp"
    /// Sun Web Console Admin [Bill_Edwards]
    public static let `smcAdminUdp`: Self = "_smc-admin._udp"
    /// SMC-HTTP [Ratnadeep_Bhattachar]
    public static let `smcHttpTcp`: Self = "_smc-http._tcp"
    /// SMC-HTTP [Ratnadeep_Bhattachar]
    public static let `smcHttpUdp`: Self = "_smc-http._udp"
    /// GSS-API for the Oracle Remote Administration Daemon [Oracle_9]
    public static let `radgTcp`: Self = "_radg._tcp"
    /// HNMP [Jude_George]
    public static let `hnmpTcp`: Self = "_hnmp._tcp"
    /// HNMP [Jude_George]
    public static let `hnmpUdp`: Self = "_hnmp._udp"
    /// Halcyon Network Manager [Fortra]
    public static let `hnmTcp`: Self = "_hnm._tcp"
    /// Halcyon Network Manager [Fortra]
    public static let `hnmUdp`: Self = "_hnm._udp"
    /// ACNET Control System Protocol [Fermilab]
    public static let `acnetTcp`: Self = "_acnet._tcp"
    /// ACNET Control System Protocol [Fermilab]
    public static let `acnetUdp`: Self = "_acnet._udp"
    /// PenTBox Secure IM Protocol [Alberto_Ortega_Llama]
    public static let `pentboxSimTcp`: Self = "_pentbox-sim._tcp"
    /// ambit-lm [Don_Hejna]
    public static let `ambitLmTcp`: Self = "_ambit-lm._tcp"
    /// ambit-lm [Don_Hejna]
    public static let `ambitLmUdp`: Self = "_ambit-lm._udp"
    /// Netmo Default [Urs_Bertschinger]
    public static let `netmoDefaultTcp`: Self = "_netmo-default._tcp"
    /// Netmo Default [Urs_Bertschinger]
    public static let `netmoDefaultUdp`: Self = "_netmo-default._udp"
    /// Netmo HTTP [Urs_Bertschinger]
    public static let `netmoHttpTcp`: Self = "_netmo-http._tcp"
    /// Netmo HTTP [Urs_Bertschinger]
    public static let `netmoHttpUdp`: Self = "_netmo-http._udp"
    /// ICCRUSHMORE [Dave_Hubbard]
    public static let `iccrushmoreTcp`: Self = "_iccrushmore._tcp"
    /// ICCRUSHMORE [Dave_Hubbard]
    public static let `iccrushmoreUdp`: Self = "_iccrushmore._udp"
    /// Acctopus Command Channel [Stefan_Auweiler]
    public static let `acctopusCcTcp`: Self = "_acctopus-cc._tcp"
    /// Acctopus Status [Stefan_Auweiler]
    public static let `acctopusStUdp`: Self = "_acctopus-st._udp"
    /// MUSE [Muse_Communications]
    public static let `museTcp`: Self = "_muse._tcp"
    /// MUSE [Muse_Communications]
    public static let `museUdp`: Self = "_muse._udp"
    /// R*TIME Viewer Data Interface [Curtiss-Wright_Corporation]
    public static let `rtimeviewerTcp`: Self = "_rtimeviewer._tcp"
    /// Novell Jetstream messaging protocol [Anil_Tyagi]
    public static let `jetstreamTcp`: Self = "_jetstream._tcp"
    /// Ping with RX/TX latency/loss split [Ben_Cartwright_Cox]
    public static let `splitPingTcp`: Self = "_split-ping._tcp"
    /// Ping with RX/TX latency/loss split [Ben_Cartwright_Cox]
    public static let `splitPingUdp`: Self = "_split-ping._udp"
    /// EthoScan Service [Marty_Campbell]
    public static let `ethoscanTcp`: Self = "_ethoscan._tcp"
    /// EthoScan Service [Marty_Campbell]
    public static let `ethoscanUdp`: Self = "_ethoscan._udp"
    /// XenSource Management Service [Roger_Klorese]
    public static let `xsmsvcTcp`: Self = "_xsmsvc._tcp"
    /// XenSource Management Service [Roger_Klorese]
    public static let `xsmsvcUdp`: Self = "_xsmsvc._udp"
    /// Biometrics Server [ISHII_AKIO]
    public static let `bioserverTcp`: Self = "_bioserver._tcp"
    /// Biometrics Server [ISHII_AKIO]
    public static let `bioserverUdp`: Self = "_bioserver._udp"
    /// OTLP [Brent_Foster]
    public static let `otlpTcp`: Self = "_otlp._tcp"
    /// OTLP [Brent_Foster]
    public static let `otlpUdp`: Self = "_otlp._udp"
    /// JMACT3 [Yutaka_Ono]
    public static let `jmact3Tcp`: Self = "_jmact3._tcp"
    /// JMACT3 [Yutaka_Ono]
    public static let `jmact3Udp`: Self = "_jmact3._udp"
    /// jmevt2 [Yutaka_Ono]
    public static let `jmevt2Tcp`: Self = "_jmevt2._tcp"
    /// jmevt2 [Yutaka_Ono]
    public static let `jmevt2Udp`: Self = "_jmevt2._udp"
    /// swismgr1 [Yutaka_Ono]
    public static let `swismgr1Tcp`: Self = "_swismgr1._tcp"
    /// swismgr1 [Yutaka_Ono]
    public static let `swismgr1Udp`: Self = "_swismgr1._udp"
    /// swismgr2 [Yutaka_Ono]
    public static let `swismgr2Tcp`: Self = "_swismgr2._tcp"
    /// swismgr2 [Yutaka_Ono]
    public static let `swismgr2Udp`: Self = "_swismgr2._udp"
    /// swistrap [Yutaka_Ono]
    public static let `swistrapTcp`: Self = "_swistrap._tcp"
    /// swistrap [Yutaka_Ono]
    public static let `swistrapUdp`: Self = "_swistrap._udp"
    /// swispol [Yutaka_Ono]
    public static let `swispolTcp`: Self = "_swispol._tcp"
    /// swispol [Yutaka_Ono]
    public static let `swispolUdp`: Self = "_swispol._udp"
    /// acmsoda [Daniel_Simms]
    public static let `acmsodaTcp`: Self = "_acmsoda._tcp"
    /// acmsoda [Daniel_Simms]
    public static let `acmsodaUdp`: Self = "_acmsoda._udp"
    /// Conductor test coordination protocol [George_Neville-Neil]
    public static let `conductorTcp`: Self = "_conductor._tcp"
    /// conductor for multiplex [George_Neville-Neil]
    public static let `conductorMpxSctp`: Self = "_conductor-mpx._sctp"
    /// QoS-extended OLSR protocol [Green_Communications_SAS]
    public static let `qolyesterUdp`: Self = "_qolyester._udp"
    /// Mobility XE Protocol [Joseph_T_Savarese]
    public static let `MobilitySrvTcp`: Self = "_MobilitySrv._tcp"
    /// Mobility XE Protocol [Joseph_T_Savarese]
    public static let `MobilitySrvUdp`: Self = "_MobilitySrv._udp"
    /// IATP-highPri [John_Murphy]
    public static let `iatpHighpriTcp`: Self = "_iatp-highpri._tcp"
    /// IATP-highPri [John_Murphy]
    public static let `iatpHighpriUdp`: Self = "_iatp-highpri._udp"
    /// IATP-normalPri [John_Murphy]
    public static let `iatpNormalpriTcp`: Self = "_iatp-normalpri._tcp"
    /// IATP-normalPri [John_Murphy]
    public static let `iatpNormalpriUdp`: Self = "_iatp-normalpri._udp"
    /// file server itself 
    public static let `afs3FileserverTcp`: Self = "_afs3-fileserver._tcp"
    /// file server itself 
    public static let `afs3FileserverUdp`: Self = "_afs3-fileserver._udp"
    /// callbacks to cache managers 
    public static let `afs3CallbackTcp`: Self = "_afs3-callback._tcp"
    /// callbacks to cache managers 
    public static let `afs3CallbackUdp`: Self = "_afs3-callback._udp"
    /// users & groups database 
    public static let `afs3PrserverTcp`: Self = "_afs3-prserver._tcp"
    /// users & groups database 
    public static let `afs3PrserverUdp`: Self = "_afs3-prserver._udp"
    /// volume location database 
    public static let `afs3VlserverTcp`: Self = "_afs3-vlserver._tcp"
    /// volume location database 
    public static let `afs3VlserverUdp`: Self = "_afs3-vlserver._udp"
    /// AFS/Kerberos authentication service 
    public static let `afs3KaserverTcp`: Self = "_afs3-kaserver._tcp"
    /// AFS/Kerberos authentication service 
    public static let `afs3KaserverUdp`: Self = "_afs3-kaserver._udp"
    /// volume managment server 
    public static let `afs3VolserTcp`: Self = "_afs3-volser._tcp"
    /// volume managment server 
    public static let `afs3VolserUdp`: Self = "_afs3-volser._udp"
    /// error interpretation service 
    public static let `afs3ErrorsTcp`: Self = "_afs3-errors._tcp"
    /// error interpretation service 
    public static let `afs3ErrorsUdp`: Self = "_afs3-errors._udp"
    /// basic overseer process 
    public static let `afs3BosTcp`: Self = "_afs3-bos._tcp"
    /// basic overseer process 
    public static let `afs3BosUdp`: Self = "_afs3-bos._udp"
    /// server-to-server updater 
    public static let `afs3UpdateTcp`: Self = "_afs3-update._tcp"
    /// server-to-server updater 
    public static let `afs3UpdateUdp`: Self = "_afs3-update._udp"
    /// remote cache manager service 
    public static let `afs3RmtsysTcp`: Self = "_afs3-rmtsys._tcp"
    /// remote cache manager service 
    public static let `afs3RmtsysUdp`: Self = "_afs3-rmtsys._udp"
    /// onlinet uninterruptable power supplies [Jim_Thompson]
    public static let `upsOnlinetTcp`: Self = "_ups-onlinet._tcp"
    /// onlinet uninterruptable power supplies [Jim_Thompson]
    public static let `upsOnlinetUdp`: Self = "_ups-onlinet._udp"
    /// Talon Discovery Port [Jim_Thompson]
    public static let `talonDiscTcp`: Self = "_talon-disc._tcp"
    /// Talon Discovery Port [Jim_Thompson]
    public static let `talonDiscUdp`: Self = "_talon-disc._udp"
    /// Talon Engine [Jim_Thompson]
    public static let `talonEngineTcp`: Self = "_talon-engine._tcp"
    /// Talon Engine [Jim_Thompson]
    public static let `talonEngineUdp`: Self = "_talon-engine._udp"
    /// Microtalon Discovery [Jim_Thompson]
    public static let `microtalonDisTcp`: Self = "_microtalon-dis._tcp"
    /// Microtalon Discovery [Jim_Thompson]
    public static let `microtalonDisUdp`: Self = "_microtalon-dis._udp"
    /// Microtalon Communications [Jim_Thompson]
    public static let `microtalonComTcp`: Self = "_microtalon-com._tcp"
    /// Microtalon Communications [Jim_Thompson]
    public static let `microtalonComUdp`: Self = "_microtalon-com._udp"
    /// Talon Webserver [Jim_Thompson]
    public static let `talonWebserverTcp`: Self = "_talon-webserver._tcp"
    /// Talon Webserver [Jim_Thompson]
    public static let `talonWebserverUdp`: Self = "_talon-webserver._udp"
    /// SPG Controls Carrier [SPG_Controls_Ltd]
    public static let `spgTcp`: Self = "_spg._tcp"
    /// SPG Controls Carrier [SPG_Controls_Ltd]
    public static let `spgUdp`: Self = "_spg._udp"
    /// GeneRic Autonomic Signaling Protocol [IESG]
    public static let `graspTcp`: Self = "_grasp._tcp"
    /// GeneRic Autonomic Signaling Protocol [IESG]
    public static let `graspUdp`: Self = "_grasp._udp"
    /// FISA Service [FAUCONNET_Ingenierie]
    public static let `fisaSvcTcp`: Self = "_fisa-svc._tcp"
    /// doceri drawing service control [Paul_Brown]
    public static let `doceriCtlTcp`: Self = "_doceri-ctl._tcp"
    /// doceri drawing service screen view [Paul_Brown]
    public static let `doceriViewUdp`: Self = "_doceri-view._udp"
    /// DP Serve [Allan_Stanley]
    public static let `dpserveTcp`: Self = "_dpserve._tcp"
    /// DP Serve [Allan_Stanley]
    public static let `dpserveUdp`: Self = "_dpserve._udp"
    /// DP Serve Admin [Allan_Stanley]
    public static let `dpserveadminTcp`: Self = "_dpserveadmin._tcp"
    /// DP Serve Admin [Allan_Stanley]
    public static let `dpserveadminUdp`: Self = "_dpserveadmin._udp"
    /// CT Discovery Protocol [James_Kirkwood]
    public static let `ctdpTcp`: Self = "_ctdp._tcp"
    /// CT Discovery Protocol [James_Kirkwood]
    public static let `ctdpUdp`: Self = "_ctdp._udp"
    /// Comtech T2 NMCS [Bryan_Wilcutt]
    public static let `ct2nmcsTcp`: Self = "_ct2nmcs._tcp"
    /// Comtech T2 NMCS [Bryan_Wilcutt]
    public static let `ct2nmcsUdp`: Self = "_ct2nmcs._udp"
    /// Vormetric service [Tom_Boyle]
    public static let `vmsvcTcp`: Self = "_vmsvc._tcp"
    /// Vormetric service [Tom_Boyle]
    public static let `vmsvcUdp`: Self = "_vmsvc._udp"
    /// Vormetric Service II [Tom_Boyle]
    public static let `vmsvc2Tcp`: Self = "_vmsvc-2._tcp"
    /// Vormetric Service II [Tom_Boyle]
    public static let `vmsvc2Udp`: Self = "_vmsvc-2._udp"
    /// Loreji Webhosting Panel [J.A._Smit]
    public static let `lorejiPanelTcp`: Self = "_loreji-panel._tcp"
    /// ObjectPlanet probe [Bjorn_Jarle_Kvande]
    public static let `opProbeTcp`: Self = "_op-probe._tcp"
    /// ObjectPlanet probe [Bjorn_Jarle_Kvande]
    public static let `opProbeUdp`: Self = "_op-probe._udp"
    /// IPOSPLANET retailing multi devices protocol [Fabrice_Paget]
    public static let `iposplanetTcp`: Self = "_iposplanet._tcp"
    /// Quest application level network service discovery [Quest_Software]
    public static let `questDiscUdp`: Self = "_quest-disc._udp"
    /// ARCP [Jude_George]
    public static let `arcpTcp`: Self = "_arcp._tcp"
    /// ARCP [Jude_George]
    public static let `arcpUdp`: Self = "_arcp._udp"
    /// IWGADTS Aircraft Housekeeping Message [Don_Sullivan]
    public static let `iwg1Tcp`: Self = "_iwg1._tcp"
    /// IWGADTS Aircraft Housekeeping Message [Don_Sullivan]
    public static let `iwg1Udp`: Self = "_iwg1._udp"
    /// iba Device Configuration Protocol [iba_AG]
    public static let `ibaCfgTcp`: Self = "_iba-cfg._tcp"
    /// iba Device Configuration Protocol [iba_AG]
    public static let `ibaCfgDiscUdp`: Self = "_iba-cfg-disc._udp"
    /// MarTalk protocol [Mahr_GmbH_Göttingen]
    public static let `martalkTcp`: Self = "_martalk._tcp"
    /// EmpowerID Communication [Matthew_Whited]
    public static let `empoweridTcp`: Self = "_empowerid._tcp"
    /// EmpowerID Communication [Matthew_Whited]
    public static let `empoweridUdp`: Self = "_empowerid._udp"
    /// Zixi live video transport protocol [Zixi]
    public static let `zixiTransportUdp`: Self = "_zixi-transport._udp"
    /// Java Discovery Protocol [OpenJDK]
    public static let `jdpDiscUdp`: Self = "_jdp-disc._udp"
    /// lazy-ptop [Guy_Keren]
    public static let `lazyPtopTcp`: Self = "_lazy-ptop._tcp"
    /// lazy-ptop [Guy_Keren]
    public static let `lazyPtopUdp`: Self = "_lazy-ptop._udp"
    /// X Font Service [Stephen_Gildea]
    public static let `fontServiceTcp`: Self = "_font-service._tcp"
    /// X Font Service [Stephen_Gildea]
    public static let `fontServiceUdp`: Self = "_font-service._udp"
    /// Embedded Light Control Network [Michael_Scarito]
    public static let `elcnTcp`: Self = "_elcn._tcp"
    /// Embedded Light Control Network [Michael_Scarito]
    public static let `elcnUdp`: Self = "_elcn._udp"
    /// AES-X170 [Richard_Foss]
    public static let `aesX170Udp`: Self = "_aes-x170._udp"
    /// Encrypted chat and file transfer service [Arcadian_Computers]
    public static let `rothagaTcp`: Self = "_rothaga._tcp"
    /// Virtual Prototypes License Manager [Victor_Galis]
    public static let `virprotLmTcp`: Self = "_virprot-lm._tcp"
    /// Virtual Prototypes License Manager [Victor_Galis]
    public static let `virprotLmUdp`: Self = "_virprot-lm._udp"
    /// End-to-end TLS Relay Control Connection [VESvault_Corp]
    public static let `snifTcp`: Self = "_snif._tcp"
    /// intelligent data manager [Paul_Ignatius]
    public static let `scenidmTcp`: Self = "_scenidm._tcp"
    /// intelligent data manager [Paul_Ignatius]
    public static let `scenidmUdp`: Self = "_scenidm._udp"
    /// Catalog Content Search [Anil_Sharma]
    public static let `scenccsTcp`: Self = "_scenccs._tcp"
    /// Catalog Content Search [Anil_Sharma]
    public static let `scenccsUdp`: Self = "_scenccs._udp"
    /// CA BSM Comm [Chun_Ho_Chang]
    public static let `cabsmCommTcp`: Self = "_cabsm-comm._tcp"
    /// CA BSM Comm [Chun_Ho_Chang]
    public static let `cabsmCommUdp`: Self = "_cabsm-comm._udp"
    /// CA Storage Manager [Emre_Tunar]
    public static let `caistoragemgrTcp`: Self = "_caistoragemgr._tcp"
    /// CA Storage Manager [Emre_Tunar]
    public static let `caistoragemgrUdp`: Self = "_caistoragemgr._udp"
    /// CA Connection Broker [David_Roberts]
    public static let `cacsambrokerTcp`: Self = "_cacsambroker._tcp"
    /// CA Connection Broker [David_Roberts]
    public static let `cacsambrokerUdp`: Self = "_cacsambroker._udp"
    /// File System Repository Agent [Micha_Ben_Efraim]
    public static let `fsrTcp`: Self = "_fsr._tcp"
    /// File System Repository Agent [Micha_Ben_Efraim]
    public static let `fsrUdp`: Self = "_fsr._udp"
    /// Document WCF Server [Micha_Ben_Efraim]
    public static let `docServerTcp`: Self = "_doc-server._tcp"
    /// Document WCF Server [Micha_Ben_Efraim]
    public static let `docServerUdp`: Self = "_doc-server._udp"
    /// Aruba eDiscovery Server [Micha_Ben_Efraim]
    public static let `arubaServerTcp`: Self = "_aruba-server._tcp"
    /// Aruba eDiscovery Server [Micha_Ben_Efraim]
    public static let `arubaServerUdp`: Self = "_aruba-server._udp"
    /// CA SRM Agent [Venkata_Krishna]
    public static let `casrmagentTcp`: Self = "_casrmagent._tcp"
    /// cncKadServer DB & Inventory Services [Micha_Ben_Efraim_2]
    public static let `cnckadserverTcp`: Self = "_cnckadserver._tcp"
    /// Consequor Consulting Process Integration Bridge [Frank_Goenninger]
    public static let `ccagPibTcp`: Self = "_ccag-pib._tcp"
    /// Consequor Consulting Process Integration Bridge [Frank_Goenninger]
    public static let `ccagPibUdp`: Self = "_ccag-pib._udp"
    /// Adaptive Name/Service Resolution [Geoff_Back_2]
    public static let `nsrpTcp`: Self = "_nsrp._tcp"
    /// Adaptive Name/Service Resolution [Geoff_Back_2]
    public static let `nsrpUdp`: Self = "_nsrp._udp"
    /// Discovery and Retention Mgt Production [Micha_Ben_Efraim_3]
    public static let `drmProductionTcp`: Self = "_drm-production._tcp"
    /// Discovery and Retention Mgt Production [Micha_Ben_Efraim_3]
    public static let `drmProductionUdp`: Self = "_drm-production._udp"
    /// Port used for MetalBend programmable interface [Micha_Ben_Efraim_4]
    public static let `metalbendTcp`: Self = "_metalbend._tcp"
    /// zSecure Server [Hans_Schoone]
    public static let `zsecureTcp`: Self = "_zsecure._tcp"
    /// Clutild [Cheryl_Stoutenburg]
    public static let `clutildTcp`: Self = "_clutild._tcp"
    /// Clutild [Cheryl_Stoutenburg]
    public static let `clutildUdp`: Self = "_clutild._udp"
    /// Janus Guidewire Enterprise Discovery Service Bus [Guidewire_Software_Inc]
    public static let `janusDiscUdp`: Self = "_janus-disc._udp"
    /// FODMS FLIP [David_Anthony]
    public static let `fodmsTcp`: Self = "_fodms._tcp"
    /// FODMS FLIP [David_Anthony]
    public static let `fodmsUdp`: Self = "_fodms._udp"
    /// DLIP [Albert_Manfredi]
    public static let `dlipTcp`: Self = "_dlip._tcp"
    /// DLIP [Albert_Manfredi]
    public static let `dlipUdp`: Self = "_dlip._udp"
    /// Inter-Channel Termination Protocol (ICTP) for multi-wavelength PON     (Passive Optical Network) systems [Broadband_Forum]
    public static let `ponIctpTcp`: Self = "_pon-ictp._tcp"
    /// Communication ports for PaperStream Server services [PFU_Systems_Inc.]
    public static let `PSServerTcp`: Self = "_PS-Server._tcp"
    /// PaperStream Capture Professional [PFU_Systems_Inc.]
    public static let `PSCaptureProTcp`: Self = "_PS-Capture-Pro._tcp"
    /// Registry A & M Protocol [John_Havard]
    public static let `rampTcp`: Self = "_ramp._tcp"
    /// Registry A & M Protocol [John_Havard]
    public static let `rampUdp`: Self = "_ramp._udp"
    /// Citrix Universal Printing Port [Gary_Barton]
    public static let `citrixuppTcp`: Self = "_citrixupp._tcp"
    /// Citrix UPP Gateway [Gary_Barton]
    public static let `citrixuppgTcp`: Self = "_citrixuppg._tcp"
    /// Traffic forwarding for Okta cloud infra [Okta_Inc_2]
    public static let `asaGatewaysTcp`: Self = "_asa-gateways._tcp"
    /// ASP Coordination Protocol [Wi-Fi_Alliance_2]
    public static let `aspcoordinationUdp`: Self = "_aspcoordination._udp"
    /// Wi-Fi Alliance Wi-Fi Display Protocol [Wi-Fi_Alliance]
    public static let `displayTcp`: Self = "_display._tcp"
    /// PADS (Public Area Display System) Server [Willie_Jan_Bons]
    public static let `padsTcp`: Self = "_pads._tcp"
    /// FrontRow Calypso Human Interface Control Protocol [Frontrow_Calypso_LLC]
    public static let `frcHicpTcp`: Self = "_frc-hicp._tcp"
    /// FrontRow Calypso Human Interface Control Protocol [Frontrow_Calypso_LLC]
    public static let `frcHicpDiscUdp`: Self = "_frc-hicp-disc._udp"
    /// Calypso Network Access Protocol [Frontrow_Calypso_LLC]
    public static let `cnapTcp`: Self = "_cnap._tcp"
    /// Calypso Network Access Protocol [Frontrow_Calypso_LLC]
    public static let `cnapUdp`: Self = "_cnap._udp"
    /// WatchMe Monitoring 7272 [Oliver_Heinz]
    public static let `watchme7272Tcp`: Self = "_watchme-7272._tcp"
    /// WatchMe Monitoring 7272 [Oliver_Heinz]
    public static let `watchme7272Udp`: Self = "_watchme-7272._udp"
    /// OMA Roaming Location [Larry_A_Young]
    public static let `omaRlpTcp`: Self = "_oma-rlp._tcp"
    /// OMA Roaming Location [Larry_A_Young]
    public static let `omaRlpUdp`: Self = "_oma-rlp._udp"
    /// OMA Roaming Location SEC [Larry_A_Young]
    public static let `omaRlpSTcp`: Self = "_oma-rlp-s._tcp"
    /// OMA Roaming Location SEC [Larry_A_Young]
    public static let `omaRlpSUdp`: Self = "_oma-rlp-s._udp"
    /// OMA UserPlane Location [Larry_A_Young_2]
    public static let `omaUlpTcp`: Self = "_oma-ulp._tcp"
    /// OMA UserPlane Location [Larry_A_Young_2]
    public static let `omaUlpUdp`: Self = "_oma-ulp._udp"
    /// OMA Internal Location Protocol [Khiem_Tran]
    public static let `omaIlpTcp`: Self = "_oma-ilp._tcp"
    /// OMA Internal Location Protocol [Khiem_Tran]
    public static let `omaIlpUdp`: Self = "_oma-ilp._udp"
    /// OMA Internal Location Secure Protocol [Khiem_Tran]
    public static let `omaIlpSTcp`: Self = "_oma-ilp-s._tcp"
    /// OMA Internal Location Secure Protocol [Khiem_Tran]
    public static let `omaIlpSUdp`: Self = "_oma-ilp-s._udp"
    /// OMA Dynamic Content Delivery over CBS [Avi_Primo]
    public static let `omaDcdocbsTcp`: Self = "_oma-dcdocbs._tcp"
    /// OMA Dynamic Content Delivery over CBS [Avi_Primo]
    public static let `omaDcdocbsUdp`: Self = "_oma-dcdocbs._udp"
    /// Citrix Licensing [Marc_Binstock]
    public static let `ctxlicTcp`: Self = "_ctxlic._tcp"
    /// Citrix Licensing [Marc_Binstock]
    public static let `ctxlicUdp`: Self = "_ctxlic._udp"
    /// ITACTIONSERVER 1 [Brian_Taylor]
    public static let `itactionserver1Tcp`: Self = "_itactionserver1._tcp"
    /// ITACTIONSERVER 1 [Brian_Taylor]
    public static let `itactionserver1Udp`: Self = "_itactionserver1._udp"
    /// ITACTIONSERVER 2 [Brian_Taylor]
    public static let `itactionserver2Tcp`: Self = "_itactionserver2._tcp"
    /// ITACTIONSERVER 2 [Brian_Taylor]
    public static let `itactionserver2Udp`: Self = "_itactionserver2._udp"
    /// eventACTION/ussACTION (MZCA) server [Gord_Tomlin]
    public static let `mzcaActionTcp`: Self = "_mzca-action._tcp"
    /// eventACTION/ussACTION (MZCA) alert [Gord_Tomlin]
    public static let `mzcaAlertUdp`: Self = "_mzca-alert._udp"
    /// General Statistics Rendezvous Protocol [VSN_International_Ltd]
    public static let `genstatTcp`: Self = "_genstat._tcp"
    /// LifeKeeper Communications [James_Bottomley]
    public static let `lcmServerTcp`: Self = "_lcm-server._tcp"
    /// LifeKeeper Communications [James_Bottomley]
    public static let `lcmServerUdp`: Self = "_lcm-server._udp"
    /// mind-file system server [Dave_Porter]
    public static let `mindfilesysTcp`: Self = "_mindfilesys._tcp"
    /// mind-file system server [Dave_Porter]
    public static let `mindfilesysUdp`: Self = "_mindfilesys._udp"
    /// mrss-rendezvous server [Dave_Porter]
    public static let `mrssrendezvousTcp`: Self = "_mrssrendezvous._tcp"
    /// mrss-rendezvous server [Dave_Porter]
    public static let `mrssrendezvousUdp`: Self = "_mrssrendezvous._udp"
    /// nFoldMan Remote Publish [Richard_McDonald]
    public static let `nfoldmanTcp`: Self = "_nfoldman._tcp"
    /// nFoldMan Remote Publish [Richard_McDonald]
    public static let `nfoldmanUdp`: Self = "_nfoldman._udp"
    /// File system export of backup images [Weibao_Wu]
    public static let `fseTcp`: Self = "_fse._tcp"
    /// File system export of backup images [Weibao_Wu]
    public static let `fseUdp`: Self = "_fse._udp"
    /// winqedit [David_Greer]
    public static let `winqeditTcp`: Self = "_winqedit._tcp"
    /// winqedit [David_Greer]
    public static let `winqeditUdp`: Self = "_winqedit._udp"
    /// Hexarc Command Language [George_Moromisato]
    public static let `hexarcTcp`: Self = "_hexarc._tcp"
    /// Hexarc Command Language [George_Moromisato]
    public static let `hexarcUdp`: Self = "_hexarc._udp"
    /// RTPS Discovery [Gerardo_Pardo_Castel]
    public static let `rtpsDiscoveryTcp`: Self = "_rtps-discovery._tcp"
    /// RTPS Discovery [Gerardo_Pardo_Castel]
    public static let `rtpsDiscoveryUdp`: Self = "_rtps-discovery._udp"
    /// RTPS Data-Distribution User-Traffic [Gerardo_Pardo_Castel]
    public static let `rtpsDdUtTcp`: Self = "_rtps-dd-ut._tcp"
    /// RTPS Data-Distribution User-Traffic [Gerardo_Pardo_Castel]
    public static let `rtpsDdUtUdp`: Self = "_rtps-dd-ut._udp"
    /// RTPS Data-Distribution Meta-Traffic [Gerardo_Pardo_Castel]
    public static let `rtpsDdMtTcp`: Self = "_rtps-dd-mt._tcp"
    /// RTPS Data-Distribution Meta-Traffic [Gerardo_Pardo_Castel]
    public static let `rtpsDdMtUdp`: Self = "_rtps-dd-mt._udp"
    /// Ionix Network Monitor [Maxime_Renaud]
    public static let `ionixnetmonTcp`: Self = "_ionixnetmon._tcp"
    /// Ionix Network Monitor [Maxime_Renaud]
    public static let `ionixnetmonUdp`: Self = "_ionixnetmon._udp"
    /// Streaming of measurement data [Hottinger_Baldwin_Messtechnik_GmbH]
    public static let `daqstreamTcp`: Self = "_daqstream._tcp"
    /// Streaming of measurement data [Hottinger_Baldwin_Messtechnik_GmbH]
    public static let `daqstreamUdp`: Self = "_daqstream._udp"
    /// Multichannel real-time lighting control [Tristan_Seifert_3]
    public static let `ipluminaryUdp`: Self = "_ipluminary._udp"
    /// Matisse Port Monitor [Didier_Cabannes]
    public static let `mtportmonTcp`: Self = "_mtportmon._tcp"
    /// Matisse Port Monitor [Didier_Cabannes]
    public static let `mtportmonUdp`: Self = "_mtportmon._udp"
    /// OpenView DM Postmaster Manager [Dave_Lamb]
    public static let `pmdmgrTcp`: Self = "_pmdmgr._tcp"
    /// OpenView DM Postmaster Manager [Dave_Lamb]
    public static let `pmdmgrUdp`: Self = "_pmdmgr._udp"
    /// OpenView DM Event Agent Manager [Dave_Lamb]
    public static let `oveadmgrTcp`: Self = "_oveadmgr._tcp"
    /// OpenView DM Event Agent Manager [Dave_Lamb]
    public static let `oveadmgrUdp`: Self = "_oveadmgr._udp"
    /// OpenView DM Log Agent Manager [Dave_Lamb]
    public static let `ovladmgrTcp`: Self = "_ovladmgr._tcp"
    /// OpenView DM Log Agent Manager [Dave_Lamb]
    public static let `ovladmgrUdp`: Self = "_ovladmgr._udp"
    /// OpenView DM rqt communication [Dave_Lamb]
    public static let `opiSockTcp`: Self = "_opi-sock._tcp"
    /// OpenView DM rqt communication [Dave_Lamb]
    public static let `opiSockUdp`: Self = "_opi-sock._udp"
    /// OpenView DM xmpv7 api pipe [Dave_Lamb]
    public static let `xmpv7Tcp`: Self = "_xmpv7._tcp"
    /// OpenView DM xmpv7 api pipe [Dave_Lamb]
    public static let `xmpv7Udp`: Self = "_xmpv7._udp"
    /// OpenView DM ovc/xmpv3 api pipe [Dave_Lamb]
    public static let `pmdTcp`: Self = "_pmd._tcp"
    /// OpenView DM ovc/xmpv3 api pipe [Dave_Lamb]
    public static let `pmdUdp`: Self = "_pmd._udp"
    /// Faximum [George_Pajari]
    public static let `faximumTcp`: Self = "_faximum._tcp"
    /// Faximum [George_Pajari]
    public static let `faximumUdp`: Self = "_faximum._udp"
    /// Oracle Application Server HTTPS [David_McMarlin]
    public static let `oracleasHttpsTcp`: Self = "_oracleas-https._tcp"
    /// Oracle Application Server HTTPS [David_McMarlin]
    public static let `oracleasHttpsUdp`: Self = "_oracleas-https._udp"
    /// Stateless Transport Tunneling Protocol [Bruce_Davie_3]
    public static let `sttunnelTcp`: Self = "_sttunnel._tcp"
    /// Rise: The Vieneo Province [Jason_Reskin]
    public static let `riseTcp`: Self = "_rise._tcp"
    /// Rise: The Vieneo Province [Jason_Reskin]
    public static let `riseUdp`: Self = "_rise._udp"
    /// Neo4j Graph Database [Neo_Technology_Inc]
    public static let `neo4jTcp`: Self = "_neo4j._tcp"
    /// IT Asset Management [OpeniT_Inc]
    public static let `openitTcp`: Self = "_openit._tcp"
    /// telops-lmd [David_Spencer]
    public static let `telopsLmdTcp`: Self = "_telops-lmd._tcp"
    /// telops-lmd [David_Spencer]
    public static let `telopsLmdUdp`: Self = "_telops-lmd._udp"
    /// Silhouette User [Anthony_Payne]
    public static let `silhouetteTcp`: Self = "_silhouette._tcp"
    /// Silhouette User [Anthony_Payne]
    public static let `silhouetteUdp`: Self = "_silhouette._udp"
    /// HP OpenView Bus Daemon [David_M_Rhodes]
    public static let `ovbusTcp`: Self = "_ovbus._tcp"
    /// HP OpenView Bus Daemon [David_M_Rhodes]
    public static let `ovbusUdp`: Self = "_ovbus._udp"
    /// Automation Device Configuration Protocol [Festo_AG]
    public static let `adcpTcp`: Self = "_adcp._tcp"
    /// ACPLT - process automation service [Chair_for_Process_Control_Engineering]
    public static let `acpltTcp`: Self = "_acplt._tcp"
    /// HP OpenView Application Server [Jeff_Conrad]
    public static let `ovhpasTcp`: Self = "_ovhpas._tcp"
    /// HP OpenView Application Server [Jeff_Conrad]
    public static let `ovhpasUdp`: Self = "_ovhpas._udp"
    /// pafec-lm [Billy_Dhillon]
    public static let `pafecLmTcp`: Self = "_pafec-lm._tcp"
    /// pafec-lm [Billy_Dhillon]
    public static let `pafecLmUdp`: Self = "_pafec-lm._udp"
    /// Saratoga Transfer Protocol [Lloyd_Wood]
    public static let `saratogaTcp`: Self = "_saratoga._tcp"
    /// Saratoga Transfer Protocol [Lloyd_Wood]
    public static let `saratogaUdp`: Self = "_saratoga._udp"
    /// atul server [Mark_Stapp]
    public static let `atulTcp`: Self = "_atul._tcp"
    /// atul server [Mark_Stapp]
    public static let `atulUdp`: Self = "_atul._udp"
    /// FlowAnalyzer DisplayServer [Fred_Messinger]
    public static let `ntaDsTcp`: Self = "_nta-ds._tcp"
    /// FlowAnalyzer DisplayServer [Fred_Messinger]
    public static let `ntaDsUdp`: Self = "_nta-ds._udp"
    /// FlowAnalyzer UtilityServer [Fred_Messinger]
    public static let `ntaUsTcp`: Self = "_nta-us._tcp"
    /// FlowAnalyzer UtilityServer [Fred_Messinger]
    public static let `ntaUsUdp`: Self = "_nta-us._udp"
    /// Cisco Fabric service [Rituparna_Agrawal]
    public static let `cfsTcp`: Self = "_cfs._tcp"
    /// Cisco Fabric service [Rituparna_Agrawal]
    public static let `cfsUdp`: Self = "_cfs._udp"
    /// Broadband Forum CWMP [Broadband_Forum]
    public static let `cwmpTcp`: Self = "_cwmp._tcp"
    /// Broadband Forum CWMP [Broadband_Forum]
    public static let `cwmpUdp`: Self = "_cwmp._udp"
    /// Threat Information Distribution Protocol [Chui_Tin_Yen]
    public static let `tidpTcp`: Self = "_tidp._tcp"
    /// Threat Information Distribution Protocol [Chui_Tin_Yen]
    public static let `tidpUdp`: Self = "_tidp._udp"
    /// Network Layer Signaling Transport Layer [Melinda_Shore]
    public static let `nlsTlTcp`: Self = "_nls-tl._tcp"
    /// Network Layer Signaling Transport Layer [Melinda_Shore]
    public static let `nlsTlUdp`: Self = "_nls-tl._udp"
    /// Cloud Signaling Service [Scott_Dawson]
    public static let `cloudsignalingUdp`: Self = "_cloudsignaling._udp"
    /// ControlONE Console signaling [BYNE]
    public static let `controloneConTcp`: Self = "_controlone-con._tcp"
    /// Sniffer Command Protocol [Dominick_Cafarelli]
    public static let `sncpTcp`: Self = "_sncp._tcp"
    /// Sniffer Command Protocol [Dominick_Cafarelli]
    public static let `sncpUdp`: Self = "_sncp._udp"
    /// Control Framework 
    public static let `cfwTcp`: Self = "_cfw._tcp"
    /// VSI Omega [Curtis_Smith]
    public static let `vsiOmegaTcp`: Self = "_vsi-omega._tcp"
    /// VSI Omega [Curtis_Smith]
    public static let `vsiOmegaUdp`: Self = "_vsi-omega._udp"
    /// Dell EqualLogic Host Group Management [James_E_King_III]
    public static let `dellEqlAsmTcp`: Self = "_dell-eql-asm._tcp"
    /// Aries Kfinder [James_King_III]
    public static let `ariesKfinderTcp`: Self = "_aries-kfinder._tcp"
    /// Aries Kfinder [James_King_III]
    public static let `ariesKfinderUdp`: Self = "_aries-kfinder._udp"
    /// Oracle Coherence Cluster Service [Oracle_5]
    public static let `coherenceTcp`: Self = "_coherence._tcp"
    /// Oracle Coherence Cluster discovery service [Oracle_5]
    public static let `coherenceDiscUdp`: Self = "_coherence-disc._udp"
    /// Sun License Manager [Sophie_Deng]
    public static let `sunLmTcp`: Self = "_sun-lm._tcp"
    /// Sun License Manager [Sophie_Deng]
    public static let `sunLmUdp`: Self = "_sun-lm._udp"
    /// MIPI Alliance Debug [MIPI_Alliance]
    public static let `mipiDebugTcp`: Self = "_mipi-debug._tcp"
    /// MIPI Alliance Debug [MIPI_Alliance]
    public static let `mipiDebugUdp`: Self = "_mipi-debug._udp"
    /// Instrument Neutral Distributed Interface [Elwood_Downey]
    public static let `indiTcp`: Self = "_indi._tcp"
    /// Instrument Neutral Distributed Interface [Elwood_Downey]
    public static let `indiUdp`: Self = "_indi._udp"
    /// SImple Middlebox COnfiguration (SIMCO) Server 
    public static let `simcoTcp`: Self = "_simco._tcp"
    /// SImple Middlebox COnfiguration (SIMCO) [Sebastian_Kiesel]
    public static let `simcoSctp`: Self = "_simco._sctp"
    /// SOAP Service Port [Donald_Dylla]
    public static let `soapHttpTcp`: Self = "_soap-http._tcp"
    /// SOAP Service Port [Donald_Dylla]
    public static let `soapHttpUdp`: Self = "_soap-http._udp"
    /// Primary Agent Work Notification [Ty_Ellis]
    public static let `zenPawnTcp`: Self = "_zen-pawn._tcp"
    /// Primary Agent Work Notification [Ty_Ellis]
    public static let `zenPawnUdp`: Self = "_zen-pawn._udp"
    /// OpenXDAS Wire Protocol [John_Calcote_2]
    public static let `xdasTcp`: Self = "_xdas._tcp"
    /// OpenXDAS Wire Protocol [John_Calcote_2]
    public static let `xdasUdp`: Self = "_xdas._udp"
    /// HA Web Konsole [Tim_Serong]
    public static let `hawkTcp`: Self = "_hawk._tcp"
    /// TESLA System Messaging [Andy_Perreault]
    public static let `teslaSysMsgTcp`: Self = "_tesla-sys-msg._tcp"
    /// PMDF Management [Hunter_Goatley]
    public static let `pmdfmgtTcp`: Self = "_pmdfmgt._tcp"
    /// PMDF Management [Hunter_Goatley]
    public static let `pmdfmgtUdp`: Self = "_pmdfmgt._udp"
    /// bonjour-cuseeme [Marc_Manthey]
    public static let `cuseemeTcp`: Self = "_cuseeme._tcp"
    /// bonjour-cuseeme [Marc_Manthey]
    public static let `cuseemeUdp`: Self = "_cuseeme._udp"
    /// Proprietary immutable distributed data storage [TFOR]
    public static let `romeTcp`: Self = "_rome._tcp"
    /// Proprietary immutable distributed data storage [TFOR]
    public static let `romeUdp`: Self = "_rome._udp"
    /// iMQ STOMP Server [Amy_Kang]
    public static let `imqstompTcp`: Self = "_imqstomp._tcp"
    /// iMQ STOMP Server over SSL [Amy_Kang]
    public static let `imqstompsTcp`: Self = "_imqstomps._tcp"
    /// iMQ SSL tunnel [Shailesh_S_Bavadeka]
    public static let `imqtunnelsTcp`: Self = "_imqtunnels._tcp"
    /// iMQ SSL tunnel [Shailesh_S_Bavadeka]
    public static let `imqtunnelsUdp`: Self = "_imqtunnels._udp"
    /// iMQ Tunnel [Shailesh_S_Bavadeka]
    public static let `imqtunnelTcp`: Self = "_imqtunnel._tcp"
    /// iMQ Tunnel [Shailesh_S_Bavadeka]
    public static let `imqtunnelUdp`: Self = "_imqtunnel._udp"
    /// iMQ Broker Rendezvous [Joseph_Di_Pol]
    public static let `imqbrokerdTcp`: Self = "_imqbrokerd._tcp"
    /// iMQ Broker Rendezvous [Joseph_Di_Pol]
    public static let `imqbrokerdUdp`: Self = "_imqbrokerd._udp"
    /// Sun App Server - HTTPS [Abhijit_Kumar]
    public static let `sunUserHttpsTcp`: Self = "_sun-user-https._tcp"
    /// Sun App Server - HTTPS [Abhijit_Kumar]
    public static let `sunUserHttpsUdp`: Self = "_sun-user-https._udp"
    /// Microsoft Delivery Optimization Peer-to-Peer [Microsoft_Corporation_6]
    public static let `msDoTcp`: Self = "_ms-do._tcp"
    /// Microsoft Delivery Optimization Peer-to-Peer [Microsoft_Corporation_6]
    public static let `msDoUdp`: Self = "_ms-do._udp"
    /// Cleondris DMT [Cleondris_GmbH]
    public static let `dmtTcp`: Self = "_dmt._tcp"
    /// Bolt database connection [Neo_Technology_Inc]
    public static let `boltTcp`: Self = "_bolt._tcp"
    /// Collaber Network Service [Rajesh_Akkineni]
    public static let `collaberTcp`: Self = "_collaber._tcp"
    /// Collaber Network Service [Rajesh_Akkineni]
    public static let `collaberUdp`: Self = "_collaber._udp"
    /// Service-Oriented Vehicle Diagnostics [ASAM_e_V]
    public static let `sovdTcp`: Self = "_sovd._tcp"
    /// KLIO communications [Helmut_Giritzer_2]
    public static let `klioTcp`: Self = "_klio._tcp"
    /// KLIO communications [Helmut_Giritzer_2]
    public static let `klioUdp`: Self = "_klio._udp"
    /// EM7 Secure Communications [Christopher_Cordray]
    public static let `em7SecomTcp`: Self = "_em7-secom._tcp"
    /// SCF nFAPI defining MAC/PHY split [Small_Cell_Forum]
    public static let `nfapiSctp`: Self = "_nfapi._sctp"
    /// EM7 Dynamic Updates [Christopher_Cordray]
    public static let `syncEm7Tcp`: Self = "_sync-em7._tcp"
    /// EM7 Dynamic Updates [Christopher_Cordray]
    public static let `syncEm7Udp`: Self = "_sync-em7._udp"
    /// scientia.net [Christoph_Anton_Mitt]
    public static let `scinetTcp`: Self = "_scinet._tcp"
    /// scientia.net [Christoph_Anton_Mitt]
    public static let `scinetUdp`: Self = "_scinet._udp"
    /// MedImage Portal [Robert_Helton]
    public static let `medimageportalTcp`: Self = "_medimageportal._tcp"
    /// MedImage Portal [Robert_Helton]
    public static let `medimageportalUdp`: Self = "_medimageportal._udp"
    /// Novell Snap-in Deep Freeze Control [David_Crowe]
    public static let `nsdeepfreezectlTcp`: Self = "_nsdeepfreezectl._tcp"
    /// Novell Snap-in Deep Freeze Control [David_Crowe]
    public static let `nsdeepfreezectlUdp`: Self = "_nsdeepfreezectl._udp"
    /// Nitrogen Service [Randy_Lomnes]
    public static let `nitrogenTcp`: Self = "_nitrogen._tcp"
    /// Nitrogen Service [Randy_Lomnes]
    public static let `nitrogenUdp`: Self = "_nitrogen._udp"
    /// FreezeX Console Service [David_Crowe]
    public static let `freezexserviceTcp`: Self = "_freezexservice._tcp"
    /// FreezeX Console Service [David_Crowe]
    public static let `freezexserviceUdp`: Self = "_freezexservice._udp"
    /// Trident Systems Data [Jeremy_McClintock]
    public static let `tridentDataTcp`: Self = "_trident-data._tcp"
    /// Trident Systems Data [Jeremy_McClintock]
    public static let `tridentDataUdp`: Self = "_trident-data._udp"
    /// Open-Source Virtual Reality [Open_Source_Virtual_Reality_OSVR.com]
    public static let `osvrTcp`: Self = "_osvr._tcp"
    /// Open-Source Virtual Reality [Open_Source_Virtual_Reality_OSVR.com]
    public static let `osvrUdp`: Self = "_osvr._udp"
    /// Open-Source Virtual Reality [Open_Source_Virtual_Reality_OSVR.com]
    public static let `osvrSctp`: Self = "_osvr._sctp"
    /// Smith Protocol over IP [Jim_Pettinato]
    public static let `smipTcp`: Self = "_smip._tcp"
    /// Smith Protocol over IP [Jim_Pettinato]
    public static let `smipUdp`: Self = "_smip._udp"
    /// HP Enterprise Discovery Agent [Matthew_Darwin]
    public static let `aiagentTcp`: Self = "_aiagent._tcp"
    /// HP Enterprise Discovery Agent [Matthew_Darwin]
    public static let `aiagentUdp`: Self = "_aiagent._udp"
    /// ScriptView Network [Reinhard_Wolf]
    public static let `scriptviewTcp`: Self = "_scriptview._tcp"
    /// ScriptView Network [Reinhard_Wolf]
    public static let `scriptviewUdp`: Self = "_scriptview._udp"
    /// Mugginsoft Script Server Service [Jonathan_Mitchell]
    public static let `msssTcp`: Self = "_msss._tcp"
    /// Sakura Script Transfer Protocol [Kouichi_Takeda]
    public static let `sstp1Tcp`: Self = "_sstp-1._tcp"
    /// Sakura Script Transfer Protocol [Kouichi_Takeda]
    public static let `sstp1Udp`: Self = "_sstp-1._udp"
    /// RAQMON PDU 
    public static let `raqmonPduTcp`: Self = "_raqmon-pdu._tcp"
    /// RAQMON PDU 
    public static let `raqmonPduUdp`: Self = "_raqmon-pdu._udp"
    /// Put/Run/Get Protocol [Jayasooriah]
    public static let `prgpTcp`: Self = "_prgp._tcp"
    /// Put/Run/Get Protocol [Jayasooriah]
    public static let `prgpUdp`: Self = "_prgp._udp"
    /// A File System using TLS over a wide area network [Roger_Allan]
    public static let `inetfsTcp`: Self = "_inetfs._tcp"
    /// cbt [Tony_Ballardie]
    public static let `cbtTcp`: Self = "_cbt._tcp"
    /// cbt [Tony_Ballardie]
    public static let `cbtUdp`: Self = "_cbt._udp"
    /// Interwise [Joseph_Gray]
    public static let `interwiseTcp`: Self = "_interwise._tcp"
    /// Interwise [Joseph_Gray]
    public static let `interwiseUdp`: Self = "_interwise._udp"
    /// VSTAT [Vinh_Nguyn]
    public static let `vstatTcp`: Self = "_vstat._tcp"
    /// VSTAT [Vinh_Nguyn]
    public static let `vstatUdp`: Self = "_vstat._udp"
    /// accu-lmgr [Moises_E_Hernandez]
    public static let `accuLmgrTcp`: Self = "_accu-lmgr._tcp"
    /// accu-lmgr [Moises_E_Hernandez]
    public static let `accuLmgrUdp`: Self = "_accu-lmgr._udp"
    /// Seamless Bidirectional Forwarding Detection (S-BFD) [IESG]
    public static let `sBfdUdp`: Self = "_s-bfd._udp"
    /// MINIVEND [Mike_Heins]
    public static let `minivendTcp`: Self = "_minivend._tcp"
    /// MINIVEND [Mike_Heins]
    public static let `minivendUdp`: Self = "_minivend._udp"
    /// Popup Reminders Receive [Robert_Harvey]
    public static let `popupRemindersTcp`: Self = "_popup-reminders._tcp"
    /// Popup Reminders Receive [Robert_Harvey]
    public static let `popupRemindersUdp`: Self = "_popup-reminders._udp"
    /// Office Tools Pro Receive [Robert_Harvey]
    public static let `officeToolsTcp`: Self = "_office-tools._tcp"
    /// Office Tools Pro Receive [Robert_Harvey]
    public static let `officeToolsUdp`: Self = "_office-tools._udp"
    /// Q3ADE Cluster Service [Uffe_Harksen]
    public static let `q3adeTcp`: Self = "_q3ade._tcp"
    /// Q3ADE Cluster Service [Uffe_Harksen]
    public static let `q3adeUdp`: Self = "_q3ade._udp"
    /// Propel Connector port 
    public static let `pnetConnTcp`: Self = "_pnet-conn._tcp"
    /// Propel Connector port 
    public static let `pnetConnUdp`: Self = "_pnet-conn._udp"
    /// Propel Encoder port [Leif_Hedstrom]
    public static let `pnetEncTcp`: Self = "_pnet-enc._tcp"
    /// Propel Encoder port [Leif_Hedstrom]
    public static let `pnetEncUdp`: Self = "_pnet-enc._udp"
    /// Alternate BSDP Service [Dieter_Siegmund]
    public static let `altbsdpTcp`: Self = "_altbsdp._tcp"
    /// Alternate BSDP Service [Dieter_Siegmund]
    public static let `altbsdpUdp`: Self = "_altbsdp._udp"
    /// Apple Software Restore [Jim_Kateley][Shantonu_Sen]
    public static let `asrTcp`: Self = "_asr._tcp"
    /// Apple Software Restore [Jim_Kateley][Shantonu_Sen]
    public static let `asrUdp`: Self = "_asr._udp"
    /// Secure Server Protocol - client [Rick_Macchio]
    public static let `sspClientTcp`: Self = "_ssp-client._tcp"
    /// Secure Server Protocol - client [Rick_Macchio]
    public static let `sspClientUdp`: Self = "_ssp-client._udp"
    /// Virtualized Network Services Tunnel Protocol [Juniper_Networks]
    public static let `vnsTpUdp`: Self = "_vns-tp._udp"
    /// Riverbed WAN Optimization Protocol [Vladimir_Legalov_2]
    public static let `rbtWanoptTcp`: Self = "_rbt-wanopt._tcp"
    /// Riverbed WAN Optimization Protocol [Vladimir_Legalov_2]
    public static let `rbtWanoptUdp`: Self = "_rbt-wanopt._udp"
    /// APC 7845 [American_Power_Conve]
    public static let `apc7845Tcp`: Self = "_apc-7845._tcp"
    /// APC 7845 [American_Power_Conve]
    public static let `apc7845Udp`: Self = "_apc-7845._udp"
    /// APC 7846 [American_Power_Conve]
    public static let `apc7846Tcp`: Self = "_apc-7846._tcp"
    /// APC 7846 [American_Power_Conve]
    public static let `apc7846Udp`: Self = "_apc-7846._udp"
    /// A product key authentication protocol made by CSO [Jeff_Wamsley]
    public static let `csoauthTcp`: Self = "_csoauth._tcp"
    /// MobileAnalyzer& MobileMonitor [Jonas_Gyllensvaan]
    public static let `mobileanalyzerTcp`: Self = "_mobileanalyzer._tcp"
    /// Riverbed Steelhead Mobile Service [Gabriel_Levy]
    public static let `rbtSmcTcp`: Self = "_rbt-smc._tcp"
    /// Mobile Device Management [Dan_Harkins]
    public static let `mdmTcp`: Self = "_mdm._tcp"
    /// TLS-based Mobile IPv6 Security [IESG]
    public static let `mipv6tlsUdp`: Self = "_mipv6tls._udp"
    /// Opswise Message Service [Stonebranch_Inc]
    public static let `owmsTcp`: Self = "_owms._tcp"
    /// Pearson [Pearson]
    public static let `pssTcp`: Self = "_pss._tcp"
    /// Pearson [Pearson]
    public static let `pssUdp`: Self = "_pss._udp"
    /// Universal Broker [Nathan_Hammond]
    public static let `ubrokerTcp`: Self = "_ubroker._tcp"
    /// Universal Broker [Nathan_Hammond]
    public static let `ubrokerUdp`: Self = "_ubroker._udp"
    /// Multicast Event [YoonSoo_Kim]
    public static let `meventTcp`: Self = "_mevent._tcp"
    /// Multicast Event [YoonSoo_Kim]
    public static let `meventUdp`: Self = "_mevent._udp"
    /// TNOS Service Protocol [Rene_Kurt]
    public static let `tnosSpTcp`: Self = "_tnos-sp._tcp"
    /// TNOS Service Protocol [Rene_Kurt]
    public static let `tnosSpUdp`: Self = "_tnos-sp._udp"
    /// TNOS shell Protocol [Rene_Kurt]
    public static let `tnosDpTcp`: Self = "_tnos-dp._tcp"
    /// TNOS shell Protocol [Rene_Kurt]
    public static let `tnosDpUdp`: Self = "_tnos-dp._udp"
    /// TNOS Secure DiaguardProtocol [Rene_Kurt]
    public static let `tnosDpsTcp`: Self = "_tnos-dps._tcp"
    /// TNOS Secure DiaguardProtocol [Rene_Kurt]
    public static let `tnosDpsUdp`: Self = "_tnos-dps._udp"
    /// QuickObjects secure port [Jonas_Bovin]
    public static let `qoSecureTcp`: Self = "_qo-secure._tcp"
    /// QuickObjects secure port [Jonas_Bovin]
    public static let `qoSecureUdp`: Self = "_qo-secure._udp"
    /// Tier 2 Data Resource Manager [Peter_Carlson]
    public static let `t2DrmTcp`: Self = "_t2-drm._tcp"
    /// Tier 2 Data Resource Manager [Peter_Carlson]
    public static let `t2DrmUdp`: Self = "_t2-drm._udp"
    /// Tier 2 Business Rules Manager [Peter_Carlson]
    public static let `t2BrmTcp`: Self = "_t2-brm._tcp"
    /// Tier 2 Business Rules Manager [Peter_Carlson]
    public static let `t2BrmUdp`: Self = "_t2-brm._udp"
    /// Encrypted, extendable, general-purpose synchronization protocol [Dirk_Steinmetz]
    public static let `generalsyncTcp`: Self = "_generalsync._tcp"
    /// Encrypted, extendable, general-purpose synchronization protocol [Dirk_Steinmetz]
    public static let `generalsyncUdp`: Self = "_generalsync._udp"
    /// Supercell [Kevin_Nakagawa]
    public static let `supercellTcp`: Self = "_supercell._tcp"
    /// Supercell [Kevin_Nakagawa]
    public static let `supercellUdp`: Self = "_supercell._udp"
    /// Micromuse-ncps [Hing_Wing_To]
    public static let `micromuseNcpsTcp`: Self = "_micromuse-ncps._tcp"
    /// Micromuse-ncps [Hing_Wing_To]
    public static let `micromuseNcpsUdp`: Self = "_micromuse-ncps._udp"
    /// Quest Vista [Preston_Bannister]
    public static let `questVistaTcp`: Self = "_quest-vista._tcp"
    /// Quest Vista [Preston_Bannister]
    public static let `questVistaUdp`: Self = "_quest-vista._udp"
    /// Spotlight on SQL Server Desktop Collect [Rob_Griffin_2]
    public static let `sossdCollectTcp`: Self = "_sossd-collect._tcp"
    /// Spotlight on SQL Server Desktop Agent [Rob_Griffin_2]
    public static let `sossdAgentTcp`: Self = "_sossd-agent._tcp"
    /// Spotlight on SQL Server Desktop Agent Discovery [Rob_Griffin_2]
    public static let `sossdDiscUdp`: Self = "_sossd-disc._udp"
    /// PUSH Notification Service [Tristan_Seifert]
    public static let `pushnsTcp`: Self = "_pushns._tcp"
    /// USI Content Push Service [Prakash_Iyer]
    public static let `usicontentpushUdp`: Self = "_usicontentpush._udp"
    /// iRDMI2 
    public static let `irdmi2Tcp`: Self = "_irdmi2._tcp"
    /// iRDMI2 
    public static let `irdmi2Udp`: Self = "_irdmi2._udp"
    /// iRDMI [Gil_Shafriri]
    public static let `irdmiTcp`: Self = "_irdmi._tcp"
    /// iRDMI [Gil_Shafriri]
    public static let `irdmiUdp`: Self = "_irdmi._udp"
    /// VCOM Tunnel [Mark_Lewandowski]
    public static let `vcomTunnelTcp`: Self = "_vcom-tunnel._tcp"
    /// VCOM Tunnel [Mark_Lewandowski]
    public static let `vcomTunnelUdp`: Self = "_vcom-tunnel._udp"
    /// Teradata ORDBMS [Curt_Ellmann]
    public static let `teradataordbmsTcp`: Self = "_teradataordbms._tcp"
    /// Teradata ORDBMS [Curt_Ellmann]
    public static let `teradataordbmsUdp`: Self = "_teradataordbms._udp"
    /// Mulberry Connect Reporting Service [Dave_Stoneham]
    public static let `mcreportTcp`: Self = "_mcreport._tcp"
    /// Mulberry Connect Reporting Service [Dave_Stoneham]
    public static let `mcreportUdp`: Self = "_mcreport._udp"
    /// Opensource Evolv Enterprise Platform P2P Network Node Connection Protocol [Tris_Puki]
    public static let `p2pevolvenetTcp`: Self = "_p2pevolvenet._tcp"
    /// MXI Generation II for z/OS [Rob_Scott]
    public static let `mxiTcp`: Self = "_mxi._tcp"
    /// MXI Generation II for z/OS [Rob_Scott]
    public static let `mxiUdp`: Self = "_mxi._udp"
    /// World Programming analytics [World_Programming_Limited]
    public static let `wplAnalyticsTcp`: Self = "_wpl-analytics._tcp"
    /// World Programming analytics discovery [World_Programming_Limited]
    public static let `wplDiscUdp`: Self = "_wpl-disc._udp"
    /// I/O oriented cluster computing software [MirrorWeb_LTD]
    public static let `warppipeTcp`: Self = "_warppipe._tcp"
    /// I/O oriented cluster computing software [MirrorWeb_LTD]
    public static let `warppipeUdp`: Self = "_warppipe._udp"
    /// NVMe over Fabrics Discovery Service [NVM_Express_Inc]
    public static let `nvmeDiscTcp`: Self = "_nvme-disc._tcp"
    /// Configuration Cloud Service [admin_at_cfg_cloud]
    public static let `cfgCloudTcp`: Self = "_cfg-cloud._tcp"
    /// Beckhoff Automation Device Specification [Beckhoff_Automation_GmbH_Co_KG]
    public static let `adsSTcp`: Self = "_ads-s._tcp"
    /// Cisco Cloudsec Dataplane Port Number [Cisco_Systems_Inc]
    public static let `ciscoCloudsecUdp`: Self = "_cisco-cloudsec._udp"
    /// QB DB Dynamic Port [Sridhar_Krishnamurth]
    public static let `qbdbTcp`: Self = "_qbdb._tcp"
    /// QB DB Dynamic Port [Sridhar_Krishnamurth]
    public static let `qbdbUdp`: Self = "_qbdb._udp"
    /// Intuit Entitlement Service and Discovery [Daniel_C_McGloin]
    public static let `intuEcSvcdiscTcp`: Self = "_intu-ec-svcdisc._tcp"
    /// Intuit Entitlement Service and Discovery [Daniel_C_McGloin]
    public static let `intuEcSvcdiscUdp`: Self = "_intu-ec-svcdisc._udp"
    /// Intuit Entitlement Client [Daniel_C_McGloin]
    public static let `intuEcClientTcp`: Self = "_intu-ec-client._tcp"
    /// Intuit Entitlement Client [Daniel_C_McGloin]
    public static let `intuEcClientUdp`: Self = "_intu-ec-client._udp"
    /// oa-system [Marie_France_Dubreui]
    public static let `oaSystemTcp`: Self = "_oa-system._tcp"
    /// oa-system [Marie_France_Dubreui]
    public static let `oaSystemUdp`: Self = "_oa-system._udp"
    /// ARCATrust vault API [ARCATrust_SA]
    public static let `arcaApiTcp`: Self = "_arca-api._tcp"
    /// ARCATrust vault API [ARCATrust_SA]
    public static let `arcaApiUdp`: Self = "_arca-api._udp"
    /// CA Audit Distribution Agent [Henning_Smith]
    public static let `caAuditDaTcp`: Self = "_ca-audit-da._tcp"
    /// CA Audit Distribution Agent [Henning_Smith]
    public static let `caAuditDaUdp`: Self = "_ca-audit-da._udp"
    /// CA Audit Distribution Server [Henning_Smith]
    public static let `caAuditDsTcp`: Self = "_ca-audit-ds._tcp"
    /// CA Audit Distribution Server [Henning_Smith]
    public static let `caAuditDsUdp`: Self = "_ca-audit-ds._udp"
    /// peer tracker and data relay service [Pavel_Csefalvay]
    public static let `papachiP2pSrvTcp`: Self = "_papachi-p2p-srv._tcp"
    /// peer tracker and data relay service [Pavel_Csefalvay]
    public static let `papachiP2pSrvUdp`: Self = "_papachi-p2p-srv._udp"
    /// ProEd 
    public static let `proEdTcp`: Self = "_pro-ed._tcp"
    /// ProEd 
    public static let `proEdUdp`: Self = "_pro-ed._udp"
    /// MindPrint [Larry_Tusoni]
    public static let `mindprintTcp`: Self = "_mindprint._tcp"
    /// MindPrint [Larry_Tusoni]
    public static let `mindprintUdp`: Self = "_mindprint._udp"
    /// .vantronix Management [Reyk_Floeter]
    public static let `vantronixMgmtTcp`: Self = "_vantronix-mgmt._tcp"
    /// .vantronix Management [Reyk_Floeter]
    public static let `vantronixMgmtUdp`: Self = "_vantronix-mgmt._udp"
    /// Ampify Messaging Protocol [Tav_Espian]
    public static let `ampifyTcp`: Self = "_ampify._tcp"
    /// Ampify Messaging Protocol [Tav_Espian]
    public static let `ampifyUdp`: Self = "_ampify._udp"
    /// Xcorpeon ASIC Carrier Ethernet Transport [Enguity_Technology_Corp]
    public static let `enguityXccetpTcp`: Self = "_enguity-xccetp._tcp"
    /// Xcorpeon ASIC Carrier Ethernet Transport [Enguity_Technology_Corp]
    public static let `enguityXccetpUdp`: Self = "_enguity-xccetp._udp"
    /// FireScope Agent [Matt_Rogers]
    public static let `fsAgentTcp`: Self = "_fs-agent._tcp"
    /// FireScope Server [Matt_Rogers]
    public static let `fsServerTcp`: Self = "_fs-server._tcp"
    /// FireScope Management Interface [Matt_Rogers]
    public static let `fsMgmtTcp`: Self = "_fs-mgmt._tcp"
    /// Rocrail Client Service [Rob_Versluis]
    public static let `rocrailTcp`: Self = "_rocrail._tcp"
    /// Senomix Timesheets Server [Charles_O_Dale]
    public static let `senomix01Tcp`: Self = "_senomix01._tcp"
    /// Senomix Timesheets Server [Charles_O_Dale]
    public static let `senomix01Udp`: Self = "_senomix01._udp"
    /// Senomix Timesheets Client [1 year assignment] [Charles_O_Dale]
    public static let `senomix02Tcp`: Self = "_senomix02._tcp"
    /// Senomix Timesheets Client [1 year assignment] [Charles_O_Dale]
    public static let `senomix02Udp`: Self = "_senomix02._udp"
    /// Senomix Timesheets Server [1 year assignment] [Charles_O_Dale]
    public static let `senomix03Tcp`: Self = "_senomix03._tcp"
    /// Senomix Timesheets Server [1 year assignment] [Charles_O_Dale]
    public static let `senomix03Udp`: Self = "_senomix03._udp"
    /// Senomix Timesheets Server [1 year assignment] [Charles_O_Dale]
    public static let `senomix04Tcp`: Self = "_senomix04._tcp"
    /// Senomix Timesheets Server [1 year assignment] [Charles_O_Dale]
    public static let `senomix04Udp`: Self = "_senomix04._udp"
    /// Senomix Timesheets Server [1 year assignment] [Charles_O_Dale]
    public static let `senomix05Tcp`: Self = "_senomix05._tcp"
    /// Senomix Timesheets Server [1 year assignment] [Charles_O_Dale]
    public static let `senomix05Udp`: Self = "_senomix05._udp"
    /// Senomix Timesheets Client [1 year assignment] [Charles_O_Dale]
    public static let `senomix06Tcp`: Self = "_senomix06._tcp"
    /// Senomix Timesheets Client [1 year assignment] [Charles_O_Dale]
    public static let `senomix06Udp`: Self = "_senomix06._udp"
    /// Senomix Timesheets Client [1 year assignment] [Charles_O_Dale]
    public static let `senomix07Tcp`: Self = "_senomix07._tcp"
    /// Senomix Timesheets Client [1 year assignment] [Charles_O_Dale]
    public static let `senomix07Udp`: Self = "_senomix07._udp"
    /// Senomix Timesheets Client [1 year assignment] [Charles_O_Dale]
    public static let `senomix08Tcp`: Self = "_senomix08._tcp"
    /// Senomix Timesheets Client [1 year assignment] [Charles_O_Dale]
    public static let `senomix08Udp`: Self = "_senomix08._udp"
    /// Asymmetric Extended Route Optimization (AERO) [IESG]
    public static let `aeroUdp`: Self = "_aero._udp"
    /// Toad BI Application Server [Quest_Software_2]
    public static let `toadBiAppsrvrTcp`: Self = "_toad-bi-appsrvr._tcp"
    /// Infinidat async replication [INFINIDAT]
    public static let `infiAsyncTcp`: Self = "_infi-async._tcp"
    /// Oracle Unified Communication Suite's Indexed Search Converter [Oracle_Corp]
    public static let `ucsIscTcp`: Self = "_ucs-isc._tcp"
    /// Gadu-Gadu [Marcin_Gozdalik]
    public static let `gadugaduTcp`: Self = "_gadugadu._tcp"
    /// Gadu-Gadu [Marcin_Gozdalik]
    public static let `gadugaduUdp`: Self = "_gadugadu._udp"
    /// Mles is a client-server data distribution protocol targeted to serve as a lightweight and reliable distributed publish/subscribe database service. [Juhamatti_Kuusisaari]
    public static let `mlesTcp`: Self = "_mles._tcp"
    /// Sun Proxy Admin Service [Arvind_Srinivasan]
    public static let `sunproxyadminTcp`: Self = "_sunproxyadmin._tcp"
    /// Sun Proxy Admin Service [Arvind_Srinivasan]
    public static let `sunproxyadminUdp`: Self = "_sunproxyadmin._udp"
    /// Utilistor (Client) [Andy_Brewerton]
    public static let `usCliTcp`: Self = "_us-cli._tcp"
    /// Utilistor (Client) [Andy_Brewerton]
    public static let `usCliUdp`: Self = "_us-cli._udp"
    /// Utilistor (Server) [Andy_Brewerton]
    public static let `usSrvTcp`: Self = "_us-srv._tcp"
    /// Utilistor (Server) [Andy_Brewerton]
    public static let `usSrvUdp`: Self = "_us-srv._udp"
    /// Snarl Network Protocol over HTTP [full_phat_products]
    public static let `websnpTcp`: Self = "_websnp._tcp"
    /// Distributed SCADA Networking Rendezvous Port [Gary_Hampton]
    public static let `dSNTcp`: Self = "_d-s-n._tcp"
    /// Distributed SCADA Networking Rendezvous Port [Gary_Hampton]
    public static let `dSNUdp`: Self = "_d-s-n._udp"
    /// Simplify Media SPP Protocol [Emmanuel_Saint_Loube]
    public static let `simplifymediaTcp`: Self = "_simplifymedia._tcp"
    /// Simplify Media SPP Protocol [Emmanuel_Saint_Loube]
    public static let `simplifymediaUdp`: Self = "_simplifymedia._udp"
    /// Radan HTTP [Steve_Hay]
    public static let `radanHttpTcp`: Self = "_radan-http._tcp"
    /// Radan HTTP [Steve_Hay]
    public static let `radanHttpUdp`: Self = "_radan-http._udp"
    /// Vehicle to station messaging [LAN-ACES_Inc]
    public static let `opsmessagingTcp`: Self = "_opsmessaging._tcp"
    /// Jam Link Framework [Evgeniy_Filatov]
    public static let `jamlinkTcp`: Self = "_jamlink._tcp"
    /// SAC Port Id [Girish_Bhat]
    public static let `sacTcp`: Self = "_sac._tcp"
    /// SAC Port Id [Girish_Bhat]
    public static let `sacUdp`: Self = "_sac._udp"
    /// Xprint Server [John_McKernan]
    public static let `xprintServerTcp`: Self = "_xprint-server._tcp"
    /// Xprint Server [John_McKernan]
    public static let `xprintServerUdp`: Self = "_xprint-server._udp"
    /// Logical Domains Migration [Liam_Merwick]
    public static let `ldomsMigrTcp`: Self = "_ldoms-migr._tcp"
    /// Oracle Kernel zones migration server [Oracle_4]
    public static let `kzMigrTcp`: Self = "_kz-migr._tcp"
    /// Skynetflow network services [skynetflow.com]
    public static let `skynetflowUdp`: Self = "_skynetflow._udp"
    /// MTL8000 Matrix [David_Pinch]
    public static let `mtl8000MatrixTcp`: Self = "_mtl8000-matrix._tcp"
    /// MTL8000 Matrix [David_Pinch]
    public static let `mtl8000MatrixUdp`: Self = "_mtl8000-matrix._udp"
    /// Check Point Clustering [Roni_Moshitzky]
    public static let `cpClusterTcp`: Self = "_cp-cluster._tcp"
    /// Check Point Clustering [Roni_Moshitzky]
    public static let `cpClusterUdp`: Self = "_cp-cluster._udp"
    /// Purity replication clustering and remote management [Pure_Storage]
    public static let `purityrpcTcp`: Self = "_purityrpc._tcp"
    /// Privoxy HTTP proxy [Andreas_Oesterhelt]
    public static let `privoxyTcp`: Self = "_privoxy._tcp"
    /// Privoxy HTTP proxy [Andreas_Oesterhelt]
    public static let `privoxyUdp`: Self = "_privoxy._udp"
    /// Apollo Data Port [Anthony_Carrabino]
    public static let `apolloDataTcp`: Self = "_apollo-data._tcp"
    /// Apollo Data Port [Anthony_Carrabino]
    public static let `apolloDataUdp`: Self = "_apollo-data._udp"
    /// Apollo Admin Port [Anthony_Carrabino]
    public static let `apolloAdminTcp`: Self = "_apollo-admin._tcp"
    /// Apollo Admin Port [Anthony_Carrabino]
    public static let `apolloAdminUdp`: Self = "_apollo-admin._udp"
    /// PayCash Online Protocol [MegaZone]
    public static let `paycashOnlineTcp`: Self = "_paycash-online._tcp"
    /// PayCash Online Protocol [MegaZone]
    public static let `paycashOnlineUdp`: Self = "_paycash-online._udp"
    /// PayCash Wallet-Browser [MegaZone]
    public static let `paycashWbpTcp`: Self = "_paycash-wbp._tcp"
    /// PayCash Wallet-Browser [MegaZone]
    public static let `paycashWbpUdp`: Self = "_paycash-wbp._udp"
    /// INDIGO-VRMI [Colin_Caughie]
    public static let `indigoVrmiTcp`: Self = "_indigo-vrmi._tcp"
    /// INDIGO-VRMI [Colin_Caughie]
    public static let `indigoVrmiUdp`: Self = "_indigo-vrmi._udp"
    /// INDIGO-VBCP [Colin_Caughie]
    public static let `indigoVbcpTcp`: Self = "_indigo-vbcp._tcp"
    /// INDIGO-VBCP [Colin_Caughie]
    public static let `indigoVbcpUdp`: Self = "_indigo-vbcp._udp"
    /// dbabble [Chris_Pugmire]
    public static let `dbabbleTcp`: Self = "_dbabble._tcp"
    /// dbabble [Chris_Pugmire]
    public static let `dbabbleUdp`: Self = "_dbabble._udp"
    /// The Puppet master service [Puppet]
    public static let `puppetTcp`: Self = "_puppet._tcp"
    /// i-SDD file transfer [Frank_Waarsenburg]
    public static let `isddTcp`: Self = "_isdd._tcp"
    /// i-SDD file transfer [Frank_Waarsenburg]
    public static let `isddUdp`: Self = "_isdd._udp"
    /// Edge of Reality game data [Sky_Schulz]
    public static let `eorGameUdp`: Self = "_eor-game._udp"
    /// QuantaStor Management Interface [OS_NEXUS]
    public static let `quantastorTcp`: Self = "_quantastor._tcp"
    /// Patrol [Portnoy_Boxman]
    public static let `patrolTcp`: Self = "_patrol._tcp"
    /// Patrol [Portnoy_Boxman]
    public static let `patrolUdp`: Self = "_patrol._udp"
    /// Patrol SNMP [Portnoy_Boxman]
    public static let `patrolSnmpTcp`: Self = "_patrol-snmp._tcp"
    /// Patrol SNMP [Portnoy_Boxman]
    public static let `patrolSnmpUdp`: Self = "_patrol-snmp._udp"
    /// LPAR2RRD client server communication [LPAR2RRD_project]
    public static let `lpar2rrdTcp`: Self = "_lpar2rrd._tcp"
    /// Intermapper network management system [William_Fisher]
    public static let `intermapperTcp`: Self = "_intermapper._tcp"
    /// VMware Fault Domain Manager [Ron_Passerini]
    public static let `vmwareFdmTcp`: Self = "_vmware-fdm._tcp"
    /// VMware Fault Domain Manager [Ron_Passerini]
    public static let `vmwareFdmUdp`: Self = "_vmware-fdm._udp"
    /// ProRemote [Alex_Lelievre]
    public static let `proremoteTcp`: Self = "_proremote._tcp"
    /// Remote iTach Connection [Barend_Jacobus_van_d]
    public static let `itachTcp`: Self = "_itach._tcp"
    /// Remote iTach Connection [Barend_Jacobus_van_d]
    public static let `itachUdp`: Self = "_itach._udp"
    /// Generic control plane for RPHY [CableLabs]
    public static let `gcpRphyTcp`: Self = "_gcp-rphy._tcp"
    /// Limner Pressure [Aaron_Kleinsteiber]
    public static let `limnerpressureTcp`: Self = "_limnerpressure._tcp"
    /// SpyTech Phone Service [Bill_Kay]
    public static let `spytechphoneTcp`: Self = "_spytechphone._tcp"
    /// SpyTech Phone Service [Bill_Kay]
    public static let `spytechphoneUdp`: Self = "_spytechphone._udp"
    /// Bloomberg data API [Albert_Hou]
    public static let `blp1Tcp`: Self = "_blp1._tcp"
    /// Bloomberg data API [Albert_Hou]
    public static let `blp1Udp`: Self = "_blp1._udp"
    /// Bloomberg feed [Albert_Hou]
    public static let `blp2Tcp`: Self = "_blp2._tcp"
    /// Bloomberg feed [Albert_Hou]
    public static let `blp2Udp`: Self = "_blp2._udp"
    /// VVR DATA [Ming_Xu]
    public static let `vvrDataTcp`: Self = "_vvr-data._tcp"
    /// VVR DATA [Ming_Xu]
    public static let `vvrDataUdp`: Self = "_vvr-data._udp"
    /// TRIVNET [Saar_Wilf]
    public static let `trivnet1Tcp`: Self = "_trivnet1._tcp"
    /// TRIVNET [Saar_Wilf]
    public static let `trivnet1Udp`: Self = "_trivnet1._udp"
    /// TRIVNET [Saar_Wilf]
    public static let `trivnet2Tcp`: Self = "_trivnet2._tcp"
    /// TRIVNET [Saar_Wilf]
    public static let `trivnet2Udp`: Self = "_trivnet2._udp"
    /// Audio+Ethernet Standard Open Protocol [POWERSOFT_SRL]
    public static let `aesopUdp`: Self = "_aesop._udp"
    /// LM Perfworks [Chris_Flynn]
    public static let `lmPerfworksTcp`: Self = "_lm-perfworks._tcp"
    /// LM Perfworks [Chris_Flynn]
    public static let `lmPerfworksUdp`: Self = "_lm-perfworks._udp"
    /// LM Instmgr [Chris_Flynn]
    public static let `lmInstmgrTcp`: Self = "_lm-instmgr._tcp"
    /// LM Instmgr [Chris_Flynn]
    public static let `lmInstmgrUdp`: Self = "_lm-instmgr._udp"
    /// LM Dta [Chris_Flynn]
    public static let `lmDtaTcp`: Self = "_lm-dta._tcp"
    /// LM Dta [Chris_Flynn]
    public static let `lmDtaUdp`: Self = "_lm-dta._udp"
    /// LM SServer [Chris_Flynn]
    public static let `lmSserverTcp`: Self = "_lm-sserver._tcp"
    /// LM SServer [Chris_Flynn]
    public static let `lmSserverUdp`: Self = "_lm-sserver._udp"
    /// LM Webwatcher [Chris_Flynn]
    public static let `lmWebwatcherTcp`: Self = "_lm-webwatcher._tcp"
    /// LM Webwatcher [Chris_Flynn]
    public static let `lmWebwatcherUdp`: Self = "_lm-webwatcher._udp"
    /// Aruba Networks AP management [Aruba_Networks]
    public static let `arubaPapiUdp`: Self = "_aruba-papi._udp"
    /// RexecJ Server [Curtiss_Howard]
    public static let `rexecjTcp`: Self = "_rexecj._tcp"
    /// RexecJ Server [Curtiss_Howard]
    public static let `rexecjUdp`: Self = "_rexecj._udp"
    /// HNCP [IESG]
    public static let `hncpUdpPortUdp`: Self = "_hncp-udp-port._udp"
    /// HNCP over DTLS [IESG]
    public static let `hncpDtlsPortUdp`: Self = "_hncp-dtls-port._udp"
    /// Synapse Non Blocking HTTPS [Ruwan_Linton]
    public static let `synapseNhttpsTcp`: Self = "_synapse-nhttps._tcp"
    /// Synapse Non Blocking HTTPS [Ruwan_Linton]
    public static let `synapseNhttpsUdp`: Self = "_synapse-nhttps._udp"
    /// ESPeasy peer-2-peer communication [ESPeasy]
    public static let `espeasyP2pUdp`: Self = "_espeasy-p2p._udp"
    /// Robot Framework Remote Library Interface [Robot_Framework_Foundation]
    public static let `robotRemoteTcp`: Self = "_robot-remote._tcp"
    /// Microsoft Connected Cache [Microsoft_Corporation_6]
    public static let `msMccTcp`: Self = "_ms-mcc._tcp"
    /// Microsoft Connected Cache [Microsoft_Corporation_6]
    public static let `msMccUdp`: Self = "_ms-mcc._udp"
    /// Synapse Non Blocking HTTP [Ruwan_Linton]
    public static let `synapseNhttpTcp`: Self = "_synapse-nhttp._tcp"
    /// Synapse Non Blocking HTTP [Ruwan_Linton]
    public static let `synapseNhttpUdp`: Self = "_synapse-nhttp._udp"
    /// Libelle EnterpriseBus [Libelle_AG]
    public static let `libelleTcp`: Self = "_libelle._tcp"
    /// Libelle EnterpriseBus discovery [Libelle_AG]
    public static let `libelleDiscUdp`: Self = "_libelle-disc._udp"
    /// Bloomberg professional [Albert_Hou]
    public static let `blp3Tcp`: Self = "_blp3._tcp"
    /// Bloomberg professional [Albert_Hou]
    public static let `blp3Udp`: Self = "_blp3._udp"
    /// Hiperscan Identification Service [Thomas_Klose]
    public static let `hiperscanIdTcp`: Self = "_hiperscan-id._tcp"
    /// Bloomberg intelligent client [Albert_Hou]
    public static let `blp4Tcp`: Self = "_blp4._tcp"
    /// Bloomberg intelligent client [Albert_Hou]
    public static let `blp4Udp`: Self = "_blp4._udp"
    /// Transport Management Interface [Steve_Kneizys]
    public static let `tmiTcp`: Self = "_tmi._tcp"
    /// Transport Management Interface [Steve_Kneizys]
    public static let `tmiUdp`: Self = "_tmi._udp"
    /// Amberon PPC/PPS [Ronald_Snyder]
    public static let `amberonTcp`: Self = "_amberon._tcp"
    /// Amberon PPC/PPS [Ronald_Snyder]
    public static let `amberonUdp`: Self = "_amberon._udp"
    /// Hub Open Network [Grexie]
    public static let `hubOpenNetTcp`: Self = "_hub-open-net._tcp"
    /// Thin(ium) Network Protocol [Aly_Orady]
    public static let `tnpDiscoverTcp`: Self = "_tnp-discover._tcp"
    /// Thin(ium) Network Protocol [Aly_Orady]
    public static let `tnpDiscoverUdp`: Self = "_tnp-discover._udp"
    /// Thin(ium) Network Protocol [Aly_Orady]
    public static let `tnpTcp`: Self = "_tnp._tcp"
    /// Thin(ium) Network Protocol [Aly_Orady]
    public static let `tnpUdp`: Self = "_tnp._udp"
    /// Garmin Marine [Garmin_International_Inc]
    public static let `garminMarineTcp`: Self = "_garmin-marine._tcp"
    /// Garmin Marine [Garmin_International_Inc]
    public static let `garminMarineUdp`: Self = "_garmin-marine._udp"
    /// Server Find [Chris_Brown]
    public static let `serverFindTcp`: Self = "_server-find._tcp"
    /// Server Find [Chris_Brown]
    public static let `serverFindUdp`: Self = "_server-find._udp"
    /// Cruise ENUM [Steve_Husak]
    public static let `cruiseEnumTcp`: Self = "_cruise-enum._tcp"
    /// Cruise ENUM [Steve_Husak]
    public static let `cruiseEnumUdp`: Self = "_cruise-enum._udp"
    /// Cruise SWROUTE [Steve_Husak]
    public static let `cruiseSwrouteTcp`: Self = "_cruise-swroute._tcp"
    /// Cruise SWROUTE [Steve_Husak]
    public static let `cruiseSwrouteUdp`: Self = "_cruise-swroute._udp"
    /// Cruise CONFIG [Steve_Husak]
    public static let `cruiseConfigTcp`: Self = "_cruise-config._tcp"
    /// Cruise CONFIG [Steve_Husak]
    public static let `cruiseConfigUdp`: Self = "_cruise-config._udp"
    /// Cruise DIAGS [Steve_Husak]
    public static let `cruiseDiagsTcp`: Self = "_cruise-diags._tcp"
    /// Cruise DIAGS [Steve_Husak]
    public static let `cruiseDiagsUdp`: Self = "_cruise-diags._udp"
    /// Cruise UPDATE [Steve_Husak]
    public static let `cruiseUpdateTcp`: Self = "_cruise-update._tcp"
    /// Cruise UPDATE [Steve_Husak]
    public static let `cruiseUpdateUdp`: Self = "_cruise-update._udp"
    /// M2m Services [Carlos_Arteaga_2]
    public static let `m2mservicesTcp`: Self = "_m2mservices._tcp"
    /// M2m Services [Carlos_Arteaga_2]
    public static let `m2mservicesUdp`: Self = "_m2mservices._udp"
    /// Marathon Transport Protocol [Inertia_Systemes]
    public static let `marathontpUdp`: Self = "_marathontp._udp"
    /// cvd [Aaron_Bilbrey]
    public static let `cvdTcp`: Self = "_cvd._tcp"
    /// cvd [Aaron_Bilbrey]
    public static let `cvdUdp`: Self = "_cvd._udp"
    /// sabarsd [Aaron_Bilbrey]
    public static let `sabarsdTcp`: Self = "_sabarsd._tcp"
    /// sabarsd [Aaron_Bilbrey]
    public static let `sabarsdUdp`: Self = "_sabarsd._udp"
    /// abarsd [Aaron_Bilbrey]
    public static let `abarsdTcp`: Self = "_abarsd._tcp"
    /// abarsd [Aaron_Bilbrey]
    public static let `abarsdUdp`: Self = "_abarsd._udp"
    /// SuperVault Cloud [Nine_Technology_LLC]
    public static let `svcloudTcp`: Self = "_svcloud._tcp"
    /// SuperVault Backup [Nine_Technology_LLC]
    public static let `svbackupTcp`: Self = "_svbackup._tcp"
    /// Delphix Session Protocol [Delphix_Corp]
    public static let `dlpxSpTcp`: Self = "_dlpx-sp._tcp"
    /// eSpeech Session Protocol [Scott_Tarone]
    public static let `espeechTcp`: Self = "_espeech._tcp"
    /// eSpeech Session Protocol [Scott_Tarone]
    public static let `espeechUdp`: Self = "_espeech._udp"
    /// eSpeech RTP Protocol [Scott_Tarone]
    public static let `espeechRtpTcp`: Self = "_espeech-rtp._tcp"
    /// eSpeech RTP Protocol [Scott_Tarone]
    public static let `espeechRtpUdp`: Self = "_espeech-rtp._udp"
    /// Aristech text-to-speech server [Aristech_GmbH]
    public static let `arittsTcp`: Self = "_aritts._tcp"
    /// PostgreSQL Backup [David_Steele]
    public static let `pgbackrestTcp`: Self = "_pgbackrest._tcp"
    /// Non Persistent Desktop and Application Streaming [Amazon.com_Services_LLC]
    public static let `awsAs2Udp`: Self = "_aws-as2._udp"
    /// CyBro A-bus Protocol [Damir_Skrjanec]
    public static let `cybroABusTcp`: Self = "_cybro-a-bus._tcp"
    /// CyBro A-bus Protocol [Damir_Skrjanec]
    public static let `cybroABusUdp`: Self = "_cybro-a-bus._udp"
    /// PCsync HTTPS 
    public static let `pcsyncHttpsTcp`: Self = "_pcsync-https._tcp"
    /// PCsync HTTPS 
    public static let `pcsyncHttpsUdp`: Self = "_pcsync-https._udp"
    /// PCsync HTTP [Katy_Lynn_McCullough]
    public static let `pcsyncHttpTcp`: Self = "_pcsync-http._tcp"
    /// PCsync HTTP [Katy_Lynn_McCullough]
    public static let `pcsyncHttpUdp`: Self = "_pcsync-http._udp"
    /// Port for copy peer sync feature [Copy]
    public static let `copyTcp`: Self = "_copy._tcp"
    /// Port for copy discovery [Copy]
    public static let `copyDiscUdp`: Self = "_copy-disc._udp"
    /// Matrix Federation Protocol [The_Matrix.org_Foundation_C.I.C.]
    public static let `matrixFedTcp`: Self = "_matrix-fed._tcp"
    /// npmp [Ian_Chard]
    public static let `npmpTcp`: Self = "_npmp._tcp"
    /// npmp [Ian_Chard]
    public static let `npmpUdp`: Self = "_npmp._udp"
    /// Nexenta Management GUI [Nexenta]
    public static let `nexentamvTcp`: Self = "_nexentamv._tcp"
    /// Cisco Address Validation Protocol [Cullen_Jennings]
    public static let `ciscoAvpTcp`: Self = "_cisco-avp._tcp"
    /// PIM over Reliable Transport [IESG]
    public static let `pimPortTcp`: Self = "_pim-port._tcp"
    /// PIM over Reliable Transport [IESG]
    public static let `pimPortSctp`: Self = "_pim-port._sctp"
    /// Overlay Transport Virtualization (OTV) [Dino_Farinacci]
    public static let `otvTcp`: Self = "_otv._tcp"
    /// Overlay Transport Virtualization (OTV) [Dino_Farinacci]
    public static let `otvUdp`: Self = "_otv._udp"
    /// Virtual Point to Point [Jerome_Grimbert]
    public static let `vp2pTcp`: Self = "_vp2p._tcp"
    /// Virtual Point to Point [Jerome_Grimbert]
    public static let `vp2pUdp`: Self = "_vp2p._udp"
    /// AquaMinds NoteShare [Michael_McNabb]
    public static let `noteshareTcp`: Self = "_noteshare._tcp"
    /// AquaMinds NoteShare [Michael_McNabb]
    public static let `noteshareUdp`: Self = "_noteshare._udp"
    /// Flight Message Transfer Protocol [Eivan_Cerasi]
    public static let `fmtpTcp`: Self = "_fmtp._tcp"
    /// Flight Message Transfer Protocol [Eivan_Cerasi]
    public static let `fmtpUdp`: Self = "_fmtp._udp"
    /// CYTEL Message Transfer Management 
    public static let `cmtpMgtTcp`: Self = "_cmtp-mgt._tcp"
    /// CYTEL Message Transfer Audio and Video [Frank_Jakel]
    public static let `cmtpAvUdp`: Self = "_cmtp-av._udp"
    /// FTN Message Transfer Protocol [Yuri_Myakotin]
    public static let `ftnmtpTcp`: Self = "_ftnmtp._tcp"
    /// MPLS LSP Self-Ping [IESG]
    public static let `lspSelfPingUdp`: Self = "_lsp-self-ping._udp"
    /// RTSP Alternate (see port 554) [Stephen_Casner_2]
    public static let `rtspAltTcp`: Self = "_rtsp-alt._tcp"
    /// RTSP Alternate (see port 554) [Stephen_Casner_2]
    public static let `rtspAltUdp`: Self = "_rtsp-alt._udp"
    /// SYMAX D-FENCE [Thomas_Geisel]
    public static let `dFenceTcp`: Self = "_d-fence._tcp"
    /// SYMAX D-FENCE [Thomas_Geisel]
    public static let `dFenceUdp`: Self = "_d-fence._udp"
    /// DOF Tunneling Protocol [OpenDOF]
    public static let `dofTunnelTcp`: Self = "_dof-tunnel._tcp"
    /// DOF Tunneling Protocol [OpenDOF]
    public static let `dofTunnelUdp`: Self = "_dof-tunnel._udp"
    /// Surveillance Data [Eivan_Cerasi]
    public static let `asterixTcp`: Self = "_asterix._tcp"
    /// Surveillance Data [Eivan_Cerasi]
    public static let `asterixUdp`: Self = "_asterix._udp"
    /// Canon Compact Printer Protocol Discovery [Canon_Inc]
    public static let `canonCppDiscUdp`: Self = "_canon-cpp-disc._udp"
    /// Canon MFNP Service [Ritsuto_Sako]
    public static let `canonMfnpTcp`: Self = "_canon-mfnp._tcp"
    /// Canon MFNP Service [Ritsuto_Sako]
    public static let `canonMfnpUdp`: Self = "_canon-mfnp._udp"
    /// Canon BJNP Port 1 [Atsushi_Nakamura]
    public static let `canonBjnp1Tcp`: Self = "_canon-bjnp1._tcp"
    /// Canon BJNP Port 1 [Atsushi_Nakamura]
    public static let `canonBjnp1Udp`: Self = "_canon-bjnp1._udp"
    /// Canon BJNP Port 2 [Atsushi_Nakamura]
    public static let `canonBjnp2Tcp`: Self = "_canon-bjnp2._tcp"
    /// Canon BJNP Port 2 [Atsushi_Nakamura]
    public static let `canonBjnp2Udp`: Self = "_canon-bjnp2._udp"
    /// Canon BJNP Port 3 [Atsushi_Nakamura]
    public static let `canonBjnp3Tcp`: Self = "_canon-bjnp3._tcp"
    /// Canon BJNP Port 3 [Atsushi_Nakamura]
    public static let `canonBjnp3Udp`: Self = "_canon-bjnp3._udp"
    /// Canon BJNP Port 4 [Atsushi_Nakamura]
    public static let `canonBjnp4Tcp`: Self = "_canon-bjnp4._tcp"
    /// Canon BJNP Port 4 [Atsushi_Nakamura]
    public static let `canonBjnp4Udp`: Self = "_canon-bjnp4._udp"
    /// Imink Service Control [Canon_Inc]
    public static let `iminkTcp`: Self = "_imink._tcp"
    /// Monetra [Main_Street_Softworks]
    public static let `monetraTcp`: Self = "_monetra._tcp"
    /// Monetra Administrative Access [Main_Street_Softworks]
    public static let `monetraAdminTcp`: Self = "_monetra-admin._tcp"
    /// Motorola Solutions Customer Programming Software for Radio Management [Motorola_Solutions_Inc]
    public static let `msiCpsRmTcp`: Self = "_msi-cps-rm._tcp"
    /// Motorola Solutions Customer Programming Software for Radio Management Discovery [Motorola_Solutions_Inc]
    public static let `msiCpsRmDiscUdp`: Self = "_msi-cps-rm-disc._udp"
    /// Sun App Server - JMX/RMI [Abhijit_Kumar]
    public static let `sunAsJmxrmiTcp`: Self = "_sun-as-jmxrmi._tcp"
    /// Sun App Server - JMX/RMI [Abhijit_Kumar]
    public static let `sunAsJmxrmiUdp`: Self = "_sun-as-jmxrmi._udp"
    /// OpenRemote Controller HTTP/REST [OpenRemote_Inc]
    public static let `openremoteCtrlTcp`: Self = "_openremote-ctrl._tcp"
    /// VNYX Primary Port [Gregg_Green]
    public static let `vnyxTcp`: Self = "_vnyx._tcp"
    /// gRPC for SEMI Standards implementations [SEMI]
    public static let `semiGrpcTcp`: Self = "_semi-grpc._tcp"
    /// Nuance Voice Control [Nuance_Communications_Inc2]
    public static let `nvcTcp`: Self = "_nvc._tcp"
    /// DASGIP Net Services [Dr_Matthias_Arnold]
    public static let `dtpNetUdp`: Self = "_dtp-net._udp"
    /// iBus [Silvano_Maffeis]
    public static let `ibusTcp`: Self = "_ibus._tcp"
    /// iBus [Silvano_Maffeis]
    public static let `ibusUdp`: Self = "_ibus._udp"
    /// DEY Storage Key Negotiation [DEY_Storage_Systems_Inc]
    public static let `deyKeynegTcp`: Self = "_dey-keyneg._tcp"
    /// MC-APPSERVER [Romeo_Kasanwidjojo]
    public static let `mcAppserverTcp`: Self = "_mc-appserver._tcp"
    /// MC-APPSERVER [Romeo_Kasanwidjojo]
    public static let `mcAppserverUdp`: Self = "_mc-appserver._udp"
    /// OPENQUEUE [Matt_Jensen]
    public static let `openqueueTcp`: Self = "_openqueue._tcp"
    /// OPENQUEUE [Matt_Jensen]
    public static let `openqueueUdp`: Self = "_openqueue._udp"
    /// Ultraseek HTTP [Walter_Underwood]
    public static let `ultraseekHttpTcp`: Self = "_ultraseek-http._tcp"
    /// Ultraseek HTTP [Walter_Underwood]
    public static let `ultraseekHttpUdp`: Self = "_ultraseek-http._udp"
    /// Agilent Connectivity Service [Keysight_Technologies_Inc]
    public static let `amcsTcp`: Self = "_amcs._tcp"
    /// Agilent Connectivity Service [Keysight_Technologies_Inc]
    public static let `amcsUdp`: Self = "_amcs._udp"
    /// Online mobile multiplayer game [Alt_Solve_Sdn_Bhd]
    public static let `coreOfSourceTcp`: Self = "_core-of-source._tcp"
    /// Sandpolis Server [Tyler_Cook]
    public static let `sandpolisTcp`: Self = "_sandpolis._tcp"
    /// Okta MultiPlatform Access Mgmt for Cloud Svcs [Okta_Inc]
    public static let `oktaauthenticatTcp`: Self = "_oktaauthenticat._tcp"
    /// Digital Photo Access Protocol (iPhoto) [Amandeep_Jawa_2]
    public static let `dpapTcp`: Self = "_dpap._tcp"
    /// Digital Photo Access Protocol (iPhoto) [Amandeep_Jawa_2]
    public static let `dpapUdp`: Self = "_dpap._udp"
    /// Stonebranch Universal Enterprise Controller [Stonebranch_Inc]
    public static let `uecTcp`: Self = "_uec._tcp"
    /// Message Client [Michael_O_Brien]
    public static let `msgclntTcp`: Self = "_msgclnt._tcp"
    /// Message Client [Michael_O_Brien]
    public static let `msgclntUdp`: Self = "_msgclnt._udp"
    /// Message Server [Michael_O_Brien]
    public static let `msgsrvrTcp`: Self = "_msgsrvr._tcp"
    /// Message Server [Michael_O_Brien]
    public static let `msgsrvrUdp`: Self = "_msgsrvr._udp"
    /// Accedian Performance Measurement [Marco_Mascitto]
    public static let `acdPmTcp`: Self = "_acd-pm._tcp"
    /// Accedian Performance Measurement [Marco_Mascitto]
    public static let `acdPmUdp`: Self = "_acd-pm._udp"
    /// Sun Web Server Admin Service [Jyri_J_Virkki]
    public static let `sunwebadminTcp`: Self = "_sunwebadmin._tcp"
    /// Sun Web Server Admin Service [Jyri_J_Virkki]
    public static let `sunwebadminUdp`: Self = "_sunwebadmin._udp"
    /// truecm [Scott_Kramer]
    public static let `truecmTcp`: Self = "_truecm._tcp"
    /// truecm [Scott_Kramer]
    public static let `truecmUdp`: Self = "_truecm._udp"
    /// Destination Port number for PFCP [Kimmo_Kymalainen]
    public static let `pfcpUdp`: Self = "_pfcp._udp"
    /// HES-CLIP Interoperability protocol [Tim_Schoechle]
    public static let `hesClipUdp`: Self = "_hes-clip._udp"
    /// STATSports Broadcast Service [Statsports_International]
    public static let `ssportsBcastUdp`: Self = "_ssports-bcast._udp"
    /// dxspider linking protocol [Dirk_Koopman]
    public static let `dxspiderTcp`: Self = "_dxspider._tcp"
    /// dxspider linking protocol [Dirk_Koopman]
    public static let `dxspiderUdp`: Self = "_dxspider._udp"
    /// CDDBP [Steve_Scherf]
    public static let `cddbpAltTcp`: Self = "_cddbp-alt._tcp"
    /// CDDBP [Steve_Scherf]
    public static let `cddbpAltUdp`: Self = "_cddbp-alt._udp"
    /// Galaxy4D Online Game Engine [Galaxy4D]
    public static let `galaxy4dTcp`: Self = "_galaxy4d._tcp"
    /// Secure MQTT [OASIS]
    public static let `secureMqttTcp`: Self = "_secure-mqtt._tcp"
    /// Secure MQTT [OASIS]
    public static let `secureMqttUdp`: Self = "_secure-mqtt._udp"
    /// NewsEDGE server TCP (TCP 1) [Fred_Yao]
    public static let `ddiTcp1Tcp`: Self = "_ddi-tcp-1._tcp"
    /// NewsEDGE server UDP (UDP 1) [Fred_Yao]
    public static let `ddiUdp1Udp`: Self = "_ddi-udp-1._udp"
    /// Desktop Data TCP 1 [Fred_Yao]
    public static let `ddiTcp2Tcp`: Self = "_ddi-tcp-2._tcp"
    /// NewsEDGE server broadcast [Fred_Yao]
    public static let `ddiUdp2Udp`: Self = "_ddi-udp-2._udp"
    /// Desktop Data TCP 2 [Fred_Yao]
    public static let `ddiTcp3Tcp`: Self = "_ddi-tcp-3._tcp"
    /// NewsEDGE client broadcast [Fred_Yao]
    public static let `ddiUdp3Udp`: Self = "_ddi-udp-3._udp"
    /// Desktop Data TCP 3: NESS application [Fred_Yao]
    public static let `ddiTcp4Tcp`: Self = "_ddi-tcp-4._tcp"
    /// Desktop Data UDP 3: NESS application [Fred_Yao]
    public static let `ddiUdp4Udp`: Self = "_ddi-udp-4._udp"
    /// Desktop Data TCP 4: FARM product [Fred_Yao]
    public static let `ddiTcp5Tcp`: Self = "_ddi-tcp-5._tcp"
    /// Desktop Data UDP 4: FARM product [Fred_Yao]
    public static let `ddiUdp5Udp`: Self = "_ddi-udp-5._udp"
    /// Desktop Data TCP 5: NewsEDGE/Web application [Fred_Yao]
    public static let `ddiTcp6Tcp`: Self = "_ddi-tcp-6._tcp"
    /// Desktop Data UDP 5: NewsEDGE/Web application [Fred_Yao]
    public static let `ddiUdp6Udp`: Self = "_ddi-udp-6._udp"
    /// Desktop Data TCP 6: COAL application [Fred_Yao]
    public static let `ddiTcp7Tcp`: Self = "_ddi-tcp-7._tcp"
    /// Desktop Data UDP 6: COAL application [Fred_Yao]
    public static let `ddiUdp7Udp`: Self = "_ddi-udp-7._udp"
    /// ospf-lite [Matthew_Thomas]
    public static let `ospfLiteTcp`: Self = "_ospf-lite._tcp"
    /// ospf-lite [Matthew_Thomas]
    public static let `ospfLiteUdp`: Self = "_ospf-lite._udp"
    /// JMB-CDS 1 [Curtis_Bray]
    public static let `jmbCds1Tcp`: Self = "_jmb-cds1._tcp"
    /// JMB-CDS 1 [Curtis_Bray]
    public static let `jmbCds1Udp`: Self = "_jmb-cds1._udp"
    /// JMB-CDS 2 [Curtis_Bray]
    public static let `jmbCds2Tcp`: Self = "_jmb-cds2._tcp"
    /// JMB-CDS 2 [Curtis_Bray]
    public static let `jmbCds2Udp`: Self = "_jmb-cds2._udp"
    /// WFA Device Provisioning Protocol [Wi-Fi_Alliance_4]
    public static let `dppTcp`: Self = "_dpp._tcp"
    /// manyone-http [Matt_King]
    public static let `manyoneHttpTcp`: Self = "_manyone-http._tcp"
    /// manyone-http [Matt_King]
    public static let `manyoneHttpUdp`: Self = "_manyone-http._udp"
    /// manyone-xml [Matt_King]
    public static let `manyoneXmlTcp`: Self = "_manyone-xml._tcp"
    /// manyone-xml [Matt_King]
    public static let `manyoneXmlUdp`: Self = "_manyone-xml._udp"
    /// Windows Client Backup [Jim_Lyon]
    public static let `wcbackupTcp`: Self = "_wcbackup._tcp"
    /// Windows Client Backup [Jim_Lyon]
    public static let `wcbackupUdp`: Self = "_wcbackup._udp"
    /// Dragonfly System Service [Paul_Hodara]
    public static let `dragonflyTcp`: Self = "_dragonfly._tcp"
    /// Dragonfly System Service [Paul_Hodara]
    public static let `dragonflyUdp`: Self = "_dragonfly._udp"
    /// Transaction Warehouse Data Service [Lance_M_Steenson]
    public static let `twdsTcp`: Self = "_twds._tcp"
    /// unbound dns nameserver control [NLnet_Labs_Support]
    public static let `ubDnsControlTcp`: Self = "_ub-dns-control._tcp"
    /// Cumulus Admin Port [Thomas_Schleu]
    public static let `cumulusAdminTcp`: Self = "_cumulus-admin._tcp"
    /// Cumulus Admin Port [Thomas_Schleu]
    public static let `cumulusAdminUdp`: Self = "_cumulus-admin._udp"
    /// Network of Devices Provider [David_Muller]
    public static let `nodProviderTcp`: Self = "_nod-provider._tcp"
    /// Network of Devices Provider [David_Muller]
    public static let `nodProviderUdp`: Self = "_nod-provider._udp"
    /// Network of Devices Client [David_Muller]
    public static let `nodClientUdp`: Self = "_nod-client._udp"
    /// Sun Web Server SSL Admin Service [Jyri_J_Virkki]
    public static let `sunwebadminsTcp`: Self = "_sunwebadmins._tcp"
    /// Sun Web Server SSL Admin Service [Jyri_J_Virkki]
    public static let `sunwebadminsUdp`: Self = "_sunwebadmins._udp"
    /// webmail HTTP service [Chris_Newman]
    public static let `httpWmapTcp`: Self = "_http-wmap._tcp"
    /// webmail HTTP service [Chris_Newman]
    public static let `httpWmapUdp`: Self = "_http-wmap._udp"
    /// webmail HTTPS service [Chris_Newman]
    public static let `httpsWmapTcp`: Self = "_https-wmap._tcp"
    /// webmail HTTPS service [Chris_Newman]
    public static let `httpsWmapUdp`: Self = "_https-wmap._udp"
    /// Oracle Messaging Server Event Notification Service [Oracle_6]
    public static let `oracleMsEnsTcp`: Self = "_oracle-ms-ens._tcp"
    /// Canto RoboFlow Control [Canto]
    public static let `cantoRoboflowTcp`: Self = "_canto-roboflow._tcp"
    /// Brodos Crypto Trade Protocol [Alexander_Sahler]
    public static let `bctpTcp`: Self = "_bctp._tcp"
    /// Brodos Crypto Trade Protocol [Alexander_Sahler]
    public static let `bctpUdp`: Self = "_bctp._udp"
    /// CSlistener [David_Jones]
    public static let `cslistenerTcp`: Self = "_cslistener._tcp"
    /// CSlistener [David_Jones]
    public static let `cslistenerUdp`: Self = "_cslistener._udp"
    /// ETL Service Manager [Stephen_McCrea]
    public static let `etlservicemgrTcp`: Self = "_etlservicemgr._tcp"
    /// ETL Service Manager [Stephen_McCrea]
    public static let `etlservicemgrUdp`: Self = "_etlservicemgr._udp"
    /// DynamID authentication [Jerome_Dusautois]
    public static let `dynamidTcp`: Self = "_dynamid._tcp"
    /// DynamID authentication [Jerome_Dusautois]
    public static let `dynamidUdp`: Self = "_dynamid._udp"
    /// Golem Inter-System RPC [Jose_Luis_Tallon]
    public static let `golemTcp`: Self = "_golem._tcp"
    /// Open Grid Services Client [Gareth_Nelson_2]
    public static let `ogsClientUdp`: Self = "_ogs-client._udp"
    /// Open Grid Services Server [Gareth_Nelson_2]
    public static let `ogsServerTcp`: Self = "_ogs-server._tcp"
    /// Pichat Server [Mark_Seuffert]
    public static let `pichatTcp`: Self = "_pichat._tcp"
    /// Pichat Server [Mark_Seuffert]
    public static let `pichatUdp`: Self = "_pichat._udp"
    /// Secure Data Replicator Protocol [Sufyan_Almajali]
    public static let `sdrTcp`: Self = "_sdr._tcp"
    /// D-Star Routing digital voice+data for amateur radio [QuadNet2_USA_IRC_Network]
    public static let `dStarUdp`: Self = "_d-star._udp"
    /// TAMBORA [Jason_van_Zyl]
    public static let `tamboraTcp`: Self = "_tambora._tcp"
    /// TAMBORA [Jason_van_Zyl]
    public static let `tamboraUdp`: Self = "_tambora._udp"
    /// Pangolin Identification [William_Benner_2]
    public static let `panagolinIdentTcp`: Self = "_panagolin-ident._tcp"
    /// Pangolin Identification [William_Benner_2]
    public static let `panagolinIdentUdp`: Self = "_panagolin-ident._udp"
    /// PrivateArk Remote Agent [Gal_Cucuy]
    public static let `paragentTcp`: Self = "_paragent._tcp"
    /// PrivateArk Remote Agent [Gal_Cucuy]
    public static let `paragentUdp`: Self = "_paragent._udp"
    /// Secure Web Access - 1 [Tim_McGranaghan]
    public static let `swa1Tcp`: Self = "_swa-1._tcp"
    /// Secure Web Access - 1 [Tim_McGranaghan]
    public static let `swa1Udp`: Self = "_swa-1._udp"
    /// Secure Web Access - 2 [Tim_McGranaghan]
    public static let `swa2Tcp`: Self = "_swa-2._tcp"
    /// Secure Web Access - 2 [Tim_McGranaghan]
    public static let `swa2Udp`: Self = "_swa-2._udp"
    /// Secure Web Access - 3 [Tim_McGranaghan]
    public static let `swa3Tcp`: Self = "_swa-3._tcp"
    /// Secure Web Access - 3 [Tim_McGranaghan]
    public static let `swa3Udp`: Self = "_swa-3._udp"
    /// Secure Web Access - 4 [Tim_McGranaghan]
    public static let `swa4Tcp`: Self = "_swa-4._tcp"
    /// Secure Web Access - 4 [Tim_McGranaghan]
    public static let `swa4Udp`: Self = "_swa-4._udp"
    /// Versiera Agent Listener [Frank_Pikelner]
    public static let `versieraTcp`: Self = "_versiera._tcp"
    /// Fusion-io Central Manager Service [Jim_Sermersheim]
    public static let `fioCmgmtTcp`: Self = "_fio-cmgmt._tcp"
    /// CardWeb request-response I/O exchange [Virtual_Electric_Inc]
    public static let `CardWebIoTcp`: Self = "_CardWeb-IO._tcp"
    /// CardWeb realtime device data [Virtual_Electric_Inc]
    public static let `CardWebRtUdp`: Self = "_CardWeb-RT._udp"
    /// Groove GLRPC [Adrian_Popescu]
    public static let `glrpcTcp`: Self = "_glrpc._tcp"
    /// Groove GLRPC [Adrian_Popescu]
    public static let `glrpcUdp`: Self = "_glrpc._udp"
    /// Required for Adaptive Quality of Service [Manish_Surolia]
    public static let `ciscoAqosUdp`: Self = "_cisco-aqos._udp"
    /// LCS Application Protocol [Kimmo_Kymalainen]
    public static let `lcsApSctp`: Self = "_lcs-ap._sctp"
    /// EMC PowerPath Mgmt Service [Jim_Perreault]
    public static let `emcPpMgmtsvcTcp`: Self = "_emc-pp-mgmtsvc._tcp"
    /// IBM AURORA Performance Visualizer [Jeroen_Massar_2]
    public static let `auroraTcp`: Self = "_aurora._tcp"
    /// IBM AURORA Performance Visualizer [Jeroen_Massar_2]
    public static let `auroraUdp`: Self = "_aurora._udp"
    /// IBM AURORA Performance Visualizer [Jeroen_Massar_2]
    public static let `auroraSctp`: Self = "_aurora._sctp"
    /// IBM Remote System Console [William_LePera]
    public static let `ibmRsysconTcp`: Self = "_ibm-rsyscon._tcp"
    /// IBM Remote System Console [William_LePera]
    public static let `ibmRsysconUdp`: Self = "_ibm-rsyscon._udp"
    /// Vesa Net2Display [Kenneth_B_Ocheltree]
    public static let `net2displayTcp`: Self = "_net2display._tcp"
    /// Vesa Net2Display [Kenneth_B_Ocheltree]
    public static let `net2displayUdp`: Self = "_net2display._udp"
    /// Classic Data Server [Paul_Cadarette]
    public static let `classicTcp`: Self = "_classic._tcp"
    /// Classic Data Server [Paul_Cadarette]
    public static let `classicUdp`: Self = "_classic._udp"
    /// IBM Informix SQL Interface [Jonathan_Leffler]
    public static let `sqlexecTcp`: Self = "_sqlexec._tcp"
    /// IBM Informix SQL Interface [Jonathan_Leffler]
    public static let `sqlexecUdp`: Self = "_sqlexec._udp"
    /// IBM Informix SQL Interface - Encrypted [Jonathan_Leffler]
    public static let `sqlexecSslTcp`: Self = "_sqlexec-ssl._tcp"
    /// IBM Informix SQL Interface - Encrypted [Jonathan_Leffler]
    public static let `sqlexecSslUdp`: Self = "_sqlexec-ssl._udp"
    /// WebSM [I_Hsing_Tsao]
    public static let `websmTcp`: Self = "_websm._tcp"
    /// WebSM [I_Hsing_Tsao]
    public static let `websmUdp`: Self = "_websm._udp"
    /// xmltec-xmlmail [Mitch_Kaufman]
    public static let `xmltecXmlmailTcp`: Self = "_xmltec-xmlmail._tcp"
    /// xmltec-xmlmail [Mitch_Kaufman]
    public static let `xmltecXmlmailUdp`: Self = "_xmltec-xmlmail._udp"
    /// Xml-Ipc Server Reg [Casey_Harrington]
    public static let `XmlIpcRegSvcTcp`: Self = "_XmlIpcRegSvc._tcp"
    /// Xml-Ipc Server Reg [Casey_Harrington]
    public static let `XmlIpcRegSvcUdp`: Self = "_XmlIpcRegSvc._udp"
    /// Copycat database replication service [Microtec_Informatique]
    public static let `copycatTcp`: Self = "_copycat._tcp"
    /// PDL Data Streaming Port [Shivaun_Albright]
    public static let `hpPdlDatastrTcp`: Self = "_hp-pdl-datastr._tcp"
    /// PDL Data Streaming Port [Shivaun_Albright]
    public static let `hpPdlDatastrUdp`: Self = "_hp-pdl-datastr._udp"
    /// Printer PDL Data Stream [Stuart_Cheshire_4]
    public static let `pdlDatastreamTcp`: Self = "_pdl-datastream._tcp"
    /// Printer PDL Data Stream [Stuart_Cheshire_4]
    public static let `pdlDatastreamUdp`: Self = "_pdl-datastream._udp"
    /// Bacula Director [Kern_Sibbald]
    public static let `baculaDirTcp`: Self = "_bacula-dir._tcp"
    /// Bacula Director [Kern_Sibbald]
    public static let `baculaDirUdp`: Self = "_bacula-dir._udp"
    /// Bacula File Daemon [Kern_Sibbald]
    public static let `baculaFdTcp`: Self = "_bacula-fd._tcp"
    /// Bacula File Daemon [Kern_Sibbald]
    public static let `baculaFdUdp`: Self = "_bacula-fd._udp"
    /// Bacula Storage Daemon [Kern_Sibbald]
    public static let `baculaSdTcp`: Self = "_bacula-sd._tcp"
    /// Bacula Storage Daemon [Kern_Sibbald]
    public static let `baculaSdUdp`: Self = "_bacula-sd._udp"
    /// PeerWire [Steven_Gerhardt]
    public static let `peerwireTcp`: Self = "_peerwire._tcp"
    /// PeerWire [Steven_Gerhardt]
    public static let `peerwireUdp`: Self = "_peerwire._udp"
    /// Xadmin Control Service 
    public static let `xadminTcp`: Self = "_xadmin._tcp"
    /// Xadmin Control Service 
    public static let `xadminUdp`: Self = "_xadmin._udp"
    /// Astergate Control Service [Ari_Huisken]
    public static let `astergateTcp`: Self = "_astergate._tcp"
    /// Astergate Discovery Service [Ari_Huisken]
    public static let `astergateDiscUdp`: Self = "_astergate-disc._udp"
    /// AstergateFax Control Service [Gijs_Middelkamp]
    public static let `astergatefaxTcp`: Self = "_astergatefax._tcp"
    /// Multiple Purpose, Distributed Message Bus [Hexxore]
    public static let `hexxorecoreTcp`: Self = "_hexxorecore._tcp"
    /// Multiple Purpose, Distributed Message Bus [Hexxore]
    public static let `hexxorecoreUdp`: Self = "_hexxorecore._udp"
    /// MXit Instant Messaging [Marnus_Freeman]
    public static let `mxitTcp`: Self = "_mxit._tcp"
    /// MXit Instant Messaging [Marnus_Freeman]
    public static let `mxitUdp`: Self = "_mxit._udp"
    /// Global Relay compliant mobile instant messaging protocol [Global_Relay]
    public static let `grcmpTcp`: Self = "_grcmp._tcp"
    /// Global Relay compliant instant messaging protocol [Global_Relay]
    public static let `grcpTcp`: Self = "_grcp._tcp"
    /// Dynamic Device Discovery [Shane_Dick]
    public static let `dddpTcp`: Self = "_dddp._tcp"
    /// Dynamic Device Discovery [Shane_Dick]
    public static let `dddpUdp`: Self = "_dddp._udp"
    /// apani1 [Neal_Taylor]
    public static let `apani1Tcp`: Self = "_apani1._tcp"
    /// apani1 [Neal_Taylor]
    public static let `apani1Udp`: Self = "_apani1._udp"
    /// apani2 [Neal_Taylor]
    public static let `apani2Tcp`: Self = "_apani2._tcp"
    /// apani2 [Neal_Taylor]
    public static let `apani2Udp`: Self = "_apani2._udp"
    /// apani3 [Neal_Taylor]
    public static let `apani3Tcp`: Self = "_apani3._tcp"
    /// apani3 [Neal_Taylor]
    public static let `apani3Udp`: Self = "_apani3._udp"
    /// apani4 [Neal_Taylor]
    public static let `apani4Tcp`: Self = "_apani4._tcp"
    /// apani4 [Neal_Taylor]
    public static let `apani4Udp`: Self = "_apani4._udp"
    /// apani5 [Neal_Taylor]
    public static let `apani5Tcp`: Self = "_apani5._tcp"
    /// apani5 [Neal_Taylor]
    public static let `apani5Udp`: Self = "_apani5._udp"
    /// Sun AppSvr JPDA [Abhijit_Kumar]
    public static let `sunAsJpdaTcp`: Self = "_sun-as-jpda._tcp"
    /// Sun AppSvr JPDA [Abhijit_Kumar]
    public static let `sunAsJpdaUdp`: Self = "_sun-as-jpda._udp"
    /// WAP connectionless session service [WAP_Forum]
    public static let `wapWspTcp`: Self = "_wap-wsp._tcp"
    /// WAP connectionless session service [WAP_Forum]
    public static let `wapWspUdp`: Self = "_wap-wsp._udp"
    /// WAP session service [WAP_Forum]
    public static let `wapWspWtpTcp`: Self = "_wap-wsp-wtp._tcp"
    /// WAP session service [WAP_Forum]
    public static let `wapWspWtpUdp`: Self = "_wap-wsp-wtp._udp"
    /// WAP secure connectionless session service [WAP_Forum]
    public static let `wapWspSTcp`: Self = "_wap-wsp-s._tcp"
    /// WAP secure connectionless session service [WAP_Forum]
    public static let `wapWspSUdp`: Self = "_wap-wsp-s._udp"
    /// WAP secure session service [WAP_Forum]
    public static let `wapWspWtpSTcp`: Self = "_wap-wsp-wtp-s._tcp"
    /// WAP secure session service [WAP_Forum]
    public static let `wapWspWtpSUdp`: Self = "_wap-wsp-wtp-s._udp"
    /// WAP vCard [WAP_Forum]
    public static let `wapVcardTcp`: Self = "_wap-vcard._tcp"
    /// WAP vCard [WAP_Forum]
    public static let `wapVcardUdp`: Self = "_wap-vcard._udp"
    /// WAP vCal [WAP_Forum]
    public static let `wapVcalTcp`: Self = "_wap-vcal._tcp"
    /// WAP vCal [WAP_Forum]
    public static let `wapVcalUdp`: Self = "_wap-vcal._udp"
    /// WAP vCard Secure [WAP_Forum]
    public static let `wapVcardSTcp`: Self = "_wap-vcard-s._tcp"
    /// WAP vCard Secure [WAP_Forum]
    public static let `wapVcardSUdp`: Self = "_wap-vcard-s._udp"
    /// WAP vCal Secure [WAP_Forum]
    public static let `wapVcalSTcp`: Self = "_wap-vcal-s._tcp"
    /// WAP vCal Secure [WAP_Forum]
    public static let `wapVcalSUdp`: Self = "_wap-vcal-s._udp"
    /// rjcdb vCard [Robert_John_Churchil]
    public static let `rjcdbVcardsTcp`: Self = "_rjcdb-vcards._tcp"
    /// rjcdb vCard [Robert_John_Churchil]
    public static let `rjcdbVcardsUdp`: Self = "_rjcdb-vcards._udp"
    /// ALMobile System Service [Rob_Graber]
    public static let `almobileSystemTcp`: Self = "_almobile-system._tcp"
    /// ALMobile System Service [Rob_Graber]
    public static let `almobileSystemUdp`: Self = "_almobile-system._udp"
    /// OMA Mobile Location Protocol [Hans_Rohnert]
    public static let `omaMlpTcp`: Self = "_oma-mlp._tcp"
    /// OMA Mobile Location Protocol [Hans_Rohnert]
    public static let `omaMlpUdp`: Self = "_oma-mlp._udp"
    /// OMA Mobile Location Protocol Secure [Hans_Rohnert]
    public static let `omaMlpSTcp`: Self = "_oma-mlp-s._tcp"
    /// OMA Mobile Location Protocol Secure [Hans_Rohnert]
    public static let `omaMlpSUdp`: Self = "_oma-mlp-s._udp"
    /// Server View dbms access [Detlef_Rothe]
    public static let `serverviewdbmsTcp`: Self = "_serverviewdbms._tcp"
    /// Server View dbms access [Detlef_Rothe]
    public static let `serverviewdbmsUdp`: Self = "_serverviewdbms._udp"
    /// ServerStart RemoteControl [Detlef_Rothe]
    public static let `serverstartTcp`: Self = "_serverstart._tcp"
    /// ServerStart RemoteControl [Detlef_Rothe]
    public static let `serverstartUdp`: Self = "_serverstart._udp"
    /// IPDC ESG BootstrapService [Joerg_Heuer]
    public static let `ipdcesgbsTcp`: Self = "_ipdcesgbs._tcp"
    /// IPDC ESG BootstrapService [Joerg_Heuer]
    public static let `ipdcesgbsUdp`: Self = "_ipdcesgbs._udp"
    /// Integrated Setup and Install Service [Markus_Treinen]
    public static let `insisTcp`: Self = "_insis._tcp"
    /// Integrated Setup and Install Service [Markus_Treinen]
    public static let `insisUdp`: Self = "_insis._udp"
    /// Aionex Communication Management Engine [Mark_Sapp]
    public static let `acmeTcp`: Self = "_acme._tcp"
    /// Aionex Communication Management Engine [Mark_Sapp]
    public static let `acmeUdp`: Self = "_acme._udp"
    /// FSC Communication Port [Teijo_Mustonen]
    public static let `fscPortTcp`: Self = "_fsc-port._tcp"
    /// FSC Communication Port [Teijo_Mustonen]
    public static let `fscPortUdp`: Self = "_fsc-port._udp"
    /// QSC Team Coherence [Ewan_McNab]
    public static let `teamcoherenceTcp`: Self = "_teamcoherence._tcp"
    /// QSC Team Coherence [Ewan_McNab]
    public static let `teamcoherenceUdp`: Self = "_teamcoherence._udp"
    /// GPS Data transmitted from train to ground network [Alstom_Transport_Preston]
    public static let `traingpsdataUdp`: Self = "_traingpsdata._udp"
    /// Pegasus GPS Platform [Nestor_A_Diaz]
    public static let `pegasusTcp`: Self = "_pegasus._tcp"
    /// Pegasus GPS Platform [Nestor_A_Diaz]
    public static let `pegasusUdp`: Self = "_pegasus._udp"
    /// Pegaus GPS System Control Interface [Nestor_A_Diaz]
    public static let `pegasusCtlTcp`: Self = "_pegasus-ctl._tcp"
    /// Pegaus GPS System Control Interface [Nestor_A_Diaz]
    public static let `pegasusCtlUdp`: Self = "_pegasus-ctl._udp"
    /// Predicted GPS [Jeremy_Freeman]
    public static let `pgpsTcp`: Self = "_pgps._tcp"
    /// Predicted GPS [Jeremy_Freeman]
    public static let `pgpsUdp`: Self = "_pgps._udp"
    /// SofaWare transport port 1 [Amir_Rapson]
    public static let `swtpPort1Tcp`: Self = "_swtp-port1._tcp"
    /// SofaWare transport port 1 [Amir_Rapson]
    public static let `swtpPort1Udp`: Self = "_swtp-port1._udp"
    /// SofaWare transport port 2 [Amir_Rapson]
    public static let `swtpPort2Tcp`: Self = "_swtp-port2._tcp"
    /// SofaWare transport port 2 [Amir_Rapson]
    public static let `swtpPort2Udp`: Self = "_swtp-port2._udp"
    /// CallWaveIAM [Colin_Kelley]
    public static let `callwaveiamTcp`: Self = "_callwaveiam._tcp"
    /// CallWaveIAM [Colin_Kelley]
    public static let `callwaveiamUdp`: Self = "_callwaveiam._udp"
    /// VERITAS Information Serve [Ravi_Tavakely]
    public static let `visdTcp`: Self = "_visd._tcp"
    /// VERITAS Information Serve [Ravi_Tavakely]
    public static let `visdUdp`: Self = "_visd._udp"
    /// N2H2 Filter Service Port [Jim_Irwin]
    public static let `n2h2serverTcp`: Self = "_n2h2server._tcp"
    /// N2H2 Filter Service Port [Jim_Irwin]
    public static let `n2h2serverUdp`: Self = "_n2h2server._udp"
    /// n2 monitoring receiver [Peter_van_Dijk]
    public static let `n2receiveUdp`: Self = "_n2receive._udp"
    /// Cumulus [Thomas_Schleu]
    public static let `cumulusTcp`: Self = "_cumulus._tcp"
    /// Cumulus [Thomas_Schleu]
    public static let `cumulusUdp`: Self = "_cumulus._udp"
    /// ArmTech Daemon [Rohan_Story]
    public static let `armtechdaemonTcp`: Self = "_armtechdaemon._tcp"
    /// ArmTech Daemon [Rohan_Story]
    public static let `armtechdaemonUdp`: Self = "_armtechdaemon._udp"
    /// StorView Client [Ryan_Smith]
    public static let `storviewTcp`: Self = "_storview._tcp"
    /// StorView Client [Ryan_Smith]
    public static let `storviewUdp`: Self = "_storview._udp"
    /// ARMCenter http Service [Eric_Thiebaut_George]
    public static let `armcenterhttpTcp`: Self = "_armcenterhttp._tcp"
    /// ARMCenter http Service [Eric_Thiebaut_George]
    public static let `armcenterhttpUdp`: Self = "_armcenterhttp._udp"
    /// ARMCenter https Service [Eric_Thiebaut_George]
    public static let `armcenterhttpsTcp`: Self = "_armcenterhttps._tcp"
    /// ARMCenter https Service [Eric_Thiebaut_George]
    public static let `armcenterhttpsUdp`: Self = "_armcenterhttps._udp"
    /// Virtual Racing Service [Pete_Loeffen]
    public static let `vraceTcp`: Self = "_vrace._tcp"
    /// Virtual Racing Service [Pete_Loeffen]
    public static let `vraceUdp`: Self = "_vrace._udp"
    /// Sphinx search server (MySQL listener) [Andrew_Aksyonoff]
    public static let `sphinxqlTcp`: Self = "_sphinxql._tcp"
    /// SAP Message Server [SAP_SE]
    public static let `sapmsTcp`: Self = "_sapms._tcp"
    /// Sphinx search server [Andrew_Aksyonoff]
    public static let `sphinxapiTcp`: Self = "_sphinxapi._tcp"
    /// PKIX TimeStamp over TLS [Niklas_Weiss]
    public static let `secureTsTcp`: Self = "_secure-ts._tcp"
    /// PKIX TimeStamp over TLS [Niklas_Weiss]
    public static let `secureTsUdp`: Self = "_secure-ts._udp"
    /// guibase [Yutaka_Ono]
    public static let `guibaseTcp`: Self = "_guibase._tcp"
    /// guibase [Yutaka_Ono]
    public static let `guibaseUdp`: Self = "_guibase._udp"
    /// gRPC Network Mgmt/Operations Interface [Google_Netops]
    public static let `gnmiGnoiTcp`: Self = "_gnmi-gnoi._tcp"
    /// gRPC Routing Information Base Interface [Google_Networking]
    public static let `gribiTcp`: Self = "_gribi._tcp"
    /// MpIdcMgr [Yutaka_Ono]
    public static let `mpidcmgrTcp`: Self = "_mpidcmgr._tcp"
    /// MpIdcMgr [Yutaka_Ono]
    public static let `mpidcmgrUdp`: Self = "_mpidcmgr._udp"
    /// Mphlpdmc [Yutaka_Ono]
    public static let `mphlpdmcTcp`: Self = "_mphlpdmc._tcp"
    /// Mphlpdmc [Yutaka_Ono]
    public static let `mphlpdmcUdp`: Self = "_mphlpdmc._udp"
    /// Rancher Agent [Rancher_Labs_Inc]
    public static let `rancherTcp`: Self = "_rancher._tcp"
    /// C Tech Licensing [Reed_Copsey_Jr]
    public static let `ctechlicensingTcp`: Self = "_ctechlicensing._tcp"
    /// C Tech Licensing [Reed_Copsey_Jr]
    public static let `ctechlicensingUdp`: Self = "_ctechlicensing._udp"
    /// fjdmimgr [Yutaka_Ono]
    public static let `fjdmimgrTcp`: Self = "_fjdmimgr._tcp"
    /// fjdmimgr [Yutaka_Ono]
    public static let `fjdmimgrUdp`: Self = "_fjdmimgr._udp"
    /// Brivs! Open Extensible Protocol [Danko_Alexeyev]
    public static let `boxpTcp`: Self = "_boxp._tcp"
    /// Brivs! Open Extensible Protocol [Danko_Alexeyev]
    public static let `boxpUdp`: Self = "_boxp._udp"
    /// D2D Configuration Service [Pete_Camble]
    public static let `d2dconfigTcp`: Self = "_d2dconfig._tcp"
    /// D2D Data Transfer Service [Pete_Camble]
    public static let `d2ddatatransTcp`: Self = "_d2ddatatrans._tcp"
    /// Active Directory Web Services [Nitin_Gupta]
    public static let `adwsTcp`: Self = "_adws._tcp"
    /// OpenVAS Transfer Protocol [Tim_Brown]
    public static let `otpTcp`: Self = "_otp._tcp"
    /// fjinvmgr [Yutaka_Ono]
    public static let `fjinvmgrTcp`: Self = "_fjinvmgr._tcp"
    /// fjinvmgr [Yutaka_Ono]
    public static let `fjinvmgrUdp`: Self = "_fjinvmgr._udp"
    /// MpIdcAgt [Yutaka_Ono]
    public static let `mpidcagtTcp`: Self = "_mpidcagt._tcp"
    /// MpIdcAgt [Yutaka_Ono]
    public static let `mpidcagtUdp`: Self = "_mpidcagt._udp"
    /// Samsung Twain for Network Server [Dongkeun_Kim]
    public static let `secT4netSrvTcp`: Self = "_sec-t4net-srv._tcp"
    /// Samsung Twain for Network Server [Dongkeun_Kim]
    public static let `secT4netSrvUdp`: Self = "_sec-t4net-srv._udp"
    /// Samsung Twain for Network Client [Dongkeun_Kim]
    public static let `secT4netCltTcp`: Self = "_sec-t4net-clt._tcp"
    /// Samsung Twain for Network Client [Dongkeun_Kim]
    public static let `secT4netCltUdp`: Self = "_sec-t4net-clt._udp"
    /// Samsung PC2FAX for Network Server [HyeongBae_Yu]
    public static let `secPc2faxSrvTcp`: Self = "_sec-pc2fax-srv._tcp"
    /// Samsung PC2FAX for Network Server [HyeongBae_Yu]
    public static let `secPc2faxSrvUdp`: Self = "_sec-pc2fax-srv._udp"
    /// git pack transfer service [Linus_Torvalds]
    public static let `gitTcp`: Self = "_git._tcp"
    /// git pack transfer service [Linus_Torvalds]
    public static let `gitUdp`: Self = "_git._udp"
    /// WSO2 Tungsten HTTPS [Afkham_Azeez]
    public static let `tungstenHttpsTcp`: Self = "_tungsten-https._tcp"
    /// WSO2 Tungsten HTTPS [Afkham_Azeez]
    public static let `tungstenHttpsUdp`: Self = "_tungsten-https._udp"
    /// WSO2 ESB Administration Console HTTPS [Ruwan_Linton]
    public static let `wso2esbConsoleTcp`: Self = "_wso2esb-console._tcp"
    /// WSO2 ESB Administration Console HTTPS [Ruwan_Linton]
    public static let `wso2esbConsoleUdp`: Self = "_wso2esb-console._udp"
    /// MindArray Systems Console Agent [MINDARRAY_SYSTEMS]
    public static let `mindarrayCaTcp`: Self = "_mindarray-ca._tcp"
    /// Sentinel Keys Server [Martin_Ziskind]
    public static let `sntlkeyssrvrTcp`: Self = "_sntlkeyssrvr._tcp"
    /// Sentinel Keys Server [Martin_Ziskind]
    public static let `sntlkeyssrvrUdp`: Self = "_sntlkeyssrvr._udp"
    /// ismserver [Ian_Gordon_3]
    public static let `ismserverTcp`: Self = "_ismserver._tcp"
    /// ismserver [Ian_Gordon_3]
    public static let `ismserverUdp`: Self = "_ismserver._udp"
    /// SMA Speedwire [SMA_Solar_Techology]
    public static let `smaSpwUdp`: Self = "_sma-spw._udp"
    /// Management Suite Remote Control [Trevor_Perkes]
    public static let `mngsuiteTcp`: Self = "_mngsuite._tcp"
    /// Management Suite Remote Control [Trevor_Perkes]
    public static let `mngsuiteUdp`: Self = "_mngsuite._udp"
    /// Surveillance buffering function [Glen_Myers]
    public static let `laesBfTcp`: Self = "_laes-bf._tcp"
    /// Surveillance buffering function [Glen_Myers]
    public static let `laesBfUdp`: Self = "_laes-bf._udp"
    /// Trispen Secure Remote Access [Jaco_Botha]
    public static let `trispenSraTcp`: Self = "_trispen-sra._tcp"
    /// Trispen Secure Remote Access [Jaco_Botha]
    public static let `trispenSraUdp`: Self = "_trispen-sra._udp"
    /// P4Runtime gRPC Service [Open_Networking_Foundation]
    public static let `p4runtimeTcp`: Self = "_p4runtime._tcp"
    /// LANDesk Gateway [Alan_Butt]
    public static let `ldgatewayTcp`: Self = "_ldgateway._tcp"
    /// LANDesk Gateway [Alan_Butt]
    public static let `ldgatewayUdp`: Self = "_ldgateway._udp"
    /// LANDesk Management Agent (cba8) [Trevor_Perkes]
    public static let `cba8Tcp`: Self = "_cba8._tcp"
    /// LANDesk Management Agent (cba8) [Trevor_Perkes]
    public static let `cba8Udp`: Self = "_cba8._udp"
    /// Message System [Alan_Butt]
    public static let `msgsysTcp`: Self = "_msgsys._tcp"
    /// Message System [Alan_Butt]
    public static let `msgsysUdp`: Self = "_msgsys._udp"
    /// Ping Discovery Service [Alan_Butt]
    public static let `pdsTcp`: Self = "_pds._tcp"
    /// Ping Discovery Service [Alan_Butt]
    public static let `pdsUdp`: Self = "_pds._udp"
    /// Mercury Discovery [Paul_Mclachlan]
    public static let `mercuryDiscTcp`: Self = "_mercury-disc._tcp"
    /// Mercury Discovery [Paul_Mclachlan]
    public static let `mercuryDiscUdp`: Self = "_mercury-disc._udp"
    /// PD Administration [Duk_Loi]
    public static let `pdAdminTcp`: Self = "_pd-admin._tcp"
    /// PD Administration [Duk_Loi]
    public static let `pdAdminUdp`: Self = "_pd-admin._udp"
    /// Very Simple Ctrl Protocol [Ake_Hedman]
    public static let `vscpTcp`: Self = "_vscp._tcp"
    /// Very Simple Ctrl Protocol [Ake_Hedman]
    public static let `vscpUdp`: Self = "_vscp._udp"
    /// Robix [Evan_Rosen]
    public static let `robixTcp`: Self = "_robix._tcp"
    /// Robix [Evan_Rosen]
    public static let `robixUdp`: Self = "_robix._udp"
    /// MICROMUSE-NCPW [Hing_Wing_To_2]
    public static let `micromuseNcpwTcp`: Self = "_micromuse-ncpw._tcp"
    /// MICROMUSE-NCPW [Hing_Wing_To_2]
    public static let `micromuseNcpwUdp`: Self = "_micromuse-ncpw._udp"
    /// StreamComm User Directory [Brian_C_Wiles]
    public static let `streamcommDsTcp`: Self = "_streamcomm-ds._tcp"
    /// StreamComm User Directory [Brian_C_Wiles]
    public static let `streamcommDsUdp`: Self = "_streamcomm-ds._udp"
    /// iADT Protocol over TLS [Paul_A_Suhler]
    public static let `iadtTlsTcp`: Self = "_iadt-tls._tcp"
    /// eRunbook Agent IANA assigned this well-formed service name as a replacement for "erunbook_agent". [Gerhard_Wagner]
    public static let `erunbookAgentTcp`: Self = "_erunbook-agent._tcp"
    /// eRunbook Agent [Gerhard_Wagner]
    public static let `erunbook_agentTcp`: Self = "_erunbook_agent._tcp"
    /// eRunbook Server IANA assigned this well-formed service name as a replacement for "erunbook_server". [Gerhard_Wagner]
    public static let `erunbookServerTcp`: Self = "_erunbook-server._tcp"
    /// eRunbook Server [Gerhard_Wagner]
    public static let `erunbook_serverTcp`: Self = "_erunbook_server._tcp"
    /// Condor Collector Service [Todd_Tannenbaum]
    public static let `condorTcp`: Self = "_condor._tcp"
    /// Condor Collector Service [Todd_Tannenbaum]
    public static let `condorUdp`: Self = "_condor._udp"
    /// ODBC Pathway Service [Adrian_Hungate]
    public static let `odbcpathwayTcp`: Self = "_odbcpathway._tcp"
    /// ODBC Pathway Service [Adrian_Hungate]
    public static let `odbcpathwayUdp`: Self = "_odbcpathway._udp"
    /// UniPort SSO Controller [Adrian_Hungate]
    public static let `uniportTcp`: Self = "_uniport._tcp"
    /// UniPort SSO Controller [Adrian_Hungate]
    public static let `uniportUdp`: Self = "_uniport._udp"
    /// Peovica Controller [Adrian_Hungate]
    public static let `peoctlrTcp`: Self = "_peoctlr._tcp"
    /// Peovica Collector [Adrian_Hungate]
    public static let `peocollTcp`: Self = "_peocoll._tcp"
    /// Mobile-C Communications [David_Ko_2]
    public static let `mcCommUdp`: Self = "_mc-comm._udp"
    /// ProQueSys Flows Service [Sarene_Caiazza]
    public static let `pqsflowsTcp`: Self = "_pqsflows._tcp"
    /// Zoom Control Panel Game Server Management [Zoom_Control_Panel]
    public static let `zoomcpTcp`: Self = "_zoomcp._tcp"
    /// Cross-platform Music Multiplexing System [Juho_Herttua]
    public static let `xmms2Tcp`: Self = "_xmms2._tcp"
    /// Cross-platform Music Multiplexing System [Juho_Herttua]
    public static let `xmms2Udp`: Self = "_xmms2._udp"
    /// tec5 Spectral Device Control Protocol [Michael_Muth]
    public static let `tec5SdctpTcp`: Self = "_tec5-sdctp._tcp"
    /// tec5 Spectral Device Control Protocol [Michael_Muth]
    public static let `tec5SdctpUdp`: Self = "_tec5-sdctp._udp"
    /// T-Mobile Client Wakeup Message [Michael_Schonborn]
    public static let `clientWakeupTcp`: Self = "_client-wakeup._tcp"
    /// T-Mobile Client Wakeup Message [Michael_Schonborn]
    public static let `clientWakeupUdp`: Self = "_client-wakeup._udp"
    /// Content Centric Networking [Van_Jacobson_2][Simon_Barber]
    public static let `ccnxTcp`: Self = "_ccnx._tcp"
    /// Content Centric Networking [Van_Jacobson_2][Simon_Barber]
    public static let `ccnxUdp`: Self = "_ccnx._udp"
    /// Board M.I.T. Service [Francesco_Rosi]
    public static let `boardRoarTcp`: Self = "_board-roar._tcp"
    /// Board M.I.T. Service [Francesco_Rosi]
    public static let `boardRoarUdp`: Self = "_board-roar._udp"
    /// L5NAS Parallel Channel [Lawrence_J_Dickson]
    public static let `l5nasParchanTcp`: Self = "_l5nas-parchan._tcp"
    /// L5NAS Parallel Channel [Lawrence_J_Dickson]
    public static let `l5nasParchanUdp`: Self = "_l5nas-parchan._udp"
    /// Board M.I.T. Synchronous Collaboration [Francesco_Rosi]
    public static let `boardVoipTcp`: Self = "_board-voip._tcp"
    /// Board M.I.T. Synchronous Collaboration [Francesco_Rosi]
    public static let `boardVoipUdp`: Self = "_board-voip._udp"
    /// rasadv [Dave_Thaler_2]
    public static let `rasadvTcp`: Self = "_rasadv._tcp"
    /// rasadv [Dave_Thaler_2]
    public static let `rasadvUdp`: Self = "_rasadv._udp"
    /// WSO2 Tungsten HTTP [Afkham_Azeez]
    public static let `tungstenHttpTcp`: Self = "_tungsten-http._tcp"
    /// WSO2 Tungsten HTTP [Afkham_Azeez]
    public static let `tungstenHttpUdp`: Self = "_tungsten-http._udp"
    /// WebDav Source Port [Ethan_Fremen]
    public static let `davsrcTcp`: Self = "_davsrc._tcp"
    /// WebDav Source Port [Ethan_Fremen]
    public static let `davsrcUdp`: Self = "_davsrc._udp"
    /// Sakura Script Transfer Protocol-2 [Kouichi_Takeda_2]
    public static let `sstp2Tcp`: Self = "_sstp-2._tcp"
    /// Sakura Script Transfer Protocol-2 [Kouichi_Takeda_2]
    public static let `sstp2Udp`: Self = "_sstp-2._udp"
    /// WebDAV Source TLS/SSL [Rob_Isaac]
    public static let `davsrcsTcp`: Self = "_davsrcs._tcp"
    /// WebDAV Source TLS/SSL [Rob_Isaac]
    public static let `davsrcsUdp`: Self = "_davsrcs._udp"
    /// Session Announcement v1 
    public static let `sapv1Tcp`: Self = "_sapv1._tcp"
    /// Session Announcement v1 
    public static let `sapv1Udp`: Self = "_sapv1._udp"
    /// Session Director [Van_Jacobson]
    public static let `sdTcp`: Self = "_sd._tcp"
    /// The X.510 wrapper protocol [ITU_TSB_ITU-T_Study_Group_17]
    public static let `x510Tcp`: Self = "_x510._tcp"
    /// The KX509 Kerberized Certificate Issuance Protocol in Use in 2012 [IESG]
    public static let `kcaServiceUdp`: Self = "_kca-service._udp"
    /// CYBORG Systems [Malcolm_Graham]
    public static let `cyborgSystemsTcp`: Self = "_cyborg-systems._tcp"
    /// CYBORG Systems [Malcolm_Graham]
    public static let `cyborgSystemsUdp`: Self = "_cyborg-systems._udp"
    /// Port for Cable network related data proxy or repeater [Dawei_Qi]
    public static let `gtProxyTcp`: Self = "_gt-proxy._tcp"
    /// Port for Cable network related data proxy or repeater [Dawei_Qi]
    public static let `gtProxyUdp`: Self = "_gt-proxy._udp"
    /// MonkeyCom [Yuji_Kuwabara]
    public static let `monkeycomTcp`: Self = "_monkeycom._tcp"
    /// MonkeyCom [Yuji_Kuwabara]
    public static let `monkeycomUdp`: Self = "_monkeycom._udp"
    /// SCTP TUNNELING [IESG]
    public static let `sctpTunnelingUdp`: Self = "_sctp-tunneling._udp"
    /// IUA [Lyndon_Ong_2]
    public static let `iuaTcp`: Self = "_iua._tcp"
    /// IUA [Lyndon_Ong_2]
    public static let `iuaUdp`: Self = "_iua._udp"
    /// IUA [Lyndon_Ong_2]
    public static let `iuaSctp`: Self = "_iua._sctp"
    /// enrp server channel 
    public static let `enrpUdp`: Self = "_enrp._udp"
    /// enrp server channel 
    public static let `enrpSctpSctp`: Self = "_enrp-sctp._sctp"
    /// enrp/tls server channel 
    public static let `enrpSctpTlsSctp`: Self = "_enrp-sctp-tls._sctp"
    /// Multicast Ping Protocol 
    public static let `multicastPingUdp`: Self = "_multicast-ping._udp"
    /// domaintime [Jeffry_Dwight]
    public static let `domaintimeTcp`: Self = "_domaintime._tcp"
    /// domaintime [Jeffry_Dwight]
    public static let `domaintimeUdp`: Self = "_domaintime._udp"
    /// SYPECom Transport Protocol [Sylvain_Pedneault]
    public static let `sypeTransportTcp`: Self = "_sype-transport._tcp"
    /// SYPECom Transport Protocol [Sylvain_Pedneault]
    public static let `sypeTransportUdp`: Self = "_sype-transport._udp"
    /// XYBRID Cloud [Rx_Networks_Inc_2]
    public static let `xybridCloudTcp`: Self = "_xybrid-cloud._tcp"
    /// APC 9950 [American_Power_Conve]
    public static let `apc9950Tcp`: Self = "_apc-9950._tcp"
    /// APC 9950 [American_Power_Conve]
    public static let `apc9950Udp`: Self = "_apc-9950._udp"
    /// APC 9951 [American_Power_Conve]
    public static let `apc9951Tcp`: Self = "_apc-9951._tcp"
    /// APC 9951 [American_Power_Conve]
    public static let `apc9951Udp`: Self = "_apc-9951._udp"
    /// APC 9952 [American_Power_Conve]
    public static let `apc9952Tcp`: Self = "_apc-9952._tcp"
    /// APC 9952 [American_Power_Conve]
    public static let `apc9952Udp`: Self = "_apc-9952._udp"
    /// 9953 [Thomas_Guth]
    public static let `acisTcp`: Self = "_acis._tcp"
    /// 9953 [Thomas_Guth]
    public static let `acisUdp`: Self = "_acis._udp"
    /// HaloteC Instrument Network Protocol [HaloteC_Instruments]
    public static let `hinpTcp`: Self = "_hinp._tcp"
    /// Contact Port for AllJoyn standard messaging [Qualcomm_Innovation_Center]
    public static let `alljoynStmTcp`: Self = "_alljoyn-stm._tcp"
    /// Contact Port for AllJoyn multiplexed constrained messaging [Qualcomm_Innovation_Center]
    public static let `alljoynMcmUdp`: Self = "_alljoyn-mcm._udp"
    /// Alljoyn Name Service [Qualcomm_Innovation_Center]
    public static let `alljoynUdp`: Self = "_alljoyn._udp"
    /// OKI Data Network Setting Protocol [Masato_Sato]
    public static let `odnspTcp`: Self = "_odnsp._tcp"
    /// OKI Data Network Setting Protocol [Masato_Sato]
    public static let `odnspUdp`: Self = "_odnsp._udp"
    /// XYBRID RT Server [Rx_Networks_Inc]
    public static let `xybridRtTcp`: Self = "_xybrid-rt._tcp"
    /// Valley Information Systems Weather station data [Valley_Information_Systems_Inc]
    public static let `visweatherTcp`: Self = "_visweather._tcp"
    /// Event sourcing database engine with a built-in programming language [Eventsourcing_Inc]
    public static let `pumpkindbTcp`: Self = "_pumpkindb._tcp"
    /// DSM/SCM Target Interface [Mike_Dyslin]
    public static let `dsmScmTargetTcp`: Self = "_dsm-scm-target._tcp"
    /// DSM/SCM Target Interface [Mike_Dyslin]
    public static let `dsmScmTargetUdp`: Self = "_dsm-scm-target._udp"
    /// Software Essentials Secure HTTP server [Narayanan_Raju]
    public static let `nsesrvrTcp`: Self = "_nsesrvr._tcp"
    /// OSM Applet Server [Vinay_Gupta]
    public static let `osmAppsrvrTcp`: Self = "_osm-appsrvr._tcp"
    /// OSM Applet Server [Vinay_Gupta]
    public static let `osmAppsrvrUdp`: Self = "_osm-appsrvr._udp"
    /// OSM Event Server [Vinay_Gupta]
    public static let `osmOevTcp`: Self = "_osm-oev._tcp"
    /// OSM Event Server [Vinay_Gupta]
    public static let `osmOevUdp`: Self = "_osm-oev._udp"
    /// OnLive-1 [Douglas_Crockford]
    public static let `palace1Tcp`: Self = "_palace-1._tcp"
    /// OnLive-1 [Douglas_Crockford]
    public static let `palace1Udp`: Self = "_palace-1._udp"
    /// OnLive-2 [Douglas_Crockford]
    public static let `palace2Tcp`: Self = "_palace-2._tcp"
    /// OnLive-2 [Douglas_Crockford]
    public static let `palace2Udp`: Self = "_palace-2._udp"
    /// OnLive-3 [Douglas_Crockford]
    public static let `palace3Tcp`: Self = "_palace-3._tcp"
    /// OnLive-3 [Douglas_Crockford]
    public static let `palace3Udp`: Self = "_palace-3._udp"
    /// Palace-4 [Douglas_Crockford]
    public static let `palace4Tcp`: Self = "_palace-4._tcp"
    /// Palace-4 [Douglas_Crockford]
    public static let `palace4Udp`: Self = "_palace-4._udp"
    /// Palace-5 [Douglas_Crockford]
    public static let `palace5Tcp`: Self = "_palace-5._tcp"
    /// Palace-5 [Douglas_Crockford]
    public static let `palace5Udp`: Self = "_palace-5._udp"
    /// Palace-6 [Douglas_Crockford]
    public static let `palace6Tcp`: Self = "_palace-6._tcp"
    /// Palace-6 [Douglas_Crockford]
    public static let `palace6Udp`: Self = "_palace-6._udp"
    /// Distinct32 [Anoop_Tewari]
    public static let `distinct32Tcp`: Self = "_distinct32._tcp"
    /// Distinct32 [Anoop_Tewari]
    public static let `distinct32Udp`: Self = "_distinct32._udp"
    /// distinct [Anoop_Tewari]
    public static let `distinctTcp`: Self = "_distinct._tcp"
    /// distinct [Anoop_Tewari]
    public static let `distinctUdp`: Self = "_distinct._udp"
    /// Network Data Management Protocol [Brian_Ehrmantraut]
    public static let `ndmpTcp`: Self = "_ndmp._tcp"
    /// Network Data Management Protocol [Brian_Ehrmantraut]
    public static let `ndmpUdp`: Self = "_ndmp._udp"
    /// SCP Configuration [Michael_Benz]
    public static let `scpConfigTcp`: Self = "_scp-config._tcp"
    /// SCP Configuration [Michael_Benz]
    public static let `scpConfigUdp`: Self = "_scp-config._udp"
    /// EMC-Documentum Content Server Product [Reza_Bagherian]
    public static let `documentumTcp`: Self = "_documentum._tcp"
    /// EMC-Documentum Content Server Product [Reza_Bagherian]
    public static let `documentumUdp`: Self = "_documentum._udp"
    /// EMC-Documentum Content Server Product IANA assigned this well-formed service name as a replacement for "documentum_s". [Reza_Bagherian]
    public static let `documentumSTcp`: Self = "_documentum-s._tcp"
    /// EMC-Documentum Content Server Product [Reza_Bagherian]
    public static let `documentum_sTcp`: Self = "_documentum_s._tcp"
    /// EMC-Documentum Content Server Product IANA assigned this well-formed service name as a replacement for "documentum_s". [Reza_Bagherian]
    public static let `documentumSUdp`: Self = "_documentum-s._udp"
    /// EMC-Documentum Content Server Product [Reza_Bagherian]
    public static let `documentum_sUdp`: Self = "_documentum_s._udp"
    /// EMC Replication Manager Client [Robert_Boudrie]
    public static let `emcrmirccdTcp`: Self = "_emcrmirccd._tcp"
    /// EMC Replication Manager Server [Robert_Boudrie]
    public static let `emcrmirdTcp`: Self = "_emcrmird._tcp"
    /// Sync replication protocol among different NetApp platforms [NetApp_2]
    public static let `netappSyncTcp`: Self = "_netapp-sync._tcp"
    /// MVS Capacity [Donna_Dillenberger]
    public static let `mvsCapacityTcp`: Self = "_mvs-capacity._tcp"
    /// MVS Capacity [Donna_Dillenberger]
    public static let `mvsCapacityUdp`: Self = "_mvs-capacity._udp"
    /// Octopus Multiplexer [Chris_Koeritz_2]
    public static let `octopusTcp`: Self = "_octopus._tcp"
    /// Octopus Multiplexer [Chris_Koeritz_2]
    public static let `octopusUdp`: Self = "_octopus._udp"
    /// Systemwalker Desktop Patrol [Akira_Ide]
    public static let `swdtpSvTcp`: Self = "_swdtp-sv._tcp"
    /// Systemwalker Desktop Patrol [Akira_Ide]
    public static let `swdtpSvUdp`: Self = "_swdtp-sv._udp"
    /// ooRexx rxapi services [David_Ashley]
    public static let `rxapiTcp`: Self = "_rxapi._tcp"
    /// Hardware configuration and maintenance [ABB]
    public static let `abbHwTcp`: Self = "_abb-hw._tcp"
    /// Comtech EF-Data's Vipersat Management Protocol [Comtech]
    public static let `cefdVmpUdp`: Self = "_cefd-vmp._udp"
    /// Zabbix Agent [Alexei_Vladishev]
    public static let `zabbixAgentTcp`: Self = "_zabbix-agent._tcp"
    /// Zabbix Agent [Alexei_Vladishev]
    public static let `zabbixAgentUdp`: Self = "_zabbix-agent._udp"
    /// Zabbix Trapper [Alexei_Vladishev]
    public static let `zabbixTrapperTcp`: Self = "_zabbix-trapper._tcp"
    /// Zabbix Trapper [Alexei_Vladishev]
    public static let `zabbixTrapperUdp`: Self = "_zabbix-trapper._udp"
    /// Quantapoint FLEXlm Licensing Service [Justin_Vegso]
    public static let `qptlmdTcp`: Self = "_qptlmd._tcp"
    /// Amanda [John_Jackson]
    public static let `amandaTcp`: Self = "_amanda._tcp"
    /// Amanda [John_Jackson]
    public static let `amandaUdp`: Self = "_amanda._udp"
    /// FAM Archive Server [Frode_Randers]
    public static let `famdcTcp`: Self = "_famdc._tcp"
    /// FAM Archive Server [Frode_Randers]
    public static let `famdcUdp`: Self = "_famdc._udp"
    /// VERITAS ITAP DDTP [Saugata_Guha]
    public static let `itapDdtpTcp`: Self = "_itap-ddtp._tcp"
    /// VERITAS ITAP DDTP [Saugata_Guha]
    public static let `itapDdtpUdp`: Self = "_itap-ddtp._udp"
    /// eZmeeting [Albert_C_Yang]
    public static let `ezmeeting2Tcp`: Self = "_ezmeeting-2._tcp"
    /// eZmeeting [Albert_C_Yang]
    public static let `ezmeeting2Udp`: Self = "_ezmeeting-2._udp"
    /// eZproxy [Albert_C_Yang]
    public static let `ezproxy2Tcp`: Self = "_ezproxy-2._tcp"
    /// eZproxy [Albert_C_Yang]
    public static let `ezproxy2Udp`: Self = "_ezproxy-2._udp"
    /// eZrelay [Albert_C_Yang]
    public static let `ezrelayTcp`: Self = "_ezrelay._tcp"
    /// eZrelay [Albert_C_Yang]
    public static let `ezrelayUdp`: Self = "_ezrelay._udp"
    /// Systemwalker Desktop Patrol [Akira_Ide]
    public static let `swdtpTcp`: Self = "_swdtp._tcp"
    /// Systemwalker Desktop Patrol [Akira_Ide]
    public static let `swdtpUdp`: Self = "_swdtp._udp"
    /// VERITAS BCTP, server [Saugata_Guha]
    public static let `bctpServerTcp`: Self = "_bctp-server._tcp"
    /// VERITAS BCTP, server [Saugata_Guha]
    public static let `bctpServerUdp`: Self = "_bctp-server._udp"
    /// NMEA-0183 Navigational Data [Meindert_Sprang]
    public static let `nmea0183Tcp`: Self = "_nmea-0183._tcp"
    /// NMEA-0183 Navigational Data [Meindert_Sprang]
    public static let `nmea0183Udp`: Self = "_nmea-0183._udp"
    /// NMEA OneNet multicast messaging [National_Marine_Electronics_Association]
    public static let `nmeaOnenetUdp`: Self = "_nmea-onenet._udp"
    /// NetIQ Endpoint [John_Wood]
    public static let `netiqEndpointTcp`: Self = "_netiq-endpoint._tcp"
    /// NetIQ Endpoint [John_Wood]
    public static let `netiqEndpointUdp`: Self = "_netiq-endpoint._udp"
    /// NetIQ Qcheck [Michael_Sharpe]
    public static let `netiqQcheckTcp`: Self = "_netiq-qcheck._tcp"
    /// NetIQ Qcheck [Michael_Sharpe]
    public static let `netiqQcheckUdp`: Self = "_netiq-qcheck._udp"
    /// NetIQ Endpoint [Gary_Weichinger]
    public static let `netiqEndptTcp`: Self = "_netiq-endpt._tcp"
    /// NetIQ Endpoint [Gary_Weichinger]
    public static let `netiqEndptUdp`: Self = "_netiq-endpt._udp"
    /// NetIQ VoIP Assessor [Gary_Weichinger]
    public static let `netiqVoipaTcp`: Self = "_netiq-voipa._tcp"
    /// NetIQ VoIP Assessor [Gary_Weichinger]
    public static let `netiqVoipaUdp`: Self = "_netiq-voipa._udp"
    /// NetIQ IQCResource Managament Svc [Michael_Sharpe]
    public static let `iqrmTcp`: Self = "_iqrm._tcp"
    /// NetIQ IQCResource Managament Svc [Michael_Sharpe]
    public static let `iqrmUdp`: Self = "_iqrm._udp"
    /// HotLink CIMple REST API [HotLink_Corporation]
    public static let `cimpleTcp`: Self = "_cimple._tcp"
    /// BMC-PERFORM-SERVICE DAEMON [Portnoy_Boxman]
    public static let `bmcPerfSdTcp`: Self = "_bmc-perf-sd._tcp"
    /// BMC-PERFORM-SERVICE DAEMON [Portnoy_Boxman]
    public static let `bmcPerfSdUdp`: Self = "_bmc-perf-sd._udp"
    /// BMC General Manager Server [Dima_Seliverstov]
    public static let `bmcGmsTcp`: Self = "_bmc-gms._tcp"
    /// QB Database Server [Wei_Wang]
    public static let `qbDbServerTcp`: Self = "_qb-db-server._tcp"
    /// QB Database Server [Wei_Wang]
    public static let `qbDbServerUdp`: Self = "_qb-db-server._udp"
    /// SNMP-TLS 
    public static let `snmptlsTcp`: Self = "_snmptls._tcp"
    /// SNMP-DTLS 
    public static let `snmpdtlsUdp`: Self = "_snmpdtls._udp"
    /// SNMP-Trap-TLS 
    public static let `snmptlsTrapTcp`: Self = "_snmptls-trap._tcp"
    /// SNMP-Trap-DTLS 
    public static let `snmpdtlsTrapUdp`: Self = "_snmpdtls-trap._udp"
    /// Trigence AE Soap Service [Brigitte_Gagne]
    public static let `trisoapTcp`: Self = "_trisoap._tcp"
    /// Trigence AE Soap Service [Brigitte_Gagne]
    public static let `trisoapUdp`: Self = "_trisoap._udp"
    /// Remote Server Management Service [Patrick_H_Piper]
    public static let `rsmsTcp`: Self = "_rsms._tcp"
    /// Remote Server Control and Test Service [Patrick_H_Piper]
    public static let `rscsUdp`: Self = "_rscs._udp"
    /// Apollo Relay Port [Anthony_Carrabino]
    public static let `apolloRelayTcp`: Self = "_apollo-relay._tcp"
    /// Apollo Relay Port [Anthony_Carrabino]
    public static let `apolloRelayUdp`: Self = "_apollo-relay._udp"
    /// Relay of EAPOL frames [Wi-SUN_Alliance]
    public static let `eapolRelayUdp`: Self = "_eapol-relay._udp"
    /// Axis WIMP Port [Stefan_Eriksson]
    public static let `axisWimpPortTcp`: Self = "_axis-wimp-port._tcp"
    /// Axis WIMP Port [Stefan_Eriksson]
    public static let `axisWimpPortUdp`: Self = "_axis-wimp-port._udp"
    /// Tile remote machine learning [_1026_Labs]
    public static let `tileMlTcp`: Self = "_tile-ml._tcp"
    /// Blocks [Carl_Malamud]
    public static let `blocksTcp`: Self = "_blocks._tcp"
    /// Blocks [Carl_Malamud]
    public static let `blocksUdp`: Self = "_blocks._udp"
    /// Computer Op System Information Report [Kevin_C_Barber]
    public static let `cosirTcp`: Self = "_cosir._tcp"
    /// BalanceNG session table synchronization protocol [Inlab_Software_GmbH]
    public static let `bngsyncUdp`: Self = "_bngsync._udp"
    /// CirrosSP Workstation Communication [Cirros_Document_Solutions_Ltd]
    public static let `cirrosspTcp`: Self = "_cirrossp._tcp"
    /// HIP NAT-Traversal [IESG]
    public static let `hipNatTUdp`: Self = "_hip-nat-t._udp"
    /// MOS Media Object Metadata Port [Eric_Thorniley]
    public static let `MOSLowerTcp`: Self = "_MOS-lower._tcp"
    /// MOS Media Object Metadata Port [Eric_Thorniley]
    public static let `MOSLowerUdp`: Self = "_MOS-lower._udp"
    /// MOS Running Order Port [Eric_Thorniley]
    public static let `MOSUpperTcp`: Self = "_MOS-upper._tcp"
    /// MOS Running Order Port [Eric_Thorniley]
    public static let `MOSUpperUdp`: Self = "_MOS-upper._udp"
    /// MOS Low Priority Port [Eric_Thorniley]
    public static let `MOSAuxTcp`: Self = "_MOS-aux._tcp"
    /// MOS Low Priority Port [Eric_Thorniley]
    public static let `MOSAuxUdp`: Self = "_MOS-aux._udp"
    /// MOS SOAP Default Port [Eric_Thorniley]
    public static let `MOSSoapTcp`: Self = "_MOS-soap._tcp"
    /// MOS SOAP Default Port [Eric_Thorniley]
    public static let `MOSSoapUdp`: Self = "_MOS-soap._udp"
    /// MOS SOAP Optional Port [Eric_Thorniley]
    public static let `MOSSoapOptTcp`: Self = "_MOS-soap-opt._tcp"
    /// MOS SOAP Optional Port [Eric_Thorniley]
    public static let `MOSSoapOptUdp`: Self = "_MOS-soap-opt._udp"
    /// Apple Document Sharing Service [Apple_Inc_3]
    public static let `serverdocsTcp`: Self = "_serverdocs._tcp"
    /// Printopia Serve [Decisive_Tactics_Inc]
    public static let `printopiaTcp`: Self = "_printopia._tcp"
    /// Gestor de Acaparamiento para Pocket PCs [Juan_Carlos_Olivares]
    public static let `gapTcp`: Self = "_gap._tcp"
    /// Gestor de Acaparamiento para Pocket PCs [Juan_Carlos_Olivares]
    public static let `gapUdp`: Self = "_gap._udp"
    /// LUCIA Pareja Data Group [Alvaro_P_Dominguez]
    public static let `lpdgTcp`: Self = "_lpdg._tcp"
    /// LUCIA Pareja Data Group [Alvaro_P_Dominguez]
    public static let `lpdgUdp`: Self = "_lpdg._udp"
    /// Linux Network Block Device [Wouter_Verhelst]
    public static let `nbdTcp`: Self = "_nbd._tcp"
    /// Nuance Mobile Care Discovery [Gordon_Waddell]
    public static let `nmcDiscUdp`: Self = "_nmc-disc._udp"
    /// Helix Client/Server [Matthew_Strange][Larry_Atkin_2]
    public static let `helixTcp`: Self = "_helix._tcp"
    /// Helix Client/Server [Matthew_Strange][Larry_Atkin_2]
    public static let `helixUdp`: Self = "_helix._udp"
    /// BVEssentials HTTP API [Tri_Tech_Computers_Ltd]
    public static let `bveapiTcp`: Self = "_bveapi._tcp"
    /// BVEssentials HTTP API [Tri_Tech_Computers_Ltd]
    public static let `bveapiUdp`: Self = "_bveapi._udp"
    /// Listen port used by the Octopus Deploy Tentacle deployment agent [Octopus_Deploy_Pty_Ltd]
    public static let `octopustentacleTcp`: Self = "_octopustentacle._tcp"
    /// Auxiliary RMI Port [Eugen_Bacic_2]
    public static let `rmiauxTcp`: Self = "_rmiaux._tcp"
    /// Auxiliary RMI Port [Eugen_Bacic_2]
    public static let `rmiauxUdp`: Self = "_rmiaux._udp"
    /// IRISA [V_A_Brauner]
    public static let `irisaTcp`: Self = "_irisa._tcp"
    /// IRISA [V_A_Brauner]
    public static let `irisaUdp`: Self = "_irisa._udp"
    /// Metasys [Tobin_Schuster]
    public static let `metasysTcp`: Self = "_metasys._tcp"
    /// Metasys [Tobin_Schuster]
    public static let `metasysUdp`: Self = "_metasys._udp"
    /// Nest device-to-device and device-to-service application protocol [Nest_Labs_Inc]
    public static let `weaveTcp`: Self = "_weave._tcp"
    /// Nest device-to-device and device-to-service application protocol [Nest_Labs_Inc]
    public static let `weaveUdp`: Self = "_weave._udp"
    /// OrigoDB Server Sync Interface [Devrex_Labs]
    public static let `origoSyncTcp`: Self = "_origo-sync._tcp"
    /// NetApp Intercluster Management [Craig_Everhart]
    public static let `netappIcmgmtTcp`: Self = "_netapp-icmgmt._tcp"
    /// NetApp Intercluster Data [Craig_Everhart]
    public static let `netappIcdataTcp`: Self = "_netapp-icdata._tcp"
    /// SGI LK Licensing service [Michel_Bourget]
    public static let `sgiLkTcp`: Self = "_sgi-lk._tcp"
    /// SGI LK Licensing service [Michel_Bourget]
    public static let `sgiLkUdp`: Self = "_sgi-lk._udp"
    /// Hardware Terminals Discovery and Low-Level Communication Protocol [JANUS_spol]
    public static let `myqTermlinkUdp`: Self = "_myq-termlink._udp"
    /// Data migration facility Manager (DMF) is a browser based interface to DMF [SGI]
    public static let `sgiDmfmgrTcp`: Self = "_sgi-dmfmgr._tcp"
    /// Data migration facility (DMF) SOAP is a web server protocol to support remote access to DMF [SGI]
    public static let `sgiSoapTcp`: Self = "_sgi-soap._tcp"
    /// Viral Computing Environment (VCE) [Fred_Cohen]
    public static let `vceTcp`: Self = "_vce._tcp"
    /// Viral Computing Environment (VCE) [Fred_Cohen]
    public static let `vceUdp`: Self = "_vce._udp"
    /// DICOM [David_Clunie]
    public static let `dicomTcp`: Self = "_dicom._tcp"
    /// DICOM [David_Clunie]
    public static let `dicomUdp`: Self = "_dicom._udp"
    /// sun cacao snmp access point [Nick_Stephen]
    public static let `suncacaoSnmpTcp`: Self = "_suncacao-snmp._tcp"
    /// sun cacao snmp access point [Nick_Stephen]
    public static let `suncacaoSnmpUdp`: Self = "_suncacao-snmp._udp"
    /// sun cacao JMX-remoting access point [Nick_Stephen]
    public static let `suncacaoJmxmpTcp`: Self = "_suncacao-jmxmp._tcp"
    /// sun cacao JMX-remoting access point [Nick_Stephen]
    public static let `suncacaoJmxmpUdp`: Self = "_suncacao-jmxmp._udp"
    /// sun cacao rmi registry access point [Nick_Stephen]
    public static let `suncacaoRmiTcp`: Self = "_suncacao-rmi._tcp"
    /// sun cacao rmi registry access point [Nick_Stephen]
    public static let `suncacaoRmiUdp`: Self = "_suncacao-rmi._udp"
    /// sun cacao command-streaming access point [Nick_Stephen]
    public static let `suncacaoCsaTcp`: Self = "_suncacao-csa._tcp"
    /// sun cacao command-streaming access point [Nick_Stephen]
    public static let `suncacaoCsaUdp`: Self = "_suncacao-csa._udp"
    /// sun cacao web service access point [Nick_Stephen]
    public static let `suncacaoWebsvcTcp`: Self = "_suncacao-websvc._tcp"
    /// sun cacao web service access point [Nick_Stephen]
    public static let `suncacaoWebsvcUdp`: Self = "_suncacao-websvc._udp"
    /// Surgical Notes Security Service Discovery (SNSS) [David_Lethe]
    public static let `snssUdp`: Self = "_snss._udp"
    /// OEM cacao JMX-remoting access point [David_Sechrest]
    public static let `oemcacaoJmxmpTcp`: Self = "_oemcacao-jmxmp._tcp"
    /// Straton Runtime Programing [COPALP]
    public static let `t5StratonTcp`: Self = "_t5-straton._tcp"
    /// OEM cacao rmi registry access point [David_Sechrest]
    public static let `oemcacaoRmiTcp`: Self = "_oemcacao-rmi._tcp"
    /// OEM cacao web service access point [David_Sechrest]
    public static let `oemcacaoWebsvcTcp`: Self = "_oemcacao-websvc._tcp"
    /// smsqp [Andres_Seco_Hernande]
    public static let `smsqpTcp`: Self = "_smsqp._tcp"
    /// smsqp [Andres_Seco_Hernande]
    public static let `smsqpUdp`: Self = "_smsqp._udp"
    /// DCSL Network Backup Services [John_Reynolds]
    public static let `dcslBackupTcp`: Self = "_dcsl-backup._tcp"
    /// WiFree Service [Jose_Luis_Martin_Pei]
    public static let `wifreeTcp`: Self = "_wifree._tcp"
    /// WiFree Service [Jose_Luis_Martin_Pei]
    public static let `wifreeUdp`: Self = "_wifree._udp"
    /// Memory cache service [Trond_Norbye]
    public static let `memcacheTcp`: Self = "_memcache._tcp"
    /// Memory cache service [Trond_Norbye]
    public static let `memcacheUdp`: Self = "_memcache._udp"
    /// numerical systems messaging [Xplicit_Computing_Inc]
    public static let `xcomputeTcp`: Self = "_xcompute._tcp"
    /// numerical systems messaging [Xplicit_Computing_Inc]
    public static let `xcomputeSctp`: Self = "_xcompute._sctp"
    /// IMIP [Len_Zuvela]
    public static let `imipTcp`: Self = "_imip._tcp"
    /// IMIP [Len_Zuvela]
    public static let `imipUdp`: Self = "_imip._udp"
    /// IMIP Channels Port [Len_Zuvela_2]
    public static let `imipChannelsTcp`: Self = "_imip-channels._tcp"
    /// IMIP Channels Port [Len_Zuvela_2]
    public static let `imipChannelsUdp`: Self = "_imip-channels._udp"
    /// Arena Server Listen [Earl_Brannigan]
    public static let `arenaServerTcp`: Self = "_arena-server._tcp"
    /// Arena Server Listen [Earl_Brannigan]
    public static let `arenaServerUdp`: Self = "_arena-server._udp"
    /// ATM UHAS [Todd_Barker]
    public static let `atmUhasTcp`: Self = "_atm-uhas._tcp"
    /// ATM UHAS [Todd_Barker]
    public static let `atmUhasUdp`: Self = "_atm-uhas._udp"
    /// OpenPGP HTTP Keyserver [David_Shaw]
    public static let `hkpTcp`: Self = "_hkp._tcp"
    /// OpenPGP HTTP Keyserver [David_Shaw]
    public static let `hkpUdp`: Self = "_hkp._udp"
    /// Lenbrook Service Discovery Protocol [Lenbrook_Industries_Limited]
    public static let `lsdpUdp`: Self = "_lsdp._udp"
    /// ASG Cypress Secure Only [David_Luxford]
    public static let `asgcypresstcpsTcp`: Self = "_asgcypresstcps._tcp"
    /// Tempest Protocol Port [Francis_Cianfrocca]
    public static let `tempestPortTcp`: Self = "_tempest-port._tcp"
    /// Tempest Protocol Port [Francis_Cianfrocca]
    public static let `tempestPortUdp`: Self = "_tempest-port._udp"
    /// EMC XtremSW distributed config [EMC]
    public static let `emcXswDconfigTcp`: Self = "_emc-xsw-dconfig._tcp"
    /// H.323 Call Control Signalling Alternate [ITU-T]
    public static let `h323callsigaltTcp`: Self = "_h323callsigalt._tcp"
    /// H.323 Call Control Signalling Alternate [ITU-T]
    public static let `h323callsigaltUdp`: Self = "_h323callsigalt._udp"
    /// EMC XtremSW distributed cache [EMC]
    public static let `emcXswDcacheTcp`: Self = "_emc-xsw-dcache._tcp"
    /// EMC XtremSW distributed cache [EMC]
    public static let `emcXswDcacheUdp`: Self = "_emc-xsw-dcache._udp"
    /// Intrepid SSL [Robert_Eden]
    public static let `intrepidSslTcp`: Self = "_intrepid-ssl._tcp"
    /// Intrepid SSL [Robert_Eden]
    public static let `intrepidSslUdp`: Self = "_intrepid-ssl._udp"
    /// LanSchool [Stoneware_Inc]
    public static let `lanschoolTcp`: Self = "_lanschool._tcp"
    /// Lanschool Multipoint [Stoneware_Inc]
    public static let `lanschoolMptUdp`: Self = "_lanschool-mpt._udp"
    /// X2E Xoraya Multichannel protocol [Hannes_K]
    public static let `xorayaTcp`: Self = "_xoraya._tcp"
    /// X2E Xoraya Multichannel protocol [Hannes_K]
    public static let `xorayaUdp`: Self = "_xoraya._udp"
    /// X2E service discovery protocol [Hannes_K]
    public static let `x2eDiscUdp`: Self = "_x2e-disc._udp"
    /// SysInfo Service Protocol [Mike_Cooper]
    public static let `sysinfoSpTcp`: Self = "_sysinfo-sp._tcp"
    /// SysInfo Service Protocol [Mike_Cooper]
    public static let `sysinfoSpUdp`: Self = "_sysinfo-sp._udp"
    /// TiBS Service [Teradactyl_LLC]
    public static let `tibsdTcp`: Self = "_tibsd._tcp"
    /// WorldMailExpress [Greg_Foutz]
    public static let `wmereceivingSctp`: Self = "_wmereceiving._sctp"
    /// WorldMailExpress [Greg_Foutz]
    public static let `wmedistributionSctp`: Self = "_wmedistribution._sctp"
    /// WorldMailExpress [Greg_Foutz]
    public static let `wmereportingSctp`: Self = "_wmereporting._sctp"
    /// IBM Enterprise Extender SNA XID Exchange [Eugene_Cox]
    public static let `entextxidTcp`: Self = "_entextxid._tcp"
    /// IBM Enterprise Extender SNA XID Exchange [Eugene_Cox]
    public static let `entextxidUdp`: Self = "_entextxid._udp"
    /// IBM Enterprise Extender SNA COS Network Priority [Eugene_Cox]
    public static let `entextnetwkTcp`: Self = "_entextnetwk._tcp"
    /// IBM Enterprise Extender SNA COS Network Priority [Eugene_Cox]
    public static let `entextnetwkUdp`: Self = "_entextnetwk._udp"
    /// IBM Enterprise Extender SNA COS High Priority [Eugene_Cox]
    public static let `entexthighTcp`: Self = "_entexthigh._tcp"
    /// IBM Enterprise Extender SNA COS High Priority [Eugene_Cox]
    public static let `entexthighUdp`: Self = "_entexthigh._udp"
    /// IBM Enterprise Extender SNA COS Medium Priority [Eugene_Cox]
    public static let `entextmedTcp`: Self = "_entextmed._tcp"
    /// IBM Enterprise Extender SNA COS Medium Priority [Eugene_Cox]
    public static let `entextmedUdp`: Self = "_entextmed._udp"
    /// IBM Enterprise Extender SNA COS Low Priority [Eugene_Cox]
    public static let `entextlowTcp`: Self = "_entextlow._tcp"
    /// IBM Enterprise Extender SNA COS Low Priority [Eugene_Cox]
    public static let `entextlowUdp`: Self = "_entextlow._udp"
    /// DBISAM Database Server - Regular [Tim_Young]
    public static let `dbisamserver1Tcp`: Self = "_dbisamserver1._tcp"
    /// DBISAM Database Server - Regular [Tim_Young]
    public static let `dbisamserver1Udp`: Self = "_dbisamserver1._udp"
    /// DBISAM Database Server - Admin [Tim_Young]
    public static let `dbisamserver2Tcp`: Self = "_dbisamserver2._tcp"
    /// DBISAM Database Server - Admin [Tim_Young]
    public static let `dbisamserver2Udp`: Self = "_dbisamserver2._udp"
    /// Accuracer Database System Server [Alexander_V_Ivanov]
    public static let `accuracerTcp`: Self = "_accuracer._tcp"
    /// Accuracer Database System Server [Alexander_V_Ivanov]
    public static let `accuracerUdp`: Self = "_accuracer._udp"
    /// Accuracer Database System Admin [Alexander_V_Ivanov]
    public static let `accuracerDbmsTcp`: Self = "_accuracer-dbms._tcp"
    /// Accuracer Database System Admin [Alexander_V_Ivanov]
    public static let `accuracerDbmsUdp`: Self = "_accuracer-dbms._udp"
    /// Green Hills VPN [Green_Hills_Software]
    public static let `ghvpnUdp`: Self = "_ghvpn._udp"
    /// ElevateDB Server [Tim_Young]
    public static let `edbsrvrTcp`: Self = "_edbsrvr._tcp"
    /// Vipera Messaging Service [Silvano_Maffeis_2]
    public static let `viperaTcp`: Self = "_vipera._tcp"
    /// Vipera Messaging Service [Silvano_Maffeis_2]
    public static let `viperaUdp`: Self = "_vipera._udp"
    /// Vipera Messaging Service over SSL Communication [Silvano_Maffeis_2]
    public static let `viperaSslTcp`: Self = "_vipera-ssl._tcp"
    /// Vipera Messaging Service over SSL Communication [Silvano_Maffeis_2]
    public static let `viperaSslUdp`: Self = "_vipera-ssl._udp"
    /// RETS over SSL [Jeremy_Crawford]
    public static let `retsSslTcp`: Self = "_rets-ssl._tcp"
    /// RETS over SSL [Jeremy_Crawford]
    public static let `retsSslUdp`: Self = "_rets-ssl._udp"
    /// NuPaper Session Service [David_Warden_2]
    public static let `nupaperSsTcp`: Self = "_nupaper-ss._tcp"
    /// NuPaper Session Service [David_Warden_2]
    public static let `nupaperSsUdp`: Self = "_nupaper-ss._udp"
    /// CA Web Access Service [Jon_Press]
    public static let `cawasTcp`: Self = "_cawas._tcp"
    /// CA Web Access Service [Jon_Press]
    public static let `cawasUdp`: Self = "_cawas._udp"
    /// HiveP [Dick_Augustsson]
    public static let `hivepTcp`: Self = "_hivep._tcp"
    /// HiveP [Dick_Augustsson]
    public static let `hivepUdp`: Self = "_hivep._udp"
    /// LinoGrid Engine [Frans_Lundberg]
    public static let `linogridengineTcp`: Self = "_linogridengine._tcp"
    /// LinoGrid Engine [Frans_Lundberg]
    public static let `linogridengineUdp`: Self = "_linogridengine._udp"
    /// Remote Administration Daemon (RAD) is a system service that offers secure, remote, programmatic access to Solaris system configuration and run-time state [Oracle]
    public static let `radsTcp`: Self = "_rads._tcp"
    /// Warehouse Monitoring Syst SSS [Craig_Steffen]
    public static let `warehouseSssTcp`: Self = "_warehouse-sss._tcp"
    /// Warehouse Monitoring Syst SSS [Craig_Steffen]
    public static let `warehouseSssUdp`: Self = "_warehouse-sss._udp"
    /// Warehouse Monitoring Syst [Craig_Steffen]
    public static let `warehouseTcp`: Self = "_warehouse._tcp"
    /// Warehouse Monitoring Syst [Craig_Steffen]
    public static let `warehouseUdp`: Self = "_warehouse._udp"
    /// Italk Chat System [Takayuki_Ito]
    public static let `italkTcp`: Self = "_italk._tcp"
    /// Italk Chat System [Takayuki_Ito]
    public static let `italkUdp`: Self = "_italk._udp"
    /// Carbonite Server Replication Control [Open_Text_Corporation]
    public static let `carbReplCtrlTcp`: Self = "_carb-repl-ctrl._tcp"
    /// tsaf port [Andreas_Fehr]
    public static let `tsafTcp`: Self = "_tsaf._tcp"
    /// tsaf port [Andreas_Fehr]
    public static let `tsafUdp`: Self = "_tsaf._udp"
    /// control port for the netperf benchmark [netperf.org]
    public static let `netperfTcp`: Self = "_netperf._tcp"
    /// I-ZIPQD [Chuck_Runquist]
    public static let `iZipqdTcp`: Self = "_i-zipqd._tcp"
    /// I-ZIPQD [Chuck_Runquist]
    public static let `iZipqdUdp`: Self = "_i-zipqd._udp"
    /// Black Crow Software application logging [Ramindur_Singh]
    public static let `bcslogcTcp`: Self = "_bcslogc._tcp"
    /// Black Crow Software application logging [Ramindur_Singh]
    public static let `bcslogcUdp`: Self = "_bcslogc._udp"
    /// R&S Proxy Installation Assistant Service [Guido_Kiener]
    public static let `rsPiasTcp`: Self = "_rs-pias._tcp"
    /// R&S Proxy Installation Assistant Service [Guido_Kiener]
    public static let `rsPiasUdp`: Self = "_rs-pias._udp"
    /// EMC Virtual CAS Service 
    public static let `emcVcasTcpTcp`: Self = "_emc-vcas-tcp._tcp"
    /// EMV Virtual CAS Service Discovery [Mark_O_Connell]
    public static let `emcVcasUdpUdp`: Self = "_emc-vcas-udp._udp"
    /// PowWow Client [Paul_K_Peterson]
    public static let `powwowClientTcp`: Self = "_powwow-client._tcp"
    /// PowWow Client [Paul_K_Peterson]
    public static let `powwowClientUdp`: Self = "_powwow-client._udp"
    /// PowWow Server [Paul_K_Peterson]
    public static let `powwowServerTcp`: Self = "_powwow-server._tcp"
    /// PowWow Server [Paul_K_Peterson]
    public static let `powwowServerUdp`: Self = "_powwow-server._udp"
    /// DoIP Data [Joerg_Schneider]
    public static let `doipDataTcp`: Self = "_doip-data._tcp"
    /// DoIP Discovery [Joerg_Schneider]
    public static let `doipDiscUdp`: Self = "_doip-disc._udp"
    /// BPRD Protocol (VERITAS NetBackup) [Jeff_Holmbeck]
    public static let `bprdTcp`: Self = "_bprd._tcp"
    /// BPRD Protocol (VERITAS NetBackup) [Jeff_Holmbeck]
    public static let `bprdUdp`: Self = "_bprd._udp"
    /// BPDBM Protocol (VERITAS NetBackup) [Jeff_Holmbeck]
    public static let `bpdbmTcp`: Self = "_bpdbm._tcp"
    /// BPDBM Protocol (VERITAS NetBackup) [Jeff_Holmbeck]
    public static let `bpdbmUdp`: Self = "_bpdbm._udp"
    /// BP Java MSVC Protocol [Tim_Schmidt]
    public static let `bpjavaMsvcTcp`: Self = "_bpjava-msvc._tcp"
    /// BP Java MSVC Protocol [Tim_Schmidt]
    public static let `bpjavaMsvcUdp`: Self = "_bpjava-msvc._udp"
    /// Veritas Network Utility [Jeff_Holmbeck]
    public static let `vnetdTcp`: Self = "_vnetd._tcp"
    /// Veritas Network Utility [Jeff_Holmbeck]
    public static let `vnetdUdp`: Self = "_vnetd._udp"
    /// VERITAS NetBackup [Jeff_Holmbeck]
    public static let `bpcdTcp`: Self = "_bpcd._tcp"
    /// VERITAS NetBackup [Jeff_Holmbeck]
    public static let `bpcdUdp`: Self = "_bpcd._udp"
    /// VOPIED Protocol [Jeff_Holmbeck]
    public static let `vopiedTcp`: Self = "_vopied._tcp"
    /// VOPIED Protocol [Jeff_Holmbeck]
    public static let `vopiedUdp`: Self = "_vopied._udp"
    /// NetBackup Database [Pat_Tovo]
    public static let `nbdbTcp`: Self = "_nbdb._tcp"
    /// NetBackup Database [Pat_Tovo]
    public static let `nbdbUdp`: Self = "_nbdb._udp"
    /// Veritas-nomdb [Clayton_Haapala]
    public static let `nomdbTcp`: Self = "_nomdb._tcp"
    /// Veritas-nomdb [Clayton_Haapala]
    public static let `nomdbUdp`: Self = "_nomdb._udp"
    /// DSMCC Config [Tim_Addington]
    public static let `dsmccConfigTcp`: Self = "_dsmcc-config._tcp"
    /// DSMCC Config [Tim_Addington]
    public static let `dsmccConfigUdp`: Self = "_dsmcc-config._udp"
    /// DSMCC Session Messages [Tim_Addington]
    public static let `dsmccSessionTcp`: Self = "_dsmcc-session._tcp"
    /// DSMCC Session Messages [Tim_Addington]
    public static let `dsmccSessionUdp`: Self = "_dsmcc-session._udp"
    /// DSMCC Pass-Thru Messages [Tim_Addington]
    public static let `dsmccPassthruTcp`: Self = "_dsmcc-passthru._tcp"
    /// DSMCC Pass-Thru Messages [Tim_Addington]
    public static let `dsmccPassthruUdp`: Self = "_dsmcc-passthru._udp"
    /// DSMCC Download Protocol [Tim_Addington]
    public static let `dsmccDownloadTcp`: Self = "_dsmcc-download._tcp"
    /// DSMCC Download Protocol [Tim_Addington]
    public static let `dsmccDownloadUdp`: Self = "_dsmcc-download._udp"
    /// DSMCC Channel Change Protocol [Tim_Addington]
    public static let `dsmccCcpTcp`: Self = "_dsmcc-ccp._tcp"
    /// DSMCC Channel Change Protocol [Tim_Addington]
    public static let `dsmccCcpUdp`: Self = "_dsmcc-ccp._udp"
    /// Blackmagic Design Streaming Server [Sam_Vaughan]
    public static let `bmdssTcp`: Self = "_bmdss._tcp"
    /// Certificate Management and Issuing [A-Trust_GmbH]
    public static let `aTrustRpcTcp`: Self = "_a-trust-rpc._tcp"
    /// Ultimate Control communication protocol [NEGU_Soft]
    public static let `ucontrolTcp`: Self = "_ucontrol._tcp"
    /// Ultimate Control communication protocol [NEGU_Soft]
    public static let `ucontrolUdp`: Self = "_ucontrol._udp"
    /// D-TA SYSTEMS [Alexis_Bose]
    public static let `dtaSystemsTcp`: Self = "_dta-systems._tcp"
    /// D-TA SYSTEMS [Alexis_Bose]
    public static let `dtaSystemsUdp`: Self = "_dta-systems._udp"
    /// MedEvolve Port Requester [Jon_Robertson]
    public static let `medevolveTcp`: Self = "_medevolve._tcp"
    /// SCOTTY High-Speed Filetransfer [Patrick_Verbeek]
    public static let `scottyFtTcp`: Self = "_scotty-ft._tcp"
    /// SCOTTY High-Speed Filetransfer [Patrick_Verbeek]
    public static let `scottyFtUdp`: Self = "_scotty-ft._udp"
    /// SUA [Miguel_Angel_Garcia]
    public static let `suaTcp`: Self = "_sua._tcp"
    /// De-Registered [Miguel_Angel_Garcia]
    public static let `suaUdp`: Self = "_sua._udp"
    /// SUA [Miguel_Angel_Garcia]
    public static let `suaSctp`: Self = "_sua._sctp"
    /// Discovery of a SCOTTY hardware codec board [SCOTTY_Group_SE]
    public static let `scottyDiscUdp`: Self = "_scotty-disc._udp"
    /// sage Best! Config Server 1 [Christian_Rubach]
    public static let `sageBestCom1Tcp`: Self = "_sage-best-com1._tcp"
    /// sage Best! Config Server 1 [Christian_Rubach]
    public static let `sageBestCom1Udp`: Self = "_sage-best-com1._udp"
    /// sage Best! Config Server 2 [Christian_Rubach]
    public static let `sageBestCom2Tcp`: Self = "_sage-best-com2._tcp"
    /// sage Best! Config Server 2 [Christian_Rubach]
    public static let `sageBestCom2Udp`: Self = "_sage-best-com2._udp"
    /// VCS Application [Ming_Xu]
    public static let `vcsAppTcp`: Self = "_vcs-app._tcp"
    /// VCS Application [Ming_Xu]
    public static let `vcsAppUdp`: Self = "_vcs-app._udp"
    /// IceWall Cert Protocol [Tsutomu_Fujinami]
    public static let `icppTcp`: Self = "_icpp._tcp"
    /// IceWall Cert Protocol [Tsutomu_Fujinami]
    public static let `icppUdp`: Self = "_icpp._udp"
    /// IceWall Cert Protocol over TLS [Kenta_Kambara]
    public static let `icppsTcp`: Self = "_icpps._tcp"
    /// GCM Application [Ming_Xu]
    public static let `gcmAppTcp`: Self = "_gcm-app._tcp"
    /// GCM Application [Ming_Xu]
    public static let `gcmAppUdp`: Self = "_gcm-app._udp"
    /// Veritas Traffic Director [Sameer_Deokule]
    public static let `vrtsTddTcp`: Self = "_vrts-tdd._tcp"
    /// Veritas Traffic Director [Sameer_Deokule]
    public static let `vrtsTddUdp`: Self = "_vrts-tdd._udp"
    /// Veritas Cluster Server Command Server [Anand_Bhalerao]
    public static let `vcscmdTcp`: Self = "_vcscmd._tcp"
    /// Veritas Application Director [Rajeev_Verma]
    public static let `vadTcp`: Self = "_vad._tcp"
    /// Veritas Application Director [Rajeev_Verma]
    public static let `vadUdp`: Self = "_vad._udp"
    /// Fencing Server [Mayank_Vasa]
    public static let `cpsTcp`: Self = "_cps._tcp"
    /// Fencing Server [Mayank_Vasa]
    public static let `cpsUdp`: Self = "_cps._udp"
    /// CA eTrust Web Update Service [Robert_Ciochon]
    public static let `caWebUpdateTcp`: Self = "_ca-web-update._tcp"
    /// CA eTrust Web Update Service [Robert_Ciochon]
    public static let `caWebUpdateUdp`: Self = "_ca-web-update._udp"
    /// xpra network protocol [Xpra]
    public static let `xpraTcp`: Self = "_xpra._tcp"
    /// hde-lcesrvr-1 [Horizon_Digital_Ente]
    public static let `hdeLcesrvr1Tcp`: Self = "_hde-lcesrvr-1._tcp"
    /// hde-lcesrvr-1 [Horizon_Digital_Ente]
    public static let `hdeLcesrvr1Udp`: Self = "_hde-lcesrvr-1._udp"
    /// hde-lcesrvr-2 [Horizon_Digital_Ente]
    public static let `hdeLcesrvr2Tcp`: Self = "_hde-lcesrvr-2._tcp"
    /// hde-lcesrvr-2 [Horizon_Digital_Ente]
    public static let `hdeLcesrvr2Udp`: Self = "_hde-lcesrvr-2._udp"
    /// Hypack Data Aquisition [HYPACK_Inc]
    public static let `hydapTcp`: Self = "_hydap._tcp"
    /// Hypack Data Aquisition [HYPACK_Inc]
    public static let `hydapUdp`: Self = "_hydap._udp"
    /// Open Network Environment TLS [Cisco_3]
    public static let `onepTlsTcp`: Self = "_onep-tls._tcp"
    /// v2g Supply Equipment Communication Controller Discovery Protocol [Holger_Lochner]
    public static let `v2gSeccUdp`: Self = "_v2g-secc._udp"
    /// XPilot Contact Port [Bert_Gijsbers]
    public static let `xpilotTcp`: Self = "_xpilot._tcp"
    /// XPilot Contact Port [Bert_Gijsbers]
    public static let `xpilotUdp`: Self = "_xpilot._udp"
    /// Cisco Stateful NAT [Kaushik_Biswas]
    public static let `ciscoSnatTcp`: Self = "_cisco-snat._tcp"
    /// Cisco Stateful NAT [Kaushik_Biswas]
    public static let `ciscoSnatUdp`: Self = "_cisco-snat._udp"
    /// Backup Express Restore Server [Catalogic_Software_Inc]
    public static let `bexXrTcp`: Self = "_bex-xr._tcp"
    /// Backup Express Restore Server [Catalogic_Software_Inc]
    public static let `bexXrUdp`: Self = "_bex-xr._udp"
    /// Picture Transfer Protocol [Petronel_Bigioi]
    public static let `ptpTcp`: Self = "_ptp._tcp"
    /// Picture Transfer Protocol [Petronel_Bigioi]
    public static let `ptpUdp`: Self = "_ptp._udp"
    /// ProGrammar Enterprise [Norman_Wilson]
    public static let `programmarTcp`: Self = "_programmar._tcp"
    /// Administration Server Access [Mark_Davidson]
    public static let `fmsasTcp`: Self = "_fmsas._tcp"
    /// Administration Server Connector [Mark_Davidson]
    public static let `fmsasconTcp`: Self = "_fmsascon._tcp"
    /// GoodSync Mediation Service [Vadim_Maslov]
    public static let `gsmsTcp`: Self = "_gsms._tcp"
    /// Automation and Control by REGULACE.ORG [Ing_Tomas_Halabala]
    public static let `alfinUdp`: Self = "_alfin._udp"
    /// Filemaker Java Web Publishing Core [Robert_Parks]
    public static let `jwpcTcp`: Self = "_jwpc._tcp"
    /// Filemaker Java Web Publishing Core Binary [Robert_Parks]
    public static let `jwpcBinTcp`: Self = "_jwpc-bin._tcp"
    /// Solaris SEA Port [Dana_Porter]
    public static let `sunSeaPortTcp`: Self = "_sun-sea-port._tcp"
    /// Solaris SEA Port [Dana_Porter]
    public static let `sunSeaPortUdp`: Self = "_sun-sea-port._udp"
    /// Solaris Audit - secure remote audit log [Jan_Friedel]
    public static let `solarisAuditTcp`: Self = "_solaris-audit._tcp"
    /// etb4j [Christopher_R_Smith]
    public static let `etb4jTcp`: Self = "_etb4j._tcp"
    /// etb4j [Christopher_R_Smith]
    public static let `etb4jUdp`: Self = "_etb4j._udp"
    /// Policy Distribute, Update Notification [Diane_I_Shannon]
    public static let `pduncsTcp`: Self = "_pduncs._tcp"
    /// Policy Distribute, Update Notification [Diane_I_Shannon]
    public static let `pduncsUdp`: Self = "_pduncs._udp"
    /// Policy definition and update management [Diane_I_Shannon]
    public static let `pdefmnsTcp`: Self = "_pdefmns._tcp"
    /// Policy definition and update management [Diane_I_Shannon]
    public static let `pdefmnsUdp`: Self = "_pdefmns._udp"
    /// Network Serial Extension Ports One [Michael_J_Hoy]
    public static let `netserialext1Tcp`: Self = "_netserialext1._tcp"
    /// Network Serial Extension Ports One [Michael_J_Hoy]
    public static let `netserialext1Udp`: Self = "_netserialext1._udp"
    /// Network Serial Extension Ports Two [Michael_J_Hoy]
    public static let `netserialext2Tcp`: Self = "_netserialext2._tcp"
    /// Network Serial Extension Ports Two [Michael_J_Hoy]
    public static let `netserialext2Udp`: Self = "_netserialext2._udp"
    /// Network Serial Extension Ports Three [Michael_J_Hoy]
    public static let `netserialext3Tcp`: Self = "_netserialext3._tcp"
    /// Network Serial Extension Ports Three [Michael_J_Hoy]
    public static let `netserialext3Udp`: Self = "_netserialext3._udp"
    /// Network Serial Extension Ports Four [Michael_J_Hoy]
    public static let `netserialext4Tcp`: Self = "_netserialext4._tcp"
    /// Network Serial Extension Ports Four [Michael_J_Hoy]
    public static let `netserialext4Udp`: Self = "_netserialext4._udp"
    /// Connected Corp [Nicole_C_Ouellette]
    public static let `connectedTcp`: Self = "_connected._tcp"
    /// Connected Corp [Nicole_C_Ouellette]
    public static let `connectedUdp`: Self = "_connected._udp"
    /// Reliable Datagram Sockets [Oracle_7]
    public static let `rdgsTcp`: Self = "_rdgs._tcp"
    /// X509 Objects Management Service [Francis_GASCHET]
    public static let `xomsTcp`: Self = "_xoms._tcp"
    /// Reliable multipath data transport for high latencies [Bridgeworks]
    public static let `axonTunnelTcp`: Self = "_axon-tunnel._tcp"
    /// Vidder Tunnel Protocol [Vidder_Inc]
    public static let `vtpUdp`: Self = "_vtp._udp"
    /// This server provides callable services to mainframe External Security Managers from any TCP/IP platform [Broadcom]
    public static let `cadsisvrTcp`: Self = "_cadsisvr._tcp"
    /// Newbay Mobile Client Update Service [Srinivasa_Nayudu]
    public static let `newbaySncMcTcp`: Self = "_newbay-snc-mc._tcp"
    /// Newbay Mobile Client Update Service [Srinivasa_Nayudu]
    public static let `newbaySncMcUdp`: Self = "_newbay-snc-mc._udp"
    /// Simple Generic Client Interface Protocol [John_Aquilino]
    public static let `sgcipTcp`: Self = "_sgcip._tcp"
    /// Simple Generic Client Interface Protocol [John_Aquilino]
    public static let `sgcipUdp`: Self = "_sgcip._udp"
    /// INTEL-RCI-MP [Jane_Dashevsky]
    public static let `intelRciMpTcp`: Self = "_intel-rci-mp._tcp"
    /// INTEL-RCI-MP [Jane_Dashevsky]
    public static let `intelRciMpUdp`: Self = "_intel-rci-mp._udp"
    /// Intel(R) AMT SOAP/HTTP [David_T_Hines]
    public static let `amtSoapHttpTcp`: Self = "_amt-soap-http._tcp"
    /// Intel(R) AMT SOAP/HTTP [David_T_Hines]
    public static let `amtSoapHttpUdp`: Self = "_amt-soap-http._udp"
    /// Intel(R) AMT SOAP/HTTPS [David_T_Hines]
    public static let `amtSoapHttpsTcp`: Self = "_amt-soap-https._tcp"
    /// Intel(R) AMT SOAP/HTTPS [David_T_Hines]
    public static let `amtSoapHttpsUdp`: Self = "_amt-soap-https._udp"
    /// Intel(R) AMT Redirection/TCP [Nimrod_Diamant]
    public static let `amtRedirTcpTcp`: Self = "_amt-redir-tcp._tcp"
    /// Intel(R) AMT Redirection/TCP [Nimrod_Diamant]
    public static let `amtRedirTcpUdp`: Self = "_amt-redir-tcp._udp"
    /// Intel(R) AMT Redirection/TLS [Nimrod_Diamant]
    public static let `amtRedirTlsTcp`: Self = "_amt-redir-tls._tcp"
    /// Intel(R) AMT Redirection/TLS [Nimrod_Diamant]
    public static let `amtRedirTlsUdp`: Self = "_amt-redir-tls._udp"
    ///  
    public static let `isodeDuaTcp`: Self = "_isode-dua._tcp"
    ///  
    public static let `isodeDuaUdp`: Self = "_isode-dua._udp"
    /// Plan 9 cpu port [Ronald_G_Minnich]
    public static let `ncpuTcp`: Self = "_ncpu._tcp"
    /// Vestas Data Layer Protocol [Vestas_Wind_Systems]
    public static let `vestasdlpTcp`: Self = "_vestasdlp._tcp"
    /// Sounds Virtual [Richard_Snider]
    public static let `soundsvirtualTcp`: Self = "_soundsvirtual._tcp"
    /// Sounds Virtual [Richard_Snider]
    public static let `soundsvirtualUdp`: Self = "_soundsvirtual._udp"
    /// Chipper [Ronald_Jimmink]
    public static let `chipperTcp`: Self = "_chipper._tcp"
    /// Chipper [Ronald_Jimmink]
    public static let `chipperUdp`: Self = "_chipper._udp"
    /// IEEE 1722 Transport Protocol for Time Sensitive Applications [Transport_Protocol_for_Time-Sensitive_Networking_TG]
    public static let `avtpTcp`: Self = "_avtp._tcp"
    /// IEEE 1722 Transport Protocol for Time Sensitive Applications [Transport_Protocol_for_Time-Sensitive_Networking_TG]
    public static let `avtpUdp`: Self = "_avtp._udp"
    /// IEEE 1722.1 AVB Discovery, Enumeration, Connection management, and Control [IEEE_1722_1]
    public static let `avdeccTcp`: Self = "_avdecc._tcp"
    /// IEEE 1722.1 AVB Discovery, Enumeration, Connection management, and Control [IEEE_1722_1]
    public static let `avdeccUdp`: Self = "_avdecc._udp"
    /// Control Plane Synchronization Protocol (SPSP) [Randall_Stewart_2]
    public static let `cpspUdp`: Self = "_cpsp._udp"
    /// ISA100 GCI is a service utilizing a common interface between an ISA100 Wireless gateway and a client application [ISA100_Wireless_Compliance_Institute]
    public static let `isa100GciTcp`: Self = "_isa100-gci._tcp"
    /// Train Realtime Data Protocol (TRDP) Process Data [IEC_Central_Office]
    public static let `trdpPdUdp`: Self = "_trdp-pd._udp"
    /// Train Realtime Data Protocol (TRDP) Message Data [IEC_Central_Office]
    public static let `trdpMdTcp`: Self = "_trdp-md._tcp"
    /// Train Realtime Data Protocol (TRDP) Message Data [IEC_Central_Office]
    public static let `trdpMdUdp`: Self = "_trdp-md._udp"
    /// Integrius Secure Tunnel Protocol [Christian_Klemetsson]
    public static let `integriusStpTcp`: Self = "_integrius-stp._tcp"
    /// Integrius Secure Tunnel Protocol [Christian_Klemetsson]
    public static let `integriusStpUdp`: Self = "_integrius-stp._udp"
    /// SSH Tectia Manager [Ville_Laurikari]
    public static let `sshMgmtTcp`: Self = "_ssh-mgmt._tcp"
    /// SSH Tectia Manager [Ville_Laurikari]
    public static let `sshMgmtUdp`: Self = "_ssh-mgmt._udp"
    /// Dropbox LanSync Protocol [Paul_Bohm]
    public static let `dbLspTcp`: Self = "_db-lsp._tcp"
    /// Dropbox LanSync Discovery [Paul_Bohm]
    public static let `dbLspDiscUdp`: Self = "_db-lsp-disc._udp"
    /// Ailith management of routers [Thomas_Boje]
    public static let `ailithTcp`: Self = "_ailith._tcp"
    /// Eclipse Aviation [William_Schmidt]
    public static let `eaTcp`: Self = "_ea._tcp"
    /// Eclipse Aviation [William_Schmidt]
    public static let `eaUdp`: Self = "_ea._udp"
    /// Encap. ZigBee Packets [Fred_Fierling]
    public static let `zepTcp`: Self = "_zep._tcp"
    /// Encap. ZigBee Packets [Fred_Fierling]
    public static let `zepUdp`: Self = "_zep._udp"
    /// ZigBee IP Transport Service [Chris_Herzog]
    public static let `zigbeeIpTcp`: Self = "_zigbee-ip._tcp"
    /// ZigBee IP Transport Service [Chris_Herzog]
    public static let `zigbeeIpUdp`: Self = "_zigbee-ip._udp"
    /// ZigBee IP Transport Secure Service [Chris_Herzog]
    public static let `zigbeeIpsTcp`: Self = "_zigbee-ips._tcp"
    /// ZigBee IP Transport Secure Service [Chris_Herzog]
    public static let `zigbeeIpsUdp`: Self = "_zigbee-ips._udp"
    /// SolarWinds Orion [Joel_Dolisy]
    public static let `swOrionTcp`: Self = "_sw-orion._tcp"
    /// Beckman Instruments, Inc. [R_L_Meyering]
    public static let `biimenuTcp`: Self = "_biimenu._tcp"
    /// Beckman Instruments, Inc. [R_L_Meyering]
    public static let `biimenuUdp`: Self = "_biimenu._udp"
    /// RAD PDF Service [Christopher_Truxaw]
    public static let `radpdfTcp`: Self = "_radpdf._tcp"
    /// z/OS Resource Access Control Facility [Bruce_Wells]
    public static let `racfTcp`: Self = "_racf._tcp"
    /// OPSEC CVP [Alon_Kantor]
    public static let `opsecCvpTcp`: Self = "_opsec-cvp._tcp"
    /// OPSEC CVP [Alon_Kantor]
    public static let `opsecCvpUdp`: Self = "_opsec-cvp._udp"
    /// OPSEC UFP [Alon_Kantor]
    public static let `opsecUfpTcp`: Self = "_opsec-ufp._tcp"
    /// OPSEC UFP [Alon_Kantor]
    public static let `opsecUfpUdp`: Self = "_opsec-ufp._udp"
    /// OPSEC SAM [Alon_Kantor]
    public static let `opsecSamTcp`: Self = "_opsec-sam._tcp"
    /// OPSEC SAM [Alon_Kantor]
    public static let `opsecSamUdp`: Self = "_opsec-sam._udp"
    /// OPSEC LEA [Alon_Kantor]
    public static let `opsecLeaTcp`: Self = "_opsec-lea._tcp"
    /// OPSEC LEA [Alon_Kantor]
    public static let `opsecLeaUdp`: Self = "_opsec-lea._udp"
    /// OPSEC OMI [Alon_Kantor]
    public static let `opsecOmiTcp`: Self = "_opsec-omi._tcp"
    /// OPSEC OMI [Alon_Kantor]
    public static let `opsecOmiUdp`: Self = "_opsec-omi._udp"
    /// Occupational Health SC [David_Fudge]
    public static let `ohscTcp`: Self = "_ohsc._tcp"
    /// Occupational Health Sc [David_Fudge]
    public static let `ohscUdp`: Self = "_ohsc._udp"
    /// OPSEC ELA [Alon_Kantor]
    public static let `opsecElaTcp`: Self = "_opsec-ela._tcp"
    /// OPSEC ELA [Alon_Kantor]
    public static let `opsecElaUdp`: Self = "_opsec-ela._udp"
    /// Check Point RTM [Dudi_Hazan]
    public static let `checkpointRtmTcp`: Self = "_checkpoint-rtm._tcp"
    /// Check Point RTM [Dudi_Hazan]
    public static let `checkpointRtmUdp`: Self = "_checkpoint-rtm._udp"
    /// Checkpoint router monitoring [Check_Point_Software]
    public static let `iclidTcp`: Self = "_iclid._tcp"
    /// Checkpoint router state backup [Check_Point_Software]
    public static let `clusterxlTcp`: Self = "_clusterxl._tcp"
    /// GV NetConfig Service [Scott_Libert]
    public static let `gvPfTcp`: Self = "_gv-pf._tcp"
    /// GV NetConfig Service [Scott_Libert]
    public static let `gvPfUdp`: Self = "_gv-pf._udp"
    /// AC Cluster [Lisa_Zhong]
    public static let `acClusterTcp`: Self = "_ac-cluster._tcp"
    /// AC Cluster [Lisa_Zhong]
    public static let `acClusterUdp`: Self = "_ac-cluster._udp"
    /// HeyThings Device communicate service [Guangdong_OPPO_Mobile_Telecommunications_Corp_Ltd]
    public static let `heythingsUdp`: Self = "_heythings._udp"
    /// Reliable Datagram Service [Andy_Grover]
    public static let `rdsIbTcp`: Self = "_rds-ib._tcp"
    /// Reliable Datagram Service [Andy_Grover]
    public static let `rdsIbUdp`: Self = "_rds-ib._udp"
    /// Reliable Datagram Service over IP [Andy_Grover]
    public static let `rdsIpTcp`: Self = "_rds-ip._tcp"
    /// Reliable Datagram Service over IP [Andy_Grover]
    public static let `rdsIpUdp`: Self = "_rds-ip._udp"
    /// Manufacturing Execution Systems Mesh Communication [Van_Doren_MES]
    public static let `vdmmeshTcp`: Self = "_vdmmesh._tcp"
    /// Manufacturing Execution Systems Mesh Communication [Van_Doren_MES]
    public static let `vdmmeshDiscUdp`: Self = "_vdmmesh-disc._udp"
    /// IQue Protocol [Avi_Drissman]
    public static let `iqueTcp`: Self = "_ique._tcp"
    /// IQue Protocol [Avi_Drissman]
    public static let `iqueUdp`: Self = "_ique._udp"
    /// Infotos [Marcel_Dube]
    public static let `infotosTcp`: Self = "_infotos._tcp"
    /// Infotos [Marcel_Dube]
    public static let `infotosUdp`: Self = "_infotos._udp"
    /// APCNECMP [Michael_Yip]
    public static let `apcNecmpTcp`: Self = "_apc-necmp._tcp"
    /// APCNECMP [Michael_Yip]
    public static let `apcNecmpUdp`: Self = "_apc-necmp._udp"
    /// iGrid Server [Massimo_Cafaro]
    public static let `igridTcp`: Self = "_igrid._tcp"
    /// iGrid Server [Massimo_Cafaro]
    public static let `igridUdp`: Self = "_igrid._udp"
    /// Scintilla protocol for device services [Veejansh_Inc]
    public static let `scintillaTcp`: Self = "_scintilla._tcp"
    /// Scintilla protocol for device services [Veejansh_Inc]
    public static let `scintillaUdp`: Self = "_scintilla._udp"
    /// J-Link TCP/IP Protocol [SEGGER]
    public static let `jLinkTcp`: Self = "_j-link._tcp"
    /// OPSEC UAA [Reuven_Harrison]
    public static let `opsecUaaTcp`: Self = "_opsec-uaa._tcp"
    /// OPSEC UAA [Reuven_Harrison]
    public static let `opsecUaaUdp`: Self = "_opsec-uaa._udp"
    /// UserAuthority SecureAgent [Reuven_Harrison_2]
    public static let `uaSecureagentTcp`: Self = "_ua-secureagent._tcp"
    /// UserAuthority SecureAgent [Reuven_Harrison_2]
    public static let `uaSecureagentUdp`: Self = "_ua-secureagent._udp"
    /// Client Connection Management and Data Exchange Service [Softvise_GmbH]
    public static let `coraTcp`: Self = "_cora._tcp"
    /// Discovery for Client Connection Management and Data Exchange Service [Softvise_GmbH]
    public static let `coraDiscUdp`: Self = "_cora-disc._udp"
    /// Key Server for SASSAFRAS [Mark_Valence]
    public static let `keysrvrTcp`: Self = "_keysrvr._tcp"
    /// Key Server for SASSAFRAS [Mark_Valence]
    public static let `keysrvrUdp`: Self = "_keysrvr._udp"
    /// Key Shadow for SASSAFRAS [Mark_Valence]
    public static let `keyshadowTcp`: Self = "_keyshadow._tcp"
    /// Key Shadow for SASSAFRAS [Mark_Valence]
    public static let `keyshadowUdp`: Self = "_keyshadow._udp"
    /// mtrgtrans [Katsuhito_Muroi]
    public static let `mtrgtransTcp`: Self = "_mtrgtrans._tcp"
    /// mtrgtrans [Katsuhito_Muroi]
    public static let `mtrgtransUdp`: Self = "_mtrgtrans._udp"
    /// hp-sco [Larry_Schwartz]
    public static let `hpScoTcp`: Self = "_hp-sco._tcp"
    /// hp-sco [Larry_Schwartz]
    public static let `hpScoUdp`: Self = "_hp-sco._udp"
    /// hp-sca [Larry_Schwartz]
    public static let `hpScaTcp`: Self = "_hp-sca._tcp"
    /// hp-sca [Larry_Schwartz]
    public static let `hpScaUdp`: Self = "_hp-sca._udp"
    /// HP-SESSMON [Gita_Murthy]
    public static let `hpSessmonTcp`: Self = "_hp-sessmon._tcp"
    /// HP-SESSMON [Gita_Murthy]
    public static let `hpSessmonUdp`: Self = "_hp-sessmon._udp"
    /// FXUPTP [Keiji_Okuma]
    public static let `fxuptpTcp`: Self = "_fxuptp._tcp"
    /// FXUPTP [Keiji_Okuma]
    public static let `fxuptpUdp`: Self = "_fxuptp._udp"
    /// SXUPTP [Keiji_Okuma]
    public static let `sxuptpTcp`: Self = "_sxuptp._tcp"
    /// SXUPTP [Keiji_Okuma]
    public static let `sxuptpUdp`: Self = "_sxuptp._udp"
    /// JCP Client [Yuji_Sasaki]
    public static let `jcpTcp`: Self = "_jcp._tcp"
    /// JCP Client [Yuji_Sasaki]
    public static let `jcpUdp`: Self = "_jcp._udp"
    /// Mesh Link Establishment [IESG]
    public static let `mleUdp`: Self = "_mle._udp"
    /// FairCom Database [FairCom_Corporation]
    public static let `faircomDbTcp`: Self = "_faircom-db._tcp"
    /// IEC 60870-5-104 process control - secure [Grant_Gilchrist]
    public static let `iec104SecTcp`: Self = "_iec-104-sec._tcp"
    /// Distributed Network Protocol - Secure [Grant_Gilchrist]
    public static let `dnpSecTcp`: Self = "_dnp-sec._tcp"
    /// Distributed Network Protocol - Secure [Grant_Gilchrist]
    public static let `dnpSecUdp`: Self = "_dnp-sec._udp"
    /// Distributed Network Protocol - secured [DNP_Users_Group]
    public static let `dnpSecSctp`: Self = "_dnp-sec._sctp"
    /// DNP [Michael_Thesing]
    public static let `dnpTcp`: Self = "_dnp._tcp"
    /// DNP [Michael_Thesing]
    public static let `dnpUdp`: Self = "_dnp._udp"
    /// Distributed Network Protocol [DNP_Users_Group]
    public static let `dnpSctp`: Self = "_dnp._sctp"
    /// MicroSAN [Thomas_E_Ludwig]
    public static let `microsanTcp`: Self = "_microsan._tcp"
    /// MicroSAN [Thomas_E_Ludwig]
    public static let `microsanUdp`: Self = "_microsan._udp"
    /// Commtact HTTP [Tomas_Svoboda]
    public static let `commtactHttpTcp`: Self = "_commtact-http._tcp"
    /// Commtact HTTP [Tomas_Svoboda]
    public static let `commtactHttpUdp`: Self = "_commtact-http._udp"
    /// Commtact HTTPS [Tomas_Svoboda]
    public static let `commtactHttpsTcp`: Self = "_commtact-https._tcp"
    /// Commtact HTTPS [Tomas_Svoboda]
    public static let `commtactHttpsUdp`: Self = "_commtact-https._udp"
    /// OpenWebNet protocol for electric network [BTicino_S_p_A]
    public static let `openwebnetTcp`: Self = "_openwebnet._tcp"
    /// OpenWebNet protocol for electric network [BTicino_S_p_A]
    public static let `openwebnetUdp`: Self = "_openwebnet._udp"
    /// Samsung Interdevice Interaction discovery [Hong_Jungkih]
    public static let `ssIdiDiscUdp`: Self = "_ss-idi-disc._udp"
    /// Samsung Interdevice Interaction [Hong_Jungkih]
    public static let `ssIdiTcp`: Self = "_ss-idi._tcp"
    /// OpenDeploy Listener [Todd_Scallan]
    public static let `opendeployTcp`: Self = "_opendeploy._tcp"
    /// OpenDeploy Listener [Todd_Scallan]
    public static let `opendeployUdp`: Self = "_opendeploy._udp"
    /// NetBurner ID Port IANA assigned this well-formed service name as a replacement for "nburn_id". [Paul_Breed]
    public static let `nburnIdTcp`: Self = "_nburn-id._tcp"
    /// NetBurner ID Port [Paul_Breed]
    public static let `nburn_idTcp`: Self = "_nburn_id._tcp"
    /// NetBurner ID Port IANA assigned this well-formed service name as a replacement for "nburn_id". [Paul_Breed]
    public static let `nburnIdUdp`: Self = "_nburn-id._udp"
    /// NetBurner ID Port [Paul_Breed]
    public static let `nburn_idUdp`: Self = "_nburn_id._udp"
    /// TMOP HL7 Message Transfer Service [Tim_Riley]
    public static let `tmophl7mtsTcp`: Self = "_tmophl7mts._tcp"
    /// TMOP HL7 Message Transfer Service [Tim_Riley]
    public static let `tmophl7mtsUdp`: Self = "_tmophl7mts._udp"
    /// NFS mount protocol [Nicolas_Williams]
    public static let `mountdTcp`: Self = "_mountd._tcp"
    /// NFS mount protocol [Nicolas_Williams]
    public static let `mountdUdp`: Self = "_mountd._udp"
    /// Network File System (NFS) over RDMA 
    public static let `nfsrdmaTcp`: Self = "_nfsrdma._tcp"
    /// Network File System (NFS) over RDMA 
    public static let `nfsrdmaUdp`: Self = "_nfsrdma._udp"
    /// Network File System (NFS) over RDMA 
    public static let `nfsrdmaSctp`: Self = "_nfsrdma._sctp"
    /// AvesTerra Hypergraph Transfer Protocol (HGTP) [Georgetown_University]
    public static let `avesterraTcp`: Self = "_avesterra._tcp"
    /// TOLfab Data Change [Pierre_Couderc]
    public static let `tolfabTcp`: Self = "_tolfab._tcp"
    /// TOLfab Data Change [Pierre_Couderc]
    public static let `tolfabUdp`: Self = "_tolfab._udp"
    /// IPD Tunneling Port [Vikki_Yin_Wei]
    public static let `ipdtpPortTcp`: Self = "_ipdtp-port._tcp"
    /// IPD Tunneling Port [Vikki_Yin_Wei]
    public static let `ipdtpPortUdp`: Self = "_ipdtp-port._udp"
    /// iPulse-ICS [Meggie_Garica_Woodru]
    public static let `ipulseIcsTcp`: Self = "_ipulse-ics._tcp"
    /// iPulse-ICS [Meggie_Garica_Woodru]
    public static let `ipulseIcsUdp`: Self = "_ipulse-ics._udp"
    /// emWave Message Service [Harald_Striepe]
    public static let `emwavemsgTcp`: Self = "_emwavemsg._tcp"
    /// emWave Message Service [Harald_Striepe]
    public static let `emwavemsgUdp`: Self = "_emwavemsg._udp"
    /// Track [Michael_Sweet]
    public static let `trackTcp`: Self = "_track._tcp"
    /// Track [Michael_Sweet]
    public static let `trackUdp`: Self = "_track._udp"
    /// CRTech NLM [Cullimore_And_Ring_Technologies]
    public static let `crtechNlmTcp`: Self = "_crtech-nlm._tcp"
    /// At Hand MMP [Stepan_Riha]
    public static let `athandMmpTcp`: Self = "_athand-mmp._tcp"
    /// AT Hand MMP [Stepan_Riha]
    public static let `athandMmpUdp`: Self = "_athand-mmp._udp"
    /// IRTrans Control [Marcus_Mueller]
    public static let `irtransTcp`: Self = "_irtrans._tcp"
    /// IRTrans Control [Marcus_Mueller]
    public static let `irtransUdp`: Self = "_irtrans._udp"
    /// Notezilla.Lan Server [Conceptworld_Corporation]
    public static let `notezillaLanTcp`: Self = "_notezilla-lan._tcp"
    /// Distributed artificial intelligence [Holvonix_LLC]
    public static let `trinketAgentTcp`: Self = "_trinket-agent._tcp"
    /// Cohesity backup agents [Cohesity_Inc]
    public static let `cohesityAgentTcp`: Self = "_cohesity-agent._tcp"
    /// Services for Air Server [AIG_S.L.]
    public static let `aigairserverTcp`: Self = "_aigairserver._tcp"
    /// Raima RDM TFS [Paul_Johnson]
    public static let `rdmTfsTcp`: Self = "_rdm-tfs._tcp"
    /// MineScape Design File Server [Michael_Purser]
    public static let `dfserverTcp`: Self = "_dfserver._tcp"
    /// MineScape Design File Server [Michael_Purser]
    public static let `dfserverUdp`: Self = "_dfserver._udp"
    /// VoFR Gateway [Marty_Borden]
    public static let `vofrGatewayTcp`: Self = "_vofr-gateway._tcp"
    /// VoFR Gateway [Marty_Borden]
    public static let `vofrGatewayUdp`: Self = "_vofr-gateway._udp"
    /// TVNC Pro Multiplexing [Brian_Blevins]
    public static let `tvpmTcp`: Self = "_tvpm._tcp"
    /// TVNC Pro Multiplexing [Brian_Blevins]
    public static let `tvpmUdp`: Self = "_tvpm._udp"
    /// Safe AutoLogon [WM_Software_Inc.]
    public static let `salTcp`: Self = "_sal._tcp"
    /// webphone [Toby_Hosterman]
    public static let `webphoneTcp`: Self = "_webphone._tcp"
    /// webphone [Toby_Hosterman]
    public static let `webphoneUdp`: Self = "_webphone._udp"
    /// NetSpeak Corp. Directory Services [Toby_Hosterman]
    public static let `netspeakIsTcp`: Self = "_netspeak-is._tcp"
    /// NetSpeak Corp. Directory Services [Toby_Hosterman]
    public static let `netspeakIsUdp`: Self = "_netspeak-is._udp"
    /// NetSpeak Corp. Connection Services [Toby_Hosterman]
    public static let `netspeakCsTcp`: Self = "_netspeak-cs._tcp"
    /// NetSpeak Corp. Connection Services [Toby_Hosterman]
    public static let `netspeakCsUdp`: Self = "_netspeak-cs._udp"
    /// NetSpeak Corp. Automatic Call Distribution [Toby_Hosterman]
    public static let `netspeakAcdTcp`: Self = "_netspeak-acd._tcp"
    /// NetSpeak Corp. Automatic Call Distribution [Toby_Hosterman]
    public static let `netspeakAcdUdp`: Self = "_netspeak-acd._udp"
    /// NetSpeak Corp. Credit Processing System [Toby_Hosterman]
    public static let `netspeakCpsTcp`: Self = "_netspeak-cps._tcp"
    /// NetSpeak Corp. Credit Processing System [Toby_Hosterman]
    public static let `netspeakCpsUdp`: Self = "_netspeak-cps._udp"
    /// SNAPenetIO [Kevin_Kuhns]
    public static let `snapenetioTcp`: Self = "_snapenetio._tcp"
    /// SNAPenetIO [Kevin_Kuhns]
    public static let `snapenetioUdp`: Self = "_snapenetio._udp"
    /// OptoControl [Kevin_Kuhns]
    public static let `optocontrolTcp`: Self = "_optocontrol._tcp"
    /// OptoControl [Kevin_Kuhns]
    public static let `optocontrolUdp`: Self = "_optocontrol._udp"
    /// Opto Host Port 2 [Doug_Leany]
    public static let `optohost002Tcp`: Self = "_optohost002._tcp"
    /// Opto Host Port 2 [Doug_Leany]
    public static let `optohost002Udp`: Self = "_optohost002._udp"
    /// Opto Host Port 3 [Doug_Leany]
    public static let `optohost003Tcp`: Self = "_optohost003._tcp"
    /// Opto Host Port 3 [Doug_Leany]
    public static let `optohost003Udp`: Self = "_optohost003._udp"
    /// Opto Host Port 4 [Doug_Leany]
    public static let `optohost004Tcp`: Self = "_optohost004._tcp"
    /// Opto Host Port 4 [Doug_Leany]
    public static let `optohost004Udp`: Self = "_optohost004._udp"
    /// dCache Access Protocol [Christoph_Anton_Mitt]
    public static let `dcapTcp`: Self = "_dcap._tcp"
    /// GSI dCache Access Protocol [Christoph_Anton_Mitt]
    public static let `gsidcapTcp`: Self = "_gsidcap._tcp"
    /// EasyEngine is CLI tool to manage WordPress Sites on Nginx server [rtCamp_Solutions_Private_Limited]
    public static let `easyengineTcp`: Self = "_easyengine._tcp"
    /// wnn6 [Yasunari_Gon_Yamasit]
    public static let `wnn6Tcp`: Self = "_wnn6._tcp"
    /// wnn6 [Yasunari_Gon_Yamasit]
    public static let `wnn6Udp`: Self = "_wnn6._udp"
    /// CompactIS Tunnel [Justin_Paupore]
    public static let `cisTcp`: Self = "_cis._tcp"
    /// CompactIS Tunnel [Justin_Paupore]
    public static let `cisUdp`: Self = "_cis._udp"
    /// ShowCockpit Networking [Ricardo_Dias]
    public static let `showcockpitNetTcp`: Self = "_showcockpit-net._tcp"
    /// ShowCockpit Networking [Ricardo_Dias]
    public static let `showcockpitNetUdp`: Self = "_showcockpit-net._udp"
    /// Initium Labs Security and Automation Control [Initium_Labs_LLC]
    public static let `shrewdControlTcp`: Self = "_shrewd-control._tcp"
    /// Initium Labs Security and Automation Streaming [Initium_Labs_LLC]
    public static let `shrewdStreamUdp`: Self = "_shrewd-stream._udp"
    /// CompactIS Secure Tunnel [Justin_Paupore]
    public static let `cisSecureTcp`: Self = "_cis-secure._tcp"
    /// CompactIS Secure Tunnel [Justin_Paupore]
    public static let `cisSecureUdp`: Self = "_cis-secure._udp"
    /// WibuKey Standard WkLan [Wolfgang_Voelker]
    public static let `wibukeyTcp`: Self = "_wibukey._tcp"
    /// WibuKey Standard WkLan [Wolfgang_Voelker]
    public static let `wibukeyUdp`: Self = "_wibukey._udp"
    /// CodeMeter Standard [Wolfgang_Voelker]
    public static let `codemeterTcp`: Self = "_codemeter._tcp"
    /// CodeMeter Standard [Wolfgang_Voelker]
    public static let `codemeterUdp`: Self = "_codemeter._udp"
    /// TPC/IP requests of copy protection software to a server [WIBU-SYSTEMS_AG]
    public static let `codemeterCmwanTcp`: Self = "_codemeter-cmwan._tcp"
    /// CaldSoft Backup server file transfer [CaldSoft]
    public static let `caldsoftBackupTcp`: Self = "_caldsoft-backup._tcp"
    /// Vocaltec Web Conference [Scott_Petrack]
    public static let `vocaltecWconfTcp`: Self = "_vocaltec-wconf._tcp"
    /// Vocaltec Internet Phone [Scott_Petrack]
    public static let `vocaltecPhoneUdp`: Self = "_vocaltec-phone._udp"
    /// Talika Main Server [Laxman_C_Marathe]
    public static let `talikaserverTcp`: Self = "_talikaserver._tcp"
    /// Talika Main Server [Laxman_C_Marathe]
    public static let `talikaserverUdp`: Self = "_talikaserver._udp"
    /// Telerate Information Platform LAN [Timo_Sivonen]
    public static let `awsBrfTcp`: Self = "_aws-brf._tcp"
    /// Telerate Information Platform LAN [Timo_Sivonen]
    public static let `awsBrfUdp`: Self = "_aws-brf._udp"
    /// Telerate Information Platform WAN [Timo_Sivonen]
    public static let `brfGwTcp`: Self = "_brf-gw._tcp"
    /// Telerate Information Platform WAN [Timo_Sivonen]
    public static let `brfGwUdp`: Self = "_brf-gw._udp"
    /// Inova LightLink Server Type 1 [Chris_Koeritz_3]
    public static let `inovaport1Tcp`: Self = "_inovaport1._tcp"
    /// Inova LightLink Server Type 1 [Chris_Koeritz_3]
    public static let `inovaport1Udp`: Self = "_inovaport1._udp"
    /// Inova LightLink Server Type 2 [Chris_Koeritz_3]
    public static let `inovaport2Tcp`: Self = "_inovaport2._tcp"
    /// Inova LightLink Server Type 2 [Chris_Koeritz_3]
    public static let `inovaport2Udp`: Self = "_inovaport2._udp"
    /// Inova LightLink Server Type 3 [Chris_Koeritz_3]
    public static let `inovaport3Tcp`: Self = "_inovaport3._tcp"
    /// Inova LightLink Server Type 3 [Chris_Koeritz_3]
    public static let `inovaport3Udp`: Self = "_inovaport3._udp"
    /// Inova LightLink Server Type 4 [Chris_Koeritz_3]
    public static let `inovaport4Tcp`: Self = "_inovaport4._tcp"
    /// Inova LightLink Server Type 4 [Chris_Koeritz_3]
    public static let `inovaport4Udp`: Self = "_inovaport4._udp"
    /// Inova LightLink Server Type 5 [Chris_Koeritz_3]
    public static let `inovaport5Tcp`: Self = "_inovaport5._tcp"
    /// Inova LightLink Server Type 5 [Chris_Koeritz_3]
    public static let `inovaport5Udp`: Self = "_inovaport5._udp"
    /// Inova LightLink Server Type 6 [Chris_Koeritz_3]
    public static let `inovaport6Tcp`: Self = "_inovaport6._tcp"
    /// Inova LightLink Server Type 6 [Chris_Koeritz_3]
    public static let `inovaport6Udp`: Self = "_inovaport6._udp"
    /// Generic Notification Transport Protocol [Growl_Project]
    public static let `gntpTcp`: Self = "_gntp._tcp"
    /// S102 application [Kimmo_Kymalainen]
    public static let `s102Udp`: Self = "_s102._udp"
    /// Emulex HBAnyware Remote Management [Maziar_Tamadon]
    public static let `elxmgmtTcp`: Self = "_elxmgmt._tcp"
    /// Emulex HBAnyware Remote Management [Maziar_Tamadon]
    public static let `elxmgmtUdp`: Self = "_elxmgmt._udp"
    /// Novar Data [Keith_Kilroy]
    public static let `novarDbaseTcp`: Self = "_novar-dbase._tcp"
    /// Novar Data [Keith_Kilroy]
    public static let `novarDbaseUdp`: Self = "_novar-dbase._udp"
    /// Novar Alarm [Keith_Kilroy]
    public static let `novarAlarmTcp`: Self = "_novar-alarm._tcp"
    /// Novar Alarm [Keith_Kilroy]
    public static let `novarAlarmUdp`: Self = "_novar-alarm._udp"
    /// Novar Global [Keith_Kilroy]
    public static let `novarGlobalTcp`: Self = "_novar-global._tcp"
    /// Novar Global [Keith_Kilroy]
    public static let `novarGlobalUdp`: Self = "_novar-global._udp"
    /// Aequus Service [James_Anson]
    public static let `aequusTcp`: Self = "_aequus._tcp"
    /// Aequus Service Mgmt [James_Anson]
    public static let `aequusAltTcp`: Self = "_aequus-alt._tcp"
    /// AreaGuard Neo - WebServer [SODATSW_spol]
    public static let `areaguardNeoTcp`: Self = "_areaguard-neo._tcp"
    /// med-ltp [Juergen_Fischbach]
    public static let `medLtpTcp`: Self = "_med-ltp._tcp"
    /// med-ltp [Juergen_Fischbach]
    public static let `medLtpUdp`: Self = "_med-ltp._udp"
    /// med-fsp-rx [Juergen_Fischbach]
    public static let `medFspRxTcp`: Self = "_med-fsp-rx._tcp"
    /// med-fsp-rx [Juergen_Fischbach]
    public static let `medFspRxUdp`: Self = "_med-fsp-rx._udp"
    /// med-fsp-tx [Juergen_Fischbach]
    public static let `medFspTxTcp`: Self = "_med-fsp-tx._tcp"
    /// med-fsp-tx [Juergen_Fischbach]
    public static let `medFspTxUdp`: Self = "_med-fsp-tx._udp"
    /// med-supp [Juergen_Fischbach]
    public static let `medSuppTcp`: Self = "_med-supp._tcp"
    /// med-supp [Juergen_Fischbach]
    public static let `medSuppUdp`: Self = "_med-supp._udp"
    /// med-ovw [Juergen_Fischbach]
    public static let `medOvwTcp`: Self = "_med-ovw._tcp"
    /// med-ovw [Juergen_Fischbach]
    public static let `medOvwUdp`: Self = "_med-ovw._udp"
    /// med-ci [Juergen_Fischbach]
    public static let `medCiTcp`: Self = "_med-ci._tcp"
    /// med-ci [Juergen_Fischbach]
    public static let `medCiUdp`: Self = "_med-ci._udp"
    /// med-net-svc [Juergen_Fischbach]
    public static let `medNetSvcTcp`: Self = "_med-net-svc._tcp"
    /// med-net-svc [Juergen_Fischbach]
    public static let `medNetSvcUdp`: Self = "_med-net-svc._udp"
    /// fileSphere [Carl_Cedergren]
    public static let `filesphereTcp`: Self = "_filesphere._tcp"
    /// fileSphere [Carl_Cedergren]
    public static let `filesphereUdp`: Self = "_filesphere._udp"
    /// Vista 4GL [Ingenta_plc]
    public static let `vista4glTcp`: Self = "_vista-4gl._tcp"
    /// Vista 4GL [Ingenta_plc]
    public static let `vista4glUdp`: Self = "_vista-4gl._udp"
    /// Isolv Local Directory [Mitchell_Bass]
    public static let `ildTcp`: Self = "_ild._tcp"
    /// Isolv Local Directory [Mitchell_Bass]
    public static let `ildUdp`: Self = "_ild._udp"
    /// Transport of Human Interface Device data streams [Freebox_SAS]
    public static let `hidUdp`: Self = "_hid._udp"
    /// Verimag mobile class protocol over TCP [Verimag_OOO]
    public static let `vrmgIpTcp`: Self = "_vrmg-ip._tcp"
    /// Intel RCI IANA assigned this well-formed service name as a replacement for "intel_rci". [Mark_Lewis_2]
    public static let `intelRciTcp`: Self = "_intel-rci._tcp"
    /// Intel RCI [Mark_Lewis_2]
    public static let `intel_rciTcp`: Self = "_intel_rci._tcp"
    /// Intel RCI IANA assigned this well-formed service name as a replacement for "intel_rci". [Mark_Lewis_2]
    public static let `intelRciUdp`: Self = "_intel-rci._udp"
    /// Intel RCI [Mark_Lewis_2]
    public static let `intel_rciUdp`: Self = "_intel_rci._udp"
    /// Tonido Domain Server [Madhan_Kanagavel]
    public static let `tonidodsTcp`: Self = "_tonidods._tcp"
    /// Tonido Domain Server [Madhan_Kanagavel]
    public static let `tonidodsUdp`: Self = "_tonidods._udp"
    /// BINKP [Maxim_Masiutin]
    public static let `binkpTcp`: Self = "_binkp._tcp"
    /// BINKP [Maxim_Masiutin]
    public static let `binkpUdp`: Self = "_binkp._udp"
    /// bilobit Service [bilobit_GmbH]
    public static let `bilobitTcp`: Self = "_bilobit._tcp"
    /// bilobit Service Update [bilobit_GmbH]
    public static let `bilobitUpdateUdp`: Self = "_bilobit-update._udp"
    /// Service used by SmarDTV to communicate between a CAM and a second screen application [SmarDTV]
    public static let `sdtvwcamTcp`: Self = "_sdtvwcam._tcp"
    /// Canditv Message Service [Gary_Aston]
    public static let `canditvTcp`: Self = "_canditv._tcp"
    /// Canditv Message Service [Gary_Aston]
    public static let `canditvUdp`: Self = "_canditv._udp"
    /// FlashFiler [Ben_Oram]
    public static let `flashfilerTcp`: Self = "_flashfiler._tcp"
    /// FlashFiler [Ben_Oram]
    public static let `flashfilerUdp`: Self = "_flashfiler._udp"
    /// Turbopower Proactivate [Ben_Oram]
    public static let `proactivateTcp`: Self = "_proactivate._tcp"
    /// Turbopower Proactivate [Ben_Oram]
    public static let `proactivateUdp`: Self = "_proactivate._udp"
    /// TCC User HTTP Service [Brian_Kennedy]
    public static let `tccHttpTcp`: Self = "_tcc-http._tcp"
    /// TCC User HTTP Service [Brian_Kennedy]
    public static let `tccHttpUdp`: Self = "_tcc-http._udp"
    /// Citrix StorageLink Gateway [Mark_Nijmeijer]
    public static let `cslgTcp`: Self = "_cslg._tcp"
    /// Device Association Discovery [Microsoft_Corporation_3]
    public static let `assocDiscUdp`: Self = "_assoc-disc._udp"
    /// Find Identification of Network Devices [Jean_Paul_Moreaux]
    public static let `findTcp`: Self = "_find._tcp"
    /// Find Identification of Network Devices [Jean_Paul_Moreaux]
    public static let `findUdp`: Self = "_find._udp"
    /// icl-twobase1 [J_A_Sever]
    public static let `iclTwobase1Tcp`: Self = "_icl-twobase1._tcp"
    /// icl-twobase1 [J_A_Sever]
    public static let `iclTwobase1Udp`: Self = "_icl-twobase1._udp"
    /// icl-twobase2 [J_A_Sever]
    public static let `iclTwobase2Tcp`: Self = "_icl-twobase2._tcp"
    /// icl-twobase2 [J_A_Sever]
    public static let `iclTwobase2Udp`: Self = "_icl-twobase2._udp"
    /// icl-twobase3 [J_A_Sever]
    public static let `iclTwobase3Tcp`: Self = "_icl-twobase3._tcp"
    /// icl-twobase3 [J_A_Sever]
    public static let `iclTwobase3Udp`: Self = "_icl-twobase3._udp"
    /// icl-twobase4 [J_A_Sever]
    public static let `iclTwobase4Tcp`: Self = "_icl-twobase4._tcp"
    /// icl-twobase4 [J_A_Sever]
    public static let `iclTwobase4Udp`: Self = "_icl-twobase4._udp"
    /// icl-twobase5 [J_A_Sever]
    public static let `iclTwobase5Tcp`: Self = "_icl-twobase5._tcp"
    /// icl-twobase5 [J_A_Sever]
    public static let `iclTwobase5Udp`: Self = "_icl-twobase5._udp"
    /// icl-twobase6 [J_A_Sever]
    public static let `iclTwobase6Tcp`: Self = "_icl-twobase6._tcp"
    /// icl-twobase6 [J_A_Sever]
    public static let `iclTwobase6Udp`: Self = "_icl-twobase6._udp"
    /// icl-twobase7 [J_A_Sever]
    public static let `iclTwobase7Tcp`: Self = "_icl-twobase7._tcp"
    /// icl-twobase7 [J_A_Sever]
    public static let `iclTwobase7Udp`: Self = "_icl-twobase7._udp"
    /// icl-twobase8 [J_A_Sever]
    public static let `iclTwobase8Tcp`: Self = "_icl-twobase8._tcp"
    /// icl-twobase8 [J_A_Sever]
    public static let `iclTwobase8Udp`: Self = "_icl-twobase8._udp"
    /// icl-twobase9 [J_A_Sever]
    public static let `iclTwobase9Tcp`: Self = "_icl-twobase9._tcp"
    /// icl-twobase9 [J_A_Sever]
    public static let `iclTwobase9Udp`: Self = "_icl-twobase9._udp"
    /// icl-twobase10 [J_A_Sever]
    public static let `iclTwobase10Tcp`: Self = "_icl-twobase10._tcp"
    /// icl-twobase10 [J_A_Sever]
    public static let `iclTwobase10Udp`: Self = "_icl-twobase10._udp"
    /// RNSAP User Adaptation for Iurh [Dario_S_Tonesi]
    public static let `rnaSctp`: Self = "_rna._sctp"
    /// Sauter Dongle [Christian_Brecht]
    public static let `sauterdongleTcp`: Self = "_sauterdongle._tcp"
    /// Identifier Tracing Protocol [Huang_Neng-geng]
    public static let `idtpTcp`: Self = "_idtp._tcp"
    /// Vocaltec Address Server [Scott_Petrack]
    public static let `vocaltecHosTcp`: Self = "_vocaltec-hos._tcp"
    /// Vocaltec Address Server [Scott_Petrack]
    public static let `vocaltecHosUdp`: Self = "_vocaltec-hos._udp"
    /// TASP Network Comm [Martin_Ellis]
    public static let `taspNetTcp`: Self = "_tasp-net._tcp"
    /// TASP Network Comm [Martin_Ellis]
    public static let `taspNetUdp`: Self = "_tasp-net._udp"
    /// NIObserver [Roman_Oliynyk]
    public static let `niobserverTcp`: Self = "_niobserver._tcp"
    /// NIObserver [Roman_Oliynyk]
    public static let `niobserverUdp`: Self = "_niobserver._udp"
    /// NILinkAnalyst [Roman_Oliynyk_2]
    public static let `nilinkanalystTcp`: Self = "_nilinkanalyst._tcp"
    /// NILinkAnalyst [Roman_Oliynyk_2]
    public static let `nilinkanalystUdp`: Self = "_nilinkanalyst._udp"
    /// NIProbe [Roman_Oliynyk]
    public static let `niprobeTcp`: Self = "_niprobe._tcp"
    /// NIProbe [Roman_Oliynyk]
    public static let `niprobeUdp`: Self = "_niprobe._udp"
    /// Bitfighter game server [Christopher_Eykamp]
    public static let `bfGameUdp`: Self = "_bf-game._udp"
    /// Bitfighter master server [Christopher_Eykamp]
    public static let `bfMasterUdp`: Self = "_bf-master._udp"
    /// quake [Yasunari_Gon_Yamasit]
    public static let `quakeTcp`: Self = "_quake._tcp"
    /// quake [Yasunari_Gon_Yamasit]
    public static let `quakeUdp`: Self = "_quake._udp"
    /// Symbolic Computation Software Composability Protocol [Alexander_Konovalov]
    public static let `scscpTcp`: Self = "_scscp._tcp"
    /// Symbolic Computation Software Composability Protocol [Alexander_Konovalov]
    public static let `scscpUdp`: Self = "_scscp._udp"
    /// wnn6-ds [Yasunari_Gon_Yamasit]
    public static let `wnn6DsTcp`: Self = "_wnn6-ds._tcp"
    /// wnn6-ds [Yasunari_Gon_Yamasit]
    public static let `wnn6DsUdp`: Self = "_wnn6-ds._udp"
    /// CockroachDB [Cockroach_Labs_Inc]
    public static let `cockroachTcp`: Self = "_cockroach._tcp"
    /// eZproxy [Albert_C_Yang]
    public static let `ezproxyTcp`: Self = "_ezproxy._tcp"
    /// eZproxy [Albert_C_Yang]
    public static let `ezproxyUdp`: Self = "_ezproxy._udp"
    /// eZmeeting [Albert_C_Yang]
    public static let `ezmeetingTcp`: Self = "_ezmeeting._tcp"
    /// eZmeeting [Albert_C_Yang]
    public static let `ezmeetingUdp`: Self = "_ezmeeting._udp"
    /// K3 Software-Server [Jim_Baldridge]
    public static let `k3softwareSvrTcp`: Self = "_k3software-svr._tcp"
    /// K3 Software-Server [Jim_Baldridge]
    public static let `k3softwareSvrUdp`: Self = "_k3software-svr._udp"
    /// K3 Software-Client [Jim_Baldridge]
    public static let `k3softwareCliTcp`: Self = "_k3software-cli._tcp"
    /// K3 Software-Client [Jim_Baldridge]
    public static let `k3softwareCliUdp`: Self = "_k3software-cli._udp"
    /// EXOline-TCP [AB_Regin]
    public static let `exolineTcpTcp`: Self = "_exoline-tcp._tcp"
    /// EXOline-UDP [AB_Regin]
    public static let `exolineUdpUdp`: Self = "_exoline-udp._udp"
    /// EXOconfig [Urban_Fosseus]
    public static let `exoconfigTcp`: Self = "_exoconfig._tcp"
    /// EXOconfig [Urban_Fosseus]
    public static let `exoconfigUdp`: Self = "_exoconfig._udp"
    /// EXOnet [Urban_Fosseus]
    public static let `exonetTcp`: Self = "_exonet._tcp"
    /// EXOnet [Urban_Fosseus]
    public static let `exonetUdp`: Self = "_exonet._udp"
    /// A protocol for managing license services [Flexera]
    public static let `flexLmadminTcp`: Self = "_flex-lmadmin._tcp"
    /// Mongo database system [MongoDB_Inc.]
    public static let `mongodbTcp`: Self = "_mongodb._tcp"
    /// ImagePump [Richard_Minner]
    public static let `imagepumpTcp`: Self = "_imagepump._tcp"
    /// ImagePump [Richard_Minner]
    public static let `imagepumpUdp`: Self = "_imagepump._udp"
    /// Job controller service [Chris_Newman]
    public static let `jesmsjcTcp`: Self = "_jesmsjc._tcp"
    /// Job controller service [Chris_Newman]
    public static let `jesmsjcUdp`: Self = "_jesmsjc._udp"
    /// Kopek HTTP Head Port [Sten_H_Danielsen]
    public static let `kopekHttpheadTcp`: Self = "_kopek-httphead._tcp"
    /// Kopek HTTP Head Port [Sten_H_Danielsen]
    public static let `kopekHttpheadUdp`: Self = "_kopek-httphead._udp"
    /// ARS VISTA Application [Spencer_Teran_2]
    public static let `arsVistaTcp`: Self = "_ars-vista._tcp"
    /// ARS VISTA Application [Spencer_Teran_2]
    public static let `arsVistaUdp`: Self = "_ars-vista._udp"
    /// Astrolink Protocol [Alanax_Technologies_Inc]
    public static let `astrolinkTcp`: Self = "_astrolink._tcp"
    /// TW Authentication/Key Distribution and [Alex_Duncan_2]
    public static let `twAuthKeyTcp`: Self = "_tw-auth-key._tcp"
    /// Attribute Certificate Services [Alex_Duncan_2]
    public static let `twAuthKeyUdp`: Self = "_tw-auth-key._udp"
    /// NX License Manager [Anthony_Greatorex]
    public static let `nxlmdTcp`: Self = "_nxlmd._tcp"
    /// NX License Manager [Anthony_Greatorex]
    public static let `nxlmdUdp`: Self = "_nxlmd._udp"
    /// PQ Service [Peter_Laschtowitz]
    public static let `pqspTcp`: Self = "_pqsp._tcp"
    /// Gruber cash registry protocol [Gruber_Schanksysteme]
    public static let `gruberCashregTcp`: Self = "_gruber-cashreg._tcp"
    /// thor/server - ML engine [Aronetics_LLC]
    public static let `thorEngineTcp`: Self = "_thor-engine._tcp"
    /// A27 cdma2000 RAN Management [ThreeGPP_2]
    public static let `a27RanRanUdp`: Self = "_a27-ran-ran._udp"
    /// VoxelStorm game server [VoxelStorm]
    public static let `voxelstormTcp`: Self = "_voxelstorm._tcp"
    /// VoxelStorm game server [VoxelStorm]
    public static let `voxelstormUdp`: Self = "_voxelstorm._udp"
    /// Siemens GSM [David_Anuszewski]
    public static let `siemensgsmTcp`: Self = "_siemensgsm._tcp"
    /// Siemens GSM [David_Anuszewski]
    public static let `siemensgsmUdp`: Self = "_siemensgsm._udp"
    /// Building operating system services wide area verified exchange [University_of_California_Berkeley]
    public static let `bosswaveTcp`: Self = "_bosswave._tcp"
    /// Siemens Licensing Server [Siemens_Digital_Industries_Software]
    public static let `saltdLicensingTcp`: Self = "_saltd-licensing._tcp"
    /// SGsAP in 3GPP [GPP_Specifications]
    public static let `sgsapSctp`: Self = "_sgsap._sctp"
    /// ObTools Message Protocol [Paul_Clark]
    public static let `otmpTcp`: Self = "_otmp._tcp"
    /// ObTools Message Protocol [Paul_Clark]
    public static let `otmpUdp`: Self = "_otmp._udp"
    /// SBcAP in 3GPP [GPP_Specifications]
    public static let `sbcapSctp`: Self = "_sbcap._sctp"
    /// HNBAP and RUA Common Association [John_Meredith]
    public static let `iuhsctpassocSctp`: Self = "_iuhsctpassoc._sctp"
    /// data exchange protocol for IEC61850 in wind power plants [DEIF_AS]
    public static let `bingbangTcp`: Self = "_bingbang._tcp"
    /// Secure Network Data Management Protocol [Alioune_Thiam]
    public static let `ndmpsTcp`: Self = "_ndmps._tcp"
    /// Pago Services 1 [Balduin_Mueller_Plat]
    public static let `pagoServices1Tcp`: Self = "_pago-services1._tcp"
    /// Pago Services 1 [Balduin_Mueller_Plat]
    public static let `pagoServices1Udp`: Self = "_pago-services1._udp"
    /// Pago Services 2 [Balduin_Mueller_Plat]
    public static let `pagoServices2Tcp`: Self = "_pago-services2._tcp"
    /// Pago Services 2 [Balduin_Mueller_Plat]
    public static let `pagoServices2Udp`: Self = "_pago-services2._udp"
    /// Amicon FPSU-IP Remote Administration [Amicon_OOO]
    public static let `amiconFpsuRaTcp`: Self = "_amicon-fpsu-ra._tcp"
    /// Amicon FPSU-IP Remote Administration [Amicon_OOO]
    public static let `amiconFpsuRaUdp`: Self = "_amicon-fpsu-ra._udp"
    /// Amicon FPSU-IP VPN [Amicon_OOO]
    public static let `amiconFpsuSUdp`: Self = "_amicon-fpsu-s._udp"
    /// Remote Window Protocol [Maxim_Baklanovsky]
    public static let `rwpTcp`: Self = "_rwp._tcp"
    /// Remote Window Protocol [Maxim_Baklanovsky]
    public static let `rwpSctp`: Self = "_rwp._sctp"
    /// Kingdoms Online (CraigAvenue) [Drake_Bankston]
    public static let `kingdomsonlineTcp`: Self = "_kingdomsonline._tcp"
    /// Kingdoms Online (CraigAvenue) [Drake_Bankston]
    public static let `kingdomsonlineUdp`: Self = "_kingdomsonline._udp"
    /// GroundStar RealTime System [INFORM_GmbH]
    public static let `gsRealtimeTcp`: Self = "_gs-realtime._tcp"
    /// Samsung Convergence Discovery Protocol [Samsung_2]
    public static let `samsungDiscUdp`: Self = "_samsung-disc._udp"
    /// OpenView Service Desk Client [Service_Desk_Product]
    public static let `ovobsTcp`: Self = "_ovobs._tcp"
    /// OpenView Service Desk Client [Service_Desk_Product]
    public static let `ovobsUdp`: Self = "_ovobs._udp"
    /// Kollective Agent Secure Distributed Delivery Protocol [Kollective_Technology_Inc]
    public static let `kaSddpTcp`: Self = "_ka-sddp._tcp"
    /// Kollective Agent Kollective Delivery Protocol [Kollective_Technology_Inc]
    public static let `kaKdpUdp`: Self = "_ka-kdp._udp"
    /// Autotrac ACP 245 [Roberto_Jorge_Dino]
    public static let `autotracAcpTcp`: Self = "_autotrac-acp._tcp"
    /// YaWN - Yet Another Windows Notifier [David_Spivey]
    public static let `yawnUdp`: Self = "_yawn._udp"
    /// eldim is a secure file upload proxy [Antonios_A_Chariton]
    public static let `eldimTcp`: Self = "_eldim._tcp"
    /// eldim is a secure file upload proxy [Antonios_A_Chariton]
    public static let `eldimUdp`: Self = "_eldim._udp"
    /// PACE license server [PACE_Anti-Piracy]
    public static let `paceLicensedTcp`: Self = "_pace-licensed._tcp"
    /// XQoS network monitor [Joe_Elliott]
    public static let `xqosdTcp`: Self = "_xqosd._tcp"
    /// XQoS network monitor [Joe_Elliott]
    public static let `xqosdUdp`: Self = "_xqosd._udp"
    /// TetriNET Protocol [Emmanuel_Bourg]
    public static let `tetrinetTcp`: Self = "_tetrinet._tcp"
    /// TetriNET Protocol [Emmanuel_Bourg]
    public static let `tetrinetUdp`: Self = "_tetrinet._udp"
    /// lm mon [System_Administrator]
    public static let `lmMonTcp`: Self = "_lm-mon._tcp"
    /// lm mon [System_Administrator]
    public static let `lmMonUdp`: Self = "_lm-mon._udp"
    /// DS Expert Monitor IANA assigned this well-formed service name as a replacement for "dsx_monitor". [John_Lowery]
    public static let `dsxMonitorTcp`: Self = "_dsx-monitor._tcp"
    /// DS Expert Monitor [John_Lowery]
    public static let `dsx_monitorTcp`: Self = "_dsx_monitor._tcp"
    /// GameSmith Port [Randy_Thompson]
    public static let `gamesmithPortTcp`: Self = "_gamesmith-port._tcp"
    /// GameSmith Port [Randy_Thompson]
    public static let `gamesmithPortUdp`: Self = "_gamesmith-port._udp"
    /// Embedded Device Configuration Protocol TX IANA assigned this well-formed service name as a replacement for "iceedcp_tx". [Oliver_Lewis]
    public static let `iceedcpTxTcp`: Self = "_iceedcp-tx._tcp"
    /// Embedded Device Configuration Protocol TX [Oliver_Lewis]
    public static let `iceedcp_txTcp`: Self = "_iceedcp_tx._tcp"
    /// Embedded Device Configuration Protocol TX IANA assigned this well-formed service name as a replacement for "iceedcp_tx". [Oliver_Lewis]
    public static let `iceedcpTxUdp`: Self = "_iceedcp-tx._udp"
    /// Embedded Device Configuration Protocol TX [Oliver_Lewis]
    public static let `iceedcp_txUdp`: Self = "_iceedcp_tx._udp"
    /// Embedded Device Configuration Protocol RX IANA assigned this well-formed service name as a replacement for "iceedcp_rx". [Oliver_Lewis]
    public static let `iceedcpRxTcp`: Self = "_iceedcp-rx._tcp"
    /// Embedded Device Configuration Protocol RX [Oliver_Lewis]
    public static let `iceedcp_rxTcp`: Self = "_iceedcp_rx._tcp"
    /// Embedded Device Configuration Protocol RX IANA assigned this well-formed service name as a replacement for "iceedcp_rx". [Oliver_Lewis]
    public static let `iceedcpRxUdp`: Self = "_iceedcp-rx._udp"
    /// Embedded Device Configuration Protocol RX [Oliver_Lewis]
    public static let `iceedcp_rxUdp`: Self = "_iceedcp_rx._udp"
    /// iRacing helper service [Randy_Cassidy]
    public static let `iracinghelperTcp`: Self = "_iracinghelper._tcp"
    /// iRacing helper service [Randy_Cassidy]
    public static let `iracinghelperUdp`: Self = "_iracinghelper._udp"
    /// T1 Distributed Processor [Peter_Beahan]
    public static let `t1distproc60Tcp`: Self = "_t1distproc60._tcp"
    /// T1 Distributed Processor [Peter_Beahan]
    public static let `t1distproc60Udp`: Self = "_t1distproc60._udp"
    /// Plex multimedia [Plex_Inc.]
    public static let `plexTcp`: Self = "_plex._tcp"
    /// Access Point Manager Link [Tony_Diodato]
    public static let `apmLinkTcp`: Self = "_apm-link._tcp"
    /// Access Point Manager Link [Tony_Diodato]
    public static let `apmLinkUdp`: Self = "_apm-link._udp"
    /// SecureNotebook-CLNT [Eric_Cantineau]
    public static let `secNtbClntTcp`: Self = "_sec-ntb-clnt._tcp"
    /// SecureNotebook-CLNT [Eric_Cantineau]
    public static let `secNtbClntUdp`: Self = "_sec-ntb-clnt._udp"
    /// DMExpress [Arnie_Farrelly]
    public static let `DMExpressTcp`: Self = "_DMExpress._tcp"
    /// DMExpress [Arnie_Farrelly]
    public static let `DMExpressUdp`: Self = "_DMExpress._udp"
    /// FileNet BPM WS-ReliableMessaging Client [Chris_Adkins]
    public static let `filenetPowsrmTcp`: Self = "_filenet-powsrm._tcp"
    /// FileNet BPM WS-ReliableMessaging Client [Chris_Adkins]
    public static let `filenetPowsrmUdp`: Self = "_filenet-powsrm._udp"
    /// Filenet TMS [Daniel_Whelan]
    public static let `filenetTmsTcp`: Self = "_filenet-tms._tcp"
    /// Filenet TMS [Daniel_Whelan]
    public static let `filenetTmsUdp`: Self = "_filenet-tms._udp"
    /// Filenet RPC [Daniel_Whelan]
    public static let `filenetRpcTcp`: Self = "_filenet-rpc._tcp"
    /// Filenet RPC [Daniel_Whelan]
    public static let `filenetRpcUdp`: Self = "_filenet-rpc._udp"
    /// Filenet NCH [Daniel_Whelan]
    public static let `filenetNchTcp`: Self = "_filenet-nch._tcp"
    /// Filenet NCH [Daniel_Whelan]
    public static let `filenetNchUdp`: Self = "_filenet-nch._udp"
    /// FileNET RMI [Chris_Adkins]
    public static let `filenetRmiTcp`: Self = "_filenet-rmi._tcp"
    /// FileNet RMI [Chris_Adkins]
    public static let `filenetRmiUdp`: Self = "_filenet-rmi._udp"
    /// FileNET Process Analyzer [Chris_Adkins]
    public static let `filenetPaTcp`: Self = "_filenet-pa._tcp"
    /// FileNET Process Analyzer [Chris_Adkins]
    public static let `filenetPaUdp`: Self = "_filenet-pa._udp"
    /// FileNET Component Manager [Chris_Adkins]
    public static let `filenetCmTcp`: Self = "_filenet-cm._tcp"
    /// FileNET Component Manager [Chris_Adkins]
    public static let `filenetCmUdp`: Self = "_filenet-cm._udp"
    /// FileNET Rules Engine [Chris_Adkins]
    public static let `filenetReTcp`: Self = "_filenet-re._tcp"
    /// FileNET Rules Engine [Chris_Adkins]
    public static let `filenetReUdp`: Self = "_filenet-re._udp"
    /// Performance Clearinghouse [Tim_Morgan_2]
    public static let `filenetPchTcp`: Self = "_filenet-pch._tcp"
    /// Performance Clearinghouse [Tim_Morgan_2]
    public static let `filenetPchUdp`: Self = "_filenet-pch._udp"
    /// FileNET BPM IOR [Chris_Adkins]
    public static let `filenetPeiorTcp`: Self = "_filenet-peior._tcp"
    /// FileNET BPM IOR [Chris_Adkins]
    public static let `filenetPeiorUdp`: Self = "_filenet-peior._udp"
    /// FileNet BPM CORBA [Chris_Adkins]
    public static let `filenetObrokTcp`: Self = "_filenet-obrok._tcp"
    /// FileNet BPM CORBA [Chris_Adkins]
    public static let `filenetObrokUdp`: Self = "_filenet-obrok._udp"
    /// Multiple Listing Service Network [Corey_Leong]
    public static let `mlsnTcp`: Self = "_mlsn._tcp"
    /// Multiple Listing Service Network [Corey_Leong]
    public static let `mlsnUdp`: Self = "_mlsn._udp"
    /// Real Estate Transport Protocol [Corey_Leong]
    public static let `retpTcp`: Self = "_retp._tcp"
    /// Attachmate ID Manager [George_Gianelos_2]
    public static let `idmgratmTcp`: Self = "_idmgratm._tcp"
    /// Attachmate ID Manager [George_Gianelos_2]
    public static let `idmgratmUdp`: Self = "_idmgratm._udp"
    /// WatchGuard Endpoint Communications [WatchGuard_Technologies_Inc]
    public static let `wgEndptCommsTcp`: Self = "_wg-endpt-comms._tcp"
    /// MySQL Database Extended Interface [Oracle_8]
    public static let `mysqlxTcp`: Self = "_mysqlx._tcp"
    /// Aurora (Balaena Ltd) [Andrew_Mather]
    public static let `auroraBalaenaTcp`: Self = "_aurora-balaena._tcp"
    /// Aurora (Balaena Ltd) [Andrew_Mather]
    public static let `auroraBalaenaUdp`: Self = "_aurora-balaena._udp"
    /// DiamondCentral Interface [Edward_Browdy]
    public static let `diamondportTcp`: Self = "_diamondport._tcp"
    /// DiamondCentral Interface [Edward_Browdy]
    public static let `diamondportUdp`: Self = "_diamondport._udp"
    /// Digital Gaslight Service [George_Flanagin]
    public static let `dgiServTcp`: Self = "_dgi-serv._tcp"
    /// SpeedTrace TraceAgent [Holger_Heinrich]
    public static let `speedtraceTcp`: Self = "_speedtrace._tcp"
    /// SpeedTrace TraceAgent Discovery [Holger_Heinrich]
    public static let `speedtraceDiscUdp`: Self = "_speedtrace-disc._udp"
    /// traceroute use [IANA]
    public static let `tracerouteTcp`: Self = "_traceroute._tcp"
    /// traceroute use [IANA]
    public static let `tracerouteUdp`: Self = "_traceroute._udp"
    /// IP Multicast Traceroute [IESG]
    public static let `mtraceUdp`: Self = "_mtrace._udp"
    /// SNIP Slave [Dr_Chris_Tucker]
    public static let `snipSlaveTcp`: Self = "_snip-slave._tcp"
    /// SNIP Slave [Dr_Chris_Tucker]
    public static let `snipSlaveUdp`: Self = "_snip-slave._udp"
    /// Adept IP protocol [Digilent_Inc]
    public static let `digilentAdeptTcp`: Self = "_digilent-adept._tcp"
    /// TurboNote Relay Server Default Port [Peter_Hyde]
    public static let `turbonote2Tcp`: Self = "_turbonote-2._tcp"
    /// TurboNote Relay Server Default Port [Peter_Hyde]
    public static let `turbonote2Udp`: Self = "_turbonote-2._udp"
    /// P-Net on IP local [Kurt_Nissen]
    public static let `pNetLocalTcp`: Self = "_p-net-local._tcp"
    /// P-Net on IP local [Kurt_Nissen]
    public static let `pNetLocalUdp`: Self = "_p-net-local._udp"
    /// P-Net on IP remote [Kurt_Nissen]
    public static let `pNetRemoteTcp`: Self = "_p-net-remote._tcp"
    /// P-Net on IP remote [Kurt_Nissen]
    public static let `pNetRemoteUdp`: Self = "_p-net-remote._udp"
    /// dhanalakshmi.org EDI Service [Girish_Gopalakrishna]
    public static let `dhanalakshmiTcp`: Self = "_dhanalakshmi._tcp"
    /// dhanalakshmi.org EDI Service [Girish_Gopalakrishna]
    public static let `edi_serviceUdp`: Self = "_edi_service._udp"
    /// PROFInet RT Unicast [Peter_Wenzel]
    public static let `profinetRtTcp`: Self = "_profinet-rt._tcp"
    /// PROFInet RT Unicast [Peter_Wenzel]
    public static let `profinetRtUdp`: Self = "_profinet-rt._udp"
    /// PROFInet RT Multicast [Peter_Wenzel]
    public static let `profinetRtmTcp`: Self = "_profinet-rtm._tcp"
    /// PROFInet RT Multicast [Peter_Wenzel]
    public static let `profinetRtmUdp`: Self = "_profinet-rtm._udp"
    /// PROFInet Context Manager [Peter_Wenzel]
    public static let `profinetCmTcp`: Self = "_profinet-cm._tcp"
    /// PROFInet Context Manager [Peter_Wenzel]
    public static let `profinetCmUdp`: Self = "_profinet-cm._udp"
    /// EtherCAT Port [Martin_Rostan]
    public static let `ethercatTcp`: Self = "_ethercat._tcp"
    /// EtherCAT Port [Martin_Rostan]
    public static let `ethercatUdp`: Self = "_ethercat._udp"
    /// HeathView [Heathwest_Systems_Limited]
    public static let `heathviewTcp`: Self = "_heathview._tcp"
    /// ReadyTech Viewer [ReadyTech_Corporation]
    public static let `rtViewerTcp`: Self = "_rt-viewer._tcp"
    /// ReadyTech Viewer [ReadyTech_Corporation]
    public static let `rtViewerUdp`: Self = "_rt-viewer._udp"
    /// ReadyTech Sound Server [ReadyTech_Corporation]
    public static let `rtSoundTcp`: Self = "_rt-sound._tcp"
    /// ReadyTech DeviceMapper Server [ReadyTech_Corporation]
    public static let `rtDevicemapperTcp`: Self = "_rt-devicemapper._tcp"
    /// ReadyTech ClassManager [ReadyTech_Corporation]
    public static let `rtClassmanagerTcp`: Self = "_rt-classmanager._tcp"
    /// ReadyTech ClassManager [ReadyTech_Corporation]
    public static let `rtClassmanagerUdp`: Self = "_rt-classmanager._udp"
    /// ReadyTech LabTracker [ReadyTech_Corporation]
    public static let `rtLabtrackerTcp`: Self = "_rt-labtracker._tcp"
    /// ReadyTech Helper Service [ReadyTech_Corporation]
    public static let `rtHelperTcp`: Self = "_rt-helper._tcp"
    /// Axiomatic discovery protocol [Axiomatic_Technologies_Corporation]
    public static let `axioDiscTcp`: Self = "_axio-disc._tcp"
    /// Axiomatic discovery protocol [Axiomatic_Technologies_Corporation]
    public static let `axioDiscUdp`: Self = "_axio-disc._udp"
    /// KIT Messenger [Rudi_Visser]
    public static let `kitimTcp`: Self = "_kitim._tcp"
    /// Altova License Management [Alexander_Falk_2]
    public static let `altovaLmTcp`: Self = "_altova-lm._tcp"
    /// Altova License Management Discovery [Alexander_Falk_2]
    public static let `altovaLmDiscUdp`: Self = "_altova-lm-disc._udp"
    /// Gutters Note Exchange [Squee_Application_Development]
    public static let `guttersnexTcp`: Self = "_guttersnex._tcp"
    /// OpenStack ID Service [Rackspace_Hosting]
    public static let `openstackIdTcp`: Self = "_openstack-id._tcp"
    /// AllPeers Network [Cedric_Maloux]
    public static let `allpeersTcp`: Self = "_allpeers._tcp"
    /// AllPeers Network [Cedric_Maloux]
    public static let `allpeersUdp`: Self = "_allpeers._udp"
    /// Wireless LAN Control plane Protocol (WLCP) [ThreeGPP_3]
    public static let `wlcpUdp`: Self = "_wlcp._udp"
    /// S1-Control Plane (3GPP) [Kimmo_Kymalainen]
    public static let `s1ControlSctp`: Self = "_s1-control._sctp"
    /// X2-Control Plane (3GPP) [Kimmo_Kymalainen]
    public static let `x2ControlSctp`: Self = "_x2-control._sctp"
    /// SLm Interface Application Protocol [ThreeGPP_4]
    public static let `slmapSctp`: Self = "_slmap._sctp"
    /// Nq and Nq' Application Protocol [ThreeGPP_4]
    public static let `nqApSctp`: Self = "_nq-ap._sctp"
    /// M2 Application Part [Dario_S_Tonesi]
    public static let `m2apSctp`: Self = "_m2ap._sctp"
    /// M3 Application Part [Dario_S_Tonesi]
    public static let `m3apSctp`: Self = "_m3ap._sctp"
    /// Xw-Control Plane (3GPP) [Boubacar_KIMNBA_DIT_ADAMOU]
    public static let `xwControlSctp`: Self = "_xw-control._sctp"
    /// Febooti Automation Workshop [Maris_Bormanis]
    public static let `febootiAwTcp`: Self = "_febooti-aw._tcp"
    /// Observium statistics collection agent [Observium]
    public static let `observiumAgentTcp`: Self = "_observium-agent._tcp"
    /// MapX communication [MicroTechniX]
    public static let `mapxTcp`: Self = "_mapx._tcp"
    /// KastenX Pipe [Guy_Cheng]
    public static let `kastenxpipeTcp`: Self = "_kastenxpipe._tcp"
    /// KastenX Pipe [Guy_Cheng]
    public static let `kastenxpipeUdp`: Self = "_kastenxpipe._udp"
    /// science + computing's Venus Administration Port [Ralf_Allrutz]
    public static let `neckarTcp`: Self = "_neckar._tcp"
    /// science + computing's Venus Administration Port [Ralf_Allrutz]
    public static let `neckarUdp`: Self = "_neckar._udp"
    /// Google Drive Sync [Google_Inc]
    public static let `gdriveSyncTcp`: Self = "_gdrive-sync._tcp"
    /// Epipole File Transfer Protocol [Epipole_Limited]
    public static let `eftpTcp`: Self = "_eftp._tcp"
    /// Unisys ClearPath ePortal [Sung_U_Ro]
    public static let `unisysEportalTcp`: Self = "_unisys-eportal._tcp"
    /// Unisys ClearPath ePortal [Sung_U_Ro]
    public static let `unisysEportalUdp`: Self = "_unisys-eportal._udp"
    /// InfoVista Server Database [InfoVista]
    public static let `ivsDatabaseTcp`: Self = "_ivs-database._tcp"
    /// InfoVista Server Insertion [InfoVista]
    public static let `ivsInsertionTcp`: Self = "_ivs-insertion._tcp"
    /// Cresco Controller [UofK]
    public static let `crescoControlTcp`: Self = "_cresco-control._tcp"
    /// Cresco Controller Discovery [UofK]
    public static let `crescoctrlDiscUdp`: Self = "_crescoctrl-disc._udp"
    /// Galaxy7 Data Tunnel [Tatham_Oddie]
    public static let `galaxy7DataTcp`: Self = "_galaxy7-data._tcp"
    /// Galaxy7 Data Tunnel [Tatham_Oddie]
    public static let `galaxy7DataUdp`: Self = "_galaxy7-data._udp"
    /// Fairview Message Service [Jim_Lyle]
    public static let `fairviewTcp`: Self = "_fairview._tcp"
    /// Fairview Message Service [Jim_Lyle]
    public static let `fairviewUdp`: Self = "_fairview._udp"
    /// AppGate Policy Server [Martin_Forssen]
    public static let `agpolicyTcp`: Self = "_agpolicy._tcp"
    /// AppGate Policy Server [Martin_Forssen]
    public static let `agpolicyUdp`: Self = "_agpolicy._udp"
    /// NG Control Plane (3GPP) [Luis_Lopes]
    public static let `ngControlSctp`: Self = "_ng-control._sctp"
    /// Xn Control Plane (3GPP) [Luis_Lopes]
    public static let `xnControlSctp`: Self = "_xn-control._sctp"
    /// E1 signalling transport (3GPP) [Huawei_Technologies_France]
    public static let `e1InterfaceSctp`: Self = "_e1-interface._sctp"
    /// F1 Control Plane (3GPP) [Luis_Lopes]
    public static let `f1ControlSctp`: Self = "_f1-control._sctp"
    /// Premier SQL Middleware Server [Brain_Patchwork_DX_LLC]
    public static let `psqlmwsTcp`: Self = "_psqlmws._tcp"
    /// Sruth is a service for the distribution of routinely-       generated but arbitrary files based on a publish/subscribe       distribution model and implemented using a peer-to-peer transport       mechanism [University_Corporation_for_Atmospheric_Research]
    public static let `sruthTcp`: Self = "_sruth._tcp"
    /// Security approval process for use of the secRMM SafeCopy program [Squadra_Technologies]
    public static let `secrmmsafecopyaTcp`: Self = "_secrmmsafecopya._tcp"
    /// Children's hearing test/Telemedicine [Hearing_Australia]
    public static let `vroaTcp`: Self = "_vroa._tcp"
    /// TurboNote Default Port [Peter_Hyde]
    public static let `turbonote1Tcp`: Self = "_turbonote-1._tcp"
    /// TurboNote Default Port [Peter_Hyde]
    public static let `turbonote1Udp`: Self = "_turbonote-1._udp"
    /// SafetyNET p [Pilz_GmbH_and_Co._KG]
    public static let `safetynetpTcp`: Self = "_safetynetp._tcp"
    /// SafetyNET p [Pilz_GmbH_and_Co._KG]
    public static let `safetynetpUdp`: Self = "_safetynetp._udp"
    /// K-PatentsSensorInformation [Vaisala]
    public static let `kPatentssensorUdp`: Self = "_k-patentssensor._udp"
    /// Simplify Printing TX [Tricerat]
    public static let `sptxTcp`: Self = "_sptx._tcp"
    /// CSCP [Michael_Dodge]
    public static let `cscpTcp`: Self = "_cscp._tcp"
    /// CSCP [Michael_Dodge]
    public static let `cscpUdp`: Self = "_cscp._udp"
    /// CSCCREDIR [Sudhir_Menon]
    public static let `csccredirTcp`: Self = "_csccredir._tcp"
    /// CSCCREDIR [Sudhir_Menon]
    public static let `csccredirUdp`: Self = "_csccredir._udp"
    /// CSCCFIREWALL [Sudhir_Menon]
    public static let `csccfirewallTcp`: Self = "_csccfirewall._tcp"
    /// CSCCFIREWALL [Sudhir_Menon]
    public static let `csccfirewallUdp`: Self = "_csccfirewall._udp"
    /// ORTEC Service Discovery [Jesse_Ursery]
    public static let `ortecDiscUdp`: Self = "_ortec-disc._udp"
    /// Foursticks QoS Protocol [Chee_Kent_Lam]
    public static let `fsQosTcp`: Self = "_fs-qos._tcp"
    /// Foursticks QoS Protocol [Chee_Kent_Lam]
    public static let `fsQosUdp`: Self = "_fs-qos._udp"
    /// Tentacle Server [Sancho_Lerena]
    public static let `tentacleTcp`: Self = "_tentacle._tcp"
    /// Z-Wave Protocol over SSL/TLS [Sigma_Designs_3]
    public static let `zWaveSTcp`: Self = "_z-wave-s._tcp"
    /// Z-Wave Protocol over DTLS [Sigma_Designs_3]
    public static let `zWaveSUdp`: Self = "_z-wave-s._udp"
    /// Crestron Control Port [Crestron_Electronics]
    public static let `crestronCipTcp`: Self = "_crestron-cip._tcp"
    /// Crestron Control Port [Crestron_Electronics]
    public static let `crestronCipUdp`: Self = "_crestron-cip._udp"
    /// Crestron Terminal Port [Crestron_Electronics]
    public static let `crestronCtpTcp`: Self = "_crestron-ctp._tcp"
    /// Crestron Terminal Port [Crestron_Electronics]
    public static let `crestronCtpUdp`: Self = "_crestron-ctp._udp"
    /// Crestron Secure Control Port [Crestron_Electronics]
    public static let `crestronCipsTcp`: Self = "_crestron-cips._tcp"
    /// Crestron Secure Terminal Port [Crestron_Electronics]
    public static let `crestronCtpsTcp`: Self = "_crestron-ctps._tcp"
    /// Computer Associates network discovery protocol [Jon_Press]
    public static let `candpTcp`: Self = "_candp._tcp"
    /// Computer Associates network discovery protocol [Jon_Press]
    public static let `candpUdp`: Self = "_candp._udp"
    /// CA discovery response [Jon_Press]
    public static let `candrpTcp`: Self = "_candrp._tcp"
    /// CA discovery response [Jon_Press]
    public static let `candrpUdp`: Self = "_candrp._udp"
    /// CA eTrust RPC [Jon_Press]
    public static let `caerpcTcp`: Self = "_caerpc._tcp"
    /// CA eTrust RPC [Jon_Press]
    public static let `caerpcUdp`: Self = "_caerpc._udp"
    /// API endpoint for search application [Curiosity_GmbH]
    public static let `curiosityTcp`: Self = "_curiosity._tcp"
    /// Receiver Remote Control [Research_Electronics_International]
    public static let `recvrRcTcp`: Self = "_recvr-rc._tcp"
    /// Receiver Remote Control Discovery [Research_Electronics_International]
    public static let `recvrRcDiscUdp`: Self = "_recvr-rc-disc._udp"
    /// REACHOUT [Roman_Kriis]
    public static let `reachoutTcp`: Self = "_reachout._tcp"
    /// REACHOUT [Roman_Kriis]
    public static let `reachoutUdp`: Self = "_reachout._udp"
    /// NDM-AGENT-PORT [Roman_Kriis]
    public static let `ndmAgentPortTcp`: Self = "_ndm-agent-port._tcp"
    /// NDM-AGENT-PORT [Roman_Kriis]
    public static let `ndmAgentPortUdp`: Self = "_ndm-agent-port._udp"
    /// IP-PROVISION [Roman_Kriis]
    public static let `ipProvisionTcp`: Self = "_ip-provision._tcp"
    /// IP-PROVISION [Roman_Kriis]
    public static let `ipProvisionUdp`: Self = "_ip-provision._udp"
    /// Reconnoiter Agent Data Transport [Theo_Schlossnagle]
    public static let `noitTransportTcp`: Self = "_noit-transport._tcp"
    /// Shaper Automation Server Management [Shaper_Automation]
    public static let `shaperaiTcp`: Self = "_shaperai._tcp"
    /// Shaper Automation Server Management Discovery [Shaper_Automation]
    public static let `shaperaiDiscUdp`: Self = "_shaperai-disc._udp"
    /// HmIP LAN Routing [eQ-3_Entwicklung_GmbH]
    public static let `hmipRoutingUdp`: Self = "_hmip-routing._udp"
    /// EQ3 firmware update [eQ-3_Entwicklung_GmbH]
    public static let `eq3UpdateTcp`: Self = "_eq3-update._tcp"
    /// EQ3 discovery and configuration [eQ-3_Entwicklung_GmbH]
    public static let `eq3ConfigUdp`: Self = "_eq3-config._udp"
    /// Cisco EnergyWise Management 
    public static let `ewMgmtTcp`: Self = "_ew-mgmt._tcp"
    /// Cisco EnergyWise Discovery and Command Flooding [John_Parello]
    public static let `ewDiscCmdUdp`: Self = "_ew-disc-cmd._udp"
    /// Cisco NetMgmt DB Ports [Cisco_Systems]
    public static let `ciscocsdbTcp`: Self = "_ciscocsdb._tcp"
    /// Cisco NetMgmt DB Ports [Cisco_Systems]
    public static let `ciscocsdbUdp`: Self = "_ciscocsdb._udp"
    /// Z-Wave Secure Tunnel [Sigma_Designs_Inc]
    public static let `zWaveTunnelTcp`: Self = "_z-wave-tunnel._tcp"
    /// PCP server (pmcd) [Ken_McDonell]
    public static let `pmcdTcp`: Self = "_pmcd._tcp"
    /// PCP server (pmcd) [Ken_McDonell]
    public static let `pmcdUdp`: Self = "_pmcd._udp"
    /// PCP server (pmcd) proxy [Ken_McDonell]
    public static let `pmcdproxyTcp`: Self = "_pmcdproxy._tcp"
    /// PCP server (pmcd) proxy [Ken_McDonell]
    public static let `pmcdproxyUdp`: Self = "_pmcdproxy._udp"
    /// HTTP binding for Performance Co-Pilot client API [Performance_Co-Pilot_PCP_Project]
    public static let `pmwebapiTcp`: Self = "_pmwebapi._tcp"
    /// Cognex DataMan Management Protocol [Cognex]
    public static let `cognexDatamanTcp`: Self = "_cognex-dataman._tcp"
    /// Acronis Backup Gateway service port [Acronis]
    public static let `acronisBackupTcp`: Self = "_acronis-backup._tcp"
    /// DOMIQ Building Automation [DOMIQ_Sp_zoo]
    public static let `domiqUdp`: Self = "_domiq._udp"
    /// REALbasic Remote Debug [Aaron_Ballman]
    public static let `rbrDebugTcp`: Self = "_rbr-debug._tcp"
    /// REALbasic Remote Debug [Aaron_Ballman]
    public static let `rbrDebugUdp`: Self = "_rbr-debug._udp"
    /// AudioScience HPI [Eliot_Blennerhassett]
    public static let `asihpiUdp`: Self = "_asihpi._udp"
    /// EtherNet/IP messaging IANA assigned this well-formed service name as a replacement for "EtherNet/IP-2". [Brian_Batke_2]
    public static let `EtherNetIp2Tcp`: Self = "_EtherNet-IP-2._tcp"
    /// EtherNet/IP messaging IANA assigned this well-formed service name as a replacement for "EtherNet/IP-2". [Brian_Batke_2]
    public static let `EtherNetIp2Udp`: Self = "_EtherNet-IP-2._udp"
    /// M3DA is used for efficient machine-to-machine communications [Eclipse_Foundation]
    public static let `m3daTcp`: Self = "_m3da._tcp"
    /// M3DA Discovery is used for efficient machine-to-machine communications [Eclipse_Foundation]
    public static let `m3daDiscUdp`: Self = "_m3da-disc._udp"
    /// Nuance AutoStore Status Monitoring Protocol (data transfer) [Nuance_Communications_Inc4]
    public static let `asmpTcp`: Self = "_asmp._tcp"
    /// Nuance AutoStore Status Monitoring Protocol (device monitoring) [Nuance_Communications_Inc4]
    public static let `asmpMonUdp`: Self = "_asmp-mon._udp"
    /// Nuance AutoStore Status Monitoring Protocol (secure data transfer) [Nuance_Communications_Inc4]
    public static let `asmpsTcp`: Self = "_asmps._tcp"
    /// Redspeed Status Monitor [Redspeed_International_Ltd]
    public static let `rsStatusTcp`: Self = "_rs-status._tcp"
    /// Remote application control protocol [Eleks_Ltd]
    public static let `synctestTcp`: Self = "_synctest._tcp"
    /// InVision AG [Matthias_Schroer]
    public static let `invisionAgTcp`: Self = "_invision-ag._tcp"
    /// InVision AG [Matthias_Schroer]
    public static let `invisionAgUdp`: Self = "_invision-ag._udp"
    /// ASSIA CloudCheck WiFi Management System [ASSIA_Inc]
    public static let `cloudcheckTcp`: Self = "_cloudcheck._tcp"
    /// ASSIA CloudCheck WiFi Management keepalive [ASSIA_Inc]
    public static let `cloudcheckPingUdp`: Self = "_cloudcheck-ping._udp"
    /// EBA PRISE [Patrick_Kara]
    public static let `ebaTcp`: Self = "_eba._tcp"
    /// EBA PRISE [Patrick_Kara]
    public static let `ebaUdp`: Self = "_eba._udp"
    /// Server for the DAI family of client-server products [Data_Access_Inc]
    public static let `daiShellTcp`: Self = "_dai-shell._tcp"
    /// Qpuncture Data Access Service [Michael_Yun]
    public static let `qdb2serviceTcp`: Self = "_qdb2service._tcp"
    /// Qpuncture Data Access Service [Michael_Yun]
    public static let `qdb2serviceUdp`: Self = "_qdb2service._udp"
    /// SSRServerMgr [Jeremy_Gilliat]
    public static let `ssrServermgrTcp`: Self = "_ssr-servermgr._tcp"
    /// SSRServerMgr [Jeremy_Gilliat]
    public static let `ssrServermgrUdp`: Self = "_ssr-servermgr._udp"
    /// Listen port used for Inedo agent communication [Inedo]
    public static let `inedoTcp`: Self = "_inedo._tcp"
    /// Connection between a desktop computer or server and a signature tablet to capture handwritten signatures [SOFTPRO_GmbH]
    public static let `spremotetabletTcp`: Self = "_spremotetablet._tcp"
    /// MediaBox Server [Alexander_Graef]
    public static let `mediaboxTcp`: Self = "_mediabox._tcp"
    /// MediaBox Server [Alexander_Graef]
    public static let `mediaboxUdp`: Self = "_mediabox._udp"
    /// Message Bus [Dirk_Kutscher]
    public static let `mbusTcp`: Self = "_mbus._tcp"
    /// Message Bus [Dirk_Kutscher]
    public static let `mbusUdp`: Self = "_mbus._udp"
    /// Windows Remote Management Service [Ryan_Mack]
    public static let `winrmTcp`: Self = "_winrm._tcp"
    /// Configuration of motors connected to Industrial Ethernet [JVL_Industri_Elektronik]
    public static let `jvlMactalkUdp`: Self = "_jvl-mactalk._udp"
    /// Databeam Corporation [Cindy_Martin]
    public static let `dbbrowseTcp`: Self = "_dbbrowse._tcp"
    /// Databeam Corporation [Cindy_Martin]
    public static let `dbbrowseUdp`: Self = "_dbbrowse._udp"
    /// Direct Play Server [Ajay_Jindal]
    public static let `directplaysrvrTcp`: Self = "_directplaysrvr._tcp"
    /// Direct Play Server [Ajay_Jindal]
    public static let `directplaysrvrUdp`: Self = "_directplaysrvr._udp"
    /// ALC Protocol [Dave_Robin]
    public static let `apTcp`: Self = "_ap._tcp"
    /// ALC Protocol [Dave_Robin]
    public static let `apUdp`: Self = "_ap._udp"
    /// Building Automation and Control Networks [Coleman_Brumley]
    public static let `bacnetTcp`: Self = "_bacnet._tcp"
    /// Building Automation and Control Networks [Coleman_Brumley]
    public static let `bacnetUdp`: Self = "_bacnet._udp"
    /// PreSonus Universal Control Network Protocol [PreSonus_Audio_Electronics_Inc]
    public static let `presonusUcnetUdp`: Self = "_presonus-ucnet._udp"
    /// Nimbus Controller [Carstein_Seeberg_2]
    public static let `nimcontrollerTcp`: Self = "_nimcontroller._tcp"
    /// Nimbus Controller [Carstein_Seeberg_2]
    public static let `nimcontrollerUdp`: Self = "_nimcontroller._udp"
    /// Nimbus Spooler [Carstein_Seeberg_2]
    public static let `nimspoolerTcp`: Self = "_nimspooler._tcp"
    /// Nimbus Spooler [Carstein_Seeberg_2]
    public static let `nimspoolerUdp`: Self = "_nimspooler._udp"
    /// Nimbus Hub [Carstein_Seeberg_2]
    public static let `nimhubTcp`: Self = "_nimhub._tcp"
    /// Nimbus Hub [Carstein_Seeberg_2]
    public static let `nimhubUdp`: Self = "_nimhub._udp"
    /// Nimbus Gateway [Carstein_Seeberg_2]
    public static let `nimgtwTcp`: Self = "_nimgtw._tcp"
    /// Nimbus Gateway [Carstein_Seeberg_2]
    public static let `nimgtwUdp`: Self = "_nimgtw._udp"
    /// NimbusDB Connector [Stephen_Harrison]
    public static let `nimbusdbTcp`: Self = "_nimbusdb._tcp"
    /// NimbusDB Control [Stephen_Harrison]
    public static let `nimbusdbctrlTcp`: Self = "_nimbusdbctrl._tcp"
    /// Juliar Programming Language Protocol [Juliar]
    public static let `jukaTcp`: Self = "_juka._tcp"
    /// WeFi Access Network Discovery and Selection Function [WeFi_Inc]
    public static let `weandsfTcp`: Self = "_weandsf._tcp"
    /// Image Systems Network Services [Bengt_Gustafsson]
    public static let `isnetservTcp`: Self = "_isnetserv._tcp"
    /// Image Systems Network Services [Bengt_Gustafsson]
    public static let `isnetservUdp`: Self = "_isnetserv._udp"
    /// Bloomberg locator [Albert_Hou]
    public static let `blp5Tcp`: Self = "_blp5._tcp"
    /// Bloomberg locator [Albert_Hou]
    public static let `blp5Udp`: Self = "_blp5._udp"
    /// com-bardac-dw [Nicholas_J_Howes]
    public static let `comBardacDwTcp`: Self = "_com-bardac-dw._tcp"
    /// com-bardac-dw [Nicholas_J_Howes]
    public static let `comBardacDwUdp`: Self = "_com-bardac-dw._udp"
    /// iqobject [Bjorn_de_Bonnenfant]
    public static let `iqobjectTcp`: Self = "_iqobject._tcp"
    /// iqobject [Bjorn_de_Bonnenfant]
    public static let `iqobjectUdp`: Self = "_iqobject._udp"
    /// Robot Raconteur transport [Wason_Technology_LLC]
    public static let `robotraconteurTcp`: Self = "_robotraconteur._tcp"
    /// Robot Raconteur transport [Wason_Technology_LLC]
    public static let `robotraconteurUdp`: Self = "_robotraconteur._udp"
    /// Matahari Broker [Matahari_Project]
    public static let `matahariTcp`: Self = "_matahari._tcp"
    /// Nuance Unity Service Request Protocol [Nuance_Communications_Inc3]
    public static let `nusrpTcp`: Self = "_nusrp._tcp"
    /// Nuance Unity Service Discovery Protocol [Nuance_Communications_Inc3]
    public static let `nusdpDiscUdp`: Self = "_nusdp-disc._udp"
    /// InSpider System [AnRobot]
    public static let `inspiderTcp`: Self = "_inspider._tcp"
    /// Access Control Device [Honeywell_Security_Group]
    public static let `acsCtlDsTcp`: Self = "_acs-ctl-ds._tcp"
    /// Access Control Device [Honeywell_Security_Group]
    public static let `acsCtlDsUdp`: Self = "_acs-ctl-ds._udp"
    /// Access Control Gateway [Honeywell_Security_Group]
    public static let `acsCtlGwTcp`: Self = "_acs-ctl-gw._tcp"
    /// Access Control Gateway [Honeywell_Security_Group]
    public static let `acsCtlGwUdp`: Self = "_acs-ctl-gw._udp"
    /// Adam Hall network control and monitoring [Adam_Hall_Group]
    public static let `adamhallTcp`: Self = "_adamhall._tcp"
    /// Adam Hall network control and monitoring [Adam_Hall_Group]
    public static let `adamhallUdp`: Self = "_adamhall._udp"
    /// Address Book Server used for contacts and calendar synchronisation [AddressBookServer]
    public static let `addressbooksrvTcp`: Self = "_addressbooksrv._tcp"
    /// Adobe Shadow Server [Adobe_Systems]
    public static let `adobeShadowTcp`: Self = "_adobe-shadow._tcp"
    /// Aerohive Proxy Configuration Service [Aerohive_Networks]
    public static let `aerohiveProxyTcp`: Self = "_aerohive-proxy._tcp"
    /// Affinity Designer document sharing [Serif_Europe_Ltd]
    public static let `affinityDocs0Tcp`: Self = "_affinity-docs0._tcp"
    /// Affinity Photo document sharing [Serif_Europe_Ltd]
    public static let `affinityDocs1Tcp`: Self = "_affinity-docs1._tcp"
    /// Affinity Publisher document sharing [Serif_Europe_Ltd]
    public static let `affinityDocs2Tcp`: Self = "_affinity-docs2._tcp"
    /// Affinity content sharing [Serif_Europe_Ltd]
    public static let `affinityCntentTcp`: Self = "_affinity-cntent._tcp"
    /// Airdrop [Apple_Inc]
    public static let `airdropTcp`: Self = "_airdrop._tcp"
    /// Airmate interworking protocol [Myriel_Aviation_-_Airmate]
    public static let `airmateTcp`: Self = "_airmate._tcp"
    /// Airmate interworking protocol [Myriel_Aviation_-_Airmate]
    public static let `airmateUdp`: Self = "_airmate._udp"
    /// Protocol for streaming of audio/video content [Apple_Inc_2]
    public static let `airplayTcp`: Self = "_airplay._tcp"
    /// Protocol for streaming of audio/video content [Apple_Inc_2]
    public static let `airplayUdp`: Self = "_airplay._udp"
    /// Coda AirPreview [Panic_Inc]
    public static let `airpreviewTcp`: Self = "_airpreview._tcp"
    /// Alazar Technologies ATN Communication Protocol [Alazar_Technologies]
    public static let `alazartechAtnTcp`: Self = "_alazartech-atn._tcp"
    /// Aloe Gateway Protocol [Layered_Logic]
    public static let `aloeGwpTcp`: Self = "_aloe-gwp._tcp"
    /// Aloe Pairing Protocol [Layered_Logic]
    public static let `aloePpTcp`: Self = "_aloe-pp._tcp"
    /// ASCOM Alpaca Device Discovery [ASCOM_Initiative]
    public static let `alpacadiscoveryUdp`: Self = "_alpacadiscovery._udp"
    /// Ambarella Cameras [Louis_Sun]
    public static let `ambaCamUdp`: Self = "_amba-cam._udp"
    /// ANT Galio web services [ANT_Software]
    public static let `antrmaiTcp`: Self = "_antrmai._tcp"
    /// remote control of Linux PCs from Android and J2ME [Mikhail_Fedotov]
    public static let `anyremoteTcp`: Self = "_anyremote._tcp"
    /// Apple Mobile Device Protocol [Apple_2]
    public static let `appleMobdevTcp`: Self = "_apple-mobdev._tcp"
    /// Apple MIDI [Doug_Wyatt]
    public static let `appleMidiUdp`: Self = "_apple-midi._udp"
    /// Arcturus Networks Inc. Hardware Services [Arcturus_Networks_Inc]
    public static let `arcnetUdp`: Self = "_arcnet._udp"
    /// Active Registry Network for distribution of values and streams [Mictron]
    public static let `arnTcp`: Self = "_arn._tcp"
    /// ASAM Capture Module Protocol [ASAM_e_V]
    public static let `asamCmpUdp`: Self = "_asam-cmp._udp"
    /// protocol for an event-based architecture for distributed control of mobile robots [Mobsya_Association]
    public static let `asebaTcp`: Self = "_aseba._tcp"
    /// Asterisk Caller-ID Notification Service [Sven_Slezak]
    public static let `astnotifyUdp`: Self = "_astnotify._udp"
    /// AT protocol over IP [Selectron_BVBA]
    public static let `atnetUdp`: Self = "_atnet._udp"
    /// Attero Tech Audio Device [Attero_Tech_LLC]
    public static let `atteroAdTcp`: Self = "_attero-ad._tcp"
    /// Attero Tech Audio Device [Attero_Tech_LLC]
    public static let `atteroAdUdp`: Self = "_attero-ad._udp"
    /// Audirvana Remote Access Protocol [Audirvana_SCS]
    public static let `audirvanaApTcp`: Self = "_audirvana-ap._tcp"
    /// automatic sending Image data protocol [Canon_Inc_2]
    public static let `autosendimagesTcp`: Self = "_autosendimages._tcp"
    /// Access Point for AutoTargets system [Automated_Target_Solutions_Inc.]
    public static let `autotargetsApTcp`: Self = "_autotargets-ap._tcp"
    /// TCP SpyChat Stream Message Exchange [Alexios_Vasileiadis]
    public static let `avChatRing01Tcp`: Self = "_av-chat-ring-01._tcp"
    /// Libravatar federated avatar hosting service. [libravatar_org]
    public static let `avatarsTcp`: Self = "_avatars._tcp"
    /// Libravatar federated avatar hosting service. [libravatar_org]
    public static let `avatarsSecTcp`: Self = "_avatars-sec._tcp"
    /// Axis Network Video Recorders [Axis_Communications_AB]
    public static let `axisNvrTcp`: Self = "_axis-nvr._tcp"
    /// Axis Network Video Recorders [Axis_Communications_AB]
    public static let `axisNvrUdp`: Self = "_axis-nvr._udp"
    /// IPSEC VPN tunnel over UDP [Stuart_Cheshire]
    public static let `autotunnelUdp`: Self = "_autotunnel._udp"
    /// Remote Control for BandHelper app [Arlo_Leach]
    public static let `bandhelperRcTcp`: Self = "_bandhelper-rc._tcp"
    /// Screen sharing for BandHelper app [Arlo_Leach]
    public static let `bandhelperSsTcp`: Self = "_bandhelper-ss._tcp"
    /// Peer to peer file sharing for a media player application [Fred_Zimmerman]
    public static let `barroomcomedyTcp`: Self = "_barroomcomedy._tcp"
    /// Buddycloud Server Delegation [buddycloud]
    public static let `bcloudServerTcp`: Self = "_bcloud-server._tcp"
    /// Beats Direct allows for the discovery and control of devices [Beats_Electronics_LLC]
    public static let `beatsdirectTcp`: Self = "_beatsdirect._tcp"
    /// Behnke doorphones / emergency phones [Telefonbau_Behnke_GmbH]
    public static let `behnkeCcTcp`: Self = "_behnke-cc._tcp"
    /// Behnke audio / video intercom systems [Telefonbau_Behnke_GmbH]
    public static let `behnkeStationTcp`: Self = "_behnke-station._tcp"
    /// Behnke doorphones / video intercoms [Telefonbau_Behnke_GmbH]
    public static let `behnkeVideoTcp`: Self = "_behnke-video._tcp"
    /// Becker & Hickl Inter Process Communication [Becker_Hickl_GmbH]
    public static let `bhipcTcp`: Self = "_bhipc._tcp"
    /// Becker & Hickl Inter Process Communication [Becker_Hickl_GmbH]
    public static let `bhipcUdp`: Self = "_bhipc._udp"
    /// Model Railway Control via netBiDiB [BiDiB_Tools_e.V.]
    public static let `bidibTcp`: Self = "_bidib._tcp"
    /// Data transfer service [Ramesh_Gupta]
    public static let `bitflitTcp`: Self = "_bitflit._tcp"
    /// BlueVertise Network Protocol (BNP) [Fabrizio_Guglielmino]
    public static let `bluevertiseUdp`: Self = "_bluevertise._udp"
    /// board plus application transfer protocol [CX5_SOFTWARE]
    public static let `boardplusTcp`: Self = "_boardplus._tcp"
    /// Booked communication protocol - Sharing And Sync Service [Sören_Havemester]
    public static let `bookedSyncTcp`: Self = "_booked-sync._tcp"
    /// Bootstrap service discovery [Pedro_Garcia]
    public static let `bootstrapTcp`: Self = "_bootstrap._tcp"
    /// Bootstrap service discovery [Pedro_Garcia]
    public static let `bootstrapUdp`: Self = "_bootstrap._udp"
    /// Proprietary [Uwe_Ziegler]
    public static let `boundaryscanUdp`: Self = "_boundaryscan._udp"
    /// Bout Fitness Synchronization Service [Bout_Fitness_LLC]
    public static let `boutfitnessTcp`: Self = "_boutfitness._tcp"
    /// Bout Fitness Synchronization Service [Bout_Fitness_LLC]
    public static let `boutfitnessUdp`: Self = "_boutfitness._udp"
    /// Boxray Devices Host Server [Caprice_Productions]
    public static let `boxraysrvrTcp`: Self = "_boxraysrvr._tcp"
    /// bq Cromo protocol [MUNDO_READER_SL]
    public static let `bqCromoTcp`: Self = "_bq-cromo._tcp"
    /// bq Cromo protocol [MUNDO_READER_SL]
    public static let `bqCromoUdp`: Self = "_bq-cromo._udp"
    /// Breas [Breas_Medical_AB]
    public static let `breasTcp`: Self = "_breas._tcp"
    /// Breas [Breas_Medical_AB]
    public static let `breasUdp`: Self = "_breas._udp"
    /// JSON RPC Bridge Protocol [Michel_Stam_2]
    public static let `bridgeprotocolTcp`: Self = "_bridgeprotocol._tcp"
    /// The Bootstrapping Remote Secure Key Infrastructure Proxy [IESG]
    public static let `brskiProxyTcp`: Self = "_brski-proxy._tcp"
    /// The Bootstrapping Remote Secure Key Infrastructure Registrar [IESG]
    public static let `brskiRegistrarTcp`: Self = "_brski-registrar._tcp"
    /// Beats Transfer Protocol allows for the discovery and control of devices [Beats_Electronics_LLC_2]
    public static let `btpTcp`: Self = "_btp._tcp"
    /// buddycloud API [buddycloud]
    public static let `buddycloudApiTcp`: Self = "_buddycloud-api._tcp"
    /// Service for opening electric doors [Mnemo.ai]
    public static let `buzzerTcp`: Self = "_buzzer._tcp"
    /// Calendaring Extensions to WebDAV (CalDAV) - non-TLS [IESG]
    public static let `caldavTcp`: Self = "_caldav._tcp"
    /// Calendaring Extensions to WebDAV (CalDAV) - over TLS [IESG]
    public static let `caldavsTcp`: Self = "_caldavs._tcp"
    /// Canon HTTP Management Protocol [Canon_Inc_3]
    public static let `canonChmpTcp`: Self = "_canon-chmp._tcp"
    /// vCard Extensions to WebDAV (CardDAV) - non-TLS [IESG]
    public static let `carddavTcp`: Self = "_carddav._tcp"
    /// vCard Extensions to WebDAV (CardDAV) - over TLS [IESG]
    public static let `carddavsTcp`: Self = "_carddavs._tcp"
    /// Carousel Player Protocol [Tightrope_Media_Systems]
    public static let `carouselTcp`: Self = "_carousel._tcp"
    /// Control the Cerebra Aquarium Controller [Vertex_Technologies_Inc]
    public static let `cerebraTcp`: Self = "_cerebra._tcp"
    /// Server for S/MIME and PGP certificates [IESG]
    public static let `certificatesTcp`: Self = "_certificates._tcp"
    /// Ciao Arduino Protocol [Mike_Colagrosso]
    public static let `ciaoTcp`: Self = "_ciao._tcp"
    /// Clique Link-Local Multicast Chat Room [Telepathy_project]
    public static let `cliqueUdp`: Self = "_clique._udp"
    /// Collabio [XCDS_International_Ltd.]
    public static let `collabioTcp`: Self = "_collabio._tcp"
    /// Collabio [XCDS_International_Ltd.]
    public static let `collabioUdp`: Self = "_collabio._udp"
    /// A client-server chat for LAN or Internet with video chat support [CommFort_software_Ltd.]
    public static let `commfortTcp`: Self = "_commfort._tcp"
    /// DNS SRV service for smarthome server [cone_smart_solution]
    public static let `conecubeUdp`: Self = "_conecube._udp"
    /// game controller forwarding protocol [Apps_From_Outer_Space_LLC]
    public static let `controllerplusTcp`: Self = "_controllerplus._tcp"
    /// 0-RTT TCP Convert Protocol [IESG]
    public static let `convertTcp`: Self = "_convert._tcp"
    /// Coolatoola Network Audio [Coolatoola.com]
    public static let `coolanetaudioTcp`: Self = "_coolanetaudio._tcp"
    /// Resource Directory accessed using CoAP over TCP [IESG]
    public static let `coreRdTcp`: Self = "_core-rd._tcp"
    /// Resource Directory accessed using CoAP [IESG]
    public static let `coreRdUdp`: Self = "_core-rd._udp"
    /// Resource Directory accessed using CoAP over TLS [IESG]
    public static let `coreRdTlsTcp`: Self = "_core-rd-tls._tcp"
    /// Resource Directory accessed using CoAP over DTLS [IESG]
    public static let `coreRdDtlsUdp`: Self = "_core-rd-dtls._udp"
    /// Service for coviot branded devices [Coviot]
    public static let `coviotTcp`: Self = "_coviot._tcp"
    /// Service for coviot branded devices [Coviot]
    public static let `coviotUdp`: Self = "_coviot._udp"
    /// Canfield Scientific Inc - Mirror Mobile Web Services [Canfield_Scientific_Inc]
    public static let `csiMmwsTcp`: Self = "_csi-mmws._tcp"
    /// Timer LAN service [Dark_Horse_GmbH_Co_KG]
    public static let `darkhorsetimerTcp`: Self = "_darkhorsetimer._tcp"
    /// d&b audiotechnik remote network [d_b_audiotechnik]
    public static let `dbaudioTcp`: Self = "_dbaudio._tcp"
    /// d&b audiotechnik remote network [d_b_audiotechnik]
    public static let `dbaudioUdp`: Self = "_dbaudio._udp"
    /// ping/traceroute using DCCP [Samuel_Jero]
    public static let `dccpPingDccp`: Self = "_dccp-ping._dccp"
    /// Spotlight on Oracle Diagnostic Server [Dell_2]
    public static let `dellSooDsTcp`: Self = "_dell-soo-ds._tcp"
    /// Spotlight on Oracle Diagnostic Server [Dell_2]
    public static let `dellSooDsUdp`: Self = "_dell-soo-ds._udp"
    /// Spotlight on SQL Server Diagnostic Server HTTP [Dell_2]
    public static let `dellSossDsWTcp`: Self = "_dell-soss-ds-w._tcp"
    /// Spotlight SSMS Plugin Diagnostic Server [Dell_2]
    public static let `dellSsmsDsTcp`: Self = "_dell-ssms-ds._tcp"
    /// Peer-to-peer real-time video streaming [James_Alan_Bush]
    public static let `demoncamremoteTcp`: Self = "_demoncamremote._tcp"
    /// Peer-to-peer real-time video streaming [James_Alan_Bush]
    public static let `demoncamremoteUdp`: Self = "_demoncamremote._udp"
    /// DEVONthink synchronization protocol [DEVONtechnologies_LLC]
    public static let `devonsyncTcp`: Self = "_devonsync._tcp"
    /// DHANDAg is going for a site [DHANDAg]
    public static let `dhandaGTcp`: Self = "_dhanda-g._tcp"
    /// DHANDAg is going for a site [DHANDAg]
    public static let `dhandaGUdp`: Self = "_dhanda-g._udp"
    /// DHANDAg is going for a site [DHANDAg]
    public static let `dhandaGSctp`: Self = "_dhanda-g._sctp"
    /// Wi-Fi Alliance Display Source service [Wi-Fi_Alliance_3]
    public static let `displaysrcTcp`: Self = "_displaysrc._tcp"
    /// Local Area Dynamic Time Synchronisation Protocol [Geoff_Back_3]
    public static let `dltimesyncUdp`: Self = "_dltimesync._udp"
    /// DNS Long-Lived Queries over TLS [Stuart_Cheshire]
    public static let `dnsLlqTlsTcp`: Self = "_dns-llq-tls._tcp"
    /// DNS Push Notification Service Type [IESG]
    public static let `dnsPushTlsTcp`: Self = "_dns-push-tls._tcp"
    /// DNS queries to the authoritative server over TLS [Stuart_Cheshire]
    public static let `dnsQueryTlsTcp`: Self = "_dns-query-tls._tcp"
    /// DNS Dynamic Update Service [Stuart_Cheshire]
    public static let `dnsUpdateTcp`: Self = "_dns-update._tcp"
    /// DNS Dynamic Update Service [Stuart_Cheshire]
    public static let `dnsUpdateUdp`: Self = "_dns-update._udp"
    /// DNS Dynamic Update Service over TLS [Stuart_Cheshire]
    public static let `dnsUpdateTlsTcp`: Self = "_dns-update-tls._tcp"
    /// DOTS Signal Channel Call Home Protocol.       The service name is used to construct the SRV service names "_dots-call-home._udp"       and "_dots-call-home._tcp" for discovering Call Home DOTS clients used to establish       DOTS signal channel call home. [IESG]
    public static let `dotsCallHomeTcp`: Self = "_dots-call-home._tcp"
    /// DOTS Signal Channel Call Home Protocol.       The service name is used to construct the SRV service names "_dots-call-home._udp"       and "_dots-call-home._tcp" for discovering Call Home DOTS clients used to establish       DOTS signal channel call home. [IESG]
    public static let `dotsCallHomeUdp`: Self = "_dots-call-home._udp"
    /// DOTS Data Channel Protocol.       The service name is used to construct the SRV service name "_dots-data._tcp" for       discovering DOTS servers used to establish DOTS data channel. [IESG]
    public static let `dotsDataTcp`: Self = "_dots-data._tcp"
    /// A communication protocol that allows a school teacher to set work activities to students over a LAN. [Stinky_Kitten_Limited]
    public static let `duckraceTcp`: Self = "_duckrace._tcp"
    /// Sync service for the Easy Spend Log app [Aaron_L_Bratcher]
    public static let `easyspndlgSyncTcp`: Self = "_easyspndlg-sync._tcp"
    /// Easy Books App data sync helper for Mac OS X and iOS [Geode_Software_Ltd]
    public static let `ebSyncTcp`: Self = "_eb-sync._tcp"
    /// Easy Books App data sync helper for Mac OS X and iOS [Geode_Software_Ltd]
    public static let `ebSyncUdp`: Self = "_eb-sync._udp"
    /// LaCie Ethernet Disk Configuration Protocol [Nicolas_Bouilleaud]
    public static let `edcpUdp`: Self = "_edcp._udp"
    /// Edge1 Base Station [Skycatch_Inc.]
    public static let `edge1Tcp`: Self = "_edge1._tcp"
    /// Provides resolution of EDS services available on a given network [Morpho_Detection_LLC]
    public static let `edsserviceTcp`: Self = "_edsservice._tcp"
    /// EEG System Discovery across local and wide area networks [Shifted_Current]
    public static let `eegTcp`: Self = "_eeg._tcp"
    /// EFKON Lightweight Interface to Traffic Events [EFKON_AG]
    public static let `efkonEliteTcp`: Self = "_efkon-elite._tcp"
    /// Enphase Energy Envoy [Enphase_Energy_Inc]
    public static let `enphaseEnvoyTcp`: Self = "_enphase-envoy._tcp"
    /// Extensis Server Protocol [Loren_Barr]
    public static let `espTcp`: Self = "_esp._tcp"
    /// Enrollment Over Secure Transport [Jack_Visoky]
    public static let `estTcp`: Self = "_est._tcp"
    /// EST over secure CoAP (EST-coaps) [Toerless_Eckert_3]
    public static let `estCoapsUdp`: Self = "_est-coaps._udp"
    /// EvP - Generic EVENT protocol [Quentin_Glidic]
    public static let `evpTcp`: Self = "_evp._tcp"
    /// eWeLink devices supporting LAN Control [Shenzhen_CoolKit_Technology_Co._Ltd.]
    public static let `ewelinkTcp`: Self = "_ewelink._tcp"
    /// proprietary [Kiel_University_of_Applied_Sciences]
    public static let `feldwesenTcp`: Self = "_feldwesen._tcp"
    /// Fiscalization service of Click.al [Armando_Vrushi]
    public static let `fiskTcp`: Self = "_fisk._tcp"
    /// FilmLight Cluster Power Control Service [Darrin_Smart]
    public static let `flPurrUdp`: Self = "_fl-purr._udp"
    /// Flight Data Monitoring Protocol [Brad_Head]
    public static let `flightdmpTcp`: Self = "_flightdmp._tcp"
    /// Flight Data Monitoring Protocol [Brad_Head]
    public static let `flightdmpUdp`: Self = "_flightdmp._udp"
    /// FLIR Infrared Camera [FLIR_Systems_AB]
    public static let `flirIrcamTcp`: Self = "_flir-ircam._tcp"
    /// Fairview Certificate [Jim_Lyle_2]
    public static let `fvCertUdp`: Self = "_fv-cert._udp"
    /// Fairview Key [Jim_Lyle_2]
    public static let `fvKeyUdp`: Self = "_fv-key._udp"
    /// Fairview Time/Date [Jim_Lyle_2]
    public static let `fvTimeUdp`: Self = "_fv-time._udp"
    /// Used for the Lynx System [G2_Metric]
    public static let `g2metricLynxTcp`: Self = "_g2metric-lynx._tcp"
    /// gif collection browsing [Taber_Buhl]
    public static let `gifferTcp`: Self = "_giffer._tcp"
    /// Service related to Google Expeditions which is a technology for enabling multi-participant virtual fieldtrip experiences over a local wireless network. See http://g.co/expeditions for more details [Google_Inc]
    public static let `googexpeditionsTcp`: Self = "_googexpeditions._tcp"
    /// Service related to Google Expeditions which is a technology for enabling multi-participant virtual fieldtrip experiences over a local wireless network. See http://g.co/expeditions for more details [Google_Inc]
    public static let `googexpeditionsUdp`: Self = "_googexpeditions._udp"
    /// Service related to Google Cast which is a technology for enabling multi-screen experiences. See developers.google.com/cast for more details [Google_Inc]
    public static let `googlecastTcp`: Self = "_googlecast._tcp"
    /// For iOS Application named GoOrStop [Charlie_Kim]
    public static let `goorstopTcp`: Self = "_goorstop._tcp"
    /// GoPro proprietary protocol to wake devices [GoPro]
    public static let `goproWakeUdp`: Self = "_gopro-wake._udp"
    /// GoPro proprietary protocol for devices [GoPro]
    public static let `goproWebUdp`: Self = "_gopro-web._udp"
    /// Network name Got It! [Bill_Vlahos]
    public static let `gotitTcp`: Self = "_gotit._tcp"
    /// Groovesquid Democratic Music Control Protocol [www_nsovocal_com]
    public static let `groovesquidTcp`: Self = "_groovesquid._tcp"
    /// GS Labs set-top box remote control [GS_Labs]
    public static let `gsremotecontrolTcp`: Self = "_gsremotecontrol._tcp"
    /// Image Data Transfer API for Wi-Fi Camera Devices over HTTP [Ripplex_Inc]
    public static let `gucamHttpTcp`: Self = "_gucam-http._tcp"
    /// HbbTV Application Information Table [HbbTV_Association]
    public static let `hbbtvAitTcp`: Self = "_hbbtv-ait._tcp"
    /// An application to communicate with other [Navneet_Gupta]
    public static let `holaTcp`: Self = "_hola._tcp"
    /// Home Connect Protocol [BSH_Bosch_und_Siemens_Hausgeraete_GmbH]
    public static let `homeconnectTcp`: Self = "_homeconnect._tcp"
    /// Protocol for home hub communication [Apple_Inc_4]
    public static let `homekitTcp`: Self = "_homekit._tcp"
    /// Honeywell Video Systems [Shankar_Prasad]
    public static let `honeywellVidUdp`: Self = "_honeywell-vid._udp"
    /// The service provides information about connected HP devices [HP_Inc]
    public static let `hpdeviceinfoTcp`: Self = "_hpdeviceinfo._tcp"
    /// HomeTouch Vnc Configuration [Yuval_Rakavy]
    public static let `htvncconfUdp`: Self = "_htvncconf._udp"
    /// Philips hue protocol [Signify]
    public static let `hueTcp`: Self = "_hue._tcp"
    /// Philips Hue Sync control protocol [Signify]
    public static let `huesyncTcp`: Self = "_huesync._tcp"
    /// Braemar Inventory audit [Braemar_Consulting]
    public static let `iauditTcp`: Self = "_iaudit._tcp"
    /// A Remote Control Application service used to control Computers on a Local Area Network [Umair_Cheema]
    public static let `icontrolboxTcp`: Self = "_icontrolbox._tcp"
    /// IDEAQUEST Safety Monitoring System [IDEAQUEST_Inc.]
    public static let `ideaquestTcp`: Self = "_ideaquest._tcp"
    /// Instant Messaging 
    public static let `imTcp`: Self = "_im._tcp"
    /// Instant Messaging 
    public static let `imUdp`: Self = "_im._udp"
    /// ImagesCal App Data Sharing [Three_Lights_Software_LLC]
    public static let `imagescalTcp`: Self = "_imagescal._tcp"
    /// Protocol synchronizing Image data [Canon_Inc_2]
    public static let `imgsyncTcp`: Self = "_imgsync._tcp"
    /// Noise Inspector [IMS_merilni_sistemi]
    public static let `imsNiTcp`: Self = "_ims-ni._tcp"
    /// InfBoard interactive whiteboard protocol [Eric_Sean_Conner]
    public static let `infboardTcp`: Self = "_infboard._tcp"
    /// Listing Singlewire InformaCast servers [Singlewire_Software_LLC]
    public static let `informacastTcp`: Self = "_informacast._tcp"
    /// Service for a Communications App [Santo_Porpiglia]
    public static let `innergroupTcp`: Self = "_innergroup._tcp"
    /// Internet-of-things (IoT) JSON telegram service [SEVENSTAX_GmbH]
    public static let `iotTcp`: Self = "_iot._tcp"
    /// iotaMed medical records server [MITM]
    public static let `iotaTcp`: Self = "_iota._tcp"
    /// Network socket performance test [Robert_McMahon]
    public static let `iperfdTcp`: Self = "_iperfd._tcp"
    /// Network socket performance test [Robert_McMahon]
    public static let `iperfdUdp`: Self = "_iperfd._udp"
    /// Control protocol for Phase One devices [Phase_One]
    public static let `iqpTcp`: Self = "_iqp._tcp"
    /// The universal protocol for building IoT [Alexey_Y_Woronov]
    public static let `ircIotTcp`: Self = "_irc-iot._tcp"
    /// HVAC SMIL Server [Ingersoll_Rand_Inc]
    public static let `irHvac000Tcp`: Self = "_ir-hvac-000._tcp"
    /// iRobot Monitor and Control Service [iRobot_Corporation]
    public static let `irobotmcsTcp`: Self = "_irobotmcs._tcp"
    /// iRobot Monitor and Control Service [iRobot_Corporation]
    public static let `irobotmcsUdp`: Self = "_irobotmcs._udp"
    /// Iroid Data Service Discovery [iroïd]
    public static let `iroidSdTcp`: Self = "_iroid-sd._tcp"
    /// iClip clipboard transfer [Irradiated_Software]
    public static let `irradiatdIclipTcp`: Self = "_irradiatd-iclip._tcp"
    /// Image Resizer Toolbox preview sharing service [fnxsoftware.com]
    public static let `irtSharingTcp`: Self = "_irt-sharing._tcp"
    /// iSynchronize data synchronization protocol [Smart_Apps_LTD]
    public static let `isynchronizeTcp`: Self = "_isynchronize._tcp"
    /// iTap Publishing Service [HLW_Software_Development_GmbH]
    public static let `itapPublishTcp`: Self = "_itap-publish._tcp"
    /// Integrated Business Data Exchange [Blue_Ridge_Concepts_Inc.]
    public static let `iziraTcp`: Self = "_izira._tcp"
    /// JSON Meta Application Protocol [IESG]
    public static let `jmapTcp`: Self = "_jmap._tcp"
    /// jollys keychain cloud sync protocol [Patrick_Stein]
    public static let `jnxKcsyncTcp`: Self = "_jnx-kcsync._tcp"
    /// Jukebox Request Service [Gary_Giebler_2]
    public static let `jukeboxTcp`: Self = "_jukebox._tcp"
    /// Music sharing protocol [Phrenetic_Apps_LLC]
    public static let `jukejointTcp`: Self = "_jukejoint._tcp"
    /// KeynoteAccess is used for sending remote requests/responses when controlling a slideshow with Keynote Remote [Apple]
    public static let `keynoteaccessTcp`: Self = "_keynoteaccess._tcp"
    /// KeynotePairing is used to pair Keynote Remote with Keynote [Apple]
    public static let `keynotepairingTcp`: Self = "_keynotepairing._tcp"
    /// Topology Discovery [Stephen_kiwin_PALM]
    public static let `kiwinTcp`: Self = "_kiwin._tcp"
    /// KNX Discovery Protocol [KNX_Association_cvba]
    public static let `knxTcp`: Self = "_knx._tcp"
    /// Discovery in KNX IoT Point API [KNX_Association_cvba]
    public static let `knxUdp`: Self = "_knx._udp"
    /// Symbolic Sound Kyma Service Discovery [Symbolic_Sound_Corporation]
    public static let `kymaTcp`: Self = "_kyma._tcp"
    /// Labyrinth local multiplayer protocol [Andreas_Alptun]
    public static let `labyrinthUdp`: Self = "_labyrinth._udp"
    /// Larva IP Controller [larva.io_ltd]
    public static let `larvaioControlTcp`: Self = "_larvaio-control._tcp"
    /// Larva IP Controller [larva.io_ltd]
    public static let `larvaioControlUdp`: Self = "_larvaio-control._udp"
    /// Logic Pro Distributed Audio [Nikolaus_Gerteis]
    public static let `logicnodeUdp`: Self = "_logicnode._udp"
    /// logSheet Server Synchronization Server [X2_Studios_Ltd]
    public static let `logsheetserverTcp`: Self = "_logsheetserver._tcp"
    /// A protocol to remotely control DMX512 devices over the network [Gangsta_Ltd]
    public static let `lumiereTcp`: Self = "_lumiere._tcp"
    /// Lumis Cache Appliance Protocol [Lumis]
    public static let `lumisLcaTcp`: Self = "_lumis-lca._tcp"
    /// Moritz30-Project Standard protocol 1 Plain Text [Moritz30]
    public static let `M30S1PTTcp`: Self = "_M30S1PT._tcp"
    /// Moritz30-Project Standard protocol 1 Plain Text [Moritz30]
    public static let `M30S1PTUdp`: Self = "_M30S1PT._udp"
    /// MacFOH audio stream [Shaun_Wexler]
    public static let `macfohAudioUdp`: Self = "_macfoh-audio._udp"
    /// MacFOH show control events [Shaun_Wexler]
    public static let `macfohEventsUdp`: Self = "_macfoh-events._udp"
    /// MacFOH realtime data [Shaun_Wexler]
    public static let `macfohDataUdp`: Self = "_macfoh-data._udp"
    /// Pravala Mobility and Aggregation Service [Pravala_Networks_ULC]
    public static let `masTcp`: Self = "_mas._tcp"
    /// Pravala Mobility and Aggregation Service [Pravala_Networks_ULC]
    public static let `masUdp`: Self = "_mas._udp"
    /// Matter Commissionable Node Discovery [Connectivity_Standards_Alliance]
    public static let `mattercTcp`: Self = "_matterc._tcp"
    /// Matter Commissionable Node Discovery [Connectivity_Standards_Alliance]
    public static let `mattercUdp`: Self = "_matterc._udp"
    /// Matter Commissioner Discovery [Connectivity_Standards_Alliance]
    public static let `matterdTcp`: Self = "_matterd._tcp"
    /// Matter Commissioner Discovery [Connectivity_Standards_Alliance]
    public static let `matterdUdp`: Self = "_matterd._udp"
    /// MAVLink Micro Air Vehicle Communication Protocol [Roderick_Mann]
    public static let `mavlinkTcp`: Self = "_mavlink._tcp"
    /// Peer to peer communication between instances of the Maze Pseudo game. [Mad_Elf_Software_Inc.]
    public static let `mazepseudoGameUdp`: Self = "_mazepseudo-game._udp"
    /// Mediatap streaming protocol [Mediatap_GbR]
    public static let `mediatapTcp`: Self = "_mediatap._tcp"
    /// Mercury Dock Assistant [Spider_Electronics]
    public static let `mercurydockTcp`: Self = "_mercurydock._tcp"
    /// Thread Mesh Commissioning [Thread_Group_Inc]
    public static let `meshcopUdp`: Self = "_meshcop._udp"
    /// A protocol for controlling a microscope [Zorth_Sarl]
    public static let `microdeepTcp`: Self = "_microdeep._tcp"
    /// Protocol for connected accessories [Miele_and_Cie._KG]
    public static let `mieleacsTcp`: Self = "_mieleacs._tcp"
    /// Miele@home Protocol [Miele_and_Cie._KG]
    public static let `mieleathomeTcp`: Self = "_mieleathome._tcp"
    /// Miele protocol for prof. appliances [Miele_and_Cie._KG]
    public static let `mieleprofTcp`: Self = "_mieleprof._tcp"
    /// Miele protocol for semi prof. appliances [Miele_and_Cie._KG]
    public static let `mielesemiprofTcp`: Self = "_mielesemiprof._tcp"
    /// A Medical Interoperability Service Type, used to identify medical devices providing network interfaces. [Jon_Griffeth]
    public static let `mistTcp`: Self = "_mist._tcp"
    /// Provides a client with access to the Mathematical Mesh, a user-focused PKI. [Phillip_Hallam-Baker]
    public static let `mmmTcp`: Self = "_mmm._tcp"
    /// A Remote Control Application service used to control Computers on a Local Area Network [Midnight_Oil_Enterprises_LLC]
    public static let `mnPassageTcp`: Self = "_mn-passage._tcp"
    /// A Remote Control Application service used to control Computers on a Local Area Network [Midnight_Oil_Enterprises_LLC]
    public static let `mnPassageUdp`: Self = "_mn-passage._udp"
    /// Authentication service for Mogeneti Software Applications [Mogeneti]
    public static let `mogenetiAuthTcp`: Self = "_mogeneti-auth._tcp"
    /// Sonnox MCON monitor controller protocol [Sonnox_Ltd]
    public static let `monconUdp`: Self = "_moncon._udp"
    /// MSRP protocol over TLS 
    public static let `msrpsTcp`: Self = "_msrps._tcp"
    /// NetAcquire server input/output protocol [NetAcquire_Corporation]
    public static let `naioTcp`: Self = "_naio._tcp"
    /// Proprietary communication protocol for NAS Monitor [Infinite_Loop]
    public static let `nasmonTcp`: Self = "_nasmon._tcp"
    /// Proprietary communication protocol for NAS Monitor [Infinite_Loop]
    public static let `nasmonUdp`: Self = "_nasmon._udp"
    /// This DNS-SD service is used by mobile clients to locate the Nasuni Filer (a storage product) for a given company. [Nasuni_Corporation]
    public static let `nasunifilerTcp`: Self = "_nasunifiler._tcp"
    /// The issuer service in the n-Count electronic value transfer system [n-Count_Technology_BV]
    public static let `ncountIssuerTcp`: Self = "_ncount-issuer._tcp"
    /// IP based video discovery and usage [NewTek_Inc]
    public static let `ndiTcp`: Self = "_ndi._tcp"
    /// IP based video discovery and usage [NewTek_Inc]
    public static let `ndiUdp`: Self = "_ndi._udp"
    /// Nedap AEOS processing unit [Nedap]
    public static let `nedapAepuTcp`: Self = "_nedap-aepu._tcp"
    /// NeoRiders Client Discovery Protocol [Jesse_W_Towner]
    public static let `neoridersUdp`: Self = "_neoriders._udp"
    /// UpdateLogic NetReady Device Identification [UpdateLogic_Inc]
    public static let `netreadyTcp`: Self = "_netready._tcp"
    /// AD Group NetVu Connected Video [AD_Holdings]
    public static let `netvuVideoTcp`: Self = "_netvu-video._tcp"
    /// Proprietary communication protocol for NextCap capture solution [NextDay_Aps]
    public static let `nextcapTcp`: Self = "_nextcap._tcp"
    /// Proprietary communication protocol for NextCap capture solution [NextDay_Aps]
    public static let `nextcapUdp`: Self = "_nextcap._udp"
    /// NFS service for the domain root, the root of an organization's published file namespace. [IESG]
    public static let `nfsDomainrootTcp`: Self = "_nfs-domainroot._tcp"
    /// NGR Key Distribution [nyantec]
    public static let `ngrKeydistTcp`: Self = "_ngr-keydist._tcp"
    /// National Instruments Network Device [National_Instruments]
    public static let `niTcp`: Self = "_ni._tcp"
    /// NI FTP [Steve_Kille]
    public static let `niFtpTcp`: Self = "_ni-ftp._tcp"
    /// NI FTP [Steve_Kille]
    public static let `niFtpUdp`: Self = "_ni-ftp._udp"
    /// NI MAIL [Steve_Kille]
    public static let `niMailTcp`: Self = "_ni-mail._tcp"
    /// NI MAIL [Steve_Kille]
    public static let `niMailUdp`: Self = "_ni-mail._udp"
    /// National Instruments Real-Time Target [National_Instruments]
    public static let `niRtTcp`: Self = "_ni-rt._tcp"
    /// National Instruments System API Service [National_Instruments]
    public static let `niSysapiTcp`: Self = "_ni-sysapi._tcp"
    /// Lightweight event based control protocol utilising JavaScript Object Notation [Lumicom]
    public static let `nodelTcp`: Self = "_nodel._tcp"
    /// Network Quality test server endpoint [Stuart_Cheshire]
    public static let `nqTcp`: Self = "_nq._tcp"
    /// Tenasys [Carl_Ellis]
    public static let `ntxUdp`: Self = "_ntx._udp"
    /// Nuance Unity Service Discovery Protocol [Nuance_Communications_Inc]
    public static let `nusdpTcp`: Self = "_nusdp._tcp"
    /// Oak Device Services [Oak_Labs_Inc.]
    public static let `oakTcp`: Self = "_oak._tcp"
    /// Oak Device Services [Oak_Labs_Inc.]
    public static let `oakUdp`: Self = "_oak._udp"
    /// Insecure OCP.1 protocol, which is the insecure TCP/IP implementation of the Object Control Architecture [OCA_Alliance]
    public static let `ocaTcp`: Self = "_oca._tcp"
    /// Insecure OCP.1 protocol, which is the insecure TCP/IP implementation of the Object Control Architecture [OCA_Alliance]
    public static let `ocaUdp`: Self = "_oca._udp"
    /// Secure OCP.1 protocol, which is the secure TCP/IP implementation of the Object Control Architecture [OCA_Alliance]
    public static let `ocasecTcp`: Self = "_ocasec._tcp"
    /// Secure OCP.1 protocol, which is the secure TCP/IP implementation of the Object Control Architecture [OCA_Alliance]
    public static let `ocasecUdp`: Self = "_ocasec._udp"
    /// Insecure OCP.1 hosted on a WebSocket [OCA_Alliance]
    public static let `ocawsTcp`: Self = "_ocaws._tcp"
    /// Web Interface for the Open Lighting Architecture Software [Open_Lighting_Project]
    public static let `olaTcp`: Self = "_ola._tcp"
    /// One Laptop per Child activity [One_Laptop_per_Child]
    public static let `olpcActivity1Udp`: Self = "_olpc-activity1._udp"
    /// Open Mobile Alliance (OMA) Device Management (DM) Bootstrap Server Discovery Service [Open_Mobile_Alliance]
    public static let `omadmBootstrapTcp`: Self = "_omadm-bootstrap._tcp"
    /// Resource state update notifications [The_Omni_Group]
    public static let `omnistateTcp`: Self = "_omnistate._tcp"
    /// OneNet Application Information Service [National_Marine_Electronics_Association]
    public static let `onenetInfoTcp`: Self = "_onenet-info._tcp"
    /// OneNet Pairing [National_Marine_Electronics_Association]
    public static let `onenetPairingTcp`: Self = "_onenet-pairing._tcp"
    /// OneNet PGN Transport Service [National_Marine_Electronics_Association]
    public static let `onenetPgnUdp`: Self = "_onenet-pgn._udp"
    /// Conferencing Protocol [Marc_Manthey_2]
    public static let `opencuUdp`: Self = "_opencu._udp"
    /// Discovery of OpenPath appliances [OpenPath_Security_Inc]
    public static let `openpathTcp`: Self = "_openpath._tcp"
    /// Open Sound Control Interface Transfer [Gaspard_Bucher]
    public static let `oscitUdp`: Self = "_oscit._udp"
    /// Peer-to-Peer Chat (Sample Java Bonjour application) [Roger_Pantos]
    public static let `p2pchatUdp`: Self = "_p2pchat._udp"
    /// DataBOND p2p storage [Dell]
    public static let `p2pstorageSecTcp`: Self = "_p2pstorage-sec._tcp"
    /// Pair & Share data protocol [Intel]
    public static let `pairandshareTcp`: Self = "_pairandshare._tcp"
    /// Panoply multimedia composite transfer protocol [Natarajan_Balasundar]
    public static let `panoplyTcp`: Self = "_panoply._tcp"
    /// Parabay P2P protocol [Vishnu_Varadaraj]
    public static let `parabayP2pTcp`: Self = "_parabay-p2p._tcp"
    /// PA-R-I-Ty (Public Address - Radio - Intercom - Telefony) [ims_Info]
    public static let `parityTcp`: Self = "_parity._tcp"
    /// PA-R-I-Ty (Public Address - Radio - Intercom - Telefony) [ims_Info]
    public static let `parityUdp`: Self = "_parity._udp"
    /// Local and remote file transfers [Didrik_Nordström]
    public static let `payloadAppTcp`: Self = "_payload-app._tcp"
    /// Local and remote file transfers [Didrik_Nordström]
    public static let `payloadAppUdp`: Self = "_payload-app._udp"
    /// Show Photos over TCP [Hamed_Ishbaitah]
    public static let `photoshowTcp`: Self = "_photoshow._tcp"
    /// Photosmith's iPad to Lightroom sync protocol [Photosmith]
    public static let `photosmithsyncTcp`: Self = "_photosmithsync._tcp"
    /// Pi Pedal Web Interface [Robin_Davies]
    public static let `pipedalTcp`: Self = "_pipedal._tcp"
    /// A presenter to audience transfer service [Ringo_Wathelet]
    public static let `pochiTcp`: Self = "_pochi._tcp"
    /// Protocol for communication between Podcast [Moritz_Schmale]
    public static let `podcastproxyTcp`: Self = "_podcastproxy._tcp"
    /// Presence 
    public static let `presTcp`: Self = "_pres._tcp"
    /// Presence 
    public static let `presUdp`: Self = "_pres._udp"
    /// Progal Service Advertising Protocol [Soren_Weber]
    public static let `psapUdp`: Self = "_psap._udp"
    /// File synchronization protocol for Pst Mail Sync [Arrow_Bit_SL]
    public static let `pstmailsyncTcp`: Self = "_pstmailsync._tcp"
    /// Secured file synchronization protocol for Pst Mail Sync [Arrow_Bit_SL]
    public static let `pstmailsyncSslTcp`: Self = "_pstmailsync-ssl._tcp"
    /// Picture Transfer Protocol(PTP) Initiator [Canon_Inc]
    public static let `ptpInitTcp`: Self = "_ptp-init._tcp"
    /// Distributed Game Data [Niall_Hogg]
    public static let `quadTcp`: Self = "_quad._tcp"
    /// Broadcast of Qwizdom Presentation sessions for joining by a client, such as Qwizdom Notes+. [Qwizdom_Inc.]
    public static let `qwizcollabTcp`: Self = "_qwizcollab._tcp"
    /// RadioPort Message Service [Bob_Iannucci]
    public static let `radioportTcp`: Self = "_radioport._tcp"
    /// RadioPort Message Service [Bob_Iannucci]
    public static let `radioportUdp`: Self = "_radioport._udp"
    /// Authentication, Accounting, and Dynamic Authorization via the RADIUS protocol. This service name is used to construct the SRV service label "_radiusdtls" for discovery of RADIUS/DTLS servers. [IESG]
    public static let `radiusdtlsUdp`: Self = "_radiusdtls._udp"
    /// Authentication, Accounting, and Dynamic Authorization via the RADIUS protocol. This service name is used to construct the SRV service label "_radiustls" for discovery of RADIUS/TLS servers. [IESG]
    public static let `radiustlsTcp`: Self = "_radiustls._tcp"
    /// Model Railroad Messaging [Railduino]
    public static let `railduinoTcp`: Self = "_railduino._tcp"
    /// Industrial IOT self-discovery network [Rapta_Inc]
    public static let `raptaTcp`: Self = "_rapta._tcp"
    /// The Recipe Box Exchange [Corpus_Collusion]
    public static let `recipeBoxTcp`: Self = "_recipe-box._tcp"
    /// Recipe Sharing Protocol [Daniel_G_Taylor]
    public static let `recipeSharingTcp`: Self = "_recipe-sharing._tcp"
    /// Remote Camera Control [RecoLive_Sàrl]
    public static let `recoliveCcTcp`: Self = "_recolive-cc._tcp"
    /// Remote Camera Control [RecoLive_Sàrl]
    public static let `recoliveCcUdp`: Self = "_recolive-cc._udp"
    /// Recordit Image Transport Protocol [Freshout]
    public static let `recorditItpTcp`: Self = "_recordit-itp._tcp"
    /// Remote Buddy remote control software command and data exchange [IOSPIRIT_GmbH]
    public static let `remotebuddyTcp`: Self = "_remotebuddy._tcp"
    /// RGB Spectrum Device Discovery [RGB_Spectrum]
    public static let `rgbTcp`: Self = "_rgb._tcp"
    /// Roambot communication [Roambotics_Inc]
    public static let `roambotTcp`: Self = "_roambot._tcp"
    /// Like ircu (RFC1459), but failure tolerant due to strong consistency among n>=3 servers [Michael_Stapelberg]
    public static let `robustircTcp`: Self = "_robustirc._tcp"
    /// RoomCast Control Protocol [Colin_Corby]
    public static let `roomcastCapiTcp`: Self = "_roomcast-capi._tcp"
    /// RoomCast Management Protocol [Colin_Corby]
    public static let `roomcastMapiTcp`: Self = "_roomcast-mapi._tcp"
    /// Ruckus Radio Access Device, Installation, Commissioning and Troubleshooting service. [Dave_Stephenson]
    public static let `rradictTcp`: Self = "_rradict._tcp"
    /// Miele protocol robot cleaners [Miele_and_Cie._KG]
    public static let `rxxmieleTcp`: Self = "_rxxmiele._tcp"
    /// Raymarine remote control protocol [Raymarine_UK_Limited]
    public static let `rymRrcTcp`: Self = "_rym-rrc._tcp"
    /// Proprietary Client Server Protocol [Andy_Savage]
    public static let `savagesoftTcp`: Self = "_savagesoft._tcp"
    /// schindler internal messaging service [Schindler_Aufzuege_ag]
    public static let `schdcaTcp`: Self = "_schdca._tcp"
    /// schindler internal messaging service [Schindler_Aufzuege_ag]
    public static let `schimsTcp`: Self = "_schims._tcp"
    /// logging service [Schindler_Aufzuege_ag]
    public static let `schlogTcp`: Self = "_schlog._tcp"
    /// Schindler maintenance portal protocol [Schindler_Aufzuege_ag]
    public static let `schmppTcp`: Self = "_schmpp._tcp"
    /// schindler object messaging system [Schindler_Aufzuege_ag]
    public static let `schomsTcp`: Self = "_schoms._tcp"
    /// Schindler service authentication portal [Schindler_Aufzuege_ag]
    public static let `schsapTcp`: Self = "_schsap._tcp"
    /// Schindler internal messaging service [Schindler_Aufzuege_ag]
    public static let `schsrmpTcp`: Self = "_schsrmp._tcp"
    /// schindler internal messaging service [Schindler_Aufzuege_ag]
    public static let `schvppTcp`: Self = "_schvpp._tcp"
    /// The service name is used by the SFTP protocol to upload log files from vehicles to road side units in a securely way in a cooperative intelligent transportation system. [SCOOP_at_F_Project]
    public static let `scoopSftpTcp`: Self = "_scoop-sftp._tcp"
    /// The service name is used by the SFTP protocol to upload log files from vehicles to road side units in a securely way in a cooperative intelligent transportation system. [SCOOP_at_F_Project]
    public static let `scoopSftpUdp`: Self = "_scoop-sftp._udp"
    /// Remote Control for Set List Maker app [Arlo_Leach]
    public static let `setlistmakerRcTcp`: Self = "_setlistmaker-rc._tcp"
    /// Screen sharing for Set List Maker app [Arlo_Leach]
    public static let `setlistmakerSsTcp`: Self = "_setlistmaker-ss._tcp"
    /// SHIP (Smart Home IP) [EEBus_Initiative]
    public static let `shipTcp`: Self = "_ship._tcp"
    /// The protocol is used to sync database among iOS devices and Mac OS X computers. [Ryota_Kurata]
    public static let `shotsSyncUdp`: Self = "_shots-sync._udp"
    /// Simulated insufflator synchronisation protocol [Niels_Castle_2]
    public static let `siminsufflatorTcp`: Self = "_siminsufflator._tcp"
    /// The protocol is used to transfer database records between an iOS device to a Mac OS X computer [Legentis_Ltd]
    public static let `skillscaptureTcp`: Self = "_skillscapture._tcp"
    /// The protocol is used to transfer database records between an iOS device to a Mac OS X computer [Legentis_Ltd]
    public static let `skillscaptureUdp`: Self = "_skillscapture._udp"
    /// Sleep Proxy Server [Stuart_Cheshire][Marc_Krochmal]
    public static let `sleepProxyUdp`: Self = "_sleep-proxy._udp"
    /// Sleeptracker(R) The loT Smartbed Platform [Fullpower_Technologies_Inc]
    public static let `sleeptrackerTcp`: Self = "_sleeptracker._tcp"
    /// Remote Service Discovery in the Service Location 
    public static let `slpdaTcp`: Self = "_slpda._tcp"
    /// Remote Service Discovery in the Service Location 
    public static let `slpdaUdp`: Self = "_slpda._udp"
    /// terminal access to laundry appliances [Schulthess_Maschinen_AG]
    public static let `smagTcp`: Self = "_smag._tcp"
    /// Smart Home Device Setup [SMAHO]
    public static let `smahoTcp`: Self = "_smaho._tcp"
    /// home control [Robert_Diamond]
    public static let `smartsocketTcp`: Self = "_smartsocket._tcp"
    /// Domain signing certificate for S/MIME keys [IESG]
    public static let `smimecaTcp`: Self = "_smimeca._tcp"
    /// End-to-end TLS Relay Client Connection [VESvault_Corp]
    public static let `snifClnTcp`: Self = "_snif-cln._tcp"
    /// End-to-end TLS Relay Cluster [VESvault_Corp]
    public static let `snifFifoTcp`: Self = "_snif-fifo._tcp"
    /// End-to-end TLS Relay Service Connection [VESvault_Corp]
    public static let `snifSrvTcp`: Self = "_snif-srv._tcp"
    /// Secure On Device API [Smith_Micro_Software_Inc]
    public static let `sodaTcp`: Self = "_soda._tcp"
    /// Sierra Photonics Inc. data protocol [Sierra_Photonics_Inc]
    public static let `spidapTcp`: Self = "_spidap._tcp"
    /// Binary message passing protocol [Spider_Electron]
    public static let `spiderelectronTcp`: Self = "_spiderelectron._tcp"
    /// DNS64 in split configuration [Kasper_Dupont]
    public static let `splitDns64Tcp`: Self = "_split-dns64._tcp"
    /// SongPresenter [Tobias_Hoffmann]
    public static let `spresTcp`: Self = "_spres._tcp"
    /// SpinetiX HMP [SpinetiX_S_A]
    public static let `spxHmpTcp`: Self = "_spx-hmp._tcp"
    /// Square Connect Control Protocol [Square_Connect_Inc]
    public static let `sqpTcp`: Self = "_sqp._tcp"
    /// Samsung Smart Interaction for Group Network [Samsung]
    public static let `ssSignTcp`: Self = "_ss-sign._tcp"
    /// Samsung Smart Interaction for Group Network Discovery [Samsung]
    public static let `ssSignDiscUdp`: Self = "_ss-sign-disc._udp"
    /// Studio Six Digital Wireless Audio [Studio_Six_Digital_LLC]
    public static let `ssdAudioTcp`: Self = "_ssd-audio._tcp"
    /// Remote Controlled Multimedia Recorder Network [Luca_Cipressi]
    public static let `startrecappTcp`: Self = "_startrecapp._tcp"
    /// Stingray Remote Procedure Call [IK_SATPROF_LLC]
    public static let `stingrayRpcTcp`: Self = "_stingray-rpc._tcp"
    /// Stingray remote control [IK_SATPROF_LLC]
    public static let `stingrayRemoteTcp`: Self = "_stingray-remote._tcp"
    /// One Time Pad Synchronisation [softthere_com]
    public static let `stotpTcp`: Self = "_stotp._tcp"
    /// Strobe Synchronization [Jasper_Morgal]
    public static let `strobeSyncTcp`: Self = "_strobe-sync._tcp"
    /// Remote control protocol for Sugarlock consumer electronics devices [Sugarlock_LLC]
    public static let `sugarlockRcpTcp`: Self = "_sugarlock-rcp._tcp"
    /// Remote control protocol for Sugarlock consumer electronics devices [Sugarlock_LLC]
    public static let `sugarlockRcpUdp`: Self = "_sugarlock-rcp._udp"
    /// Remote control of Synclavier Digital Audio Workstation over local area network. [Synclavier_Digital]
    public static let `synclavierTcp`: Self = "_synclavier._tcp"
    /// This service name is used to construct the       SRV service label "_sztp" for discovering       SZTP bootstrap servers. [IESG]
    public static let `sztpTcp`: Self = "_sztp._tcp"
    /// Teddington Controls [Teddington_Bemasan_Ltd]
    public static let `tedUdp`: Self = "_ted._udp"
    /// teleport [Julien_Robert]
    public static let `teleportUdp`: Self = "_teleport._udp"
    /// Proprietary [Tenir_Software]
    public static let `tenirRcTcp`: Self = "_tenir-rc._tcp"
    /// Test Controller Card [TEST-OK_BV]
    public static let `testOkTcp`: Self = "_test-ok._tcp"
    /// Internet of things service discovery [Aaltronav]
    public static let `thingTcp`: Self = "_thing._tcp"
    /// Internet of things service discovery [Aaltronav]
    public static let `thingUdp`: Self = "_thing._udp"
    /// Tic Tac Toe game [Stuart_Cheshire]
    public static let `ticTacToeTcp`: Self = "_tic-tac-toe._tcp"
    /// Time Zone Data Distribution Service - non-TLS [IESG]
    public static let `timezoneTcp`: Self = "_timezone._tcp"
    /// Time Zone Data Distribution Service - over TLS [IESG]
    public static let `timezonesTcp`: Self = "_timezones._tcp"
    /// TiVo Device Protocol [TiVo_Inc]
    public static let `tivoDeviceTcp`: Self = "_tivo-device._tcp"
    /// TiVo RPC Protocol [TiVo_Inc]
    public static let `tivoMindrpcTcp`: Self = "_tivo-mindrpc._tcp"
    /// Coordination service for client users of the TotalPraisTrax iPad application [Randy_Davenport]
    public static let `tptxConsoleTcp`: Self = "_tptx-console._tcp"
    /// Service discovery and media transfer for peer to peer mobile media transfer app [Windward_Code_LLC]
    public static let `transmitrTcp`: Self = "_transmitr._tcp"
    /// Thread Radio Encapsulation Link [Thread_Group_Inc]
    public static let `trelUdp`: Self = "_trel._udp"
    /// The Social Broadband Interference Information Sharing [Sergio_Luis]
    public static let `tsbiisTcp`: Self = "_tsbiis._tcp"
    /// Vogel's TV mount control [Vogels_Products]
    public static let `tvmTcp`: Self = "_tvm._tcp"
    /// detect sanitary product [Oblamatik_AG]
    public static let `twinlevelTcp`: Self = "_twinlevel._tcp"
    /// Service to enable multiplayer game called two snakes. [Narendra_Kumar_Reddy_Thummaluru]
    public static let `twosnakesTcp`: Self = "_twosnakes._tcp"
    /// Service to enable multiplayer game called two snakes. [Narendra_Kumar_Reddy_Thummaluru]
    public static let `twosnakesSctp`: Self = "_twosnakes._sctp"
    /// Tyba control [Tyba_Design_Limited]
    public static let `tybaTcp`: Self = "_tyba._tcp"
    /// TZ-Software remote procedure call based synchronization protocol [Thomas_Zwick]
    public static let `tzrpcTcp`: Self = "_tzrpc._tcp"
    /// Tactical Unified Communicator [UC_Dynamics_LLC]
    public static let `ucdynamicsTucUdp`: Self = "_ucdynamics-tuc._udp"
    /// USP discovery [Broadband_Forum]
    public static let `uspAgtCoapUdp`: Self = "_usp-agt-coap._udp"
    /// USP discovery [Broadband_Forum]
    public static let `uspAgtHttpTcp`: Self = "_usp-agt-http._tcp"
    /// USP discovery [Broadband_Forum]
    public static let `uspAgtMqttTcp`: Self = "_usp-agt-mqtt._tcp"
    /// USP discovery [Broadband_Forum]
    public static let `uspAgtStompTcp`: Self = "_usp-agt-stomp._tcp"
    /// USP discovery [Broadband_Forum]
    public static let `uspAgtWsTcp`: Self = "_usp-agt-ws._tcp"
    /// USP discovery [Broadband_Forum]
    public static let `uspCtrCoapUdp`: Self = "_usp-ctr-coap._udp"
    /// USP discovery [Broadband_Forum]
    public static let `uspCtrHttpTcp`: Self = "_usp-ctr-http._tcp"
    /// USP discovery [Broadband_Forum]
    public static let `uspCtrMqttTcp`: Self = "_usp-ctr-mqtt._tcp"
    /// USP discovery [Broadband_Forum]
    public static let `uspCtrStompTcp`: Self = "_usp-ctr-stomp._tcp"
    /// USP discovery [Broadband_Forum]
    public static let `uspCtrWsTcp`: Self = "_usp-ctr-ws._tcp"
    /// Indicator for VAPIX support over HTTP [Axis_Communications]
    public static let `vapixHttpTcp`: Self = "_vapix-http._tcp"
    /// Indicator for VAPIX support over HTTPS [Axis_Communications]
    public static let `vapixHttpsTcp`: Self = "_vapix-https._tcp"
    /// Application specific synchronization protocol [Peter_Kollath_2]
    public static let `vedabaseTcp`: Self = "_vedabase._tcp"
    /// USB over IP Sharing System [VirtualHere_Pty_Ltd]
    public static let `vhusbTcp`: Self = "_vhusb._tcp"
    /// Server location via DNS-SD [Voalte_Inc]
    public static let `voalte2Tcp`: Self = "_voalte2._tcp"
    /// Server location via DNS-SD [Voalte_Inc]
    public static let `voalte3Tcp`: Self = "_voalte3._tcp"
    /// Internal Communication Service [Volterio]
    public static let `volterioTcp`: Self = "_volterio._tcp"
    /// RTP Mixer/Summation Resource [Accurate_Always_Inc]
    public static let `voxidahmpTcp`: Self = "_voxidahmp._tcp"
    /// Verimag mobile class protocol over P2P [Verimag_OOO]
    public static let `vrmgP2pTcp`: Self = "_vrmg-p2p._tcp"
    /// Proprietary [gerry_Brown_associates]
    public static let `wakeywakeyTcp`: Self = "_wakeywakey._tcp"
    /// NAS Service Protocol [Western_Digital]
    public static let `wd2goTcp`: Self = "_wd-2go._tcp"
    /// Windows Device Portal [Microsoft_Corporation_5]
    public static let `wdpTcp`: Self = "_wdp._tcp"
    /// HTTP-based protocol for DAQ devices [Spectris_plc]
    public static let `webXiTcp`: Self = "_web-xi._tcp"
    /// Cisco WebEx serials products will release Bonjour based service [Mobile_Team]
    public static let `webexTcp`: Self = "_webex._tcp"
    /// Cisco WebEx serials products will release Bonjour based service [Mobile_Team]
    public static let `webexUdp`: Self = "_webex._udp"
    /// WiFi Control Platform [Santorini_LLC]
    public static let `wicopUdp`: Self = "_wicop._udp"
    /// System for transferring files between mobile device and computer in a local network [Artyom_Nikolaev]
    public static let `wifileTcp`: Self = "_wifile._tcp"
    /// W3C WoT Thing Description or Directory [W3C_Web_of_Things_Working_Group]
    public static let `wotTcp`: Self = "_wot._tcp"
    /// W3C WoT Thing Description or Directory [W3C_Web_of_Things_Working_Group]
    public static let `wotUdp`: Self = "_wot._udp"
    /// World Programming repository server [World_Programming_Limited]
    public static let `wplErsHttpTcp`: Self = "_wpl-ers-http._tcp"
    /// World Programming repository server [World_Programming_Limited]
    public static let `wplErsZmqTcp`: Self = "_wpl-ers-zmq._tcp"
    /// x-plane9 [Austin_Meyer]
    public static let `xPlane9Udp`: Self = "_x-plane9._udp"
    /// xential document creation services [Xential]
    public static let `xentialTcp`: Self = "_xential._tcp"
    /// XMI Systems home terminal local connection [XMI_Systems_SA]
    public static let `xmiserverTcp`: Self = "_xmiserver._tcp"
    /// Yakumo iPhone OS Device Control Protocol [Daniel_Heffernan]
    public static let `yakumoUdp`: Self = "_yakumo._udp"
    /// High performance brokerless messaging [Daniel_Holth]
    public static let `zeromqTcp`: Self = "_zeromq._tcp"
    /// High performance brokerless messaging [Daniel_Holth]
    public static let `zeromqUdp`: Self = "_zeromq._udp"
    /// ZigBee Bridge device [ZigBee_Alliances_Network_Device_working_group]
    public static let `zigbeeBridgeTcp`: Self = "_zigbee-bridge._tcp"
    /// ZigBee Bridge device [ZigBee_Alliances_Network_Device_working_group]
    public static let `zigbeeBridgeUdp`: Self = "_zigbee-bridge._udp"
    /// ZigBee IP Gateway [ZigBee_Alliances_Network_Device_working_group]
    public static let `zigbeeGatewayTcp`: Self = "_zigbee-gateway._tcp"
    /// ZigBee IP Gateway [ZigBee_Alliances_Network_Device_working_group]
    public static let `zigbeeGatewayUdp`: Self = "_zigbee-gateway._udp"
}